
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012108  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f20  08012240  08012240  00022240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013160  08013160  0003e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  08013160  08013160  00023160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013168  08013168  0003e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013168  08013168  00023168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013170  08013170  00023170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000108  20000000  08013178  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b98  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001538  20000108  20000108  00040108  2**2
                  ALLOC
 12 RAM1_region   00000000  20001640  20001640  0003e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001640  20001640  00040108  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY
 16 .debug_info   00058f3a  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b82b  00000000  00000000  0009753c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000252d7  00000000  00000000  000a2d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002ca0  00000000  00000000  000c8040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002e78  00000000  00000000  000cace0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002ba31  00000000  00000000  000cdb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004d6a0  00000000  00000000  000f9589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e0a43  00000000  00000000  00146c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  0022766c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00007b3c  00000000  00000000  002276bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000108 	.word	0x20000108
 8000154:	00000000 	.word	0x00000000
 8000158:	08012228 	.word	0x08012228

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000010c 	.word	0x2000010c
 8000174:	08012228 	.word	0x08012228

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14d      	bne.n	8000c84 <__udivmoddi4+0xac>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d968      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b152      	cbz	r2, 8000c0a <__udivmoddi4+0x32>
 8000bf4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf8:	f1c2 0120 	rsb	r1, r2, #32
 8000bfc:	fa20 f101 	lsr.w	r1, r0, r1
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	ea41 0803 	orr.w	r8, r1, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fbb8 fef5 	udiv	lr, r8, r5
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fb05 831e 	mls	r3, r5, lr, r8
 8000c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c20:	fb0e f107 	mul.w	r1, lr, r7
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d90b      	bls.n	8000c40 <__udivmoddi4+0x68>
 8000c28:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c30:	f080 811e 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f240 811b 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c3a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c48:	fb05 3310 	mls	r3, r5, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x96>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 8108 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8105 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c74:	2100      	movs	r1, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa8>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	f000 80ee 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e9c6 0500 	strd	r0, r5, [r6]
 8000c94:	4608      	mov	r0, r1
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0303 	sbc.w	r3, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e2      	beq.n	8000c80 <__udivmoddi4+0xa8>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7df      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8091 	bne.w	8000df0 <__udivmoddi4+0x218>
 8000cce:	eba1 050c 	sub.w	r5, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce0:	fb07 5013 	mls	r0, r7, r3, r5
 8000ce4:	0c25      	lsrs	r5, r4, #16
 8000ce6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	42a8      	cmp	r0, r5
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	42a8      	cmp	r0, r5
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a2d      	subs	r5, r5, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d0c:	fb07 5510 	mls	r5, r7, r0, r5
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79e      	b.n	8000c76 <__udivmoddi4+0x9e>
 8000d38:	f1c1 0720 	rsb	r7, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa05 f301 	lsl.w	r3, r5, r1
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40fd      	lsrs	r5, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f301 	lsl.w	r3, r0, r1
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 5518 	mls	r5, r9, r8, r5
 8000d68:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0505 	adds.w	r5, ip, r5
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	42a8      	cmp	r0, r5
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4465      	add	r5, ip
 8000d90:	1a2d      	subs	r5, r5, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d98:	fb09 5510 	mls	r5, r9, r0, r5
 8000d9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	45ae      	cmp	lr, r5
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	45ae      	cmp	lr, r5
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4465      	add	r5, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba5 050e 	sub.w	r5, r5, lr
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15e      	cbz	r6, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb65 050e 	sbc.w	r5, r5, lr
 8000dda:	fa05 f707 	lsl.w	r7, r5, r7
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	40cd      	lsrs	r5, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c6 7500 	strd	r7, r5, [r6]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa25 f303 	lsr.w	r3, r5, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	430d      	orrs	r5, r1
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e10:	fb07 3011 	mls	r0, r7, r1, r3
 8000e14:	0c2b      	lsrs	r3, r5, #16
 8000e16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e1a:	fb01 f00e 	mul.w	r0, r1, lr
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	4298      	cmp	r0, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3902      	subs	r1, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a1b      	subs	r3, r3, r0
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3310 	mls	r3, r7, r0, r3
 8000e44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e48:	fb00 f30e 	mul.w	r3, r0, lr
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0505 	adds.w	r5, ip, r5
 8000e54:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	42ab      	cmp	r3, r5
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4465      	add	r5, ip
 8000e62:	1aed      	subs	r5, r5, r3
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e707      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000e70:	4686      	mov	lr, r0
 8000e72:	e6e5      	b.n	8000c40 <__udivmoddi4+0x68>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fa      	b.n	8000c6e <__udivmoddi4+0x96>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4641      	mov	r1, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4465      	add	r5, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eac:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000eae:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_ADC_Init+0x50>)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_ADC_Init+0x54>)
 8000eb2:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000eb8:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebe:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec0:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ec6:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ec8:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000eca:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed4:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ed8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee0:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000ee6:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ee8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000eec:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000eee:	f001 fe47 	bl	8002b80 <HAL_ADC_Init>
 8000ef2:	b900      	cbnz	r0, 8000ef6 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ef4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ef6:	f000 fb25 	bl	8001544 <Error_Handler>
}
 8000efa:	e7fb      	b.n	8000ef4 <MX_ADC_Init+0x48>
 8000efc:	20000124 	.word	0x20000124
 8000f00:	40012400 	.word	0x40012400

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f04:	6802      	ldr	r2, [r0, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_ADC_MspInit+0x28>)
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d000      	beq.n	8000f0e <HAL_ADC_MspInit+0xa>
 8000f0c:	4770      	bx	lr
{
 8000f0e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f1a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f22:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f24:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f26:	b002      	add	sp, #8
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40012400 	.word	0x40012400

08000f30 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_ADC_MspDeInit+0x18>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d000      	beq.n	8000f3a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f38:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f3e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	e7f7      	b.n	8000f38 <HAL_ADC_MspDeInit+0x8>
 8000f48:	40012400 	.word	0x40012400

08000f4c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f4c:	b530      	push	{r4, r5, lr}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	2300      	movs	r3, #0
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f5a:	f7ff ffa7 	bl	8000eac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f5e:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f60:	f002 fa48 	bl	80033f4 <HAL_ADCEx_Calibration_Start>
 8000f64:	b9f8      	cbnz	r0, 8000fa6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f66:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f6c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f6e:	a901      	add	r1, sp, #4
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f72:	f001 ff7f 	bl	8002e74 <HAL_ADC_ConfigChannel>
 8000f76:	b9c8      	cbnz	r0, 8000fac <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f7a:	f002 f93f 	bl	80031fc <HAL_ADC_Start>
 8000f7e:	b9c0      	cbnz	r0, 8000fb2 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f80:	4c0d      	ldr	r4, [pc, #52]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f82:	f04f 31ff 	mov.w	r1, #4294967295
 8000f86:	4620      	mov	r0, r4
 8000f88:	f001 ff12 	bl	8002db0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f002 fa11 	bl	80033b4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f92:	4620      	mov	r0, r4
 8000f94:	f001 ff6b 	bl	8002e6e <HAL_ADC_GetValue>
 8000f98:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f002 f9aa 	bl	80032f4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	b005      	add	sp, #20
 8000fa4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fa6:	f000 facd 	bl	8001544 <Error_Handler>
 8000faa:	e7dc      	b.n	8000f66 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000fac:	f000 faca 	bl	8001544 <Error_Handler>
 8000fb0:	e7e2      	b.n	8000f78 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000fb2:	f000 fac7 	bl	8001544 <Error_Handler>
 8000fb6:	e7e3      	b.n	8000f80 <ADC_ReadChannels+0x34>
 8000fb8:	20000124 	.word	0x20000124

08000fbc <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000fbc:	4b01      	ldr	r3, [pc, #4]	; (8000fc4 <SYS_InitMeasurement+0x8>)
 8000fbe:	4a02      	ldr	r2, [pc, #8]	; (8000fc8 <SYS_InitMeasurement+0xc>)
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000124 	.word	0x20000124
 8000fc8:	40012400 	.word	0x40012400

08000fcc <SYS_GetBatteryLevel>:
{
 8000fcc:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <SYS_GetBatteryLevel+0x38>)
 8000fd0:	f7ff ffbc 	bl	8000f4c <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000fd4:	b1a0      	cbz	r0, 8001000 <SYS_GetBatteryLevel+0x34>
 8000fd6:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <SYS_GetBatteryLevel+0x3c>)
 8000fda:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000fde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d007      	beq.n	8000ff6 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000fe6:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000fea:	fb03 f000 	mul.w	r0, r3, r0
 8000fee:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ff2:	b280      	uxth	r0, r0
 8000ff4:	e005      	b.n	8001002 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <SYS_GetBatteryLevel+0x40>)
 8000ff8:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	e000      	b.n	8001002 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001000:	2000      	movs	r0, #0
}
 8001002:	bd08      	pop	{r3, pc}
 8001004:	b4002000 	.word	0xb4002000
 8001008:	1fff7500 	.word	0x1fff7500
 800100c:	004c08d8 	.word	0x004c08d8

08001010 <SYS_GetTemperatureLevel>:
{
 8001010:	b510      	push	{r4, lr}
 8001012:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800101a:	f7ff ffd7 	bl	8000fcc <SYS_GetBatteryLevel>
 800101e:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001020:	4821      	ldr	r0, [pc, #132]	; (80010a8 <SYS_GetTemperatureLevel+0x98>)
 8001022:	f7ff ff93 	bl	8000f4c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <SYS_GetTemperatureLevel+0x9c>)
 8001028:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 800102c:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001030:	428a      	cmp	r2, r1
 8001032:	d01d      	beq.n	8001070 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001034:	fb00 f304 	mul.w	r3, r0, r4
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	4c1d      	ldr	r4, [pc, #116]	; (80010b0 <SYS_GetTemperatureLevel+0xa0>)
 800103c:	fba4 0303 	umull	r0, r3, r4, r3
 8001040:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001044:	2064      	movs	r0, #100	; 0x64
 8001046:	fb00 f303 	mul.w	r3, r0, r3
 800104a:	1a52      	subs	r2, r2, r1
 800104c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001050:	331e      	adds	r3, #30
 8001052:	b21b      	sxth	r3, r3
 8001054:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001058:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800105c:	b21b      	sxth	r3, r3
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21b      	sxth	r3, r3
 8001062:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001066:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800106a:	b200      	sxth	r0, r0
 800106c:	b002      	add	sp, #8
 800106e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001070:	fb00 f404 	mul.w	r4, r0, r4
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <SYS_GetTemperatureLevel+0xa4>)
 8001076:	fba3 2304 	umull	r2, r3, r3, r4
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8001080:	0ae4      	lsrs	r4, r4, #11
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fb03 f404 	mul.w	r4, r3, r4
 800108a:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 800108e:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <SYS_GetTemperatureLevel+0xa8>)
 8001094:	fb83 2304 	smull	r2, r3, r3, r4
 8001098:	17e4      	asrs	r4, r4, #31
 800109a:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 800109e:	341e      	adds	r4, #30
 80010a0:	b224      	sxth	r4, r4
 80010a2:	f8ad 4006 	strh.w	r4, [sp, #6]
 80010a6:	e7d7      	b.n	8001058 <SYS_GetTemperatureLevel+0x48>
 80010a8:	b0001000 	.word	0xb0001000
 80010ac:	1fff7500 	.word	0x1fff7500
 80010b0:	09ee009f 	.word	0x09ee009f
 80010b4:	00100101 	.word	0x00100101
 80010b8:	68db8bad 	.word	0x68db8bad

080010bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010bc:	b500      	push	{lr}
 80010be:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010c6:	f042 0204 	orr.w	r2, r2, #4
 80010ca:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ce:	f002 0204 	and.w	r2, r2, #4
 80010d2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80010d4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80010e6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2102      	movs	r1, #2
 80010ec:	200f      	movs	r0, #15
 80010ee:	f002 fa33 	bl	8003558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010f2:	200f      	movs	r0, #15
 80010f4:	f002 fa68 	bl	80035c8 <HAL_NVIC_EnableIRQ>

}
 80010f8:	b003      	add	sp, #12
 80010fa:	f85d fb04 	ldr.w	pc, [sp], #4

080010fe <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80010fe:	2300      	movs	r3, #0
 8001100:	e001      	b.n	8001106 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001102:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001104:	3308      	adds	r3, #8
 8001106:	428b      	cmp	r3, r1
 8001108:	d20a      	bcs.n	8001120 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 800110a:	6842      	ldr	r2, [r0, #4]
 800110c:	f8d0 c000 	ldr.w	ip, [r0]
 8001110:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001114:	bf08      	it	eq
 8001116:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 800111a:	d0f2      	beq.n	8001102 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 800111c:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 800111e:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001120:	2000      	movs	r0, #0
 8001122:	4770      	bx	lr

08001124 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8001124:	b130      	cbz	r0, 8001134 <FLASH_IF_INT_Read+0x10>
{
 8001126:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8001128:	b139      	cbz	r1, 800113a <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800112a:	b292      	uxth	r2, r2
 800112c:	f010 fb30 	bl	8011790 <UTIL_MEM_cpy_8>
  return ret_status;
 8001130:	2000      	movs	r0, #0
}
 8001132:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001134:	f06f 0005 	mvn.w	r0, #5
}
 8001138:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 800113a:	f06f 0005 	mvn.w	r0, #5
 800113e:	e7f8      	b.n	8001132 <FLASH_IF_INT_Read+0xe>

08001140 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001140:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001142:	f002 fd11 	bl	8003b68 <HAL_FLASH_Unlock>
 8001146:	b978      	cbnz	r0, 8001168 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <FLASH_IF_INT_Clear_Error+0x30>)
 800114a:	699a      	ldr	r2, [r3, #24]
 800114c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001150:	619a      	str	r2, [r3, #24]
 8001152:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001156:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001158:	f002 fd1e 	bl	8003b98 <HAL_FLASH_Lock>
 800115c:	b908      	cbnz	r0, 8001162 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 800115e:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001160:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001162:	f06f 0004 	mvn.w	r0, #4
 8001166:	e7fb      	b.n	8001160 <FLASH_IF_INT_Clear_Error+0x20>
 8001168:	f06f 0004 	mvn.w	r0, #4
 800116c:	e7f8      	b.n	8001160 <FLASH_IF_INT_Clear_Error+0x20>
 800116e:	bf00      	nop
 8001170:	58004000 	.word	0x58004000

08001174 <FLASH_IF_INT_Erase>:
{
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 800117c:	2800      	cmp	r0, #0
 800117e:	d039      	beq.n	80011f4 <FLASH_IF_INT_Erase+0x80>
 8001180:	460e      	mov	r6, r1
 8001182:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001184:	f7ff ffdc 	bl	8001140 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001188:	4605      	mov	r5, r0
 800118a:	b110      	cbz	r0, 8001192 <FLASH_IF_INT_Erase+0x1e>
}
 800118c:	4628      	mov	r0, r5
 800118e:	b004      	add	sp, #16
 8001190:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001192:	f002 fce9 	bl	8003b68 <HAL_FLASH_Unlock>
 8001196:	bb80      	cbnz	r0, 80011fa <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001198:	2302      	movs	r3, #2
 800119a:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 800119c:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <FLASH_IF_INT_Erase+0x8c>)
 80011a2:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <FLASH_IF_INT_Erase+0x90>)
 80011a8:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 80011ac:	fbb3 fcf1 	udiv	ip, r3, r1
 80011b0:	fb01 331c 	mls	r3, r1, ip, r3
 80011b4:	0adb      	lsrs	r3, r3, #11
 80011b6:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80011b8:	4434      	add	r4, r6
 80011ba:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 80011be:	3c01      	subs	r4, #1
 80011c0:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80011c4:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 80011c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80011cc:	fb02 4411 	mls	r4, r2, r1, r4
 80011d0:	ebc3 24d4 	rsb	r4, r3, r4, lsr #11
 80011d4:	3401      	adds	r4, #1
 80011d6:	9402      	str	r4, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80011d8:	a903      	add	r1, sp, #12
 80011da:	4668      	mov	r0, sp
 80011dc:	f002 fda8 	bl	8003d30 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 80011e0:	b118      	cbz	r0, 80011ea <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80011e2:	2802      	cmp	r0, #2
 80011e4:	d004      	beq.n	80011f0 <FLASH_IF_INT_Erase+0x7c>
 80011e6:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 80011ea:	f002 fcd5 	bl	8003b98 <HAL_FLASH_Lock>
 80011ee:	e7cd      	b.n	800118c <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80011f0:	2501      	movs	r5, #1
 80011f2:	e7fa      	b.n	80011ea <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 80011f4:	f06f 0505 	mvn.w	r5, #5
 80011f8:	e7c8      	b.n	800118c <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 80011fa:	f06f 0504 	mvn.w	r5, #4
 80011fe:	e7c5      	b.n	800118c <FLASH_IF_INT_Erase+0x18>
 8001200:	1fff7000 	.word	0x1fff7000
 8001204:	03fffc00 	.word	0x03fffc00

08001208 <FLASH_IF_INT_Write>:
{
 8001208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800120c:	b089      	sub	sp, #36	; 0x24
 800120e:	9003      	str	r0, [sp, #12]
 8001210:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 8001212:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001214:	2800      	cmp	r0, #0
 8001216:	f000 80a9 	beq.w	800136c <FLASH_IF_INT_Write+0x164>
 800121a:	4683      	mov	fp, r0
 800121c:	2900      	cmp	r1, #0
 800121e:	f000 80a9 	beq.w	8001374 <FLASH_IF_INT_Write+0x16c>
 8001222:	f012 0f07 	tst.w	r2, #7
 8001226:	f040 80a9 	bne.w	800137c <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800122a:	f010 0307 	ands.w	r3, r0, #7
 800122e:	9305      	str	r3, [sp, #20]
 8001230:	f040 80a8 	bne.w	8001384 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001234:	f7ff ff84 	bl	8001140 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001238:	9002      	str	r0, [sp, #8]
 800123a:	b118      	cbz	r0, 8001244 <FLASH_IF_INT_Write+0x3c>
}
 800123c:	9802      	ldr	r0, [sp, #8]
 800123e:	b009      	add	sp, #36	; 0x24
 8001240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001244:	f002 fc90 	bl	8003b68 <HAL_FLASH_Unlock>
 8001248:	2800      	cmp	r0, #0
 800124a:	f040 809f 	bne.w	800138c <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 800124e:	9c03      	ldr	r4, [sp, #12]
 8001250:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8001254:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <FLASH_IF_INT_Write+0x18c>)
 8001256:	f8d2 25e0 	ldr.w	r2, [r2, #1504]	; 0x5e0
 800125a:	494f      	ldr	r1, [pc, #316]	; (8001398 <FLASH_IF_INT_Write+0x190>)
 800125c:	ea01 2182 	and.w	r1, r1, r2, lsl #10
 8001260:	fbb3 f2f1 	udiv	r2, r3, r1
 8001264:	fb01 3212 	mls	r2, r1, r2, r3
 8001268:	0ad3      	lsrs	r3, r2, #11
 800126a:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800126c:	9b04      	ldr	r3, [sp, #16]
 800126e:	18e3      	adds	r3, r4, r3
 8001270:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001274:	3b01      	subs	r3, #1
 8001276:	fbb3 f0f1 	udiv	r0, r3, r1
 800127a:	fb01 3310 	mls	r3, r1, r0, r3
 800127e:	0adb      	lsrs	r3, r3, #11
 8001280:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001284:	3301      	adds	r3, #1
 8001286:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8001288:	2b01      	cmp	r3, #1
 800128a:	d906      	bls.n	800129a <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800128c:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8001290:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
              ret_status = FLASH_IF_WRITE_ERROR;
 8001294:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001298:	e02f      	b.n	80012fa <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 800129a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800129e:	e7f9      	b.n	8001294 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 80012a0:	46c8      	mov	r8, r9
          current_source = uSource;
 80012a2:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 80012a4:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80012a6:	9d05      	ldr	r5, [sp, #20]
 80012a8:	4545      	cmp	r5, r8
 80012aa:	d215      	bcs.n	80012d8 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80012ac:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80012ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80012b2:	4621      	mov	r1, r4
 80012b4:	2001      	movs	r0, #1
 80012b6:	f002 fcb3 	bl	8003c20 <HAL_FLASH_Program>
 80012ba:	b950      	cbnz	r0, 80012d2 <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80012bc:	6820      	ldr	r0, [r4, #0]
 80012be:	6862      	ldr	r2, [r4, #4]
 80012c0:	59e9      	ldr	r1, [r5, r7]
 80012c2:	6873      	ldr	r3, [r6, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	bf08      	it	eq
 80012c8:	4288      	cmpeq	r0, r1
 80012ca:	d141      	bne.n	8001350 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 80012cc:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80012ce:	3508      	adds	r5, #8
 80012d0:	e7ea      	b.n	80012a8 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 80012d2:	f06f 0303 	mvn.w	r3, #3
 80012d6:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 80012d8:	9b02      	ldr	r3, [sp, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d13f      	bne.n	800135e <FLASH_IF_INT_Write+0x156>
        uDest += length;
 80012de:	44cb      	add	fp, r9
        uSource += length;
 80012e0:	9b01      	ldr	r3, [sp, #4]
 80012e2:	444b      	add	r3, r9
 80012e4:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80012e6:	9b04      	ldr	r3, [sp, #16]
 80012e8:	eba3 0909 	sub.w	r9, r3, r9
 80012ec:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 80012f0:	bf28      	it	cs
 80012f2:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80012f6:	f10a 0a01 	add.w	sl, sl, #1
 80012fa:	9b06      	ldr	r3, [sp, #24]
 80012fc:	9a07      	ldr	r2, [sp, #28]
 80012fe:	4413      	add	r3, r2
 8001300:	4553      	cmp	r3, sl
 8001302:	d92c      	bls.n	800135e <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001304:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 8001308:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800130a:	4649      	mov	r1, r9
 800130c:	9803      	ldr	r0, [sp, #12]
 800130e:	f7ff fef6 	bl	80010fe <FLASH_IF_INT_IsEmpty>
 8001312:	2800      	cmp	r0, #0
 8001314:	d0c4      	beq.n	80012a0 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <FLASH_IF_INT_Write+0x194>)
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	b1e8      	cbz	r0, 8001358 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 800131c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001320:	4621      	mov	r1, r4
 8001322:	f7ff feff 	bl	8001124 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <FLASH_IF_INT_Write+0x194>)
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	f3cb 030a 	ubfx	r3, fp, #0, #11
 800132e:	fa1f f289 	uxth.w	r2, r9
 8001332:	9901      	ldr	r1, [sp, #4]
 8001334:	4418      	add	r0, r3
 8001336:	f010 fa2b 	bl	8011790 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800133a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133e:	4620      	mov	r0, r4
 8001340:	f7ff ff18 	bl	8001174 <FLASH_IF_INT_Erase>
 8001344:	b970      	cbnz	r0, 8001364 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <FLASH_IF_INT_Write+0x194>)
 8001348:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 800134a:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800134e:	e7aa      	b.n	80012a6 <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001350:	f06f 0303 	mvn.w	r3, #3
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	e7bf      	b.n	80012d8 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001358:	f06f 0305 	mvn.w	r3, #5
 800135c:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 800135e:	f002 fc1b 	bl	8003b98 <HAL_FLASH_Lock>
 8001362:	e76b      	b.n	800123c <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001364:	f06f 0301 	mvn.w	r3, #1
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	e7f8      	b.n	800135e <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 800136c:	f06f 0305 	mvn.w	r3, #5
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	e763      	b.n	800123c <FLASH_IF_INT_Write+0x34>
 8001374:	f06f 0305 	mvn.w	r3, #5
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	e75f      	b.n	800123c <FLASH_IF_INT_Write+0x34>
 800137c:	f06f 0305 	mvn.w	r3, #5
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	e75b      	b.n	800123c <FLASH_IF_INT_Write+0x34>
 8001384:	f06f 0305 	mvn.w	r3, #5
 8001388:	9302      	str	r3, [sp, #8]
 800138a:	e757      	b.n	800123c <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 800138c:	f06f 0304 	mvn.w	r3, #4
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	e753      	b.n	800123c <FLASH_IF_INT_Write+0x34>
 8001394:	1fff7000 	.word	0x1fff7000
 8001398:	03fffc00 	.word	0x03fffc00
 800139c:	20000188 	.word	0x20000188

080013a0 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80013a0:	4b01      	ldr	r3, [pc, #4]	; (80013a8 <FLASH_IF_Init+0x8>)
 80013a2:	6018      	str	r0, [r3, #0]
}
 80013a4:	2000      	movs	r0, #0
 80013a6:	4770      	bx	lr
 80013a8:	20000188 	.word	0x20000188

080013ac <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80013ac:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80013b0:	d30e      	bcc.n	80013d0 <FLASH_IF_Write+0x24>
{
 80013b2:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <FLASH_IF_Write+0x30>)
 80013b6:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <FLASH_IF_Write+0x34>)
 80013bc:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80013c0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013c4:	3b01      	subs	r3, #1
 80013c6:	4298      	cmp	r0, r3
 80013c8:	d805      	bhi.n	80013d6 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80013ca:	f7ff ff1d 	bl	8001208 <FLASH_IF_INT_Write>
}
 80013ce:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80013d4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013d6:	f04f 30ff 	mov.w	r0, #4294967295
 80013da:	e7f8      	b.n	80013ce <FLASH_IF_Write+0x22>
 80013dc:	1fff7000 	.word	0x1fff7000
 80013e0:	03fffc00 	.word	0x03fffc00

080013e4 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80013e4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80013e8:	d30e      	bcc.n	8001408 <FLASH_IF_Read+0x24>
{
 80013ea:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <FLASH_IF_Read+0x30>)
 80013ee:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <FLASH_IF_Read+0x34>)
 80013f4:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80013f8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4299      	cmp	r1, r3
 8001400:	d805      	bhi.n	800140e <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001402:	f7ff fe8f 	bl	8001124 <FLASH_IF_INT_Read>
}
 8001406:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
}
 800140c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
 8001412:	e7f8      	b.n	8001406 <FLASH_IF_Read+0x22>
 8001414:	1fff7000 	.word	0x1fff7000
 8001418:	03fffc00 	.word	0x03fffc00

0800141c <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800141c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001420:	d30e      	bcc.n	8001440 <FLASH_IF_Erase+0x24>
{
 8001422:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <FLASH_IF_Erase+0x30>)
 8001426:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <FLASH_IF_Erase+0x34>)
 800142c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001430:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001434:	3b01      	subs	r3, #1
 8001436:	4298      	cmp	r0, r3
 8001438:	d805      	bhi.n	8001446 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800143a:	f7ff fe9b 	bl	8001174 <FLASH_IF_INT_Erase>
}
 800143e:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001444:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001446:	f04f 30ff 	mov.w	r0, #4294967295
 800144a:	e7f8      	b.n	800143e <FLASH_IF_Erase+0x22>
 800144c:	1fff7000 	.word	0x1fff7000
 8001450:	03fffc00 	.word	0x03fffc00

08001454 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001458:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	2400      	movs	r4, #0
 800145c:	9403      	str	r4, [sp, #12]
 800145e:	9404      	str	r4, [sp, #16]
 8001460:	9405      	str	r4, [sp, #20]
 8001462:	9406      	str	r4, [sp, #24]
 8001464:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800146c:	f042 0202 	orr.w	r2, r2, #2
 8001470:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001474:	f002 0202 	and.w	r2, r2, #2
 8001478:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800147a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800147c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800147e:	f042 0204 	orr.w	r2, r2, #4
 8001482:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001486:	f002 0204 	and.w	r2, r2, #4
 800148a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800148c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800148e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001490:	f042 0201 	orr.w	r2, r2, #1
 8001494:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800149e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80014a0:	4e26      	ldr	r6, [pc, #152]	; (800153c <MX_GPIO_Init+0xe8>)
 80014a2:	4622      	mov	r2, r4
 80014a4:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80014a8:	4630      	mov	r0, r6
 80014aa:	f002 fdd1 	bl	8004050 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80014ae:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80014b2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2501      	movs	r5, #1
 80014b6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	2302      	movs	r3, #2
 80014bc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	a903      	add	r1, sp, #12
 80014c0:	4630      	mov	r0, r6
 80014c2:	f002 fc75 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80014c6:	f04f 0803 	mov.w	r8, #3
 80014ca:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ce:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80014d2:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	a903      	add	r1, sp, #12
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f002 fc68 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80014e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014e4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	a903      	add	r1, sp, #12
 80014f0:	4630      	mov	r0, r6
 80014f2:	f002 fc5d 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80014f6:	2340      	movs	r3, #64	; 0x40
 80014f8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fa:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80014fe:	a903      	add	r1, sp, #12
 8001500:	480f      	ldr	r0, [pc, #60]	; (8001540 <MX_GPIO_Init+0xec>)
 8001502:	f002 fc55 	bl	8003db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001506:	4622      	mov	r2, r4
 8001508:	4621      	mov	r1, r4
 800150a:	2006      	movs	r0, #6
 800150c:	f002 f824 	bl	8003558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001510:	2006      	movs	r0, #6
 8001512:	f002 f859 	bl	80035c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001516:	4622      	mov	r2, r4
 8001518:	4621      	mov	r1, r4
 800151a:	2007      	movs	r0, #7
 800151c:	f002 f81c 	bl	8003558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001520:	2007      	movs	r0, #7
 8001522:	f002 f851 	bl	80035c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001526:	4622      	mov	r2, r4
 8001528:	4621      	mov	r1, r4
 800152a:	2016      	movs	r0, #22
 800152c:	f002 f814 	bl	8003558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001530:	2016      	movs	r0, #22
 8001532:	f002 f849 	bl	80035c8 <HAL_NVIC_EnableIRQ>

}
 8001536:	b008      	add	sp, #32
 8001538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800153c:	48000400 	.word	0x48000400
 8001540:	48000800 	.word	0x48000800

08001544 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001546:	e7fe      	b.n	8001546 <Error_Handler+0x2>

08001548 <SystemClock_Config>:
{
 8001548:	b510      	push	{r4, lr}
 800154a:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154c:	2248      	movs	r2, #72	; 0x48
 800154e:	2100      	movs	r1, #0
 8001550:	a808      	add	r0, sp, #32
 8001552:	f010 fddf 	bl	8012114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001556:	2400      	movs	r4, #0
 8001558:	9401      	str	r4, [sp, #4]
 800155a:	9402      	str	r4, [sp, #8]
 800155c:	9403      	str	r4, [sp, #12]
 800155e:	9404      	str	r4, [sp, #16]
 8001560:	9405      	str	r4, [sp, #20]
 8001562:	9406      	str	r4, [sp, #24]
 8001564:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001566:	f002 fd8f 	bl	8004088 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800156a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800156e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001572:	f023 0318 	bic.w	r3, r3, #24
 8001576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	6813      	ldr	r3, [r2, #0]
 800158c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001594:	2324      	movs	r3, #36	; 0x24
 8001596:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001598:	2381      	movs	r3, #129	; 0x81
 800159a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800159c:	2301      	movs	r3, #1
 800159e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015a0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80015a2:	23b0      	movs	r3, #176	; 0xb0
 80015a4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a8:	a808      	add	r0, sp, #32
 80015aa:	f002 ff07 	bl	80043bc <HAL_RCC_OscConfig>
 80015ae:	b970      	cbnz	r0, 80015ce <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80015b0:	234f      	movs	r3, #79	; 0x4f
 80015b2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015b4:	2300      	movs	r3, #0
 80015b6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ba:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80015be:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015c0:	2102      	movs	r1, #2
 80015c2:	a801      	add	r0, sp, #4
 80015c4:	f003 fa2c 	bl	8004a20 <HAL_RCC_ClockConfig>
 80015c8:	b918      	cbnz	r0, 80015d2 <SystemClock_Config+0x8a>
}
 80015ca:	b01a      	add	sp, #104	; 0x68
 80015cc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80015ce:	f7ff ffb9 	bl	8001544 <Error_Handler>
    Error_Handler();
 80015d2:	f7ff ffb7 	bl	8001544 <Error_Handler>
	...

080015d8 <main>:
{
 80015d8:	b508      	push	{r3, lr}
  HAL_Init();
 80015da:	f001 fa83 	bl	8002ae4 <HAL_Init>
  SystemClock_Config();
 80015de:	f7ff ffb3 	bl	8001548 <SystemClock_Config>
  MX_GPIO_Init();
 80015e2:	f7ff ff37 	bl	8001454 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80015e6:	f000 fd11 	bl	800200c <MX_LoRaWAN_Init>
	  if (uartReady == GPIO_PIN_SET)
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <main+0x28>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d1fb      	bne.n	80015ea <main+0x12>
		  MX_LoRaWAN_Process();
 80015f2:	f000 fd11 	bl	8002018 <MX_LoRaWAN_Process>
		  uartReady = GPIO_PIN_RESET;
 80015f6:	4b02      	ldr	r3, [pc, #8]	; (8001600 <main+0x28>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	e7f5      	b.n	80015ea <main+0x12>
 80015fe:	bf00      	nop
 8001600:	2000018c 	.word	0x2000018c

08001604 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001604:	b500      	push	{lr}
 8001606:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001608:	222c      	movs	r2, #44	; 0x2c
 800160a:	2100      	movs	r1, #0
 800160c:	a801      	add	r0, sp, #4
 800160e:	f010 fd81 	bl	8012114 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001612:	4819      	ldr	r0, [pc, #100]	; (8001678 <MX_RTC_Init+0x74>)
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <MX_RTC_Init+0x78>)
 8001616:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001618:	231f      	movs	r3, #31
 800161a:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001620:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001622:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001628:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800162a:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800162c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001630:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001632:	f003 fd5b 	bl	80050ec <HAL_RTC_Init>
 8001636:	b9a8      	cbnz	r0, 8001664 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001638:	480f      	ldr	r0, [pc, #60]	; (8001678 <MX_RTC_Init+0x74>)
 800163a:	f003 fe99 	bl	8005370 <HAL_RTCEx_SetSSRU_IT>
 800163e:	b9a0      	cbnz	r0, 800166a <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001640:	2200      	movs	r2, #0
 8001642:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001644:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001646:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001648:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800164c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800164e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001652:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001654:	a901      	add	r1, sp, #4
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <MX_RTC_Init+0x74>)
 8001658:	f003 fdae 	bl	80051b8 <HAL_RTC_SetAlarm_IT>
 800165c:	b940      	cbnz	r0, 8001670 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800165e:	b00d      	add	sp, #52	; 0x34
 8001660:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001664:	f7ff ff6e 	bl	8001544 <Error_Handler>
 8001668:	e7e6      	b.n	8001638 <MX_RTC_Init+0x34>
    Error_Handler();
 800166a:	f7ff ff6b 	bl	8001544 <Error_Handler>
 800166e:	e7e7      	b.n	8001640 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001670:	f7ff ff68 	bl	8001544 <Error_Handler>
}
 8001674:	e7f3      	b.n	800165e <MX_RTC_Init+0x5a>
 8001676:	bf00      	nop
 8001678:	20000190 	.word	0x20000190
 800167c:	40002800 	.word	0x40002800

08001680 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001680:	b510      	push	{r4, lr}
 8001682:	b090      	sub	sp, #64	; 0x40
 8001684:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001686:	2238      	movs	r2, #56	; 0x38
 8001688:	2100      	movs	r1, #0
 800168a:	a802      	add	r0, sp, #8
 800168c:	f010 fd42 	bl	8012114 <memset>
  if(rtcHandle->Instance==RTC)
 8001690:	6822      	ldr	r2, [r4, #0]
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_RTC_MspInit+0x7c>)
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001698:	b010      	add	sp, #64	; 0x40
 800169a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800169c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a0:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a6:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a8:	a802      	add	r0, sp, #8
 80016aa:	f003 fb0d 	bl	8004cc8 <HAL_RCCEx_PeriphCLKConfig>
 80016ae:	bb08      	cbnz	r0, 80016f4 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80016b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80016b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016c6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ce:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80016d0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	4611      	mov	r1, r2
 80016d6:	2002      	movs	r0, #2
 80016d8:	f001 ff3e 	bl	8003558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80016dc:	2002      	movs	r0, #2
 80016de:	f001 ff73 	bl	80035c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	4611      	mov	r1, r2
 80016e6:	202a      	movs	r0, #42	; 0x2a
 80016e8:	f001 ff36 	bl	8003558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016ec:	202a      	movs	r0, #42	; 0x2a
 80016ee:	f001 ff6b 	bl	80035c8 <HAL_NVIC_EnableIRQ>
}
 80016f2:	e7d1      	b.n	8001698 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80016f4:	f7ff ff26 	bl	8001544 <Error_Handler>
 80016f8:	e7da      	b.n	80016b0 <HAL_RTC_MspInit+0x30>
 80016fa:	bf00      	nop
 80016fc:	40002800 	.word	0x40002800

08001700 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001700:	4770      	bx	lr

08001702 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001702:	4770      	bx	lr

08001704 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001704:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001706:	f001 fa03 	bl	8002b10 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800170a:	2001      	movs	r0, #1
 800170c:	4b02      	ldr	r3, [pc, #8]	; (8001718 <PWR_EnterStopMode+0x14>)
 800170e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001712:	f002 fd1d 	bl	8004150 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001716:	bd08      	pop	{r3, pc}
 8001718:	58000400 	.word	0x58000400

0800171c <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 800171c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800171e:	f001 f9fe 	bl	8002b1e <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001722:	bd08      	pop	{r3, pc}

08001724 <PWR_ExitStopMode>:
{
 8001724:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001726:	f001 f9fa 	bl	8002b1e <HAL_ResumeTick>
  vcom_Resume();
 800172a:	f000 fc23 	bl	8001f74 <vcom_Resume>
}
 800172e:	bd08      	pop	{r3, pc}

08001730 <PWR_EnterSleepMode>:
{
 8001730:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001732:	f001 f9ed 	bl	8002b10 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001736:	2101      	movs	r1, #1
 8001738:	2000      	movs	r0, #0
 800173a:	f002 fcad 	bl	8004098 <HAL_PWR_EnterSLEEPMode>
}
 800173e:	bd08      	pop	{r3, pc}

08001740 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001740:	4770      	bx	lr

08001742 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <NMI_Handler>

08001744 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <HardFault_Handler>

08001746 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <MemManage_Handler>

08001748 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <BusFault_Handler>

0800174a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <UsageFault_Handler>

0800174c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	4770      	bx	lr

08001750 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001750:	4770      	bx	lr

08001752 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001752:	4770      	bx	lr

08001754 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001754:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001756:	4802      	ldr	r0, [pc, #8]	; (8001760 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001758:	f003 fe36 	bl	80053c8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800175c:	bd08      	pop	{r3, pc}
 800175e:	bf00      	nop
 8001760:	20000190 	.word	0x20000190

08001764 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001764:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001766:	2001      	movs	r0, #1
 8001768:	f002 fc80 	bl	800406c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800176c:	bd08      	pop	{r3, pc}

0800176e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800176e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001770:	2002      	movs	r0, #2
 8001772:	f002 fc7b 	bl	800406c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001776:	bd08      	pop	{r3, pc}

08001778 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001778:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800177a:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA1_Channel5_IRQHandler+0xc>)
 800177c:	f002 f942 	bl	8003a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001780:	bd08      	pop	{r3, pc}
 8001782:	bf00      	nop
 8001784:	200001dc 	.word	0x200001dc

08001788 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001788:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 800178a:	2040      	movs	r0, #64	; 0x40
 800178c:	f002 fc6e 	bl	800406c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001790:	bd08      	pop	{r3, pc}
	...

08001794 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001794:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001796:	4802      	ldr	r0, [pc, #8]	; (80017a0 <USART2_IRQHandler+0xc>)
 8001798:	f004 fad4 	bl	8005d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800179c:	bd08      	pop	{r3, pc}
 800179e:	bf00      	nop
 80017a0:	2000023c 	.word	0x2000023c

080017a4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80017a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017a6:	4802      	ldr	r0, [pc, #8]	; (80017b0 <RTC_Alarm_IRQHandler+0xc>)
 80017a8:	f003 fc18 	bl	8004fdc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80017ac:	bd08      	pop	{r3, pc}
 80017ae:	bf00      	nop
 80017b0:	20000190 	.word	0x20000190

080017b4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80017b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80017b6:	4802      	ldr	r0, [pc, #8]	; (80017c0 <SUBGHZ_Radio_IRQHandler+0xc>)
 80017b8:	f004 f8ba 	bl	8005930 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80017bc:	bd08      	pop	{r3, pc}
 80017be:	bf00      	nop
 80017c0:	200001c8 	.word	0x200001c8

080017c4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80017c4:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_SUBGHZ_Init+0x18>)
 80017c8:	2308      	movs	r3, #8
 80017ca:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80017cc:	f003 fe32 	bl	8005434 <HAL_SUBGHZ_Init>
 80017d0:	b900      	cbnz	r0, 80017d4 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80017d2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80017d4:	f7ff feb6 	bl	8001544 <Error_Handler>
}
 80017d8:	e7fb      	b.n	80017d2 <MX_SUBGHZ_Init+0xe>
 80017da:	bf00      	nop
 80017dc:	200001c8 	.word	0x200001c8

080017e0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80017e0:	b500      	push	{lr}
 80017e2:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80017f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80017f8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	4611      	mov	r1, r2
 80017fe:	2032      	movs	r0, #50	; 0x32
 8001800:	f001 feaa 	bl	8003558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001804:	2032      	movs	r0, #50	; 0x32
 8001806:	f001 fedf 	bl	80035c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800180a:	b003      	add	sp, #12
 800180c:	f85d fb04 	ldr.w	pc, [sp], #4

08001810 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001810:	b40c      	push	{r2, r3}
 8001812:	b500      	push	{lr}
 8001814:	b083      	sub	sp, #12
 8001816:	ab04      	add	r3, sp, #16
 8001818:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 800181c:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800181e:	f010 fb91 	bl	8011f44 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001822:	b003      	add	sp, #12
 8001824:	f85d eb04 	ldr.w	lr, [sp], #4
 8001828:	b002      	add	sp, #8
 800182a:	4770      	bx	lr

0800182c <TimestampNow>:
{
 800182c:	b530      	push	{r4, r5, lr}
 800182e:	b085      	sub	sp, #20
 8001830:	4604      	mov	r4, r0
 8001832:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001834:	a802      	add	r0, sp, #8
 8001836:	f010 f8fb 	bl	8011a30 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800183a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	9b02      	ldr	r3, [sp, #8]
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <TimestampNow+0x2c>)
 8001844:	2110      	movs	r1, #16
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff ffe2 	bl	8001810 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800184c:	4620      	mov	r0, r4
 800184e:	f7fe fc93 	bl	8000178 <strlen>
 8001852:	8028      	strh	r0, [r5, #0]
}
 8001854:	b005      	add	sp, #20
 8001856:	bd30      	pop	{r4, r5, pc}
 8001858:	080122e0 	.word	0x080122e0

0800185c <SystemApp_Init>:
{
 800185c:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800185e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001862:	6893      	ldr	r3, [r2, #8]
 8001864:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001868:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800186a:	f010 f965 	bl	8011b38 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800186e:	2401      	movs	r4, #1
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <SystemApp_Init+0x4c>)
 8001872:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001874:	f000 f8bc 	bl	80019f0 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001878:	f00f fe00 	bl	801147c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <SystemApp_Init+0x50>)
 800187e:	f00f fe17 	bl	80114b0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <SystemApp_Init+0x54>)
 8001884:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001888:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800188a:	2002      	movs	r0, #2
 800188c:	f00f fe16 	bl	80114bc <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001890:	f7ff fb94 	bl	8000fbc <SYS_InitMeasurement>
  EnvSensors_Init();
 8001894:	f000 f90c 	bl	8001ab0 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001898:	f00f ff20 	bl	80116dc <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800189c:	4621      	mov	r1, r4
 800189e:	4620      	mov	r0, r4
 80018a0:	f00f ff3c 	bl	801171c <UTIL_LPM_SetOffMode>
}
 80018a4:	bd10      	pop	{r4, pc}
 80018a6:	bf00      	nop
 80018a8:	200001d4 	.word	0x200001d4
 80018ac:	0800182d 	.word	0x0800182d
 80018b0:	58004000 	.word	0x58004000

080018b4 <UTIL_SEQ_Idle>:
{
 80018b4:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80018b6:	f00f ff47 	bl	8011748 <UTIL_LPM_EnterLowPower>
}
 80018ba:	bd08      	pop	{r3, pc}

080018bc <GetBatteryLevel>:
{
 80018bc:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80018be:	f7ff fb85 	bl	8000fcc <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80018c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018c6:	4298      	cmp	r0, r3
 80018c8:	d80d      	bhi.n	80018e6 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80018ca:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80018ce:	d30c      	bcc.n	80018ea <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80018d0:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80018d4:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80018d8:	0040      	lsls	r0, r0, #1
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <GetBatteryLevel+0x34>)
 80018dc:	fba3 3000 	umull	r3, r0, r3, r0
 80018e0:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80018e4:	e000      	b.n	80018e8 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 80018e6:	20fe      	movs	r0, #254	; 0xfe
}
 80018e8:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 80018ea:	2000      	movs	r0, #0
 80018ec:	e7fc      	b.n	80018e8 <GetBatteryLevel+0x2c>
 80018ee:	bf00      	nop
 80018f0:	1b4e81b5 	.word	0x1b4e81b5

080018f4 <GetTemperatureLevel>:
{
 80018f4:	b500      	push	{lr}
 80018f6:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80018f8:	4668      	mov	r0, sp
 80018fa:	f000 f8bd 	bl	8001a78 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80018fe:	9801      	ldr	r0, [sp, #4]
 8001900:	f7ff f90c 	bl	8000b1c <__aeabi_f2iz>
}
 8001904:	b200      	sxth	r0, r0
 8001906:	b007      	add	sp, #28
 8001908:	f85d fb04 	ldr.w	pc, [sp], #4

0800190c <GetUniqueId>:
{
 800190c:	b538      	push	{r3, r4, r5, lr}
 800190e:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <GetUniqueId+0x68>)
 8001912:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191a:	d013      	beq.n	8001944 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 800191c:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 800191e:	0a1a      	lsrs	r2, r3, #8
 8001920:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001922:	0c1a      	lsrs	r2, r3, #16
 8001924:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001926:	0e1b      	lsrs	r3, r3, #24
 8001928:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <GetUniqueId+0x68>)
 800192c:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001930:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001932:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001936:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001938:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 800193a:	0c1a      	lsrs	r2, r3, #16
 800193c:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 800193e:	0e1b      	lsrs	r3, r3, #24
 8001940:	7003      	strb	r3, [r0, #0]
}
 8001942:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001944:	f001 f8f2 	bl	8002b2c <HAL_GetUIDw0>
 8001948:	4605      	mov	r5, r0
 800194a:	f001 f8fb 	bl	8002b44 <HAL_GetUIDw2>
 800194e:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001950:	f001 f8f2 	bl	8002b38 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001954:	0e2b      	lsrs	r3, r5, #24
 8001956:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001958:	0c2b      	lsrs	r3, r5, #16
 800195a:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 800195c:	0a2b      	lsrs	r3, r5, #8
 800195e:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001960:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001962:	0e03      	lsrs	r3, r0, #24
 8001964:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001966:	0c03      	lsrs	r3, r0, #16
 8001968:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 800196a:	0a03      	lsrs	r3, r0, #8
 800196c:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 800196e:	7020      	strb	r0, [r4, #0]
 8001970:	e7e7      	b.n	8001942 <GetUniqueId+0x36>
 8001972:	bf00      	nop
 8001974:	1fff7000 	.word	0x1fff7000

08001978 <GetDevAddr>:
{
 8001978:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <GetDevAddr+0x2c>)
 800197c:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001980:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001986:	d000      	beq.n	800198a <GetDevAddr+0x12>
}
 8001988:	bd38      	pop	{r3, r4, r5, pc}
 800198a:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800198c:	f001 f8ce 	bl	8002b2c <HAL_GetUIDw0>
 8001990:	4605      	mov	r5, r0
 8001992:	f001 f8d1 	bl	8002b38 <HAL_GetUIDw1>
 8001996:	4045      	eors	r5, r0
 8001998:	f001 f8d4 	bl	8002b44 <HAL_GetUIDw2>
 800199c:	4045      	eors	r5, r0
 800199e:	6025      	str	r5, [r4, #0]
}
 80019a0:	e7f2      	b.n	8001988 <GetDevAddr+0x10>
 80019a2:	bf00      	nop
 80019a4:	1fff7000 	.word	0x1fff7000

080019a8 <UTIL_ADV_TRACE_PreSendHook>:
{
 80019a8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80019aa:	2101      	movs	r1, #1
 80019ac:	2002      	movs	r0, #2
 80019ae:	f00f fe9f 	bl	80116f0 <UTIL_LPM_SetStopMode>
}
 80019b2:	bd08      	pop	{r3, pc}

080019b4 <UTIL_ADV_TRACE_PostSendHook>:
{
 80019b4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80019b6:	2100      	movs	r1, #0
 80019b8:	2002      	movs	r0, #2
 80019ba:	f00f fe99 	bl	80116f0 <UTIL_LPM_SetStopMode>
}
 80019be:	bd08      	pop	{r3, pc}

080019c0 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80019c0:	2000      	movs	r0, #0
 80019c2:	4770      	bx	lr

080019c4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80019c4:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <HAL_GetTick+0x14>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b90b      	cbnz	r3, 80019d0 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80019cc:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80019ce:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80019d0:	f000 f89a 	bl	8001b08 <TIMER_IF_GetTimerValue>
 80019d4:	e7fb      	b.n	80019ce <HAL_GetTick+0xa>
 80019d6:	bf00      	nop
 80019d8:	200001d4 	.word	0x200001d4

080019dc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80019dc:	b500      	push	{lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80019e2:	9801      	ldr	r0, [sp, #4]
 80019e4:	f000 f976 	bl	8001cd4 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80019e8:	b003      	add	sp, #12
 80019ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080019f0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80019f4:	f001 f8ac 	bl	8002b50 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80019f8:	f001 f8b2 	bl	8002b60 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80019fc:	f001 f8b8 	bl	8002b70 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001a00:	2400      	movs	r4, #0
 8001a02:	9403      	str	r4, [sp, #12]
 8001a04:	9404      	str	r4, [sp, #16]
 8001a06:	9405      	str	r4, [sp, #20]
 8001a08:	9406      	str	r4, [sp, #24]
 8001a0a:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1a:	f042 0202 	orr.w	r2, r2, #2
 8001a1e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a22:	f002 0202 	and.w	r2, r2, #2
 8001a26:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a28:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a2c:	f042 0202 	orr.w	r2, r2, #2
 8001a30:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a3a:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001a3c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001a40:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001a42:	4d0c      	ldr	r5, [pc, #48]	; (8001a74 <DBG_Init+0x84>)
 8001a44:	a903      	add	r1, sp, #12
 8001a46:	4628      	mov	r0, r5
 8001a48:	f002 f9b2 	bl	8003db0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001a4c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001a50:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001a52:	a903      	add	r1, sp, #12
 8001a54:	4628      	mov	r0, r5
 8001a56:	f002 f9ab 	bl	8003db0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	4639      	mov	r1, r7
 8001a5e:	4628      	mov	r0, r5
 8001a60:	f002 faf6 	bl	8004050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001a64:	4622      	mov	r2, r4
 8001a66:	4631      	mov	r1, r6
 8001a68:	4628      	mov	r0, r5
 8001a6a:	f002 faf1 	bl	8004050 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001a6e:	b009      	add	sp, #36	; 0x24
 8001a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	48000400 	.word	0x48000400

08001a78 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001a7c:	f7ff fac8 	bl	8001010 <SYS_GetTemperatureLevel>
 8001a80:	f340 200f 	sbfx	r0, r0, #8, #16
 8001a84:	f7fe fea6 	bl	80007d4 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <EnvSensors_Read+0x28>)
 8001a8a:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001a8c:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <EnvSensors_Read+0x2c>)
 8001a90:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <EnvSensors_Read+0x30>)
 8001a94:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <EnvSensors_Read+0x34>)
 8001a98:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	bd10      	pop	{r4, pc}
 8001a9e:	bf00      	nop
 8001aa0:	42480000 	.word	0x42480000
 8001aa4:	447a0000 	.word	0x447a0000
 8001aa8:	003e090d 	.word	0x003e090d
 8001aac:	000503ab 	.word	0x000503ab

08001ab0 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	4770      	bx	lr

08001ab4 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <TIMER_IF_SetTimerContext+0x1c>)
 8001ab6:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ab8:	e001      	b.n	8001abe <TIMER_IF_SetTimerContext+0xa>
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <TIMER_IF_SetTimerContext+0x1c>)
 8001abc:	6898      	ldr	r0, [r3, #8]
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <TIMER_IF_SetTimerContext+0x1c>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	4283      	cmp	r3, r0
 8001ac4:	d1f9      	bne.n	8001aba <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001ac6:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001ac8:	4b02      	ldr	r3, [pc, #8]	; (8001ad4 <TIMER_IF_SetTimerContext+0x20>)
 8001aca:	6018      	str	r0, [r3, #0]
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40002800 	.word	0x40002800
 8001ad4:	200001d8 	.word	0x200001d8

08001ad8 <TIMER_IF_GetTimerContext>:
}
 8001ad8:	4b01      	ldr	r3, [pc, #4]	; (8001ae0 <TIMER_IF_GetTimerContext+0x8>)
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	200001d8 	.word	0x200001d8

08001ae4 <TIMER_IF_GetTimerElapsedTime>:
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ae6:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ae8:	e001      	b.n	8001aee <TIMER_IF_GetTimerElapsedTime+0xa>
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001aec:	6898      	ldr	r0, [r3, #8]
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4283      	cmp	r3, r0
 8001af4:	d1f9      	bne.n	8001aea <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001af6:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001af8:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	1ac0      	subs	r0, r0, r3
 8001afe:	4770      	bx	lr
 8001b00:	40002800 	.word	0x40002800
 8001b04:	200001d8 	.word	0x200001d8

08001b08 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <TIMER_IF_GetTimerValue+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b153      	cbz	r3, 8001b24 <TIMER_IF_GetTimerValue+0x1c>
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <TIMER_IF_GetTimerValue+0x24>)
 8001b10:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001b12:	e001      	b.n	8001b18 <TIMER_IF_GetTimerValue+0x10>
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <TIMER_IF_GetTimerValue+0x24>)
 8001b16:	6898      	ldr	r0, [r3, #8]
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <TIMER_IF_GetTimerValue+0x24>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4283      	cmp	r3, r0
 8001b1e:	d1f9      	bne.n	8001b14 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001b20:	43c0      	mvns	r0, r0
 8001b22:	4770      	bx	lr
  uint32_t ret = 0;
 8001b24:	2000      	movs	r0, #0
}
 8001b26:	4770      	bx	lr
 8001b28:	200001d5 	.word	0x200001d5
 8001b2c:	40002800 	.word	0x40002800

08001b30 <TIMER_IF_GetMinimumTimeout>:
}
 8001b30:	2003      	movs	r0, #3
 8001b32:	4770      	bx	lr

08001b34 <TIMER_IF_Convert_ms2Tick>:
{
 8001b34:	b508      	push	{r3, lr}
 8001b36:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	0280      	lsls	r0, r0, #10
 8001b40:	0d89      	lsrs	r1, r1, #22
 8001b42:	f7ff f831 	bl	8000ba8 <__aeabi_uldivmod>
}
 8001b46:	bd08      	pop	{r3, pc}

08001b48 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001b48:	0ec2      	lsrs	r2, r0, #27
 8001b4a:	0143      	lsls	r3, r0, #5
 8001b4c:	1a1b      	subs	r3, r3, r0
 8001b4e:	f162 0200 	sbc.w	r2, r2, #0
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	181b      	adds	r3, r3, r0
 8001b5c:	f142 0000 	adc.w	r0, r2, #0
 8001b60:	00c0      	lsls	r0, r0, #3
 8001b62:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001b66:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001b6a:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001b6e:	4770      	bx	lr

08001b70 <TIMER_IF_StopTimer>:
{
 8001b70:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <TIMER_IF_StopTimer+0x20>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001b78:	4c06      	ldr	r4, [pc, #24]	; (8001b94 <TIMER_IF_StopTimer+0x24>)
 8001b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f003 f9ec 	bl	8004f5c <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	bd10      	pop	{r4, pc}
 8001b8e:	bf00      	nop
 8001b90:	40002800 	.word	0x40002800
 8001b94:	20000190 	.word	0x20000190

08001b98 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001b98:	b508      	push	{r3, lr}
 8001b9a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001ba0:	f003 fc27 	bl	80053f2 <HAL_RTCEx_BKUPWrite>
}
 8001ba4:	bd08      	pop	{r3, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000190 	.word	0x20000190

08001bac <TIMER_IF_Init>:
{
 8001bac:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <TIMER_IF_Init+0x40>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b10b      	cbz	r3, 8001bb8 <TIMER_IF_Init+0xc>
}
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001bb8:	4c0d      	ldr	r4, [pc, #52]	; (8001bf0 <TIMER_IF_Init+0x44>)
 8001bba:	f04f 35ff 	mov.w	r5, #4294967295
 8001bbe:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001bc0:	f7ff fd20 	bl	8001604 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001bc4:	f7ff ffd4 	bl	8001b70 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f003 f9c5 	bl	8004f5c <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001bd2:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f003 fbab 	bl	8005330 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff ffdc 	bl	8001b98 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001be0:	f7ff ff68 	bl	8001ab4 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001be4:	4b01      	ldr	r3, [pc, #4]	; (8001bec <TIMER_IF_Init+0x40>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e7e3      	b.n	8001bb4 <TIMER_IF_Init+0x8>
 8001bec:	200001d5 	.word	0x200001d5
 8001bf0:	20000190 	.word	0x20000190

08001bf4 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001bf4:	b508      	push	{r3, lr}
 8001bf6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4802      	ldr	r0, [pc, #8]	; (8001c04 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001bfc:	f003 fbf9 	bl	80053f2 <HAL_RTCEx_BKUPWrite>
}
 8001c00:	bd08      	pop	{r3, pc}
 8001c02:	bf00      	nop
 8001c04:	20000190 	.word	0x20000190

08001c08 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001c08:	b508      	push	{r3, lr}
 8001c0a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4802      	ldr	r0, [pc, #8]	; (8001c18 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001c10:	f003 fbef 	bl	80053f2 <HAL_RTCEx_BKUPWrite>
}
 8001c14:	bd08      	pop	{r3, pc}
 8001c16:	bf00      	nop
 8001c18:	20000190 	.word	0x20000190

08001c1c <TIMER_IF_StartTimer>:
{
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001c22:	222c      	movs	r2, #44	; 0x2c
 8001c24:	2100      	movs	r1, #0
 8001c26:	a801      	add	r0, sp, #4
 8001c28:	f010 fa74 	bl	8012114 <memset>
  TIMER_IF_StopTimer();
 8001c2c:	f7ff ffa0 	bl	8001b70 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <TIMER_IF_StartTimer+0x48>)
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c36:	2300      	movs	r3, #0
 8001c38:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001c3a:	43e4      	mvns	r4, r4
 8001c3c:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c3e:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c44:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	a901      	add	r1, sp, #4
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <TIMER_IF_StartTimer+0x4c>)
 8001c52:	f003 fab1 	bl	80051b8 <HAL_RTC_SetAlarm_IT>
 8001c56:	b910      	cbnz	r0, 8001c5e <TIMER_IF_StartTimer+0x42>
}
 8001c58:	2000      	movs	r0, #0
 8001c5a:	b00c      	add	sp, #48	; 0x30
 8001c5c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001c5e:	f7ff fc71 	bl	8001544 <Error_Handler>
 8001c62:	e7f9      	b.n	8001c58 <TIMER_IF_StartTimer+0x3c>
 8001c64:	200001d8 	.word	0x200001d8
 8001c68:	20000190 	.word	0x20000190

08001c6c <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001c6c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001c6e:	2102      	movs	r1, #2
 8001c70:	4801      	ldr	r0, [pc, #4]	; (8001c78 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001c72:	f003 fbc5 	bl	8005400 <HAL_RTCEx_BKUPRead>
}
 8001c76:	bd08      	pop	{r3, pc}
 8001c78:	20000190 	.word	0x20000190

08001c7c <TIMER_IF_GetTime>:
{
 8001c7c:	b538      	push	{r3, r4, r5, lr}
 8001c7e:	4605      	mov	r5, r0
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <TIMER_IF_GetTime+0x34>)
 8001c82:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c84:	e001      	b.n	8001c8a <TIMER_IF_GetTime+0xe>
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <TIMER_IF_GetTime+0x34>)
 8001c88:	689c      	ldr	r4, [r3, #8]
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <TIMER_IF_GetTime+0x34>)
 8001c8c:	6892      	ldr	r2, [r2, #8]
 8001c8e:	42a2      	cmp	r2, r4
 8001c90:	d1f9      	bne.n	8001c86 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001c92:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001c94:	f7ff ffea 	bl	8001c6c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001c98:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001c9a:	0aa4      	lsrs	r4, r4, #10
 8001c9c:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001ca0:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001ca4:	f7ff ff50 	bl	8001b48 <TIMER_IF_Convert_Tick2ms>
 8001ca8:	8028      	strh	r0, [r5, #0]
}
 8001caa:	4620      	mov	r0, r4
 8001cac:	bd38      	pop	{r3, r4, r5, pc}
 8001cae:	bf00      	nop
 8001cb0:	40002800 	.word	0x40002800

08001cb4 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001cb4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4801      	ldr	r0, [pc, #4]	; (8001cc0 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001cba:	f003 fba1 	bl	8005400 <HAL_RTCEx_BKUPRead>
}
 8001cbe:	bd08      	pop	{r3, pc}
 8001cc0:	20000190 	.word	0x20000190

08001cc4 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001cc4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4801      	ldr	r0, [pc, #4]	; (8001cd0 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001cca:	f003 fb99 	bl	8005400 <HAL_RTCEx_BKUPRead>
}
 8001cce:	bd08      	pop	{r3, pc}
 8001cd0:	20000190 	.word	0x20000190

08001cd4 <TIMER_IF_DelayMs>:
{
 8001cd4:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001cd6:	f7ff ff2d 	bl	8001b34 <TIMER_IF_Convert_ms2Tick>
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <TIMER_IF_DelayMs+0x3c>)
 8001cdc:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cde:	e001      	b.n	8001ce4 <TIMER_IF_DelayMs+0x10>
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <TIMER_IF_DelayMs+0x3c>)
 8001ce2:	6899      	ldr	r1, [r3, #8]
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <TIMER_IF_DelayMs+0x3c>)
 8001ce6:	6892      	ldr	r2, [r2, #8]
 8001ce8:	428a      	cmp	r2, r1
 8001cea:	d1f9      	bne.n	8001ce0 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001cec:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001cee:	e00a      	b.n	8001d06 <TIMER_IF_DelayMs+0x32>
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <TIMER_IF_DelayMs+0x3c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a06      	ldr	r2, [pc, #24]	; (8001d10 <TIMER_IF_DelayMs+0x3c>)
 8001cf6:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1f9      	bne.n	8001cf0 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001cfc:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001cfe:	1a5b      	subs	r3, r3, r1
 8001d00:	4283      	cmp	r3, r0
 8001d02:	d203      	bcs.n	8001d0c <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001d04:	bf00      	nop
 8001d06:	4b02      	ldr	r3, [pc, #8]	; (8001d10 <TIMER_IF_DelayMs+0x3c>)
 8001d08:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d0a:	e7f3      	b.n	8001cf4 <TIMER_IF_DelayMs+0x20>
}
 8001d0c:	bd08      	pop	{r3, pc}
 8001d0e:	bf00      	nop
 8001d10:	40002800 	.word	0x40002800

08001d14 <HAL_RTC_AlarmAEventCallback>:
{
 8001d14:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001d16:	f010 f833 	bl	8011d80 <UTIL_TIMER_IRQ_Handler>
}
 8001d1a:	bd08      	pop	{r3, pc}

08001d1c <HAL_RTCEx_SSRUEventCallback>:
{
 8001d1c:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001d1e:	f7ff ffa5 	bl	8001c6c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001d22:	3001      	adds	r0, #1
 8001d24:	f7ff ff38 	bl	8001b98 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001d28:	bd08      	pop	{r3, pc}
	...

08001d2c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d2c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d2e:	4817      	ldr	r0, [pc, #92]	; (8001d8c <MX_USART2_UART_Init+0x60>)
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_USART2_UART_Init+0x64>)
 8001d32:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001d34:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d38:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d3e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d40:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d42:	220c      	movs	r2, #12
 8001d44:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d46:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4c:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d4e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d50:	f004 feb4 	bl	8006abc <HAL_UART_Init>
 8001d54:	b970      	cbnz	r0, 8001d74 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d56:	2100      	movs	r1, #0
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <MX_USART2_UART_Init+0x60>)
 8001d5a:	f005 f864 	bl	8006e26 <HAL_UARTEx_SetTxFifoThreshold>
 8001d5e:	b960      	cbnz	r0, 8001d7a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d60:	2100      	movs	r1, #0
 8001d62:	480a      	ldr	r0, [pc, #40]	; (8001d8c <MX_USART2_UART_Init+0x60>)
 8001d64:	f005 f884 	bl	8006e70 <HAL_UARTEx_SetRxFifoThreshold>
 8001d68:	b950      	cbnz	r0, 8001d80 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001d6a:	4808      	ldr	r0, [pc, #32]	; (8001d8c <MX_USART2_UART_Init+0x60>)
 8001d6c:	f005 f837 	bl	8006dde <HAL_UARTEx_EnableFifoMode>
 8001d70:	b948      	cbnz	r0, 8001d86 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d72:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d74:	f7ff fbe6 	bl	8001544 <Error_Handler>
 8001d78:	e7ed      	b.n	8001d56 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001d7a:	f7ff fbe3 	bl	8001544 <Error_Handler>
 8001d7e:	e7ef      	b.n	8001d60 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001d80:	f7ff fbe0 	bl	8001544 <Error_Handler>
 8001d84:	e7f1      	b.n	8001d6a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001d86:	f7ff fbdd 	bl	8001544 <Error_Handler>
}
 8001d8a:	e7f2      	b.n	8001d72 <MX_USART2_UART_Init+0x46>
 8001d8c:	2000023c 	.word	0x2000023c
 8001d90:	40004400 	.word	0x40004400

08001d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d94:	b530      	push	{r4, r5, lr}
 8001d96:	b097      	sub	sp, #92	; 0x5c
 8001d98:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	9111      	str	r1, [sp, #68]	; 0x44
 8001d9e:	9112      	str	r1, [sp, #72]	; 0x48
 8001da0:	9113      	str	r1, [sp, #76]	; 0x4c
 8001da2:	9114      	str	r1, [sp, #80]	; 0x50
 8001da4:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da6:	2238      	movs	r2, #56	; 0x38
 8001da8:	a803      	add	r0, sp, #12
 8001daa:	f010 f9b3 	bl	8012114 <memset>
  if(uartHandle->Instance==USART2)
 8001dae:	6822      	ldr	r2, [r4, #0]
 8001db0:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_UART_MspInit+0xd4>)
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d001      	beq.n	8001dba <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001db6:	b017      	add	sp, #92	; 0x5c
 8001db8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_UART_MspInit+0xd8>)
 8001dc0:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc2:	a803      	add	r0, sp, #12
 8001dc4:	f002 ff80 	bl	8004cc8 <HAL_RCCEx_PeriphCLKConfig>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d144      	bne.n	8001e56 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dd6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dda:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001dde:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001de0:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001de4:	f042 0201 	orr.w	r2, r2, #1
 8001de8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001df2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001df4:	230c      	movs	r3, #12
 8001df6:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e04:	2307      	movs	r3, #7
 8001e06:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	a911      	add	r1, sp, #68	; 0x44
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0e:	f001 ffcf 	bl	8003db0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001e12:	4817      	ldr	r0, [pc, #92]	; (8001e70 <HAL_UART_MspInit+0xdc>)
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_UART_MspInit+0xe0>)
 8001e16:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001e18:	2314      	movs	r3, #20
 8001e1a:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e1c:	2310      	movs	r3, #16
 8001e1e:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e20:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e26:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e28:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e2a:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e2c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e2e:	f001 fc5b 	bl	80036e8 <HAL_DMA_Init>
 8001e32:	b998      	cbnz	r0, 8001e5c <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001e34:	2110      	movs	r1, #16
 8001e36:	480e      	ldr	r0, [pc, #56]	; (8001e70 <HAL_UART_MspInit+0xdc>)
 8001e38:	f001 fe58 	bl	8003aec <HAL_DMA_ConfigChannelAttributes>
 8001e3c:	b988      	cbnz	r0, 8001e62 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <HAL_UART_MspInit+0xdc>)
 8001e40:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001e42:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2102      	movs	r1, #2
 8001e48:	2025      	movs	r0, #37	; 0x25
 8001e4a:	f001 fb85 	bl	8003558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e4e:	2025      	movs	r0, #37	; 0x25
 8001e50:	f001 fbba 	bl	80035c8 <HAL_NVIC_EnableIRQ>
}
 8001e54:	e7af      	b.n	8001db6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001e56:	f7ff fb75 	bl	8001544 <Error_Handler>
 8001e5a:	e7b7      	b.n	8001dcc <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001e5c:	f7ff fb72 	bl	8001544 <Error_Handler>
 8001e60:	e7e8      	b.n	8001e34 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001e62:	f7ff fb6f 	bl	8001544 <Error_Handler>
 8001e66:	e7ea      	b.n	8001e3e <HAL_UART_MspInit+0xaa>
 8001e68:	40004400 	.word	0x40004400
 8001e6c:	000c0004 	.word	0x000c0004
 8001e70:	200001dc 	.word	0x200001dc
 8001e74:	40020058 	.word	0x40020058

08001e78 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001e78:	6802      	ldr	r2, [r0, #0]
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_UART_MspDeInit+0x34>)
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d000      	beq.n	8001e82 <HAL_UART_MspDeInit+0xa>
 8001e80:	4770      	bx	lr
{
 8001e82:	b510      	push	{r4, lr}
 8001e84:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e8a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001e8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001e92:	210c      	movs	r1, #12
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e98:	f002 f85c 	bl	8003f54 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001e9c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001e9e:	f001 fc95 	bl	80037cc <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001ea2:	2025      	movs	r0, #37	; 0x25
 8001ea4:	f001 fb9e 	bl	80035e4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001ea8:	bd10      	pop	{r4, pc}
 8001eaa:	bf00      	nop
 8001eac:	40004400 	.word	0x40004400

08001eb0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001eb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <vcom_Init+0x20>)
 8001eb4:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001eb6:	f7ff f901 	bl	80010bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001eba:	f7ff ff37 	bl	8001d2c <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <vcom_Init+0x24>)
 8001ec0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001ec4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ec8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001ecc:	2000      	movs	r0, #0
 8001ece:	bd08      	pop	{r3, pc}
 8001ed0:	200002d4 	.word	0x200002d4
 8001ed4:	58000800 	.word	0x58000800

08001ed8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001ed8:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ee0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ee8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001eee:	4804      	ldr	r0, [pc, #16]	; (8001f00 <vcom_DeInit+0x28>)
 8001ef0:	f7ff ffc2 	bl	8001e78 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001ef4:	200f      	movs	r0, #15
 8001ef6:	f001 fb75 	bl	80035e4 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001efa:	2000      	movs	r0, #0
 8001efc:	bd08      	pop	{r3, pc}
 8001efe:	bf00      	nop
 8001f00:	2000023c 	.word	0x2000023c

08001f04 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001f04:	b508      	push	{r3, lr}
 8001f06:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001f08:	4601      	mov	r1, r0
 8001f0a:	4802      	ldr	r0, [pc, #8]	; (8001f14 <vcom_Trace_DMA+0x10>)
 8001f0c:	f003 fe56 	bl	8005bbc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001f10:	2000      	movs	r0, #0
 8001f12:	bd08      	pop	{r3, pc}
 8001f14:	2000023c 	.word	0x2000023c

08001f18 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <vcom_ReceiveInit+0x50>)
 8001f1e:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001f20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f24:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001f26:	ab02      	add	r3, sp, #8
 8001f28:	e913 0006 	ldmdb	r3, {r1, r2}
 8001f2c:	480f      	ldr	r0, [pc, #60]	; (8001f6c <vcom_ReceiveInit+0x54>)
 8001f2e:	f004 fefe 	bl	8006d2e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <vcom_ReceiveInit+0x54>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001f3c:	d1f9      	bne.n	8001f32 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001f3e:	69da      	ldr	r2, [r3, #28]
 8001f40:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001f44:	d0fb      	beq.n	8001f3e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001f4c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001f4e:	4c07      	ldr	r4, [pc, #28]	; (8001f6c <vcom_ReceiveInit+0x54>)
 8001f50:	4620      	mov	r0, r4
 8001f52:	f004 ff2d 	bl	8006db0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001f56:	2201      	movs	r2, #1
 8001f58:	4905      	ldr	r1, [pc, #20]	; (8001f70 <vcom_ReceiveInit+0x58>)
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f004 fe80 	bl	8006c60 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001f60:	2000      	movs	r0, #0
 8001f62:	b002      	add	sp, #8
 8001f64:	bd10      	pop	{r4, pc}
 8001f66:	bf00      	nop
 8001f68:	200002d0 	.word	0x200002d0
 8001f6c:	2000023c 	.word	0x2000023c
 8001f70:	200002d8 	.word	0x200002d8

08001f74 <vcom_Resume>:

void vcom_Resume(void)
{
 8001f74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f76:	4807      	ldr	r0, [pc, #28]	; (8001f94 <vcom_Resume+0x20>)
 8001f78:	f004 fda0 	bl	8006abc <HAL_UART_Init>
 8001f7c:	b920      	cbnz	r0, 8001f88 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f7e:	4806      	ldr	r0, [pc, #24]	; (8001f98 <vcom_Resume+0x24>)
 8001f80:	f001 fbb2 	bl	80036e8 <HAL_DMA_Init>
 8001f84:	b918      	cbnz	r0, 8001f8e <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001f86:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f88:	f7ff fadc 	bl	8001544 <Error_Handler>
 8001f8c:	e7f7      	b.n	8001f7e <vcom_Resume+0xa>
    Error_Handler();
 8001f8e:	f7ff fad9 	bl	8001544 <Error_Handler>
}
 8001f92:	e7f8      	b.n	8001f86 <vcom_Resume+0x12>
 8001f94:	2000023c 	.word	0x2000023c
 8001f98:	200001dc 	.word	0x200001dc

08001f9c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001f9e:	6802      	ldr	r2, [r0, #0]
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_UART_TxCpltCallback+0x18>)
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d000      	beq.n	8001fa8 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001fa6:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <HAL_UART_TxCpltCallback+0x1c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2000      	movs	r0, #0
 8001fae:	4798      	blx	r3
}
 8001fb0:	e7f9      	b.n	8001fa6 <HAL_UART_TxCpltCallback+0xa>
 8001fb2:	bf00      	nop
 8001fb4:	40004400 	.word	0x40004400
 8001fb8:	200002d4 	.word	0x200002d4

08001fbc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001fbc:	6802      	ldr	r2, [r0, #0]
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_UART_RxCpltCallback+0x3c>)
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d000      	beq.n	8001fc6 <HAL_UART_RxCpltCallback+0xa>
 8001fc4:	4770      	bx	lr
{
 8001fc6:	b510      	push	{r4, lr}
 8001fc8:	4604      	mov	r4, r0
  {
	  uartReady = GPIO_PIN_SET;
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_UART_RxCpltCallback+0x40>)
 8001fce:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd4:	480a      	ldr	r0, [pc, #40]	; (8002000 <HAL_UART_RxCpltCallback+0x44>)
 8001fd6:	f002 f83b 	bl	8004050 <HAL_GPIO_WritePin>
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_UART_RxCpltCallback+0x48>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b12b      	cbz	r3, 8001fec <HAL_UART_RxCpltCallback+0x30>
 8001fe0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001fe4:	b912      	cbnz	r2, 8001fec <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	4807      	ldr	r0, [pc, #28]	; (8002008 <HAL_UART_RxCpltCallback+0x4c>)
 8001fea:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001fec:	2201      	movs	r2, #1
 8001fee:	4906      	ldr	r1, [pc, #24]	; (8002008 <HAL_UART_RxCpltCallback+0x4c>)
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f004 fe35 	bl	8006c60 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001ff6:	bd10      	pop	{r4, pc}
 8001ff8:	40004400 	.word	0x40004400
 8001ffc:	2000018c 	.word	0x2000018c
 8002000:	48000400 	.word	0x48000400
 8002004:	200002d0 	.word	0x200002d0
 8002008:	200002d8 	.word	0x200002d8

0800200c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800200c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800200e:	f7ff fc25 	bl	800185c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002012:	f000 fb8d 	bl	8002730 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002016:	bd08      	pop	{r3, pc}

08002018 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002018:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800201a:	f04f 30ff 	mov.w	r0, #4294967295
 800201e:	f00f fbff 	bl	8011820 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002022:	bd08      	pop	{r3, pc}

08002024 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8002024:	4770      	bx	lr
	...

08002028 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002028:	4b01      	ldr	r3, [pc, #4]	; (8002030 <OnTxFrameCtrlChanged+0x8>)
 800202a:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000058 	.word	0x20000058

08002034 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002034:	4b01      	ldr	r3, [pc, #4]	; (800203c <OnPingSlotPeriodicityChanged+0x8>)
 8002036:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000058 	.word	0x20000058

08002040 <OnBeaconStatusChange>:
  if (params != NULL)
 8002040:	2800      	cmp	r0, #0
 8002042:	d03f      	beq.n	80020c4 <OnBeaconStatusChange+0x84>
{
 8002044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002048:	b08c      	sub	sp, #48	; 0x30
 800204a:	4603      	mov	r3, r0
    switch (params->State)
 800204c:	7842      	ldrb	r2, [r0, #1]
 800204e:	2a02      	cmp	r2, #2
 8002050:	d00a      	beq.n	8002068 <OnBeaconStatusChange+0x28>
 8002052:	2a03      	cmp	r2, #3
 8002054:	d02f      	beq.n	80020b6 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <OnBeaconStatusChange+0x88>)
 8002058:	2200      	movs	r2, #0
 800205a:	4611      	mov	r1, r2
 800205c:	2002      	movs	r0, #2
 800205e:	f00f fa81 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 8002062:	b00c      	add	sp, #48	; 0x30
 8002064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002068:	7c02      	ldrb	r2, [r0, #16]
 800206a:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 800206e:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002072:	7d9c      	ldrb	r4, [r3, #22]
 8002074:	7ddd      	ldrb	r5, [r3, #23]
 8002076:	7e1e      	ldrb	r6, [r3, #24]
 8002078:	7e5f      	ldrb	r7, [r3, #25]
 800207a:	f893 c01a 	ldrb.w	ip, [r3, #26]
 800207e:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002082:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002086:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800208a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800208e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002092:	9708      	str	r7, [sp, #32]
 8002094:	9607      	str	r6, [sp, #28]
 8002096:	9506      	str	r5, [sp, #24]
 8002098:	9405      	str	r4, [sp, #20]
 800209a:	685c      	ldr	r4, [r3, #4]
 800209c:	9404      	str	r4, [sp, #16]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	9303      	str	r3, [sp, #12]
 80020a2:	9002      	str	r0, [sp, #8]
 80020a4:	9101      	str	r1, [sp, #4]
 80020a6:	9200      	str	r2, [sp, #0]
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <OnBeaconStatusChange+0x8c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	4611      	mov	r1, r2
 80020ae:	2002      	movs	r0, #2
 80020b0:	f00f fa58 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80020b4:	e7d5      	b.n	8002062 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <OnBeaconStatusChange+0x90>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	4611      	mov	r1, r2
 80020bc:	2002      	movs	r0, #2
 80020be:	f00f fa51 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 80020c2:	e7ce      	b.n	8002062 <OnBeaconStatusChange+0x22>
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	0801233c 	.word	0x0801233c
 80020cc:	08012354 	.word	0x08012354
 80020d0:	080123c8 	.word	0x080123c8

080020d4 <OnClassChange>:
{
 80020d4:	b500      	push	{lr}
 80020d6:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <OnClassChange+0x1c>)
 80020da:	5c1b      	ldrb	r3, [r3, r0]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <OnClassChange+0x20>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	4611      	mov	r1, r2
 80020e4:	2002      	movs	r0, #2
 80020e6:	f00f fa3d 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 80020ea:	b003      	add	sp, #12
 80020ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80020f0:	08012404 	.word	0x08012404
 80020f4:	080123e8 	.word	0x080123e8

080020f8 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80020f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80020fa:	2801      	cmp	r0, #1
 80020fc:	d006      	beq.n	800210c <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <OnNvmDataChange+0x24>)
 8002100:	2200      	movs	r2, #0
 8002102:	4611      	mov	r1, r2
 8002104:	2002      	movs	r0, #2
 8002106:	f00f fa2d 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800210a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <OnNvmDataChange+0x28>)
 800210e:	2200      	movs	r2, #0
 8002110:	4611      	mov	r1, r2
 8002112:	2002      	movs	r0, #2
 8002114:	f00f fa26 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
 8002118:	e7f7      	b.n	800210a <OnNvmDataChange+0x12>
 800211a:	bf00      	nop
 800211c:	0801241c 	.word	0x0801241c
 8002120:	08012408 	.word	0x08012408

08002124 <OnTxTimerEvent>:
{
 8002124:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002126:	2100      	movs	r1, #0
 8002128:	2002      	movs	r0, #2
 800212a:	f00f fb45 	bl	80117b8 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 800212e:	4802      	ldr	r0, [pc, #8]	; (8002138 <OnTxTimerEvent+0x14>)
 8002130:	f00f fdc6 	bl	8011cc0 <UTIL_TIMER_Start>
}
 8002134:	bd08      	pop	{r3, pc}
 8002136:	bf00      	nop
 8002138:	20000430 	.word	0x20000430

0800213c <OnMacProcessNotify>:
{
 800213c:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800213e:	2100      	movs	r1, #0
 8002140:	2001      	movs	r0, #1
 8002142:	f00f fb39 	bl	80117b8 <UTIL_SEQ_SetTask>
}
 8002146:	bd08      	pop	{r3, pc}

08002148 <OnSystemReset>:
{
 8002148:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800214a:	f005 fb6f 	bl	800782c <LmHandlerHalt>
 800214e:	b100      	cbz	r0, 8002152 <OnSystemReset+0xa>
}
 8002150:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002152:	f005 f829 	bl	80071a8 <LmHandlerJoinStatus>
 8002156:	2801      	cmp	r0, #1
 8002158:	d1fa      	bne.n	8002150 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800215a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800215e:	4905      	ldr	r1, [pc, #20]	; (8002174 <OnSystemReset+0x2c>)
 8002160:	68ca      	ldr	r2, [r1, #12]
 8002162:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <OnSystemReset+0x30>)
 8002168:	4313      	orrs	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
 800216c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002170:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002172:	e7fd      	b.n	8002170 <OnSystemReset+0x28>
 8002174:	e000ed00 	.word	0xe000ed00
 8002178:	05fa0004 	.word	0x05fa0004

0800217c <OnTxPeriodicityChanged>:
{
 800217c:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <OnTxPeriodicityChanged+0x28>)
 8002180:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002182:	b910      	cbnz	r0, 800218a <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002184:	f242 7210 	movw	r2, #10000	; 0x2710
 8002188:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800218a:	4c07      	ldr	r4, [pc, #28]	; (80021a8 <OnTxPeriodicityChanged+0x2c>)
 800218c:	4620      	mov	r0, r4
 800218e:	f00f fd3d 	bl	8011c0c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <OnTxPeriodicityChanged+0x28>)
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	4620      	mov	r0, r4
 8002198:	f00f fdd8 	bl	8011d4c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800219c:	4620      	mov	r0, r4
 800219e:	f00f fd8f 	bl	8011cc0 <UTIL_TIMER_Start>
}
 80021a2:	bd10      	pop	{r4, pc}
 80021a4:	20000070 	.word	0x20000070
 80021a8:	20000430 	.word	0x20000430

080021ac <OnTxData>:
  if ((params != NULL))
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d042      	beq.n	8002236 <OnTxData+0x8a>
{
 80021b0:	b510      	push	{r4, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 80021b6:	7803      	ldrb	r3, [r0, #0]
 80021b8:	b90b      	cbnz	r3, 80021be <OnTxData+0x12>
}
 80021ba:	b004      	add	sp, #16
 80021bc:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021c4:	481c      	ldr	r0, [pc, #112]	; (8002238 <OnTxData+0x8c>)
 80021c6:	f001 ff43 	bl	8004050 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 80021ca:	481c      	ldr	r0, [pc, #112]	; (800223c <OnTxData+0x90>)
 80021cc:	f00f fd78 	bl	8011cc0 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <OnTxData+0x94>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	4611      	mov	r1, r2
 80021d6:	2002      	movs	r0, #2
 80021d8:	f00f f9c4 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80021dc:	7c23      	ldrb	r3, [r4, #16]
 80021de:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80021e2:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80021e6:	9103      	str	r1, [sp, #12]
 80021e8:	9202      	str	r2, [sp, #8]
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	68e3      	ldr	r3, [r4, #12]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <OnTxData+0x98>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	4611      	mov	r1, r2
 80021f6:	2003      	movs	r0, #3
 80021f8:	f00f f9b4 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <OnTxData+0x9c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	4611      	mov	r1, r2
 8002202:	2003      	movs	r0, #3
 8002204:	f00f f9ae 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8002208:	7a23      	ldrb	r3, [r4, #8]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d10c      	bne.n	8002228 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800220e:	7a63      	ldrb	r3, [r4, #9]
 8002210:	b143      	cbz	r3, 8002224 <OnTxData+0x78>
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <OnTxData+0xa0>)
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <OnTxData+0xa4>)
 8002218:	2200      	movs	r2, #0
 800221a:	4611      	mov	r1, r2
 800221c:	2003      	movs	r0, #3
 800221e:	f00f f9a1 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
 8002222:	e7ca      	b.n	80021ba <OnTxData+0xe>
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <OnTxData+0xa8>)
 8002226:	e7f5      	b.n	8002214 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <OnTxData+0xac>)
 800222a:	2200      	movs	r2, #0
 800222c:	4611      	mov	r1, r2
 800222e:	2003      	movs	r0, #3
 8002230:	f00f f998 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 8002234:	e7c1      	b.n	80021ba <OnTxData+0xe>
 8002236:	4770      	bx	lr
 8002238:	48000400 	.word	0x48000400
 800223c:	20000418 	.word	0x20000418
 8002240:	0801243c 	.word	0x0801243c
 8002244:	08012470 	.word	0x08012470
 8002248:	080124a4 	.word	0x080124a4
 800224c:	08012438 	.word	0x08012438
 8002250:	080124b4 	.word	0x080124b4
 8002254:	08012430 	.word	0x08012430
 8002258:	080124c8 	.word	0x080124c8

0800225c <OnJoinRequest>:
  if (joinParams != NULL)
 800225c:	2800      	cmp	r0, #0
 800225e:	d039      	beq.n	80022d4 <OnJoinRequest+0x78>
{
 8002260:	b510      	push	{r4, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002266:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800226a:	b9fb      	cbnz	r3, 80022ac <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800226c:	481a      	ldr	r0, [pc, #104]	; (80022d8 <OnJoinRequest+0x7c>)
 800226e:	f00f fccd 	bl	8011c0c <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002272:	2200      	movs	r2, #0
 8002274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002278:	4818      	ldr	r0, [pc, #96]	; (80022dc <OnJoinRequest+0x80>)
 800227a:	f001 fee9 	bl	8004050 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <OnJoinRequest+0x84>)
 8002280:	2200      	movs	r2, #0
 8002282:	4611      	mov	r1, r2
 8002284:	2002      	movs	r0, #2
 8002286:	f00f f96d 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800228a:	79e3      	ldrb	r3, [r4, #7]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d006      	beq.n	800229e <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <OnJoinRequest+0x88>)
 8002292:	2200      	movs	r2, #0
 8002294:	4611      	mov	r1, r2
 8002296:	2002      	movs	r0, #2
 8002298:	f00f f964 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
 800229c:	e00c      	b.n	80022b8 <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <OnJoinRequest+0x8c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	4611      	mov	r1, r2
 80022a4:	2002      	movs	r0, #2
 80022a6:	f00f f95d 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
 80022aa:	e005      	b.n	80022b8 <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <OnJoinRequest+0x90>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	4611      	mov	r1, r2
 80022b2:	2002      	movs	r0, #2
 80022b4:	f00f f956 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 80022b8:	f994 3004 	ldrsb.w	r3, [r4, #4]
 80022bc:	f994 2005 	ldrsb.w	r2, [r4, #5]
 80022c0:	9201      	str	r2, [sp, #4]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <OnJoinRequest+0x94>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	4611      	mov	r1, r2
 80022ca:	2003      	movs	r0, #3
 80022cc:	f00f f94a 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 80022d0:	b002      	add	sp, #8
 80022d2:	bd10      	pop	{r4, pc}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	200003d0 	.word	0x200003d0
 80022dc:	48000400 	.word	0x48000400
 80022e0:	080124d8 	.word	0x080124d8
 80022e4:	08012510 	.word	0x08012510
 80022e8:	080124f0 	.word	0x080124f0
 80022ec:	08012530 	.word	0x08012530
 80022f0:	0801254c 	.word	0x0801254c

080022f4 <OnStopJoinTimerEvent>:
{
 80022f4:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <OnStopJoinTimerEvent+0x3c>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d013      	beq.n	8002326 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80022fe:	4c0d      	ldr	r4, [pc, #52]	; (8002334 <OnStopJoinTimerEvent+0x40>)
 8002300:	2200      	movs	r2, #0
 8002302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002306:	4620      	mov	r0, r4
 8002308:	f001 fea2 	bl	8004050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800230c:	2200      	movs	r2, #0
 800230e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002312:	4620      	mov	r0, r4
 8002314:	f001 fe9c 	bl	8004050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002318:	2200      	movs	r2, #0
 800231a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800231e:	4620      	mov	r0, r4
 8002320:	f001 fe96 	bl	8004050 <HAL_GPIO_WritePin>
}
 8002324:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002326:	2100      	movs	r1, #0
 8002328:	2008      	movs	r0, #8
 800232a:	f00f fa45 	bl	80117b8 <UTIL_SEQ_SetTask>
 800232e:	e7e6      	b.n	80022fe <OnStopJoinTimerEvent+0xa>
 8002330:	20000000 	.word	0x20000000
 8002334:	48000400 	.word	0x48000400

08002338 <OnRxTimerLedEvent>:
{
 8002338:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800233a:	2200      	movs	r2, #0
 800233c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002340:	4801      	ldr	r0, [pc, #4]	; (8002348 <OnRxTimerLedEvent+0x10>)
 8002342:	f001 fe85 	bl	8004050 <HAL_GPIO_WritePin>
}
 8002346:	bd08      	pop	{r3, pc}
 8002348:	48000400 	.word	0x48000400

0800234c <OnTxTimerLedEvent>:
{
 800234c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002354:	4801      	ldr	r0, [pc, #4]	; (800235c <OnTxTimerLedEvent+0x10>)
 8002356:	f001 fe7b 	bl	8004050 <HAL_GPIO_WritePin>
}
 800235a:	bd08      	pop	{r3, pc}
 800235c:	48000400 	.word	0x48000400

08002360 <OnRxData>:
  if (params != NULL)
 8002360:	2900      	cmp	r1, #0
 8002362:	d06e      	beq.n	8002442 <OnRxData+0xe2>
{
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	4604      	mov	r4, r0
 800236a:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800236c:	2201      	movs	r2, #1
 800236e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002372:	4834      	ldr	r0, [pc, #208]	; (8002444 <OnRxData+0xe4>)
 8002374:	f001 fe6c 	bl	8004050 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002378:	4833      	ldr	r0, [pc, #204]	; (8002448 <OnRxData+0xe8>)
 800237a:	f00f fca1 	bl	8011cc0 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 800237e:	782e      	ldrb	r6, [r5, #0]
 8002380:	2e00      	cmp	r6, #0
 8002382:	d042      	beq.n	800240a <OnRxData+0xaa>
      if (appData != NULL)
 8002384:	2c00      	cmp	r4, #0
 8002386:	d03f      	beq.n	8002408 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002388:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800238a:	6863      	ldr	r3, [r4, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d03c      	beq.n	800240a <OnRxData+0xaa>
          switch (appData->Port)
 8002390:	2e02      	cmp	r6, #2
 8002392:	d016      	beq.n	80023c2 <OnRxData+0x62>
 8002394:	2e03      	cmp	r6, #3
 8002396:	d138      	bne.n	800240a <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002398:	7862      	ldrb	r2, [r4, #1]
 800239a:	2a01      	cmp	r2, #1
 800239c:	d135      	bne.n	800240a <OnRxData+0xaa>
                switch (appData->Buffer[0])
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d006      	beq.n	80023b2 <OnRxData+0x52>
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d008      	beq.n	80023ba <OnRxData+0x5a>
 80023a8:	bb7b      	cbnz	r3, 800240a <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f004 ffce 	bl	800734c <LmHandlerRequestClass>
                    break;
 80023b0:	e02b      	b.n	800240a <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f004 ffca 	bl	800734c <LmHandlerRequestClass>
                    break;
 80023b8:	e027      	b.n	800240a <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 80023ba:	2002      	movs	r0, #2
 80023bc:	f004 ffc6 	bl	800734c <LmHandlerRequestClass>
                    break;
 80023c0:	e023      	b.n	800240a <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 80023c2:	7862      	ldrb	r2, [r4, #1]
 80023c4:	2a01      	cmp	r2, #1
 80023c6:	d120      	bne.n	800240a <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	4a1f      	ldr	r2, [pc, #124]	; (800244c <OnRxData+0xec>)
 80023d0:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 80023d2:	b963      	cbnz	r3, 80023ee <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 80023d4:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <OnRxData+0xf0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	4611      	mov	r1, r2
 80023da:	2003      	movs	r0, #3
 80023dc:	f00f f8c2 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80023e0:	2200      	movs	r2, #0
 80023e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023e6:	4817      	ldr	r0, [pc, #92]	; (8002444 <OnRxData+0xe4>)
 80023e8:	f001 fe32 	bl	8004050 <HAL_GPIO_WritePin>
 80023ec:	e00d      	b.n	800240a <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <OnRxData+0xf4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	4611      	mov	r1, r2
 80023f4:	2003      	movs	r0, #3
 80023f6:	f00f f8b5 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80023fa:	2201      	movs	r2, #1
 80023fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002400:	4810      	ldr	r0, [pc, #64]	; (8002444 <OnRxData+0xe4>)
 8002402:	f001 fe25 	bl	8004050 <HAL_GPIO_WritePin>
 8002406:	e000      	b.n	800240a <OnRxData+0xaa>
  uint8_t RxPort = 0;
 8002408:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 800240a:	7c2b      	ldrb	r3, [r5, #16]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d901      	bls.n	8002414 <OnRxData+0xb4>
}
 8002410:	b006      	add	sp, #24
 8002412:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002414:	f995 2008 	ldrsb.w	r2, [r5, #8]
 8002418:	f995 1009 	ldrsb.w	r1, [r5, #9]
 800241c:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002420:	9005      	str	r0, [sp, #20]
 8002422:	9104      	str	r1, [sp, #16]
 8002424:	490c      	ldr	r1, [pc, #48]	; (8002458 <OnRxData+0xf8>)
 8002426:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800242a:	9303      	str	r3, [sp, #12]
 800242c:	9202      	str	r2, [sp, #8]
 800242e:	9601      	str	r6, [sp, #4]
 8002430:	68eb      	ldr	r3, [r5, #12]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <OnRxData+0xfc>)
 8002436:	2200      	movs	r2, #0
 8002438:	4611      	mov	r1, r2
 800243a:	2003      	movs	r0, #3
 800243c:	f00f f892 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 8002440:	e7e6      	b.n	8002410 <OnRxData+0xb0>
 8002442:	4770      	bx	lr
 8002444:	48000400 	.word	0x48000400
 8002448:	200003e8 	.word	0x200003e8
 800244c:	200003ce 	.word	0x200003ce
 8002450:	08012578 	.word	0x08012578
 8002454:	08012584 	.word	0x08012584
 8002458:	08012778 	.word	0x08012778
 800245c:	08012590 	.word	0x08012590

08002460 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	4604      	mov	r4, r0
 8002464:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 8002466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <OnStoreContextRequest+0x20>)
 800246c:	f7fe ffd6 	bl	800141c <FLASH_IF_Erase>
 8002470:	b100      	cbz	r0, 8002474 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002472:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8002474:	462a      	mov	r2, r5
 8002476:	4621      	mov	r1, r4
 8002478:	4801      	ldr	r0, [pc, #4]	; (8002480 <OnStoreContextRequest+0x20>)
 800247a:	f7fe ff97 	bl	80013ac <FLASH_IF_Write>
}
 800247e:	e7f8      	b.n	8002472 <OnStoreContextRequest+0x12>
 8002480:	0803f000 	.word	0x0803f000

08002484 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002484:	b508      	push	{r3, lr}
 8002486:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002488:	4901      	ldr	r1, [pc, #4]	; (8002490 <OnRestoreContextRequest+0xc>)
 800248a:	f7fe ffab 	bl	80013e4 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800248e:	bd08      	pop	{r3, pc}
 8002490:	0803f000 	.word	0x0803f000

08002494 <StopJoin>:
{
 8002494:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002496:	4c1e      	ldr	r4, [pc, #120]	; (8002510 <StopJoin+0x7c>)
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800249e:	4620      	mov	r0, r4
 80024a0:	f001 fdd6 	bl	8004050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024aa:	4620      	mov	r0, r4
 80024ac:	f001 fdd0 	bl	8004050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024b6:	4620      	mov	r0, r4
 80024b8:	f001 fdca 	bl	8004050 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80024bc:	4815      	ldr	r0, [pc, #84]	; (8002514 <StopJoin+0x80>)
 80024be:	f00f fba5 	bl	8011c0c <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80024c2:	f005 f9ab 	bl	800781c <LmHandlerStop>
 80024c6:	b148      	cbz	r0, 80024dc <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <StopJoin+0x84>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	4611      	mov	r1, r2
 80024ce:	2002      	movs	r0, #2
 80024d0:	f00f f848 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80024d4:	4811      	ldr	r0, [pc, #68]	; (800251c <StopJoin+0x88>)
 80024d6:	f00f fbf3 	bl	8011cc0 <UTIL_TIMER_Start>
}
 80024da:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <StopJoin+0x8c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	4611      	mov	r1, r2
 80024e2:	2002      	movs	r0, #2
 80024e4:	f00f f83e 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80024e8:	4c0e      	ldr	r4, [pc, #56]	; (8002524 <StopJoin+0x90>)
 80024ea:	2501      	movs	r5, #1
 80024ec:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80024ee:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <StopJoin+0x94>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	4611      	mov	r1, r2
 80024f4:	2002      	movs	r0, #2
 80024f6:	f00f f835 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80024fa:	480c      	ldr	r0, [pc, #48]	; (800252c <StopJoin+0x98>)
 80024fc:	f005 f806 	bl	800750c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002500:	4629      	mov	r1, r5
 8002502:	7820      	ldrb	r0, [r4, #0]
 8002504:	f004 fdbe 	bl	8007084 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <StopJoin+0x80>)
 800250a:	f00f fbd9 	bl	8011cc0 <UTIL_TIMER_Start>
 800250e:	e7e1      	b.n	80024d4 <StopJoin+0x40>
 8002510:	48000400 	.word	0x48000400
 8002514:	20000430 	.word	0x20000430
 8002518:	080125d8 	.word	0x080125d8
 800251c:	20000400 	.word	0x20000400
 8002520:	080125f8 	.word	0x080125f8
 8002524:	20000000 	.word	0x20000000
 8002528:	0801260c 	.word	0x0801260c
 800252c:	20000058 	.word	0x20000058

08002530 <StoreContext>:
{
 8002530:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002532:	f005 fa05 	bl	8007940 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8002536:	f110 0f08 	cmn.w	r0, #8
 800253a:	d003      	beq.n	8002544 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 800253c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002540:	d007      	beq.n	8002552 <StoreContext+0x22>
}
 8002542:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <StoreContext+0x30>)
 8002546:	2200      	movs	r2, #0
 8002548:	4611      	mov	r1, r2
 800254a:	2002      	movs	r0, #2
 800254c:	f00f f80a 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
 8002550:	e7f7      	b.n	8002542 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002552:	4b04      	ldr	r3, [pc, #16]	; (8002564 <StoreContext+0x34>)
 8002554:	2200      	movs	r2, #0
 8002556:	4611      	mov	r1, r2
 8002558:	2002      	movs	r0, #2
 800255a:	f00f f803 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 800255e:	e7f0      	b.n	8002542 <StoreContext+0x12>
 8002560:	0801262c 	.word	0x0801262c
 8002564:	08012644 	.word	0x08012644

08002568 <SendTxData>:
{
 8002568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256a:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 800256c:	f7ff f9a6 	bl	80018bc <GetBatteryLevel>
 8002570:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 8002572:	f004 fe2b 	bl	80071cc <LmHandlerIsBusy>
 8002576:	b188      	cbz	r0, 800259c <SendTxData+0x34>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002578:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 800257a:	4c5a      	ldr	r4, [pc, #360]	; (80026e4 <SendTxData+0x17c>)
 800257c:	4620      	mov	r0, r4
 800257e:	f00f fb45 	bl	8011c0c <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002582:	4b59      	ldr	r3, [pc, #356]	; (80026e8 <SendTxData+0x180>)
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	42a9      	cmp	r1, r5
 8002588:	bf38      	it	cc
 800258a:	4629      	movcc	r1, r5
 800258c:	4620      	mov	r0, r4
 800258e:	f00f fbdd 	bl	8011d4c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002592:	4620      	mov	r0, r4
 8002594:	f00f fb94 	bl	8011cc0 <UTIL_TIMER_Start>
}
 8002598:	b009      	add	sp, #36	; 0x24
 800259a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EnvSensors_Read(&sensor_data);
 800259c:	a802      	add	r0, sp, #8
 800259e:	f7ff fa6b 	bl	8001a78 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 80025a2:	9400      	str	r4, [sp, #0]
 80025a4:	4b51      	ldr	r3, [pc, #324]	; (80026ec <SendTxData+0x184>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	2100      	movs	r1, #0
 80025aa:	2002      	movs	r0, #2
 80025ac:	f00e ffda 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 80025b0:	9803      	ldr	r0, [sp, #12]
 80025b2:	f7fe fab3 	bl	8000b1c <__aeabi_f2iz>
 80025b6:	b200      	sxth	r0, r0
 80025b8:	9000      	str	r0, [sp, #0]
 80025ba:	4b4d      	ldr	r3, [pc, #308]	; (80026f0 <SendTxData+0x188>)
 80025bc:	2201      	movs	r2, #1
 80025be:	2100      	movs	r1, #0
 80025c0:	2002      	movs	r0, #2
 80025c2:	f00e ffcf 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 80025c6:	4c4b      	ldr	r4, [pc, #300]	; (80026f4 <SendTxData+0x18c>)
 80025c8:	2302      	movs	r3, #2
 80025ca:	7023      	strb	r3, [r4, #0]
    humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 80025cc:	494a      	ldr	r1, [pc, #296]	; (80026f8 <SendTxData+0x190>)
 80025ce:	9804      	ldr	r0, [sp, #16]
 80025d0:	f7fe f954 	bl	800087c <__aeabi_fmul>
 80025d4:	f7fe fac8 	bl	8000b68 <__aeabi_f2uiz>
 80025d8:	b285      	uxth	r5, r0
    temperature = (int16_t)(sensor_data.temperature);
 80025da:	9803      	ldr	r0, [sp, #12]
 80025dc:	f7fe fa9e 	bl	8000b1c <__aeabi_f2iz>
 80025e0:	b206      	sxth	r6, r0
    pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 80025e2:	4946      	ldr	r1, [pc, #280]	; (80026fc <SendTxData+0x194>)
 80025e4:	9802      	ldr	r0, [sp, #8]
 80025e6:	f7fe f949 	bl	800087c <__aeabi_fmul>
 80025ea:	4943      	ldr	r1, [pc, #268]	; (80026f8 <SendTxData+0x190>)
 80025ec:	f7fe f9fa 	bl	80009e4 <__aeabi_fdiv>
 80025f0:	f7fe faba 	bl	8000b68 <__aeabi_f2uiz>
    AppData.Buffer[i++] = AppLedStateOn;
 80025f4:	6863      	ldr	r3, [r4, #4]
 80025f6:	4a42      	ldr	r2, [pc, #264]	; (8002700 <SendTxData+0x198>)
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 80025fc:	6863      	ldr	r3, [r4, #4]
 80025fe:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8002602:	705a      	strb	r2, [r3, #1]
    AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8002604:	6863      	ldr	r3, [r4, #4]
 8002606:	7098      	strb	r0, [r3, #2]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8002608:	6863      	ldr	r3, [r4, #4]
 800260a:	70de      	strb	r6, [r3, #3]
    AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800260c:	6863      	ldr	r3, [r4, #4]
 800260e:	0a2a      	lsrs	r2, r5, #8
 8002610:	711a      	strb	r2, [r3, #4]
    AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8002612:	6863      	ldr	r3, [r4, #4]
 8002614:	715d      	strb	r5, [r3, #5]
    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <SendTxData+0x19c>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b08      	cmp	r3, #8
 800261c:	d002      	beq.n	8002624 <SendTxData+0xbc>
 800261e:	2b01      	cmp	r3, #1
 8002620:	d000      	beq.n	8002624 <SendTxData+0xbc>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8002622:	b9d3      	cbnz	r3, 800265a <SendTxData+0xf2>
      AppData.Buffer[i++] = 0;
 8002624:	4a33      	ldr	r2, [pc, #204]	; (80026f4 <SendTxData+0x18c>)
 8002626:	6851      	ldr	r1, [r2, #4]
 8002628:	2300      	movs	r3, #0
 800262a:	718b      	strb	r3, [r1, #6]
      AppData.Buffer[i++] = 0;
 800262c:	6851      	ldr	r1, [r2, #4]
 800262e:	71cb      	strb	r3, [r1, #7]
      AppData.Buffer[i++] = 0;
 8002630:	6852      	ldr	r2, [r2, #4]
 8002632:	7213      	strb	r3, [r2, #8]
      AppData.Buffer[i++] = 0;
 8002634:	7253      	strb	r3, [r2, #9]
 8002636:	220a      	movs	r2, #10
    AppData.BufferSize = i;
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <SendTxData+0x18c>)
 800263a:	705a      	strb	r2, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800263c:	4b32      	ldr	r3, [pc, #200]	; (8002708 <SendTxData+0x1a0>)
 800263e:	7a5b      	ldrb	r3, [r3, #9]
 8002640:	bb3b      	cbnz	r3, 8002692 <SendTxData+0x12a>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002642:	2200      	movs	r2, #0
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <SendTxData+0x19c>)
 8002646:	78d9      	ldrb	r1, [r3, #3]
 8002648:	482a      	ldr	r0, [pc, #168]	; (80026f4 <SendTxData+0x18c>)
 800264a:	f004 fdd5 	bl	80071f8 <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 800264e:	b370      	cbz	r0, 80026ae <SendTxData+0x146>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002650:	f110 0f06 	cmn.w	r0, #6
 8002654:	d033      	beq.n	80026be <SendTxData+0x156>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002656:	2500      	movs	r5, #0
 8002658:	e78f      	b.n	800257a <SendTxData+0x12>
      latitude = sensor_data.latitude;
 800265a:	9d05      	ldr	r5, [sp, #20]
      longitude = sensor_data.longitude;
 800265c:	9c06      	ldr	r4, [sp, #24]
      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800265e:	4e25      	ldr	r6, [pc, #148]	; (80026f4 <SendTxData+0x18c>)
 8002660:	6877      	ldr	r7, [r6, #4]
 8002662:	f7ff f92b 	bl	80018bc <GetBatteryLevel>
 8002666:	71b8      	strb	r0, [r7, #6]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002668:	6873      	ldr	r3, [r6, #4]
 800266a:	f3c5 4207 	ubfx	r2, r5, #16, #8
 800266e:	71da      	strb	r2, [r3, #7]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002670:	6873      	ldr	r3, [r6, #4]
 8002672:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002676:	721a      	strb	r2, [r3, #8]
      AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002678:	725d      	strb	r5, [r3, #9]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800267a:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800267e:	729a      	strb	r2, [r3, #10]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002680:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002684:	72da      	strb	r2, [r3, #11]
      AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002686:	731c      	strb	r4, [r3, #12]
      AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002688:	2200      	movs	r2, #0
 800268a:	735a      	strb	r2, [r3, #13]
      AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800268c:	739a      	strb	r2, [r3, #14]
 800268e:	220f      	movs	r2, #15
 8002690:	e7d2      	b.n	8002638 <SendTxData+0xd0>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002692:	f004 fd89 	bl	80071a8 <LmHandlerJoinStatus>
 8002696:	2801      	cmp	r0, #1
 8002698:	d1d3      	bne.n	8002642 <SendTxData+0xda>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800269a:	481b      	ldr	r0, [pc, #108]	; (8002708 <SendTxData+0x1a0>)
 800269c:	f00f fab6 	bl	8011c0c <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80026a0:	2200      	movs	r2, #0
 80026a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026a6:	4819      	ldr	r0, [pc, #100]	; (800270c <SendTxData+0x1a4>)
 80026a8:	f001 fcd2 	bl	8004050 <HAL_GPIO_WritePin>
 80026ac:	e7c9      	b.n	8002642 <SendTxData+0xda>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <SendTxData+0x1a8>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	2100      	movs	r1, #0
 80026b4:	4610      	mov	r0, r2
 80026b6:	f00e ff55 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 80026ba:	2500      	movs	r5, #0
 80026bc:	e75d      	b.n	800257a <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 80026be:	f004 fd6d 	bl	800719c <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 80026c2:	4605      	mov	r5, r0
 80026c4:	2800      	cmp	r0, #0
 80026c6:	f43f af58 	beq.w	800257a <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <SendTxData+0x1ac>)
 80026cc:	fba3 2300 	umull	r2, r3, r3, r0
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <SendTxData+0x1b0>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	2100      	movs	r1, #0
 80026da:	4610      	mov	r0, r2
 80026dc:	f00e ff42 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
 80026e0:	e74b      	b.n	800257a <SendTxData+0x12>
 80026e2:	bf00      	nop
 80026e4:	20000430 	.word	0x20000430
 80026e8:	20000070 	.word	0x20000070
 80026ec:	0801265c 	.word	0x0801265c
 80026f0:	08012668 	.word	0x08012668
 80026f4:	20000004 	.word	0x20000004
 80026f8:	41200000 	.word	0x41200000
 80026fc:	42c80000 	.word	0x42c80000
 8002700:	200003ce 	.word	0x200003ce
 8002704:	20000058 	.word	0x20000058
 8002708:	200003d0 	.word	0x200003d0
 800270c:	48000400 	.word	0x48000400
 8002710:	08012674 	.word	0x08012674
 8002714:	10624dd3 	.word	0x10624dd3
 8002718:	08012684 	.word	0x08012684

0800271c <OnJoinTimerLedEvent>:
{
 800271c:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800271e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002722:	4802      	ldr	r0, [pc, #8]	; (800272c <OnJoinTimerLedEvent+0x10>)
 8002724:	f001 fc99 	bl	800405a <HAL_GPIO_TogglePin>
}
 8002728:	bd08      	pop	{r3, pc}
 800272a:	bf00      	nop
 800272c:	48000400 	.word	0x48000400

08002730 <LoRaWAN_Init>:
{
 8002730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002732:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8002734:	2400      	movs	r4, #0
 8002736:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002738:	9402      	str	r4, [sp, #8]
 800273a:	2703      	movs	r7, #3
 800273c:	9701      	str	r7, [sp, #4]
 800273e:	2601      	movs	r6, #1
 8002740:	9600      	str	r6, [sp, #0]
 8002742:	4b4f      	ldr	r3, [pc, #316]	; (8002880 <LoRaWAN_Init+0x150>)
 8002744:	4622      	mov	r2, r4
 8002746:	4621      	mov	r1, r4
 8002748:	2002      	movs	r0, #2
 800274a:	f00e ff0b 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800274e:	9402      	str	r4, [sp, #8]
 8002750:	2305      	movs	r3, #5
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	2502      	movs	r5, #2
 8002756:	9500      	str	r5, [sp, #0]
 8002758:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <LoRaWAN_Init+0x154>)
 800275a:	4622      	mov	r2, r4
 800275c:	4621      	mov	r1, r4
 800275e:	4628      	mov	r0, r5
 8002760:	f00e ff00 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002764:	9402      	str	r4, [sp, #8]
 8002766:	9701      	str	r7, [sp, #4]
 8002768:	9600      	str	r6, [sp, #0]
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <LoRaWAN_Init+0x158>)
 800276c:	4622      	mov	r2, r4
 800276e:	4621      	mov	r1, r4
 8002770:	4628      	mov	r0, r5
 8002772:	f00e fef7 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002776:	a905      	add	r1, sp, #20
 8002778:	4620      	mov	r0, r4
 800277a:	f005 f839 	bl	80077f0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800277e:	9b05      	ldr	r3, [sp, #20]
 8002780:	0e1a      	lsrs	r2, r3, #24
 8002782:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002786:	9102      	str	r1, [sp, #8]
 8002788:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	9200      	str	r2, [sp, #0]
 8002790:	4b3e      	ldr	r3, [pc, #248]	; (800288c <LoRaWAN_Init+0x15c>)
 8002792:	4622      	mov	r2, r4
 8002794:	4621      	mov	r1, r4
 8002796:	4628      	mov	r0, r5
 8002798:	f00e fee4 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800279c:	a905      	add	r1, sp, #20
 800279e:	4630      	mov	r0, r6
 80027a0:	f005 f826 	bl	80077f0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 80027a4:	9b05      	ldr	r3, [sp, #20]
 80027a6:	0e1a      	lsrs	r2, r3, #24
 80027a8:	b2d9      	uxtb	r1, r3
 80027aa:	9103      	str	r1, [sp, #12]
 80027ac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80027b0:	9102      	str	r1, [sp, #8]
 80027b2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	9200      	str	r2, [sp, #0]
 80027ba:	4b35      	ldr	r3, [pc, #212]	; (8002890 <LoRaWAN_Init+0x160>)
 80027bc:	4622      	mov	r2, r4
 80027be:	4621      	mov	r1, r4
 80027c0:	4628      	mov	r0, r5
 80027c2:	f00e fecf 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 80027c6:	9400      	str	r4, [sp, #0]
 80027c8:	4b32      	ldr	r3, [pc, #200]	; (8002894 <LoRaWAN_Init+0x164>)
 80027ca:	4622      	mov	r2, r4
 80027cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027d0:	4831      	ldr	r0, [pc, #196]	; (8002898 <LoRaWAN_Init+0x168>)
 80027d2:	f00f f9bd 	bl	8011b50 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80027d6:	9400      	str	r4, [sp, #0]
 80027d8:	4b30      	ldr	r3, [pc, #192]	; (800289c <LoRaWAN_Init+0x16c>)
 80027da:	4622      	mov	r2, r4
 80027dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027e0:	482f      	ldr	r0, [pc, #188]	; (80028a0 <LoRaWAN_Init+0x170>)
 80027e2:	f00f f9b5 	bl	8011b50 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80027e6:	9400      	str	r4, [sp, #0]
 80027e8:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <LoRaWAN_Init+0x174>)
 80027ea:	4632      	mov	r2, r6
 80027ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027f0:	482d      	ldr	r0, [pc, #180]	; (80028a8 <LoRaWAN_Init+0x178>)
 80027f2:	f00f f9ad 	bl	8011b50 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7fe fdd2 	bl	80013a0 <FLASH_IF_Init>
 80027fc:	2800      	cmp	r0, #0
 80027fe:	d13b      	bne.n	8002878 <LoRaWAN_Init+0x148>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002800:	2400      	movs	r4, #0
 8002802:	9400      	str	r4, [sp, #0]
 8002804:	4b29      	ldr	r3, [pc, #164]	; (80028ac <LoRaWAN_Init+0x17c>)
 8002806:	4622      	mov	r2, r4
 8002808:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800280c:	4828      	ldr	r0, [pc, #160]	; (80028b0 <LoRaWAN_Init+0x180>)
 800280e:	f00f f99f 	bl	8011b50 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002812:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <LoRaWAN_Init+0x184>)
 8002814:	4621      	mov	r1, r4
 8002816:	2001      	movs	r0, #1
 8002818:	f00f f89a 	bl	8011950 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800281c:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <LoRaWAN_Init+0x188>)
 800281e:	4621      	mov	r1, r4
 8002820:	2002      	movs	r0, #2
 8002822:	f00f f895 	bl	8011950 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8002826:	4a25      	ldr	r2, [pc, #148]	; (80028bc <LoRaWAN_Init+0x18c>)
 8002828:	4621      	mov	r1, r4
 800282a:	2004      	movs	r0, #4
 800282c:	f00f f890 	bl	8011950 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <LoRaWAN_Init+0x190>)
 8002832:	4621      	mov	r1, r4
 8002834:	2008      	movs	r0, #8
 8002836:	f00f f88b 	bl	8011950 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 800283a:	f000 f861 	bl	8002900 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800283e:	4921      	ldr	r1, [pc, #132]	; (80028c4 <LoRaWAN_Init+0x194>)
 8002840:	4821      	ldr	r0, [pc, #132]	; (80028c8 <LoRaWAN_Init+0x198>)
 8002842:	f004 ff89 	bl	8007758 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002846:	4821      	ldr	r0, [pc, #132]	; (80028cc <LoRaWAN_Init+0x19c>)
 8002848:	f004 fe60 	bl	800750c <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 800284c:	4816      	ldr	r0, [pc, #88]	; (80028a8 <LoRaWAN_Init+0x178>)
 800284e:	f00f fa37 	bl	8011cc0 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002852:	4621      	mov	r1, r4
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <LoRaWAN_Init+0x1a0>)
 8002856:	7818      	ldrb	r0, [r3, #0]
 8002858:	f004 fc14 	bl	8007084 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800285c:	4d1d      	ldr	r5, [pc, #116]	; (80028d4 <LoRaWAN_Init+0x1a4>)
 800285e:	9400      	str	r4, [sp, #0]
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <LoRaWAN_Init+0x1a8>)
 8002862:	4622      	mov	r2, r4
 8002864:	491d      	ldr	r1, [pc, #116]	; (80028dc <LoRaWAN_Init+0x1ac>)
 8002866:	6809      	ldr	r1, [r1, #0]
 8002868:	4628      	mov	r0, r5
 800286a:	f00f f971 	bl	8011b50 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800286e:	4628      	mov	r0, r5
 8002870:	f00f fa26 	bl	8011cc0 <UTIL_TIMER_Start>
}
 8002874:	b007      	add	sp, #28
 8002876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002878:	f7fe fe64 	bl	8001544 <Error_Handler>
 800287c:	e7c0      	b.n	8002800 <LoRaWAN_Init+0xd0>
 800287e:	bf00      	nop
 8002880:	080126a4 	.word	0x080126a4
 8002884:	080126c8 	.word	0x080126c8
 8002888:	080126ec 	.word	0x080126ec
 800288c:	08012710 	.word	0x08012710
 8002890:	08012734 	.word	0x08012734
 8002894:	0800234d 	.word	0x0800234d
 8002898:	20000418 	.word	0x20000418
 800289c:	08002339 	.word	0x08002339
 80028a0:	200003e8 	.word	0x200003e8
 80028a4:	0800271d 	.word	0x0800271d
 80028a8:	200003d0 	.word	0x200003d0
 80028ac:	080022f5 	.word	0x080022f5
 80028b0:	20000400 	.word	0x20000400
 80028b4:	08007305 	.word	0x08007305
 80028b8:	08002569 	.word	0x08002569
 80028bc:	08002531 	.word	0x08002531
 80028c0:	08002495 	.word	0x08002495
 80028c4:	01030000 	.word	0x01030000
 80028c8:	2000000c 	.word	0x2000000c
 80028cc:	20000058 	.word	0x20000058
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000430 	.word	0x20000430
 80028d8:	08002125 	.word	0x08002125
 80028dc:	20000070 	.word	0x20000070

080028e0 <HAL_GPIO_EXTI_Callback>:
{
 80028e0:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 80028e2:	2802      	cmp	r0, #2
 80028e4:	d002      	beq.n	80028ec <HAL_GPIO_EXTI_Callback+0xc>
 80028e6:	2840      	cmp	r0, #64	; 0x40
 80028e8:	d005      	beq.n	80028f6 <HAL_GPIO_EXTI_Callback+0x16>
}
 80028ea:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80028ec:	2100      	movs	r1, #0
 80028ee:	2008      	movs	r0, #8
 80028f0:	f00e ff62 	bl	80117b8 <UTIL_SEQ_SetTask>
      break;
 80028f4:	e7f9      	b.n	80028ea <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 80028f6:	2100      	movs	r1, #0
 80028f8:	2004      	movs	r0, #4
 80028fa:	f00e ff5d 	bl	80117b8 <UTIL_SEQ_SetTask>
}
 80028fe:	e7f4      	b.n	80028ea <HAL_GPIO_EXTI_Callback+0xa>

08002900 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <LoraInfo_Init+0x1c>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002906:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002908:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800290a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800290c:	2220      	movs	r2, #32
 800290e:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002910:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002914:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800291a:	4770      	bx	lr
 800291c:	20000448 	.word	0x20000448

08002920 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002920:	4800      	ldr	r0, [pc, #0]	; (8002924 <LoraInfo_GetPtr+0x4>)
 8002922:	4770      	bx	lr
 8002924:	20000448 	.word	0x20000448

08002928 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002928:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800292a:	f000 f83f 	bl	80029ac <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800292e:	bd08      	pop	{r3, pc}

08002930 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002930:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002932:	f000 f87d 	bl	8002a30 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002936:	bd08      	pop	{r3, pc}

08002938 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002938:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800293a:	f000 f8c7 	bl	8002acc <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800293e:	bd08      	pop	{r3, pc}

08002940 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002940:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002942:	f000 f8c5 	bl	8002ad0 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002946:	bd08      	pop	{r3, pc}

08002948 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002948:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800294a:	f000 f8c3 	bl	8002ad4 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800294e:	bd08      	pop	{r3, pc}

08002950 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002950:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002952:	f000 f8c1 	bl	8002ad8 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002956:	bd08      	pop	{r3, pc}

08002958 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002958:	480d      	ldr	r0, [pc, #52]	; (8002990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800295a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800295c:	f000 f8c1 	bl	8002ae2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002960:	480c      	ldr	r0, [pc, #48]	; (8002994 <LoopForever+0x6>)
  ldr r1, =_edata
 8002962:	490d      	ldr	r1, [pc, #52]	; (8002998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <LoopForever+0xe>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002968:	e002      	b.n	8002970 <LoopCopyDataInit>

0800296a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800296c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296e:	3304      	adds	r3, #4

08002970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002974:	d3f9      	bcc.n	800296a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002978:	4c0a      	ldr	r4, [pc, #40]	; (80029a4 <LoopForever+0x16>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800297c:	e001      	b.n	8002982 <LoopFillZerobss>

0800297e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002980:	3204      	adds	r2, #4

08002982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002984:	d3fb      	bcc.n	800297e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002986:	f00f fba1 	bl	80120cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800298a:	f7fe fe25 	bl	80015d8 <main>

0800298e <LoopForever>:

LoopForever:
    b LoopForever
 800298e:	e7fe      	b.n	800298e <LoopForever>
  ldr   r0, =_estack
 8002990:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002998:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 800299c:	08013178 	.word	0x08013178
  ldr r2, =_sbss
 80029a0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80029a4:	20001640 	.word	0x20001640

080029a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029a8:	e7fe      	b.n	80029a8 <ADC_IRQHandler>
	...

080029ac <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80029ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029b0:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80029b2:	2400      	movs	r4, #0
 80029b4:	9401      	str	r4, [sp, #4]
 80029b6:	9402      	str	r4, [sp, #8]
 80029b8:	9403      	str	r4, [sp, #12]
 80029ba:	9404      	str	r4, [sp, #16]
 80029bc:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029c4:	f042 0204 	orr.w	r2, r2, #4
 80029c8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80029d2:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80029d4:	2710      	movs	r7, #16
 80029d6:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80029d8:	2301      	movs	r3, #1
 80029da:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80029e0:	4d12      	ldr	r5, [pc, #72]	; (8002a2c <BSP_RADIO_Init+0x80>)
 80029e2:	a901      	add	r1, sp, #4
 80029e4:	4628      	mov	r0, r5
 80029e6:	f001 f9e3 	bl	8003db0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80029ea:	f04f 0820 	mov.w	r8, #32
 80029ee:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80029f2:	a901      	add	r1, sp, #4
 80029f4:	4628      	mov	r0, r5
 80029f6:	f001 f9db 	bl	8003db0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80029fa:	2608      	movs	r6, #8
 80029fc:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80029fe:	a901      	add	r1, sp, #4
 8002a00:	4628      	mov	r0, r5
 8002a02:	f001 f9d5 	bl	8003db0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a06:	4622      	mov	r2, r4
 8002a08:	4641      	mov	r1, r8
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	f001 fb20 	bl	8004050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a10:	4622      	mov	r2, r4
 8002a12:	4639      	mov	r1, r7
 8002a14:	4628      	mov	r0, r5
 8002a16:	f001 fb1b 	bl	8004050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	4631      	mov	r1, r6
 8002a1e:	4628      	mov	r0, r5
 8002a20:	f001 fb16 	bl	8004050 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002a24:	4620      	mov	r0, r4
 8002a26:	b006      	add	sp, #24
 8002a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a2c:	48000800 	.word	0x48000800

08002a30 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002a30:	b510      	push	{r4, lr}
  switch (Config)
 8002a32:	2803      	cmp	r0, #3
 8002a34:	d813      	bhi.n	8002a5e <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002a36:	e8df f000 	tbb	[pc, r0]
 8002a3a:	1402      	.short	0x1402
 8002a3c:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002a3e:	4c22      	ldr	r4, [pc, #136]	; (8002ac8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	2108      	movs	r1, #8
 8002a44:	4620      	mov	r0, r4
 8002a46:	f001 fb03 	bl	8004050 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2110      	movs	r1, #16
 8002a4e:	4620      	mov	r0, r4
 8002a50:	f001 fafe 	bl	8004050 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2120      	movs	r1, #32
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f001 faf9 	bl	8004050 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002a5e:	2000      	movs	r0, #0
 8002a60:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002a62:	4c19      	ldr	r4, [pc, #100]	; (8002ac8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	2108      	movs	r1, #8
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f001 faf1 	bl	8004050 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a6e:	2201      	movs	r2, #1
 8002a70:	2110      	movs	r1, #16
 8002a72:	4620      	mov	r0, r4
 8002a74:	f001 faec 	bl	8004050 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2120      	movs	r1, #32
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f001 fae7 	bl	8004050 <HAL_GPIO_WritePin>
      break;
 8002a82:	e7ec      	b.n	8002a5e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002a84:	4c10      	ldr	r4, [pc, #64]	; (8002ac8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	2108      	movs	r1, #8
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f001 fae0 	bl	8004050 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a90:	2201      	movs	r2, #1
 8002a92:	2110      	movs	r1, #16
 8002a94:	4620      	mov	r0, r4
 8002a96:	f001 fadb 	bl	8004050 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2120      	movs	r1, #32
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f001 fad6 	bl	8004050 <HAL_GPIO_WritePin>
      break;
 8002aa4:	e7db      	b.n	8002a5e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002aa6:	4c08      	ldr	r4, [pc, #32]	; (8002ac8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2108      	movs	r1, #8
 8002aac:	4620      	mov	r0, r4
 8002aae:	f001 facf 	bl	8004050 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2110      	movs	r1, #16
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f001 faca 	bl	8004050 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002abc:	2201      	movs	r2, #1
 8002abe:	2120      	movs	r1, #32
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f001 fac5 	bl	8004050 <HAL_GPIO_WritePin>
      break;
 8002ac6:	e7ca      	b.n	8002a5e <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002ac8:	48000800 	.word	0x48000800

08002acc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002acc:	2000      	movs	r0, #0
 8002ace:	4770      	bx	lr

08002ad0 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	4770      	bx	lr

08002ad4 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	4770      	bx	lr

08002ad8 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002ad8:	b908      	cbnz	r0, 8002ade <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002ada:	200f      	movs	r0, #15
 8002adc:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002ade:	2016      	movs	r0, #22
  }

  return ret;
}
 8002ae0:	4770      	bx	lr

08002ae2 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae4:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae6:	2003      	movs	r0, #3
 8002ae8:	f000 fd24 	bl	8003534 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002aec:	f001 fc56 	bl	800439c <HAL_RCC_GetHCLKFreq>
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_Init+0x28>)
 8002af2:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002af4:	200f      	movs	r0, #15
 8002af6:	f7fe ff63 	bl	80019c0 <HAL_InitTick>
 8002afa:	b110      	cbz	r0, 8002b02 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002afc:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002afe:	4620      	mov	r0, r4
 8002b00:	bd10      	pop	{r4, pc}
 8002b02:	4604      	mov	r4, r0
    HAL_MspInit();
 8002b04:	f7fe fe1c 	bl	8001740 <HAL_MspInit>
 8002b08:	e7f9      	b.n	8002afe <HAL_Init+0x1a>
 8002b0a:	bf00      	nop
 8002b0c:	20000074 	.word	0x20000074

08002b10 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b10:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002b14:	6913      	ldr	r3, [r2, #16]
 8002b16:	f023 0302 	bic.w	r3, r3, #2
 8002b1a:	6113      	str	r3, [r2, #16]
}
 8002b1c:	4770      	bx	lr

08002b1e <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b1e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002b22:	6913      	ldr	r3, [r2, #16]
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	6113      	str	r3, [r2, #16]
}
 8002b2a:	4770      	bx	lr

08002b2c <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002b2c:	4b01      	ldr	r3, [pc, #4]	; (8002b34 <HAL_GetUIDw0+0x8>)
 8002b2e:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8002b32:	4770      	bx	lr
 8002b34:	1fff7000 	.word	0x1fff7000

08002b38 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002b38:	4b01      	ldr	r3, [pc, #4]	; (8002b40 <HAL_GetUIDw1+0x8>)
 8002b3a:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8002b3e:	4770      	bx	lr
 8002b40:	1fff7000 	.word	0x1fff7000

08002b44 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002b44:	4b01      	ldr	r3, [pc, #4]	; (8002b4c <HAL_GetUIDw2+0x8>)
 8002b46:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8002b4a:	4770      	bx	lr
 8002b4c:	1fff7000 	.word	0x1fff7000

08002b50 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b50:	4a02      	ldr	r2, [pc, #8]	; (8002b5c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002b52:	6853      	ldr	r3, [r2, #4]
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002b5a:	4770      	bx	lr
 8002b5c:	e0042000 	.word	0xe0042000

08002b60 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b60:	4a02      	ldr	r2, [pc, #8]	; (8002b6c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002b62:	6853      	ldr	r3, [r2, #4]
 8002b64:	f023 0302 	bic.w	r3, r3, #2
 8002b68:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8002b6a:	4770      	bx	lr
 8002b6c:	e0042000 	.word	0xe0042000

08002b70 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002b70:	4a02      	ldr	r2, [pc, #8]	; (8002b7c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002b72:	6853      	ldr	r3, [r2, #4]
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002b7a:	4770      	bx	lr
 8002b7c:	e0042000 	.word	0xe0042000

08002b80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b80:	b530      	push	{r4, r5, lr}
 8002b82:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	f000 8106 	beq.w	8002d9a <HAL_ADC_Init+0x21a>
 8002b8e:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b90:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002b92:	b1bb      	cbz	r3, 8002bc4 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b94:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b96:	6893      	ldr	r3, [r2, #8]
 8002b98:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002b9c:	d11f      	bne.n	8002bde <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002b9e:	6893      	ldr	r3, [r2, #8]
 8002ba0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ba4:	f023 0317 	bic.w	r3, r3, #23
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bae:	4b7c      	ldr	r3, [pc, #496]	; (8002da0 <HAL_ADC_Init+0x220>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	4a7b      	ldr	r2, [pc, #492]	; (8002da4 <HAL_ADC_Init+0x224>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	099b      	lsrs	r3, r3, #6
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002bc2:	e009      	b.n	8002bd8 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002bc4:	f7fe f99e 	bl	8000f04 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002bcc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002bd0:	e7e0      	b.n	8002b94 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002bd2:	9b01      	ldr	r3, [sp, #4]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002bd8:	9b01      	ldr	r3, [sp, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f9      	bne.n	8002bd2 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bde:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002be0:	6893      	ldr	r3, [r2, #8]
 8002be2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002be6:	f040 809a 	bne.w	8002d1e <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bec:	f043 0310 	orr.w	r3, r3, #16
 8002bf0:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bfa:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bfc:	6893      	ldr	r3, [r2, #8]
 8002bfe:	f013 0304 	ands.w	r3, r3, #4
 8002c02:	d000      	beq.n	8002c06 <HAL_ADC_Init+0x86>
 8002c04:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c06:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002c08:	f011 0f10 	tst.w	r1, #16
 8002c0c:	f040 80be 	bne.w	8002d8c <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f040 80bb 	bne.w	8002d8c <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c22:	6893      	ldr	r3, [r2, #8]
 8002c24:	f013 0f01 	tst.w	r3, #1
 8002c28:	d14f      	bne.n	8002cca <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002c2a:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c2c:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002c2e:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c32:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c34:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c38:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c3a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002c40:	b109      	cbz	r1, 8002c46 <HAL_ADC_Init+0xc6>
 8002c42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c46:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8002c48:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c4a:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c4c:	6921      	ldr	r1, [r4, #16]
 8002c4e:	2900      	cmp	r1, #0
 8002c50:	db67      	blt.n	8002d22 <HAL_ADC_Init+0x1a2>
 8002c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002c56:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c58:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c5c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c60:	f894 1020 	ldrb.w	r1, [r4, #32]
 8002c64:	2901      	cmp	r1, #1
 8002c66:	d05f      	beq.n	8002d28 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c6a:	b121      	cbz	r1, 8002c76 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c6c:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002c70:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c72:	4329      	orrs	r1, r5
 8002c74:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c76:	68d1      	ldr	r1, [r2, #12]
 8002c78:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 8002c7c:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 8002c80:	430b      	orrs	r3, r1
 8002c82:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c84:	6863      	ldr	r3, [r4, #4]
 8002c86:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002c8a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c8c:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c8e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8002c92:	2901      	cmp	r1, #1
 8002c94:	d055      	beq.n	8002d42 <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002c96:	6821      	ldr	r1, [r4, #0]
 8002c98:	690d      	ldr	r5, [r1, #16]
 8002c9a:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <HAL_ADC_Init+0x228>)
 8002c9c:	402b      	ands	r3, r5
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002ca2:	6863      	ldr	r3, [r4, #4]
 8002ca4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002ca8:	d00f      	beq.n	8002cca <HAL_ADC_Init+0x14a>
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cae:	d00c      	beq.n	8002cca <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cb4:	d009      	beq.n	8002cca <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002cb6:	493d      	ldr	r1, [pc, #244]	; (8002dac <HAL_ADC_Init+0x22c>)
 8002cb8:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8002cbc:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8002cc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002cca:	6821      	ldr	r1, [r4, #0]
 8002ccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002cce:	694a      	ldr	r2, [r1, #20]
 8002cd0:	f022 0207 	bic.w	r2, r2, #7
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002cd8:	6822      	ldr	r2, [r4, #0]
 8002cda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002cdc:	6953      	ldr	r3, [r2, #20]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002ce6:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002ce8:	6923      	ldr	r3, [r4, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d133      	bne.n	8002d56 <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002cee:	6822      	ldr	r2, [r4, #0]
 8002cf0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002cf2:	f063 030f 	orn	r3, r3, #15
 8002cf6:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002cf8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8002d00:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d039      	beq.n	8002d7a <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d08:	f023 0312 	bic.w	r3, r3, #18
 8002d0c:	f043 0310 	orr.w	r3, r3, #16
 8002d10:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	e03b      	b.n	8002d96 <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1e:	2000      	movs	r0, #0
 8002d20:	e76c      	b.n	8002bfc <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d22:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002d26:	e796      	b.n	8002c56 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d28:	b915      	cbnz	r5, 8002d30 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2e:	e79b      	b.n	8002c68 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d30:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002d32:	f041 0120 	orr.w	r1, r1, #32
 8002d36:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d38:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002d3a:	f041 0101 	orr.w	r1, r1, #1
 8002d3e:	65e1      	str	r1, [r4, #92]	; 0x5c
 8002d40:	e792      	b.n	8002c68 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8002d42:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d44:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002d46:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002d48:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002d4a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002d4c:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	e79f      	b.n	8002c96 <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d5a:	d1cd      	bne.n	8002cf8 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002d5c:	6821      	ldr	r1, [r4, #0]
 8002d5e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002d60:	69e3      	ldr	r3, [r4, #28]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	f003 031c 	and.w	r3, r3, #28
 8002d6a:	f06f 020f 	mvn.w	r2, #15
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002d74:	4313      	orrs	r3, r2
 8002d76:	628b      	str	r3, [r1, #40]	; 0x28
 8002d78:	e7be      	b.n	8002cf8 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002d7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d80:	f023 0303 	bic.w	r3, r3, #3
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d8a:	e004      	b.n	8002d96 <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d8e:	f043 0310 	orr.w	r3, r3, #16
 8002d92:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d94:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002d96:	b003      	add	sp, #12
 8002d98:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	e7fb      	b.n	8002d96 <HAL_ADC_Init+0x216>
 8002d9e:	bf00      	nop
 8002da0:	20000074 	.word	0x20000074
 8002da4:	053e2d63 	.word	0x053e2d63
 8002da8:	1ffffc02 	.word	0x1ffffc02
 8002dac:	40012000 	.word	0x40012000

08002db0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	4604      	mov	r4, r0
 8002db4:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002db6:	6946      	ldr	r6, [r0, #20]
 8002db8:	2e08      	cmp	r6, #8
 8002dba:	d005      	beq.n	8002dc8 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002dbc:	6803      	ldr	r3, [r0, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f013 0f01 	tst.w	r3, #1
 8002dc4:	d11e      	bne.n	8002e04 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002dc6:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dc8:	f7fe fdfc 	bl	80019c4 <HAL_GetTick>
 8002dcc:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4232      	tst	r2, r6
 8002dd4:	d11c      	bne.n	8002e10 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002dd6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002dda:	d0f8      	beq.n	8002dce <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ddc:	f7fe fdf2 	bl	80019c4 <HAL_GetTick>
 8002de0:	1bc3      	subs	r3, r0, r7
 8002de2:	42ab      	cmp	r3, r5
 8002de4:	d801      	bhi.n	8002dea <HAL_ADC_PollForConversion+0x3a>
 8002de6:	2d00      	cmp	r5, #0
 8002de8:	d1f1      	bne.n	8002dce <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4233      	tst	r3, r6
 8002df0:	d1ed      	bne.n	8002dce <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8002e00:	2003      	movs	r0, #3
 8002e02:	e028      	b.n	8002e56 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e04:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002e06:	f043 0320 	orr.w	r3, r3, #32
 8002e0a:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	e022      	b.n	8002e56 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e10:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e16:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002e1e:	d115      	bne.n	8002e4c <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e20:	7ea2      	ldrb	r2, [r4, #26]
 8002e22:	b99a      	cbnz	r2, 8002e4c <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	f012 0f08 	tst.w	r2, #8
 8002e2a:	d00f      	beq.n	8002e4c <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	f012 0f04 	tst.w	r2, #4
 8002e32:	d111      	bne.n	8002e58 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	f022 020c 	bic.w	r2, r2, #12
 8002e3a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002e4c:	7e20      	ldrb	r0, [r4, #24]
 8002e4e:	b960      	cbnz	r0, 8002e6a <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	220c      	movs	r2, #12
 8002e54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e5a:	f043 0320 	orr.w	r3, r3, #32
 8002e5e:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e60:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002e68:	e7f0      	b.n	8002e4c <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	e7f3      	b.n	8002e56 <HAL_ADC_PollForConversion+0xa6>

08002e6e <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e6e:	6803      	ldr	r3, [r0, #0]
 8002e70:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002e72:	4770      	bx	lr

08002e74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002e74:	b470      	push	{r4, r5, r6}
 8002e76:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e78:	2200      	movs	r2, #0
 8002e7a:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e7c:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002e7e:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002e82:	2a01      	cmp	r2, #1
 8002e84:	f000 8105 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x21e>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e90:	6802      	ldr	r2, [r0, #0]
 8002e92:	6890      	ldr	r0, [r2, #8]
 8002e94:	f010 0f04 	tst.w	r0, #4
 8002e98:	d00a      	beq.n	8002eb0 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e9c:	f042 0220 	orr.w	r2, r2, #32
 8002ea0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ea2:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002eaa:	b003      	add	sp, #12
 8002eac:	bc70      	pop	{r4, r5, r6}
 8002eae:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002eb0:	6848      	ldr	r0, [r1, #4]
 8002eb2:	2802      	cmp	r0, #2
 8002eb4:	f000 809e 	beq.w	8002ff4 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002eb8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002ebc:	d029      	beq.n	8002f12 <HAL_ADC_ConfigChannel+0x9e>
 8002ebe:	4d76      	ldr	r5, [pc, #472]	; (8003098 <HAL_ADC_ConfigChannel+0x224>)
 8002ec0:	42ac      	cmp	r4, r5
 8002ec2:	d026      	beq.n	8002f12 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002ec4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002ec6:	f000 001f 	and.w	r0, r0, #31
 8002eca:	250f      	movs	r5, #15
 8002ecc:	4085      	lsls	r5, r0
 8002ece:	ea24 0505 	bic.w	r5, r4, r5
 8002ed2:	680c      	ldr	r4, [r1, #0]
 8002ed4:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002ed8:	2e00      	cmp	r6, #0
 8002eda:	d133      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0xd0>
 8002edc:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002ee0:	fa04 f000 	lsl.w	r0, r4, r0
 8002ee4:	4328      	orrs	r0, r5
 8002ee6:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002ee8:	684c      	ldr	r4, [r1, #4]
 8002eea:	08a0      	lsrs	r0, r4, #2
 8002eec:	3001      	adds	r0, #1
 8002eee:	69dd      	ldr	r5, [r3, #28]
 8002ef0:	42a8      	cmp	r0, r5
 8002ef2:	d814      	bhi.n	8002f1e <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ef4:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8002ef6:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002ef8:	f004 041f 	and.w	r4, r4, #31
 8002efc:	260f      	movs	r6, #15
 8002efe:	40a6      	lsls	r6, r4
 8002f00:	ea20 0006 	bic.w	r0, r0, r6
 8002f04:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8002f08:	fa05 f404 	lsl.w	r4, r5, r4
 8002f0c:	4304      	orrs	r4, r0
 8002f0e:	6294      	str	r4, [r2, #40]	; 0x28
}
 8002f10:	e005      	b.n	8002f1e <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002f12:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002f14:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002f16:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002f1a:	4320      	orrs	r0, r4
 8002f1c:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f1e:	681c      	ldr	r4, [r3, #0]
 8002f20:	680d      	ldr	r5, [r1, #0]
 8002f22:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002f24:	6960      	ldr	r0, [r4, #20]
 8002f26:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8002f2a:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8002f2e:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8002f32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f36:	4302      	orrs	r2, r0
 8002f38:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f3a:	680a      	ldr	r2, [r1, #0]
 8002f3c:	2a00      	cmp	r2, #0
 8002f3e:	db09      	blt.n	8002f54 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2000      	movs	r0, #0
 8002f42:	e7af      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f48:	b114      	cbz	r4, 8002f50 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002f4a:	fab4 f484 	clz	r4, r4
 8002f4e:	e7c7      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002f50:	2420      	movs	r4, #32
 8002f52:	e7c5      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f54:	4951      	ldr	r1, [pc, #324]	; (800309c <HAL_ADC_ConfigChannel+0x228>)
 8002f56:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8002f5a:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f5e:	4c50      	ldr	r4, [pc, #320]	; (80030a0 <HAL_ADC_ConfigChannel+0x22c>)
 8002f60:	42a2      	cmp	r2, r4
 8002f62:	d007      	beq.n	8002f74 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f64:	4c4f      	ldr	r4, [pc, #316]	; (80030a4 <HAL_ADC_ConfigChannel+0x230>)
 8002f66:	42a2      	cmp	r2, r4
 8002f68:	d026      	beq.n	8002fb8 <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f6a:	4c4f      	ldr	r4, [pc, #316]	; (80030a8 <HAL_ADC_ConfigChannel+0x234>)
 8002f6c:	42a2      	cmp	r2, r4
 8002f6e:	d032      	beq.n	8002fd6 <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f70:	2000      	movs	r0, #0
 8002f72:	e797      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f74:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002f78:	d1f4      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f7e:	4847      	ldr	r0, [pc, #284]	; (800309c <HAL_ADC_ConfigChannel+0x228>)
 8002f80:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002f84:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002f88:	4311      	orrs	r1, r2
 8002f8a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f8e:	4a47      	ldr	r2, [pc, #284]	; (80030ac <HAL_ADC_ConfigChannel+0x238>)
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	0992      	lsrs	r2, r2, #6
 8002f94:	4946      	ldr	r1, [pc, #280]	; (80030b0 <HAL_ADC_ConfigChannel+0x23c>)
 8002f96:	fba1 1202 	umull	r1, r2, r1, r2
 8002f9a:	0992      	lsrs	r2, r2, #6
 8002f9c:	3201      	adds	r2, #1
 8002f9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002fa6:	e002      	b.n	8002fae <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 8002fa8:	9a01      	ldr	r2, [sp, #4]
 8002faa:	3a01      	subs	r2, #1
 8002fac:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002fae:	9a01      	ldr	r2, [sp, #4]
 8002fb0:	2a00      	cmp	r2, #0
 8002fb2:	d1f9      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	e775      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fb8:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002fbc:	d1d5      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fbe:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002fc2:	4836      	ldr	r0, [pc, #216]	; (800309c <HAL_ADC_ConfigChannel+0x228>)
 8002fc4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002fc8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002fcc:	4311      	orrs	r1, r2
 8002fce:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd2:	2000      	movs	r0, #0
}
 8002fd4:	e766      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002fd6:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002fda:	d158      	bne.n	800308e <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fdc:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fe0:	482e      	ldr	r0, [pc, #184]	; (800309c <HAL_ADC_ConfigChannel+0x228>)
 8002fe2:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002fe6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002fea:	430a      	orrs	r2, r1
 8002fec:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff0:	2000      	movs	r0, #0
}
 8002ff2:	e757      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ff4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002ff8:	d002      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x18c>
 8002ffa:	4827      	ldr	r0, [pc, #156]	; (8003098 <HAL_ADC_ConfigChannel+0x224>)
 8002ffc:	4284      	cmp	r4, r0
 8002ffe:	d106      	bne.n	800300e <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003000:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003002:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003004:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003008:	ea20 0004 	bic.w	r0, r0, r4
 800300c:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800300e:	680a      	ldr	r2, [r1, #0]
 8003010:	2a00      	cmp	r2, #0
 8003012:	db01      	blt.n	8003018 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003014:	2000      	movs	r0, #0
 8003016:	e745      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003018:	4920      	ldr	r1, [pc, #128]	; (800309c <HAL_ADC_ConfigChannel+0x228>)
 800301a:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800301e:	4820      	ldr	r0, [pc, #128]	; (80030a0 <HAL_ADC_ConfigChannel+0x22c>)
 8003020:	4282      	cmp	r2, r0
 8003022:	d007      	beq.n	8003034 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003024:	481f      	ldr	r0, [pc, #124]	; (80030a4 <HAL_ADC_ConfigChannel+0x230>)
 8003026:	4282      	cmp	r2, r0
 8003028:	d013      	beq.n	8003052 <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800302a:	481f      	ldr	r0, [pc, #124]	; (80030a8 <HAL_ADC_ConfigChannel+0x234>)
 800302c:	4282      	cmp	r2, r0
 800302e:	d01f      	beq.n	8003070 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003030:	2000      	movs	r0, #0
 8003032:	e737      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003034:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003038:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 800303c:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8003040:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003044:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003048:	4311      	orrs	r1, r2
 800304a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304e:	2000      	movs	r0, #0
}
 8003050:	e728      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003052:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003056:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 800305a:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 800305e:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003062:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003066:	430a      	orrs	r2, r1
 8003068:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800306c:	2000      	movs	r0, #0
}
 800306e:	e719      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003070:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003074:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8003078:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800307c:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003080:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003084:	430a      	orrs	r2, r1
 8003086:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800308a:	2000      	movs	r0, #0
}
 800308c:	e70a      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x30>
 800308e:	2000      	movs	r0, #0
 8003090:	e708      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003092:	2002      	movs	r0, #2
 8003094:	e709      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x36>
 8003096:	bf00      	nop
 8003098:	80000004 	.word	0x80000004
 800309c:	40012000 	.word	0x40012000
 80030a0:	b0001000 	.word	0xb0001000
 80030a4:	b8004000 	.word	0xb8004000
 80030a8:	b4002000 	.word	0xb4002000
 80030ac:	20000074 	.word	0x20000074
 80030b0:	053e2d63 	.word	0x053e2d63

080030b4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80030b4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030b6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	f012 0f04 	tst.w	r2, #4
 80030be:	d02a      	beq.n	8003116 <ADC_ConversionStop+0x62>
 80030c0:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	f012 0f02 	tst.w	r2, #2
 80030c8:	d107      	bne.n	80030da <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030d0:	f022 0217 	bic.w	r2, r2, #23
 80030d4:	f042 0210 	orr.w	r2, r2, #16
 80030d8:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030da:	f7fe fc73 	bl	80019c4 <HAL_GetTick>
 80030de:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f013 0f04 	tst.w	r3, #4
 80030e8:	d013      	beq.n	8003112 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030ea:	f7fe fc6b 	bl	80019c4 <HAL_GetTick>
 80030ee:	1b43      	subs	r3, r0, r5
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d9f5      	bls.n	80030e0 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f013 0f04 	tst.w	r3, #4
 80030fc:	d0f0      	beq.n	80030e0 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003100:	f043 0310 	orr.w	r3, r3, #16
 8003104:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003106:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800310e:	2001      	movs	r0, #1
 8003110:	e002      	b.n	8003118 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003112:	2000      	movs	r0, #0
 8003114:	e000      	b.n	8003118 <ADC_ConversionStop+0x64>
 8003116:	2000      	movs	r0, #0
}
 8003118:	bd38      	pop	{r3, r4, r5, pc}
	...

0800311c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800311c:	b530      	push	{r4, r5, lr}
 800311e:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003120:	2300      	movs	r3, #0
 8003122:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003124:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	f012 0f01 	tst.w	r2, #1
 800312c:	d15b      	bne.n	80031e6 <ADC_Enable+0xca>
 800312e:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003130:	6899      	ldr	r1, [r3, #8]
 8003132:	4a2e      	ldr	r2, [pc, #184]	; (80031ec <ADC_Enable+0xd0>)
 8003134:	4211      	tst	r1, r2
 8003136:	d117      	bne.n	8003168 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800313e:	f022 0217 	bic.w	r2, r2, #23
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003148:	4b29      	ldr	r3, [pc, #164]	; (80031f0 <ADC_Enable+0xd4>)
 800314a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800314e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003152:	d019      	beq.n	8003188 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <ADC_Enable+0xd8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	099b      	lsrs	r3, r3, #6
 800315a:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <ADC_Enable+0xdc>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003164:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003166:	e00c      	b.n	8003182 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003168:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800316a:	f043 0310 	orr.w	r3, r3, #16
 800316e:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003170:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8003178:	2001      	movs	r0, #1
 800317a:	e035      	b.n	80031e8 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 800317c:	9b01      	ldr	r3, [sp, #4]
 800317e:	3b01      	subs	r3, #1
 8003180:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003182:	9b01      	ldr	r3, [sp, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f9      	bne.n	800317c <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003188:	7e63      	ldrb	r3, [r4, #25]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800318e:	2000      	movs	r0, #0
 8003190:	e02a      	b.n	80031e8 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8003192:	f7fe fc17 	bl	80019c4 <HAL_GetTick>
 8003196:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	f012 0f01 	tst.w	r2, #1
 80031a0:	d11f      	bne.n	80031e2 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	f012 0f01 	tst.w	r2, #1
 80031a8:	d107      	bne.n	80031ba <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031b0:	f022 0217 	bic.w	r2, r2, #23
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031ba:	f7fe fc03 	bl	80019c4 <HAL_GetTick>
 80031be:	1b40      	subs	r0, r0, r5
 80031c0:	2802      	cmp	r0, #2
 80031c2:	d9e9      	bls.n	8003198 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f013 0f01 	tst.w	r3, #1
 80031cc:	d1e4      	bne.n	8003198 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031d0:	f043 0310 	orr.w	r3, r3, #16
 80031d4:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80031de:	2001      	movs	r0, #1
 80031e0:	e002      	b.n	80031e8 <ADC_Enable+0xcc>
  return HAL_OK;
 80031e2:	2000      	movs	r0, #0
 80031e4:	e000      	b.n	80031e8 <ADC_Enable+0xcc>
 80031e6:	2000      	movs	r0, #0
}
 80031e8:	b003      	add	sp, #12
 80031ea:	bd30      	pop	{r4, r5, pc}
 80031ec:	80000017 	.word	0x80000017
 80031f0:	40012000 	.word	0x40012000
 80031f4:	20000074 	.word	0x20000074
 80031f8:	053e2d63 	.word	0x053e2d63

080031fc <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f013 0f04 	tst.w	r3, #4
 8003204:	d128      	bne.n	8003258 <HAL_ADC_Start+0x5c>
{
 8003206:	b510      	push	{r4, lr}
 8003208:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800320a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800320e:	2b01      	cmp	r3, #1
 8003210:	d024      	beq.n	800325c <HAL_ADC_Start+0x60>
 8003212:	2301      	movs	r3, #1
 8003214:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003218:	f7ff ff80 	bl	800311c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800321c:	b9c0      	cbnz	r0, 8003250 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 800321e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003220:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800322e:	2300      	movs	r3, #0
 8003230:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003232:	6822      	ldr	r2, [r4, #0]
 8003234:	211c      	movs	r1, #28
 8003236:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003238:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 800323c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800323e:	6893      	ldr	r3, [r2, #8]
 8003240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003244:	f023 0317 	bic.w	r3, r3, #23
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6093      	str	r3, [r2, #8]
}
 800324e:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003250:	2300      	movs	r3, #0
 8003252:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003256:	e7fa      	b.n	800324e <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003258:	2002      	movs	r0, #2
}
 800325a:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800325c:	2002      	movs	r0, #2
 800325e:	e7f6      	b.n	800324e <HAL_ADC_Start+0x52>

08003260 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003264:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003266:	6893      	ldr	r3, [r2, #8]
 8003268:	f013 0302 	ands.w	r3, r3, #2
 800326c:	d000      	beq.n	8003270 <ADC_Disable+0x10>
 800326e:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003270:	6891      	ldr	r1, [r2, #8]
 8003272:	f011 0f01 	tst.w	r1, #1
 8003276:	d039      	beq.n	80032ec <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003278:	2b00      	cmp	r3, #0
 800327a:	d139      	bne.n	80032f0 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800327c:	6893      	ldr	r3, [r2, #8]
 800327e:	f003 0305 	and.w	r3, r3, #5
 8003282:	2b01      	cmp	r3, #1
 8003284:	d009      	beq.n	800329a <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003288:	f043 0310 	orr.w	r3, r3, #16
 800328c:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800328e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8003296:	2001      	movs	r0, #1
 8003298:	e029      	b.n	80032ee <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800329a:	6893      	ldr	r3, [r2, #8]
 800329c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032a0:	f023 0317 	bic.w	r3, r3, #23
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	2203      	movs	r2, #3
 80032ae:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032b0:	f7fe fb88 	bl	80019c4 <HAL_GetTick>
 80032b4:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f013 0f01 	tst.w	r3, #1
 80032be:	d013      	beq.n	80032e8 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032c0:	f7fe fb80 	bl	80019c4 <HAL_GetTick>
 80032c4:	1b40      	subs	r0, r0, r5
 80032c6:	2802      	cmp	r0, #2
 80032c8:	d9f5      	bls.n	80032b6 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f013 0f01 	tst.w	r3, #1
 80032d2:	d0f0      	beq.n	80032b6 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032d6:	f043 0310 	orr.w	r3, r3, #16
 80032da:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80032e4:	2001      	movs	r0, #1
 80032e6:	e002      	b.n	80032ee <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032e8:	2000      	movs	r0, #0
 80032ea:	e000      	b.n	80032ee <ADC_Disable+0x8e>
 80032ec:	2000      	movs	r0, #0
}
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80032f0:	2000      	movs	r0, #0
 80032f2:	e7fc      	b.n	80032ee <ADC_Disable+0x8e>

080032f4 <HAL_ADC_DeInit>:
{
 80032f4:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d056      	beq.n	80033a8 <HAL_ADC_DeInit+0xb4>
 80032fa:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80032fc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80032fe:	f043 0302 	orr.w	r3, r3, #2
 8003302:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003304:	f7ff fed6 	bl	80030b4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003308:	4606      	mov	r6, r0
 800330a:	2800      	cmp	r0, #0
 800330c:	d03d      	beq.n	800338a <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	6853      	ldr	r3, [r2, #4]
 8003312:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	f240 329f 	movw	r2, #927	; 0x39f
 8003322:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003324:	6822      	ldr	r2, [r4, #0]
 8003326:	68d1      	ldr	r1, [r2, #12]
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_ADC_DeInit+0xb8>)
 800332a:	400b      	ands	r3, r1
 800332c:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800332e:	6822      	ldr	r2, [r4, #0]
 8003330:	6913      	ldr	r3, [r2, #16]
 8003332:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003336:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	6953      	ldr	r3, [r2, #20]
 800333c:	f023 0307 	bic.w	r3, r3, #7
 8003340:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	6a13      	ldr	r3, [r2, #32]
 8003346:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800334a:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003350:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003354:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003356:	6822      	ldr	r2, [r4, #0]
 8003358:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800335a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800335e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003364:	2500      	movs	r5, #0
 8003366:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003368:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <HAL_ADC_DeInit+0xbc>)
 800336a:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 800336e:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003372:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8003376:	4620      	mov	r0, r4
 8003378:	f7fd fdda 	bl	8000f30 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800337c:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800337e:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003380:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003382:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003386:	4630      	mov	r0, r6
 8003388:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800338a:	4620      	mov	r0, r4
 800338c:	f7ff ff68 	bl	8003260 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003390:	4606      	mov	r6, r0
 8003392:	b908      	cbnz	r0, 8003398 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8003394:	2301      	movs	r3, #1
 8003396:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003398:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800339a:	6893      	ldr	r3, [r2, #8]
 800339c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80033a0:	f023 0317 	bic.w	r3, r3, #23
 80033a4:	6093      	str	r3, [r2, #8]
}
 80033a6:	e7b2      	b.n	800330e <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80033a8:	2601      	movs	r6, #1
 80033aa:	e7ec      	b.n	8003386 <HAL_ADC_DeInit+0x92>
 80033ac:	833e0200 	.word	0x833e0200
 80033b0:	40012000 	.word	0x40012000

080033b4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80033b4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d019      	beq.n	80033f0 <HAL_ADC_Stop+0x3c>
{
 80033bc:	b510      	push	{r4, lr}
 80033be:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80033c0:	2301      	movs	r3, #1
 80033c2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80033c6:	f7ff fe75 	bl	80030b4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80033ca:	b118      	cbz	r0, 80033d4 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80033cc:	2300      	movs	r3, #0
 80033ce:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80033d2:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80033d4:	4620      	mov	r0, r4
 80033d6:	f7ff ff43 	bl	8003260 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80033da:	2800      	cmp	r0, #0
 80033dc:	d1f6      	bne.n	80033cc <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80033de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80033ee:	e7ed      	b.n	80033cc <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80033f0:	2002      	movs	r0, #2
}
 80033f2:	4770      	bx	lr

080033f4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80033f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80033fc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003400:	2b01      	cmp	r3, #1
 8003402:	f000 8094 	beq.w	800352e <HAL_ADCEx_Calibration_Start+0x13a>
 8003406:	4604      	mov	r4, r0
 8003408:	2301      	movs	r3, #1
 800340a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800340e:	f7ff ff27 	bl	8003260 <ADC_Disable>
 8003412:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003414:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	f012 0201 	ands.w	r2, r2, #1
 800341c:	d009      	beq.n	8003432 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003420:	f043 0310 	orr.w	r3, r3, #16
 8003424:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003426:	2300      	movs	r3, #0
 8003428:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 800342c:	4628      	mov	r0, r5
 800342e:	b003      	add	sp, #12
 8003430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003432:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003434:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003438:	f041 0102 	orr.w	r1, r1, #2
 800343c:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800343e:	68de      	ldr	r6, [r3, #12]
 8003440:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8003444:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8003448:	0436      	lsls	r6, r6, #16
 800344a:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800344c:	68d9      	ldr	r1, [r3, #12]
 800344e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003452:	f021 0103 	bic.w	r1, r1, #3
 8003456:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003458:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800345a:	e005      	b.n	8003468 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800345c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003464:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003466:	3201      	adds	r2, #1
 8003468:	2a07      	cmp	r2, #7
 800346a:	d81e      	bhi.n	80034aa <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 800346c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800346e:	688b      	ldr	r3, [r1, #8]
 8003470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003474:	f023 0317 	bic.w	r3, r3, #23
 8003478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800347c:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800347e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003480:	6899      	ldr	r1, [r3, #8]
 8003482:	2900      	cmp	r1, #0
 8003484:	daea      	bge.n	800345c <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003486:	9b01      	ldr	r3, [sp, #4]
 8003488:	3301      	adds	r3, #1
 800348a:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800348c:	9b01      	ldr	r3, [sp, #4]
 800348e:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003492:	d3f4      	bcc.n	800347e <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003494:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003496:	f023 0312 	bic.w	r3, r3, #18
 800349a:	f043 0310 	orr.w	r3, r3, #16
 800349e:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 80034a0:	2300      	movs	r3, #0
 80034a2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80034a6:	2501      	movs	r5, #1
 80034a8:	e7c0      	b.n	800342c <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 80034aa:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 80034ae:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80034b0:	688b      	ldr	r3, [r1, #8]
 80034b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034b6:	f023 0317 	bic.w	r3, r3, #23
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80034c0:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 80034c2:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80034c6:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 80034ca:	4302      	orrs	r2, r0
 80034cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 80034d0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80034d2:	6893      	ldr	r3, [r2, #8]
 80034d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034d8:	f023 0317 	bic.w	r3, r3, #23
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80034e2:	f7fe fa6f 	bl	80019c4 <HAL_GetTick>
 80034e6:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034e8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	f012 0f01 	tst.w	r2, #1
 80034f0:	d109      	bne.n	8003506 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	4316      	orrs	r6, r2
 80034f6:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80034f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034fa:	f023 0303 	bic.w	r3, r3, #3
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	65a3      	str	r3, [r4, #88]	; 0x58
 8003504:	e78f      	b.n	8003426 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003506:	f7fe fa5d 	bl	80019c4 <HAL_GetTick>
 800350a:	1bc3      	subs	r3, r0, r7
 800350c:	2b02      	cmp	r3, #2
 800350e:	d9eb      	bls.n	80034e8 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f013 0f01 	tst.w	r3, #1
 8003518:	d0e6      	beq.n	80034e8 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800351a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800351c:	f043 0310 	orr.w	r3, r3, #16
 8003520:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003522:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800352a:	2501      	movs	r5, #1
 800352c:	e77e      	b.n	800342c <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 800352e:	2502      	movs	r5, #2
 8003530:	e77c      	b.n	800342c <HAL_ADCEx_Calibration_Start+0x38>
	...

08003534 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003536:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003538:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003540:	0200      	lsls	r0, r0, #8
 8003542:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003546:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800354c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003550:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003558:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800355a:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_NVIC_SetPriority+0x68>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003562:	f1c3 0c07 	rsb	ip, r3, #7
 8003566:	f1bc 0f04 	cmp.w	ip, #4
 800356a:	bf28      	it	cs
 800356c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003570:	f103 0e04 	add.w	lr, r3, #4
 8003574:	f1be 0f06 	cmp.w	lr, #6
 8003578:	d918      	bls.n	80035ac <HAL_NVIC_SetPriority+0x54>
 800357a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800357c:	f04f 3eff 	mov.w	lr, #4294967295
 8003580:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003584:	ea21 010c 	bic.w	r1, r1, ip
 8003588:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800358a:	fa0e f303 	lsl.w	r3, lr, r3
 800358e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003592:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003594:	2800      	cmp	r0, #0
 8003596:	db0b      	blt.n	80035b0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003598:	0109      	lsls	r1, r1, #4
 800359a:	b2c9      	uxtb	r1, r1
 800359c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80035a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80035a4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80035a8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ac:	2300      	movs	r3, #0
 80035ae:	e7e5      	b.n	800357c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b0:	f000 000f 	and.w	r0, r0, #15
 80035b4:	0109      	lsls	r1, r1, #4
 80035b6:	b2c9      	uxtb	r1, r1
 80035b8:	4b02      	ldr	r3, [pc, #8]	; (80035c4 <HAL_NVIC_SetPriority+0x6c>)
 80035ba:	5419      	strb	r1, [r3, r0]
 80035bc:	e7f4      	b.n	80035a8 <HAL_NVIC_SetPriority+0x50>
 80035be:	bf00      	nop
 80035c0:	e000ed00 	.word	0xe000ed00
 80035c4:	e000ed14 	.word	0xe000ed14

080035c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035c8:	2800      	cmp	r0, #0
 80035ca:	db07      	blt.n	80035dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035cc:	f000 021f 	and.w	r2, r0, #31
 80035d0:	0940      	lsrs	r0, r0, #5
 80035d2:	2301      	movs	r3, #1
 80035d4:	4093      	lsls	r3, r2
 80035d6:	4a02      	ldr	r2, [pc, #8]	; (80035e0 <HAL_NVIC_EnableIRQ+0x18>)
 80035d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	e000e100 	.word	0xe000e100

080035e4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035e4:	2800      	cmp	r0, #0
 80035e6:	db0c      	blt.n	8003602 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e8:	f000 021f 	and.w	r2, r0, #31
 80035ec:	0940      	lsrs	r0, r0, #5
 80035ee:	2301      	movs	r3, #1
 80035f0:	4093      	lsls	r3, r2
 80035f2:	3020      	adds	r0, #32
 80035f4:	4a03      	ldr	r2, [pc, #12]	; (8003604 <HAL_NVIC_DisableIRQ+0x20>)
 80035f6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80035fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80035fe:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003602:	4770      	bx	lr
 8003604:	e000e100 	.word	0xe000e100

08003608 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003608:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800360a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800360c:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8003610:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003614:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003616:	b124      	cbz	r4, 8003622 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003618:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800361a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 800361e:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003622:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003624:	f004 0c1c 	and.w	ip, r4, #28
 8003628:	2401      	movs	r4, #1
 800362a:	fa04 f40c 	lsl.w	r4, r4, ip
 800362e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003632:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003636:	6804      	ldr	r4, [r0, #0]
 8003638:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800363a:	6883      	ldr	r3, [r0, #8]
 800363c:	2b10      	cmp	r3, #16
 800363e:	d005      	beq.n	800364c <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003640:	6803      	ldr	r3, [r0, #0]
 8003642:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003644:	6803      	ldr	r3, [r0, #0]
 8003646:	60da      	str	r2, [r3, #12]
  }
}
 8003648:	bc10      	pop	{r4}
 800364a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800364c:	6803      	ldr	r3, [r0, #0]
 800364e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003650:	6803      	ldr	r3, [r0, #0]
 8003652:	60d9      	str	r1, [r3, #12]
 8003654:	e7f8      	b.n	8003648 <DMA_SetConfig+0x40>
	...

08003658 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003658:	6803      	ldr	r3, [r0, #0]
 800365a:	4a14      	ldr	r2, [pc, #80]	; (80036ac <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d816      	bhi.n	800368e <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003660:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003662:	f022 0203 	bic.w	r2, r2, #3
 8003666:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800366a:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800366e:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003670:	b2db      	uxtb	r3, r3
 8003672:	3b08      	subs	r3, #8
 8003674:	4a0e      	ldr	r2, [pc, #56]	; (80036b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800367c:	4a0d      	ldr	r2, [pc, #52]	; (80036b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800367e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	2201      	movs	r2, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	6503      	str	r3, [r0, #80]	; 0x50
}
 800368c:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800368e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003690:	f022 0103 	bic.w	r1, r2, #3
 8003694:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003696:	440a      	add	r2, r1
 8003698:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800369a:	b2db      	uxtb	r3, r3
 800369c:	3b08      	subs	r3, #8
 800369e:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	3307      	adds	r3, #7
 80036a8:	e7e8      	b.n	800367c <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 80036aa:	bf00      	nop
 80036ac:	40020407 	.word	0x40020407
 80036b0:	cccccccd 	.word	0xcccccccd
 80036b4:	40020880 	.word	0x40020880
 80036b8:	4002081c 	.word	0x4002081c

080036bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036bc:	6843      	ldr	r3, [r0, #4]
 80036be:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036c2:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80036c4:	441a      	add	r2, r3
 80036c6:	0092      	lsls	r2, r2, #2
 80036c8:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036ca:	4a06      	ldr	r2, [pc, #24]	; (80036e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80036cc:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80036ce:	3b01      	subs	r3, #1
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2201      	movs	r2, #1
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	1000823f 	.word	0x1000823f
 80036e4:	40020940 	.word	0x40020940

080036e8 <HAL_DMA_Init>:
  if (hdma == NULL)
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d060      	beq.n	80037ae <HAL_DMA_Init+0xc6>
{
 80036ec:	b510      	push	{r4, lr}
 80036ee:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036f0:	6802      	ldr	r2, [r0, #0]
 80036f2:	4b30      	ldr	r3, [pc, #192]	; (80037b4 <HAL_DMA_Init+0xcc>)
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d842      	bhi.n	800377e <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036f8:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <HAL_DMA_Init+0xd0>)
 80036fa:	4413      	add	r3, r2
 80036fc:	492f      	ldr	r1, [pc, #188]	; (80037bc <HAL_DMA_Init+0xd4>)
 80036fe:	fba1 1303 	umull	r1, r3, r1, r3
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003708:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <HAL_DMA_Init+0xd8>)
 800370a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800370c:	2302      	movs	r3, #2
 800370e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003712:	6813      	ldr	r3, [r2, #0]
 8003714:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371c:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800371e:	6821      	ldr	r1, [r4, #0]
 8003720:	680a      	ldr	r2, [r1, #0]
 8003722:	68a3      	ldr	r3, [r4, #8]
 8003724:	68e0      	ldr	r0, [r4, #12]
 8003726:	4303      	orrs	r3, r0
 8003728:	6920      	ldr	r0, [r4, #16]
 800372a:	4303      	orrs	r3, r0
 800372c:	6960      	ldr	r0, [r4, #20]
 800372e:	4303      	orrs	r3, r0
 8003730:	69a0      	ldr	r0, [r4, #24]
 8003732:	4303      	orrs	r3, r0
 8003734:	69e0      	ldr	r0, [r4, #28]
 8003736:	4303      	orrs	r3, r0
 8003738:	6a20      	ldr	r0, [r4, #32]
 800373a:	4303      	orrs	r3, r0
 800373c:	4313      	orrs	r3, r2
 800373e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff ff89 	bl	8003658 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003746:	68a3      	ldr	r3, [r4, #8]
 8003748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800374c:	d022      	beq.n	8003794 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800374e:	6863      	ldr	r3, [r4, #4]
 8003750:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003756:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003758:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800375a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800375c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800375e:	6863      	ldr	r3, [r4, #4]
 8003760:	3b01      	subs	r3, #1
 8003762:	2b03      	cmp	r3, #3
 8003764:	d919      	bls.n	800379a <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8003766:	2300      	movs	r3, #0
 8003768:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 800376a:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800376c:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800376e:	2000      	movs	r0, #0
 8003770:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003772:	2301      	movs	r3, #1
 8003774:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003778:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800377c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_DMA_Init+0xdc>)
 8003780:	4413      	add	r3, r2
 8003782:	490e      	ldr	r1, [pc, #56]	; (80037bc <HAL_DMA_Init+0xd4>)
 8003784:	fba1 1303 	umull	r1, r3, r1, r3
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_DMA_Init+0xe0>)
 8003790:	6403      	str	r3, [r0, #64]	; 0x40
 8003792:	e7bb      	b.n	800370c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003794:	2300      	movs	r3, #0
 8003796:	6063      	str	r3, [r4, #4]
 8003798:	e7d9      	b.n	800374e <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800379a:	4620      	mov	r0, r4
 800379c:	f7ff ff8e 	bl	80036bc <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037a8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80037aa:	605a      	str	r2, [r3, #4]
 80037ac:	e7df      	b.n	800376e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80037ae:	2001      	movs	r0, #1
}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40020407 	.word	0x40020407
 80037b8:	bffdfff8 	.word	0xbffdfff8
 80037bc:	cccccccd 	.word	0xcccccccd
 80037c0:	40020000 	.word	0x40020000
 80037c4:	bffdfbf8 	.word	0xbffdfbf8
 80037c8:	40020400 	.word	0x40020400

080037cc <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d04b      	beq.n	8003868 <HAL_DMA_DeInit+0x9c>
{
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80037d4:	6802      	ldr	r2, [r0, #0]
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037de:	6802      	ldr	r2, [r0, #0]
 80037e0:	4b22      	ldr	r3, [pc, #136]	; (800386c <HAL_DMA_DeInit+0xa0>)
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d82c      	bhi.n	8003840 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037e6:	4b22      	ldr	r3, [pc, #136]	; (8003870 <HAL_DMA_DeInit+0xa4>)
 80037e8:	4413      	add	r3, r2
 80037ea:	4922      	ldr	r1, [pc, #136]	; (8003874 <HAL_DMA_DeInit+0xa8>)
 80037ec:	fba1 1303 	umull	r1, r3, r1, r3
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_DMA_DeInit+0xac>)
 80037f8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80037fa:	2500      	movs	r5, #0
 80037fc:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003800:	f003 021c 	and.w	r2, r3, #28
 8003804:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003806:	2301      	movs	r3, #1
 8003808:	4093      	lsls	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff ff23 	bl	8003658 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8003812:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003814:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003816:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003818:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800381a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800381c:	6863      	ldr	r3, [r4, #4]
 800381e:	3b01      	subs	r3, #1
 8003820:	2b03      	cmp	r3, #3
 8003822:	d918      	bls.n	8003856 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8003824:	2000      	movs	r0, #0
 8003826:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003828:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800382a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 800382c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800382e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003830:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003832:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003834:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003836:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800383a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800383e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_DMA_DeInit+0xb0>)
 8003842:	4413      	add	r3, r2
 8003844:	490b      	ldr	r1, [pc, #44]	; (8003874 <HAL_DMA_DeInit+0xa8>)
 8003846:	fba1 1303 	umull	r1, r3, r1, r3
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_DMA_DeInit+0xb4>)
 8003852:	6403      	str	r3, [r0, #64]	; 0x40
 8003854:	e7d1      	b.n	80037fa <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003856:	4620      	mov	r0, r4
 8003858:	f7ff ff30 	bl	80036bc <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800385c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800385e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003860:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003862:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	e7dd      	b.n	8003824 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003868:	2001      	movs	r0, #1
}
 800386a:	4770      	bx	lr
 800386c:	40020407 	.word	0x40020407
 8003870:	bffdfff8 	.word	0xbffdfff8
 8003874:	cccccccd 	.word	0xcccccccd
 8003878:	40020000 	.word	0x40020000
 800387c:	bffdfbf8 	.word	0xbffdfbf8
 8003880:	40020400 	.word	0x40020400

08003884 <HAL_DMA_Start_IT>:
{
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003888:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800388c:	2801      	cmp	r0, #1
 800388e:	d043      	beq.n	8003918 <HAL_DMA_Start_IT+0x94>
 8003890:	2001      	movs	r0, #1
 8003892:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003896:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800389a:	b2c0      	uxtb	r0, r0
 800389c:	2801      	cmp	r0, #1
 800389e:	d006      	beq.n	80038ae <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80038a4:	2300      	movs	r3, #0
 80038a6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 80038aa:	2001      	movs	r0, #1
}
 80038ac:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ae:	2002      	movs	r0, #2
 80038b0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b4:	2000      	movs	r0, #0
 80038b6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80038b8:	6825      	ldr	r5, [r4, #0]
 80038ba:	6828      	ldr	r0, [r5, #0]
 80038bc:	f020 0001 	bic.w	r0, r0, #1
 80038c0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7ff fea0 	bl	8003608 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80038c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038ca:	b1d3      	cbz	r3, 8003902 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	6813      	ldr	r3, [r2, #0]
 80038d0:	f043 030e 	orr.w	r3, r3, #14
 80038d4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80038de:	d003      	beq.n	80038e8 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 80038e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80038ea:	b11b      	cbz	r3, 80038f4 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80038f4:	6822      	ldr	r2, [r4, #0]
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2000      	movs	r0, #0
 8003900:	e7d4      	b.n	80038ac <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	6813      	ldr	r3, [r2, #0]
 8003906:	f023 0304 	bic.w	r3, r3, #4
 800390a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800390c:	6822      	ldr	r2, [r4, #0]
 800390e:	6813      	ldr	r3, [r2, #0]
 8003910:	f043 030a 	orr.w	r3, r3, #10
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e7de      	b.n	80038d6 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003918:	2002      	movs	r0, #2
 800391a:	e7c7      	b.n	80038ac <HAL_DMA_Start_IT+0x28>

0800391c <HAL_DMA_Abort>:
  if (NULL == hdma)
 800391c:	4603      	mov	r3, r0
 800391e:	2800      	cmp	r0, #0
 8003920:	d034      	beq.n	800398c <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003922:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	2a02      	cmp	r2, #2
 800392a:	d006      	beq.n	800393a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800392c:	2204      	movs	r2, #4
 800392e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003930:	2200      	movs	r2, #0
 8003932:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003936:	2001      	movs	r0, #1
 8003938:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800393a:	6801      	ldr	r1, [r0, #0]
 800393c:	680a      	ldr	r2, [r1, #0]
 800393e:	f022 020e 	bic.w	r2, r2, #14
 8003942:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003944:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003946:	680a      	ldr	r2, [r1, #0]
 8003948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800394c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800394e:	6801      	ldr	r1, [r0, #0]
 8003950:	680a      	ldr	r2, [r1, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003958:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800395a:	f002 011c 	and.w	r1, r2, #28
 800395e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003960:	2201      	movs	r2, #1
 8003962:	408a      	lsls	r2, r1
 8003964:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003968:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800396a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 800396c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800396e:	b132      	cbz	r2, 800397e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003970:	6811      	ldr	r1, [r2, #0]
 8003972:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003976:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003978:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800397a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800397c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003984:	2000      	movs	r0, #0
 8003986:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800398a:	4770      	bx	lr
    return HAL_ERROR;
 800398c:	2001      	movs	r0, #1
}
 800398e:	4770      	bx	lr

08003990 <HAL_DMA_Abort_IT>:
{
 8003990:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003992:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d003      	beq.n	80039a4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399c:	2304      	movs	r3, #4
 800399e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80039a0:	2001      	movs	r0, #1
}
 80039a2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039a4:	6802      	ldr	r2, [r0, #0]
 80039a6:	6813      	ldr	r3, [r2, #0]
 80039a8:	f023 030e 	bic.w	r3, r3, #14
 80039ac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80039ae:	6802      	ldr	r2, [r0, #0]
 80039b0:	6813      	ldr	r3, [r2, #0]
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039b8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80039ba:	6813      	ldr	r3, [r2, #0]
 80039bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80039c4:	f003 021c 	and.w	r2, r3, #28
 80039c8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80039ca:	2301      	movs	r3, #1
 80039cc:	4093      	lsls	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80039d2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80039d4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80039d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80039d8:	b133      	cbz	r3, 80039e8 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039e2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80039e4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80039e6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80039ee:	2300      	movs	r3, #0
 80039f0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80039f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039f6:	b113      	cbz	r3, 80039fe <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80039f8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80039fa:	2000      	movs	r0, #0
 80039fc:	e7d1      	b.n	80039a2 <HAL_DMA_Abort_IT+0x12>
 80039fe:	2000      	movs	r0, #0
 8003a00:	e7cf      	b.n	80039a2 <HAL_DMA_Abort_IT+0x12>
	...

08003a04 <HAL_DMA_IRQHandler>:
{
 8003a04:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003a08:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003a0a:	6804      	ldr	r4, [r0, #0]
 8003a0c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a10:	f003 031c 	and.w	r3, r3, #28
 8003a14:	2204      	movs	r2, #4
 8003a16:	409a      	lsls	r2, r3
 8003a18:	420a      	tst	r2, r1
 8003a1a:	d015      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x44>
 8003a1c:	f015 0f04 	tst.w	r5, #4
 8003a20:	d012      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	f013 0f20 	tst.w	r3, #32
 8003a28:	d103      	bne.n	8003a32 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a32:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a34:	f003 021c 	and.w	r2, r3, #28
 8003a38:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	4093      	lsls	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003a40:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003a42:	b103      	cbz	r3, 8003a46 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003a44:	4798      	blx	r3
}
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003a48:	2202      	movs	r2, #2
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	420a      	tst	r2, r1
 8003a4e:	d028      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x9e>
 8003a50:	f015 0f02 	tst.w	r5, #2
 8003a54:	d025      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	f013 0f20 	tst.w	r3, #32
 8003a5c:	d106      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	f023 030a 	bic.w	r3, r3, #10
 8003a64:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a6c:	6802      	ldr	r2, [r0, #0]
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <HAL_DMA_IRQHandler+0xdc>)
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d90e      	bls.n	8003a92 <HAL_DMA_IRQHandler+0x8e>
 8003a74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a76:	f003 021c 	and.w	r2, r3, #28
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	4093      	lsls	r3, r2
 8003a7e:	4a19      	ldr	r2, [pc, #100]	; (8003ae4 <HAL_DMA_IRQHandler+0xe0>)
 8003a80:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003a82:	2300      	movs	r3, #0
 8003a84:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003a88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0db      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003a8e:	4798      	blx	r3
 8003a90:	e7d9      	b.n	8003a46 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a94:	f003 021c 	and.w	r2, r3, #28
 8003a98:	2302      	movs	r3, #2
 8003a9a:	4093      	lsls	r3, r2
 8003a9c:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <HAL_DMA_IRQHandler+0xe4>)
 8003a9e:	6053      	str	r3, [r2, #4]
 8003aa0:	e7ef      	b.n	8003a82 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	420b      	tst	r3, r1
 8003aaa:	d0cc      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x42>
 8003aac:	f015 0f08 	tst.w	r5, #8
 8003ab0:	d0c9      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	f023 030e 	bic.w	r3, r3, #14
 8003ab8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003aba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003abc:	f003 031c 	and.w	r3, r3, #28
 8003ac0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003aca:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003acc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003ad6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0b4      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003adc:	4798      	blx	r3
  return;
 8003ade:	e7b2      	b.n	8003a46 <HAL_DMA_IRQHandler+0x42>
 8003ae0:	40020080 	.word	0x40020080
 8003ae4:	40020400 	.word	0x40020400
 8003ae8:	40020000 	.word	0x40020000

08003aec <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003aec:	b178      	cbz	r0, 8003b0e <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003aee:	6803      	ldr	r3, [r0, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003af2:	f011 0f10 	tst.w	r1, #16
 8003af6:	d004      	beq.n	8003b02 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003af8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003afc:	d004      	beq.n	8003b08 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003afe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003b02:	601a      	str	r2, [r3, #0]
  return status;
 8003b04:	2000      	movs	r0, #0
 8003b06:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003b08:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003b0c:	e7f9      	b.n	8003b02 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003b0e:	2001      	movs	r0, #1
}
 8003b10:	4770      	bx	lr
	...

08003b14 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003b14:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003b16:	4c05      	ldr	r4, [pc, #20]	; (8003b2c <FLASH_Program_DoubleWord+0x18>)
 8003b18:	6961      	ldr	r1, [r4, #20]
 8003b1a:	f041 0101 	orr.w	r1, r1, #1
 8003b1e:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003b20:	6002      	str	r2, [r0, #0]
 8003b22:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003b26:	6043      	str	r3, [r0, #4]
}
 8003b28:	bc10      	pop	{r4}
 8003b2a:	4770      	bx	lr
 8003b2c:	58004000 	.word	0x58004000

08003b30 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003b30:	4a0c      	ldr	r2, [pc, #48]	; (8003b64 <FLASH_Program_Fast+0x34>)
 8003b32:	6953      	ldr	r3, [r2, #20]
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b38:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003b3e:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003b40:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003b42:	f851 2b04 	ldr.w	r2, [r1], #4
 8003b46:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003b4a:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003b4c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003b50:	d1f7      	bne.n	8003b42 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <FLASH_Program_Fast+0x34>)
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b5a:	d1fa      	bne.n	8003b52 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5c:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	58004000 	.word	0x58004000

08003b68 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_FLASH_Unlock+0x28>)
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	db01      	blt.n	8003b74 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003b70:	2000      	movs	r0, #0
 8003b72:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_FLASH_Unlock+0x28>)
 8003b76:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <HAL_FLASH_Unlock+0x2c>)
 8003b78:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b7a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003b7e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	db01      	blt.n	8003b8a <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003b86:	2000      	movs	r0, #0
 8003b88:	4770      	bx	lr
      status = HAL_ERROR;
 8003b8a:	2001      	movs	r0, #1
}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	58004000 	.word	0x58004000
 8003b94:	45670123 	.word	0x45670123

08003b98 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_FLASH_Lock+0x18>)
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ba0:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	db01      	blt.n	8003bac <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8003ba8:	2001      	movs	r0, #1
}
 8003baa:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2000      	movs	r0, #0
 8003bae:	4770      	bx	lr
 8003bb0:	58004000 	.word	0x58004000

08003bb4 <FLASH_WaitForLastOperation>:
{
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003bb8:	f7fd ff04 	bl	80019c4 <HAL_GetTick>
 8003bbc:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003bbe:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <FLASH_WaitForLastOperation+0x64>)
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003bc6:	d006      	beq.n	8003bd6 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003bc8:	f7fd fefc 	bl	80019c4 <HAL_GetTick>
 8003bcc:	1b00      	subs	r0, r0, r4
 8003bce:	42a8      	cmp	r0, r5
 8003bd0:	d3f5      	bcc.n	8003bbe <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8003bd2:	2003      	movs	r0, #3
}
 8003bd4:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <FLASH_WaitForLastOperation+0x64>)
 8003bd8:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003bda:	f013 0f01 	tst.w	r3, #1
 8003bde:	d002      	beq.n	8003be6 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003be0:	4a0d      	ldr	r2, [pc, #52]	; (8003c18 <FLASH_WaitForLastOperation+0x64>)
 8003be2:	2101      	movs	r1, #1
 8003be4:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8003be6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8003bea:	4013      	ands	r3, r2
 8003bec:	d001      	beq.n	8003bf2 <FLASH_WaitForLastOperation+0x3e>
 8003bee:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <FLASH_WaitForLastOperation+0x64>)
 8003bf0:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8003bf2:	b95b      	cbnz	r3, 8003c0c <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <FLASH_WaitForLastOperation+0x64>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003bfc:	d00a      	beq.n	8003c14 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003bfe:	f7fd fee1 	bl	80019c4 <HAL_GetTick>
 8003c02:	1b00      	subs	r0, r0, r4
 8003c04:	42a8      	cmp	r0, r5
 8003c06:	d3f5      	bcc.n	8003bf4 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8003c08:	2003      	movs	r0, #3
 8003c0a:	e7e3      	b.n	8003bd4 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8003c0c:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <FLASH_WaitForLastOperation+0x68>)
 8003c0e:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003c10:	2001      	movs	r0, #1
 8003c12:	e7df      	b.n	8003bd4 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003c14:	2000      	movs	r0, #0
 8003c16:	e7dd      	b.n	8003bd4 <FLASH_WaitForLastOperation+0x20>
 8003c18:	58004000 	.word	0x58004000
 8003c1c:	20000458 	.word	0x20000458

08003c20 <HAL_FLASH_Program>:
{
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003c24:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <HAL_FLASH_Program+0x5c>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d025      	beq.n	8003c78 <HAL_FLASH_Program+0x58>
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	460d      	mov	r5, r1
 8003c30:	4616      	mov	r6, r2
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_FLASH_Program+0x5c>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c40:	f7ff ffb8 	bl	8003bb4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003c44:	b970      	cbnz	r0, 8003c64 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003c46:	2c01      	cmp	r4, #1
 8003c48:	d010      	beq.n	8003c6c <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	f7ff ff6f 	bl	8003b30 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c56:	f7ff ffad 	bl	8003bb4 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003c5a:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <HAL_FLASH_Program+0x60>)
 8003c5c:	6953      	ldr	r3, [r2, #20]
 8003c5e:	ea23 0404 	bic.w	r4, r3, r4
 8003c62:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_FLASH_Program+0x5c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
}
 8003c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8003c6c:	4632      	mov	r2, r6
 8003c6e:	463b      	mov	r3, r7
 8003c70:	4628      	mov	r0, r5
 8003c72:	f7ff ff4f 	bl	8003b14 <FLASH_Program_DoubleWord>
 8003c76:	e7ec      	b.n	8003c52 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8003c78:	2002      	movs	r0, #2
 8003c7a:	e7f6      	b.n	8003c6a <HAL_FLASH_Program+0x4a>
 8003c7c:	20000458 	.word	0x20000458
 8003c80:	58004000 	.word	0x58004000

08003c84 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8003c84:	4a03      	ldr	r2, [pc, #12]	; (8003c94 <FLASH_MassErase+0x10>)
 8003c86:	6953      	ldr	r3, [r2, #20]
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8c:	f043 0304 	orr.w	r3, r3, #4
 8003c90:	6153      	str	r3, [r2, #20]
#endif
}
 8003c92:	4770      	bx	lr
 8003c94:	58004000 	.word	0x58004000

08003c98 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8003c98:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <FLASH_FlushCaches+0x64>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d006      	beq.n	8003cb2 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003ca4:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <FLASH_FlushCaches+0x64>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d012      	beq.n	8003cd6 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8003cb0:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <FLASH_FlushCaches+0x64>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cca:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e7e6      	b.n	8003ca4 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <FLASH_FlushCaches+0x64>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cde:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cee:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cf6:	601a      	str	r2, [r3, #0]
}
 8003cf8:	e7da      	b.n	8003cb0 <FLASH_FlushCaches+0x18>
 8003cfa:	bf00      	nop
 8003cfc:	58004000 	.word	0x58004000

08003d00 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003d00:	4a03      	ldr	r2, [pc, #12]	; (8003d10 <FLASH_AcknowledgePageErase+0x10>)
 8003d02:	6953      	ldr	r3, [r2, #20]
 8003d04:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003d08:	f023 0302 	bic.w	r3, r3, #2
 8003d0c:	6153      	str	r3, [r2, #20]
#endif
}
 8003d0e:	4770      	bx	lr
 8003d10:	58004000 	.word	0x58004000

08003d14 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003d14:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <FLASH_PageErase+0x18>)
 8003d16:	6953      	ldr	r3, [r2, #20]
 8003d18:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003d1c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003d20:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003d24:	f040 0002 	orr.w	r0, r0, #2
 8003d28:	6150      	str	r0, [r2, #20]
}
 8003d2a:	4770      	bx	lr
 8003d2c:	58004000 	.word	0x58004000

08003d30 <HAL_FLASHEx_Erase>:
{
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003d32:	4b1e      	ldr	r3, [pc, #120]	; (8003dac <HAL_FLASHEx_Erase+0x7c>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d035      	beq.n	8003da6 <HAL_FLASHEx_Erase+0x76>
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	460f      	mov	r7, r1
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <HAL_FLASHEx_Erase+0x7c>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d44:	2200      	movs	r2, #0
 8003d46:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d4c:	f7ff ff32 	bl	8003bb4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003d50:	4606      	mov	r6, r0
 8003d52:	bb18      	cbnz	r0, 8003d9c <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d013      	beq.n	8003d82 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003d60:	686c      	ldr	r4, [r5, #4]
 8003d62:	686b      	ldr	r3, [r5, #4]
 8003d64:	68aa      	ldr	r2, [r5, #8]
 8003d66:	4413      	add	r3, r2
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d913      	bls.n	8003d94 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f7ff ffd1 	bl	8003d14 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d76:	f7ff ff1d 	bl	8003bb4 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	b948      	cbnz	r0, 8003d92 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003d7e:	3401      	adds	r4, #1
 8003d80:	e7ef      	b.n	8003d62 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8003d82:	f7ff ff7f 	bl	8003c84 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d8a:	f7ff ff13 	bl	8003bb4 <FLASH_WaitForLastOperation>
 8003d8e:	4606      	mov	r6, r0
 8003d90:	e002      	b.n	8003d98 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8003d92:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8003d94:	f7ff ffb4 	bl	8003d00 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8003d98:	f7ff ff7e 	bl	8003c98 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003d9c:	4b03      	ldr	r3, [pc, #12]	; (8003dac <HAL_FLASHEx_Erase+0x7c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
}
 8003da2:	4630      	mov	r0, r6
 8003da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003da6:	2602      	movs	r6, #2
 8003da8:	e7fb      	b.n	8003da2 <HAL_FLASHEx_Erase+0x72>
 8003daa:	bf00      	nop
 8003dac:	20000458 	.word	0x20000458

08003db0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db0:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003db2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db4:	e069      	b.n	8003e8a <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003db6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003db8:	005e      	lsls	r6, r3, #1
 8003dba:	2403      	movs	r4, #3
 8003dbc:	40b4      	lsls	r4, r6
 8003dbe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dc2:	68cc      	ldr	r4, [r1, #12]
 8003dc4:	40b4      	lsls	r4, r6
 8003dc6:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003dc8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dca:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dcc:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd0:	684c      	ldr	r4, [r1, #4]
 8003dd2:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003dd6:	409c      	lsls	r4, r3
 8003dd8:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003ddc:	6044      	str	r4, [r0, #4]
 8003dde:	e065      	b.n	8003eac <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003de0:	08dd      	lsrs	r5, r3, #3
 8003de2:	3508      	adds	r5, #8
 8003de4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003de8:	f003 0407 	and.w	r4, r3, #7
 8003dec:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003df0:	240f      	movs	r4, #15
 8003df2:	fa04 f40c 	lsl.w	r4, r4, ip
 8003df6:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dfa:	690c      	ldr	r4, [r1, #16]
 8003dfc:	fa04 f40c 	lsl.w	r4, r4, ip
 8003e00:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003e04:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003e08:	e067      	b.n	8003eda <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e0a:	2402      	movs	r4, #2
 8003e0c:	e000      	b.n	8003e10 <HAL_GPIO_Init+0x60>
 8003e0e:	2400      	movs	r4, #0
 8003e10:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e14:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e16:	f10c 0c02 	add.w	ip, ip, #2
 8003e1a:	4d4b      	ldr	r5, [pc, #300]	; (8003f48 <HAL_GPIO_Init+0x198>)
 8003e1c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e20:	4c4a      	ldr	r4, [pc, #296]	; (8003f4c <HAL_GPIO_Init+0x19c>)
 8003e22:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003e24:	43d4      	mvns	r4, r2
 8003e26:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e2a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003e2e:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8003e32:	d001      	beq.n	8003e38 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003e34:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003e38:	4d44      	ldr	r5, [pc, #272]	; (8003f4c <HAL_GPIO_Init+0x19c>)
 8003e3a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003e3c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003e3e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e42:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003e46:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8003e4a:	d001      	beq.n	8003e50 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8003e4c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003e50:	4d3e      	ldr	r5, [pc, #248]	; (8003f4c <HAL_GPIO_Init+0x19c>)
 8003e52:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003e54:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003e58:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e5c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003e60:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8003e64:	d001      	beq.n	8003e6a <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8003e66:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003e6a:	4d38      	ldr	r5, [pc, #224]	; (8003f4c <HAL_GPIO_Init+0x19c>)
 8003e6c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003e70:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003e74:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e76:	684e      	ldr	r6, [r1, #4]
 8003e78:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8003e7c:	d001      	beq.n	8003e82 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8003e7e:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003e82:	4a32      	ldr	r2, [pc, #200]	; (8003f4c <HAL_GPIO_Init+0x19c>)
 8003e84:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003e88:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e8a:	680a      	ldr	r2, [r1, #0]
 8003e8c:	fa32 f403 	lsrs.w	r4, r2, r3
 8003e90:	d058      	beq.n	8003f44 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e92:	f04f 0c01 	mov.w	ip, #1
 8003e96:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003e9a:	ea1c 0202 	ands.w	r2, ip, r2
 8003e9e:	d0f3      	beq.n	8003e88 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ea0:	684c      	ldr	r4, [r1, #4]
 8003ea2:	f004 0403 	and.w	r4, r4, #3
 8003ea6:	3c01      	subs	r4, #1
 8003ea8:	2c01      	cmp	r4, #1
 8003eaa:	d984      	bls.n	8003db6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eac:	684c      	ldr	r4, [r1, #4]
 8003eae:	f004 0403 	and.w	r4, r4, #3
 8003eb2:	2c03      	cmp	r4, #3
 8003eb4:	d00c      	beq.n	8003ed0 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8003eb6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eb8:	005d      	lsls	r5, r3, #1
 8003eba:	f04f 0c03 	mov.w	ip, #3
 8003ebe:	fa0c fc05 	lsl.w	ip, ip, r5
 8003ec2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ec6:	688c      	ldr	r4, [r1, #8]
 8003ec8:	40ac      	lsls	r4, r5
 8003eca:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003ece:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed0:	684c      	ldr	r4, [r1, #4]
 8003ed2:	f004 0403 	and.w	r4, r4, #3
 8003ed6:	2c02      	cmp	r4, #2
 8003ed8:	d082      	beq.n	8003de0 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8003eda:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003edc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003ee0:	f04f 0c03 	mov.w	ip, #3
 8003ee4:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003ee8:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eec:	684c      	ldr	r4, [r1, #4]
 8003eee:	f004 0403 	and.w	r4, r4, #3
 8003ef2:	fa04 f40e 	lsl.w	r4, r4, lr
 8003ef6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003efa:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003efc:	684c      	ldr	r4, [r1, #4]
 8003efe:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003f02:	d0c1      	beq.n	8003e88 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f04:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003f08:	f10c 0502 	add.w	r5, ip, #2
 8003f0c:	4c0e      	ldr	r4, [pc, #56]	; (8003f48 <HAL_GPIO_Init+0x198>)
 8003f0e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003f12:	f003 0403 	and.w	r4, r3, #3
 8003f16:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003f1a:	2407      	movs	r4, #7
 8003f1c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003f20:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f24:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003f28:	f43f af71 	beq.w	8003e0e <HAL_GPIO_Init+0x5e>
 8003f2c:	4c08      	ldr	r4, [pc, #32]	; (8003f50 <HAL_GPIO_Init+0x1a0>)
 8003f2e:	42a0      	cmp	r0, r4
 8003f30:	d006      	beq.n	8003f40 <HAL_GPIO_Init+0x190>
 8003f32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f36:	42a0      	cmp	r0, r4
 8003f38:	f43f af67 	beq.w	8003e0a <HAL_GPIO_Init+0x5a>
 8003f3c:	2407      	movs	r4, #7
 8003f3e:	e767      	b.n	8003e10 <HAL_GPIO_Init+0x60>
 8003f40:	2401      	movs	r4, #1
 8003f42:	e765      	b.n	8003e10 <HAL_GPIO_Init+0x60>
  }
}
 8003f44:	bd70      	pop	{r4, r5, r6, pc}
 8003f46:	bf00      	nop
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	58000800 	.word	0x58000800
 8003f50:	48000400 	.word	0x48000400

08003f54 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003f54:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003f56:	fa31 f203 	lsrs.w	r2, r1, r3
 8003f5a:	d071      	beq.n	8004040 <HAL_GPIO_DeInit+0xec>
{
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5e:	e02e      	b.n	8003fbe <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003f60:	2502      	movs	r5, #2
 8003f62:	e000      	b.n	8003f66 <HAL_GPIO_DeInit+0x12>
 8003f64:	2500      	movs	r5, #0
 8003f66:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003f6a:	45a4      	cmp	ip, r4
 8003f6c:	d049      	beq.n	8004002 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003f6e:	6804      	ldr	r4, [r0, #0]
 8003f70:	005d      	lsls	r5, r3, #1
 8003f72:	f04f 0c03 	mov.w	ip, #3
 8003f76:	fa0c fc05 	lsl.w	ip, ip, r5
 8003f7a:	ea44 040c 	orr.w	r4, r4, ip
 8003f7e:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003f80:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003f84:	f10e 0e08 	add.w	lr, lr, #8
 8003f88:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003f8c:	f003 0507 	and.w	r5, r3, #7
 8003f90:	00ae      	lsls	r6, r5, #2
 8003f92:	250f      	movs	r5, #15
 8003f94:	40b5      	lsls	r5, r6
 8003f96:	ea24 0405 	bic.w	r4, r4, r5
 8003f9a:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f9e:	6884      	ldr	r4, [r0, #8]
 8003fa0:	ea24 040c 	bic.w	r4, r4, ip
 8003fa4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fa6:	6844      	ldr	r4, [r0, #4]
 8003fa8:	ea24 0202 	bic.w	r2, r4, r2
 8003fac:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fae:	68c2      	ldr	r2, [r0, #12]
 8003fb0:	ea22 020c 	bic.w	r2, r2, ip
 8003fb4:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8003fb6:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003fb8:	fa31 f203 	lsrs.w	r2, r1, r3
 8003fbc:	d03f      	beq.n	800403e <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003fc2:	ea12 0701 	ands.w	r7, r2, r1
 8003fc6:	d0f6      	beq.n	8003fb6 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003fc8:	089e      	lsrs	r6, r3, #2
 8003fca:	1cb5      	adds	r5, r6, #2
 8003fcc:	4c1d      	ldr	r4, [pc, #116]	; (8004044 <HAL_GPIO_DeInit+0xf0>)
 8003fce:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003fd2:	f003 0c03 	and.w	ip, r3, #3
 8003fd6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003fda:	f04f 0e07 	mov.w	lr, #7
 8003fde:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003fe2:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003fe6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003fea:	d0bb      	beq.n	8003f64 <HAL_GPIO_DeInit+0x10>
 8003fec:	4d16      	ldr	r5, [pc, #88]	; (8004048 <HAL_GPIO_DeInit+0xf4>)
 8003fee:	42a8      	cmp	r0, r5
 8003ff0:	d005      	beq.n	8003ffe <HAL_GPIO_DeInit+0xaa>
 8003ff2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ff6:	42a8      	cmp	r0, r5
 8003ff8:	d0b2      	beq.n	8003f60 <HAL_GPIO_DeInit+0xc>
 8003ffa:	2507      	movs	r5, #7
 8003ffc:	e7b3      	b.n	8003f66 <HAL_GPIO_DeInit+0x12>
 8003ffe:	2501      	movs	r5, #1
 8004000:	e7b1      	b.n	8003f66 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8004002:	4c12      	ldr	r4, [pc, #72]	; (800404c <HAL_GPIO_DeInit+0xf8>)
 8004004:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004008:	ea25 0507 	bic.w	r5, r5, r7
 800400c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004010:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004014:	ea25 0507 	bic.w	r5, r5, r7
 8004018:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800401c:	6825      	ldr	r5, [r4, #0]
 800401e:	ea25 0507 	bic.w	r5, r5, r7
 8004022:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004024:	6865      	ldr	r5, [r4, #4]
 8004026:	ea25 0707 	bic.w	r7, r5, r7
 800402a:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800402c:	4d05      	ldr	r5, [pc, #20]	; (8004044 <HAL_GPIO_DeInit+0xf0>)
 800402e:	3602      	adds	r6, #2
 8004030:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004034:	ea24 040e 	bic.w	r4, r4, lr
 8004038:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 800403c:	e797      	b.n	8003f6e <HAL_GPIO_DeInit+0x1a>
  }
}
 800403e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40010000 	.word	0x40010000
 8004048:	48000400 	.word	0x48000400
 800404c:	58000800 	.word	0x58000800

08004050 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004050:	b10a      	cbz	r2, 8004056 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004052:	6181      	str	r1, [r0, #24]
 8004054:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004056:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004058:	4770      	bx	lr

0800405a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800405a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800405c:	ea01 0203 	and.w	r2, r1, r3
 8004060:	ea21 0103 	bic.w	r1, r1, r3
 8004064:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004068:	6181      	str	r1, [r0, #24]
}
 800406a:	4770      	bx	lr

0800406c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800406c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	4203      	tst	r3, r0
 8004074:	d100      	bne.n	8004078 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004076:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004078:	4b02      	ldr	r3, [pc, #8]	; (8004084 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800407a:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800407c:	f7fe fc30 	bl	80028e0 <HAL_GPIO_EXTI_Callback>
}
 8004080:	e7f9      	b.n	8004076 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004082:	bf00      	nop
 8004084:	58000800 	.word	0x58000800

08004088 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004088:	4a02      	ldr	r2, [pc, #8]	; (8004094 <HAL_PWR_EnableBkUpAccess+0xc>)
 800408a:	6813      	ldr	r3, [r2, #0]
 800408c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004090:	6013      	str	r3, [r2, #0]
}
 8004092:	4770      	bx	lr
 8004094:	58000400 	.word	0x58000400

08004098 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004098:	b510      	push	{r4, lr}
 800409a:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800409c:	b9a0      	cbnz	r0, 80040c8 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800409e:	4b0f      	ldr	r3, [pc, #60]	; (80040dc <HAL_PWR_EnterSLEEPMode+0x44>)
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80040a6:	d10a      	bne.n	80040be <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040a8:	4a0d      	ldr	r2, [pc, #52]	; (80040e0 <HAL_PWR_EnterSLEEPMode+0x48>)
 80040aa:	6913      	ldr	r3, [r2, #16]
 80040ac:	f023 0304 	bic.w	r3, r3, #4
 80040b0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80040b2:	2c01      	cmp	r4, #1
 80040b4:	d010      	beq.n	80040d8 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80040b6:	bf40      	sev
    __WFE();
 80040b8:	bf20      	wfe
    __WFE();
 80040ba:	bf20      	wfe
  }
}
 80040bc:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80040be:	f000 f821 	bl	8004104 <HAL_PWREx_DisableLowPowerRunMode>
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_PWR_EnterSLEEPMode+0x10>
 80040c6:	e7f9      	b.n	80040bc <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80040c8:	4b04      	ldr	r3, [pc, #16]	; (80040dc <HAL_PWR_EnterSLEEPMode+0x44>)
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f413 7f00 	tst.w	r3, #512	; 0x200
 80040d0:	d1ea      	bne.n	80040a8 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 80040d2:	f000 f80f 	bl	80040f4 <HAL_PWREx_EnableLowPowerRunMode>
 80040d6:	e7e7      	b.n	80040a8 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 80040d8:	bf30      	wfi
 80040da:	e7ef      	b.n	80040bc <HAL_PWR_EnterSLEEPMode+0x24>
 80040dc:	58000400 	.word	0x58000400
 80040e0:	e000ed00 	.word	0xe000ed00

080040e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 80040e4:	4b02      	ldr	r3, [pc, #8]	; (80040f0 <HAL_PWREx_GetVoltageRange+0xc>)
 80040e6:	6818      	ldr	r0, [r3, #0]
}
 80040e8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	58000400 	.word	0x58000400

080040f4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80040f4:	4a02      	ldr	r2, [pc, #8]	; (8004100 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040fc:	6013      	str	r3, [r2, #0]
}
 80040fe:	4770      	bx	lr
 8004100:	58000400 	.word	0x58000400

08004104 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004104:	4a0f      	ldr	r2, [pc, #60]	; (8004144 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004106:	6813      	ldr	r3, [r2, #0]
 8004108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800410c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2232      	movs	r2, #50	; 0x32
 8004114:	fb02 f303 	mul.w	r3, r2, r3
 8004118:	4a0c      	ldr	r2, [pc, #48]	; (800414c <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004120:	e000      	b.n	8004124 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8004122:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004124:	4a07      	ldr	r2, [pc, #28]	; (8004144 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004126:	6952      	ldr	r2, [r2, #20]
 8004128:	f412 7f00 	tst.w	r2, #512	; 0x200
 800412c:	d001      	beq.n	8004132 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f7      	bne.n	8004122 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004132:	4b04      	ldr	r3, [pc, #16]	; (8004144 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f413 7f00 	tst.w	r3, #512	; 0x200
 800413a:	d101      	bne.n	8004140 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 800413c:	2000      	movs	r0, #0
 800413e:	4770      	bx	lr
    return HAL_TIMEOUT;
 8004140:	2003      	movs	r0, #3
}
 8004142:	4770      	bx	lr
 8004144:	58000400 	.word	0x58000400
 8004148:	20000074 	.word	0x20000074
 800414c:	431bde83 	.word	0x431bde83

08004150 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004150:	4a0c      	ldr	r2, [pc, #48]	; (8004184 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	f023 0307 	bic.w	r3, r3, #7
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800415e:	4a0a      	ldr	r2, [pc, #40]	; (8004188 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8004160:	6913      	ldr	r3, [r2, #16]
 8004162:	f043 0304 	orr.w	r3, r3, #4
 8004166:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004168:	2801      	cmp	r0, #1
 800416a:	d008      	beq.n	800417e <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800416c:	bf40      	sev
    __WFE();
 800416e:	bf20      	wfe
    __WFE();
 8004170:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8004174:	6913      	ldr	r3, [r2, #16]
 8004176:	f023 0304 	bic.w	r3, r3, #4
 800417a:	6113      	str	r3, [r2, #16]
}
 800417c:	4770      	bx	lr
    __WFI();
 800417e:	bf30      	wfi
 8004180:	e7f7      	b.n	8004172 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8004182:	bf00      	nop
 8004184:	58000400 	.word	0x58000400
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800418c:	b530      	push	{r4, r5, lr}
 800418e:	b089      	sub	sp, #36	; 0x24
 8004190:	4604      	mov	r4, r0
 8004192:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004194:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <RCC_SetFlashLatency+0xb4>)
 8004196:	e893 0003 	ldmia.w	r3, {r0, r1}
 800419a:	9006      	str	r0, [sp, #24]
 800419c:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80041a0:	f103 0208 	add.w	r2, r3, #8
 80041a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041a8:	9004      	str	r0, [sp, #16]
 80041aa:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80041ae:	ad01      	add	r5, sp, #4
 80041b0:	3310      	adds	r3, #16
 80041b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ba:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80041be:	d007      	beq.n	80041d0 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80041c0:	2300      	movs	r3, #0
 80041c2:	e014      	b.n	80041ee <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 80041c4:	aa08      	add	r2, sp, #32
 80041c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80041ca:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80041ce:	e01e      	b.n	800420e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80041d0:	2300      	movs	r3, #0
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d808      	bhi.n	80041e8 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80041d6:	aa08      	add	r2, sp, #32
 80041d8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80041dc:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 80041e0:	42a2      	cmp	r2, r4
 80041e2:	d2ef      	bcs.n	80041c4 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80041e4:	3301      	adds	r3, #1
 80041e6:	e7f4      	b.n	80041d2 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80041e8:	2500      	movs	r5, #0
 80041ea:	e010      	b.n	800420e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80041ec:	3301      	adds	r3, #1
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d80c      	bhi.n	800420c <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80041f2:	aa08      	add	r2, sp, #32
 80041f4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80041f8:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 80041fc:	42a2      	cmp	r2, r4
 80041fe:	d3f5      	bcc.n	80041ec <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004200:	aa08      	add	r2, sp, #32
 8004202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004206:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800420a:	e000      	b.n	800420e <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800420c:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800420e:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <RCC_SetFlashLatency+0xb8>)
 8004210:	6813      	ldr	r3, [r2, #0]
 8004212:	f023 0307 	bic.w	r3, r3, #7
 8004216:	432b      	orrs	r3, r5
 8004218:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800421a:	f7fd fbd3 	bl	80019c4 <HAL_GetTick>
 800421e:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004220:	4b08      	ldr	r3, [pc, #32]	; (8004244 <RCC_SetFlashLatency+0xb8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	42ab      	cmp	r3, r5
 800422a:	d006      	beq.n	800423a <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800422c:	f7fd fbca 	bl	80019c4 <HAL_GetTick>
 8004230:	1b00      	subs	r0, r0, r4
 8004232:	2802      	cmp	r0, #2
 8004234:	d9f4      	bls.n	8004220 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8004236:	2003      	movs	r0, #3
 8004238:	e000      	b.n	800423c <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800423a:	2000      	movs	r0, #0
}
 800423c:	b009      	add	sp, #36	; 0x24
 800423e:	bd30      	pop	{r4, r5, pc}
 8004240:	08012240 	.word	0x08012240
 8004244:	58004000 	.word	0x58004000

08004248 <RCC_SetFlashLatencyFromMSIRange>:
{
 8004248:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800424a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8004250:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	4a08      	ldr	r2, [pc, #32]	; (8004284 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8004262:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004266:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800426a:	f7ff ff3b 	bl	80040e4 <HAL_PWREx_GetVoltageRange>
 800426e:	4601      	mov	r1, r0
 8004270:	4805      	ldr	r0, [pc, #20]	; (8004288 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8004272:	fba0 3004 	umull	r3, r0, r0, r4
 8004276:	0c80      	lsrs	r0, r0, #18
 8004278:	f7ff ff88 	bl	800418c <RCC_SetFlashLatency>
}
 800427c:	bd10      	pop	{r4, pc}
 800427e:	bf00      	nop
 8004280:	080127f0 	.word	0x080127f0
 8004284:	08012790 	.word	0x08012790
 8004288:	431bde83 	.word	0x431bde83

0800428c <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800428c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004290:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004298:	f011 010c 	ands.w	r1, r1, #12
 800429c:	d00a      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x28>
 800429e:	290c      	cmp	r1, #12
 80042a0:	d006      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a2:	2904      	cmp	r1, #4
 80042a4:	d047      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a6:	2908      	cmp	r1, #8
 80042a8:	d03b      	beq.n	8004322 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80042aa:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80042ac:	4610      	mov	r0, r2
 80042ae:	e026      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d1f6      	bne.n	80042a2 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80042b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f013 0308 	ands.w	r3, r3, #8
 80042be:	d00d      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x50>
 80042c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f013 0308 	ands.w	r3, r3, #8
 80042ca:	d124      	bne.n	8004316 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80042cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d0:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80042d4:	4a2e      	ldr	r2, [pc, #184]	; (8004390 <HAL_RCC_GetSysClockFreq+0x104>)
 80042d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042da:	e00e      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80042dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	f012 0f08 	tst.w	r2, #8
 80042e6:	d112      	bne.n	800430e <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80042e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80042f4:	4a26      	ldr	r2, [pc, #152]	; (8004390 <HAL_RCC_GetSysClockFreq+0x104>)
 80042f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80042fa:	b1d1      	cbz	r1, 8004332 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 80042fc:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004308:	2b0c      	cmp	r3, #12
 800430a:	d01a      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0xb6>
}
 800430c:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800430e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	e7ee      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x68>
 8004316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431a:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800431c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004320:	e7d8      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 800432c:	d106      	bne.n	800433c <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800432e:	4819      	ldr	r0, [pc, #100]	; (8004394 <HAL_RCC_GetSysClockFreq+0x108>)
 8004330:	e7e5      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8004332:	4610      	mov	r0, r2
 8004334:	e7e3      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004336:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8004338:	4817      	ldr	r0, [pc, #92]	; (8004398 <HAL_RCC_GetSysClockFreq+0x10c>)
 800433a:	e7e0      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800433c:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800433e:	4816      	ldr	r0, [pc, #88]	; (8004398 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004340:	e7dd      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800434c:	2b02      	cmp	r3, #2
 800434e:	d009      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0xd8>
 8004350:	2b03      	cmp	r3, #3
 8004352:	d108      	bne.n	8004366 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800435e:	d115      	bne.n	800438c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004360:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <HAL_RCC_GetSysClockFreq+0x108>)
 8004362:	e000      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8004364:	4a0c      	ldr	r2, [pc, #48]	; (8004398 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436a:	68d8      	ldr	r0, [r3, #12]
 800436c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004370:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004374:	68d8      	ldr	r0, [r3, #12]
 8004376:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800437a:	3001      	adds	r0, #1
 800437c:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004380:	68d8      	ldr	r0, [r3, #12]
 8004382:	0f40      	lsrs	r0, r0, #29
 8004384:	3001      	adds	r0, #1
 8004386:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800438a:	e7bf      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 800438c:	4a02      	ldr	r2, [pc, #8]	; (8004398 <HAL_RCC_GetSysClockFreq+0x10c>)
 800438e:	e7ea      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0xda>
 8004390:	080127f0 	.word	0x080127f0
 8004394:	01e84800 	.word	0x01e84800
 8004398:	00f42400 	.word	0x00f42400

0800439c <HAL_RCC_GetHCLKFreq>:
{
 800439c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800439e:	f7ff ff75 	bl	800428c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043ac:	4a02      	ldr	r2, [pc, #8]	; (80043b8 <HAL_RCC_GetHCLKFreq+0x1c>)
 80043ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80043b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80043b6:	bd08      	pop	{r3, pc}
 80043b8:	08012790 	.word	0x08012790

080043bc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80043bc:	2800      	cmp	r0, #0
 80043be:	f000 8311 	beq.w	80049e4 <HAL_RCC_OscConfig+0x628>
{
 80043c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c4:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	689d      	ldr	r5, [r3, #8]
 80043cc:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80043d0:	68de      	ldr	r6, [r3, #12]
 80043d2:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043d6:	6803      	ldr	r3, [r0, #0]
 80043d8:	f013 0f20 	tst.w	r3, #32
 80043dc:	d02a      	beq.n	8004434 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80043de:	2d00      	cmp	r5, #0
 80043e0:	d065      	beq.n	80044ae <HAL_RCC_OscConfig+0xf2>
 80043e2:	2d0c      	cmp	r5, #12
 80043e4:	d061      	beq.n	80044aa <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043e6:	6a23      	ldr	r3, [r4, #32]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80bf 	beq.w	800456c <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80043ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f2:	6813      	ldr	r3, [r2, #0]
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80043fa:	f7fd fae3 	bl	80019c4 <HAL_GetTick>
 80043fe:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f013 0f02 	tst.w	r3, #2
 800440a:	f000 80a7 	beq.w	800455c <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	f042 0208 	orr.w	r2, r2, #8
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004420:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004426:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800442e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004432:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	f013 0f01 	tst.w	r3, #1
 800443a:	f000 80b5 	beq.w	80045a8 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800443e:	2d08      	cmp	r5, #8
 8004440:	f000 80ae 	beq.w	80045a0 <HAL_RCC_OscConfig+0x1e4>
 8004444:	2d0c      	cmp	r5, #12
 8004446:	f000 80a8 	beq.w	800459a <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800444a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800444e:	6813      	ldr	r3, [r2, #0]
 8004450:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004454:	68a1      	ldr	r1, [r4, #8]
 8004456:	430b      	orrs	r3, r1
 8004458:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445a:	6863      	ldr	r3, [r4, #4]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	f000 80c4 	beq.w	80045ec <HAL_RCC_OscConfig+0x230>
 8004464:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004468:	f000 80c5 	beq.w	80045f6 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800446c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004476:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800447e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 80c2 	beq.w	800460c <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8004488:	f7fd fa9c 	bl	80019c4 <HAL_GetTick>
 800448c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004498:	f040 8086 	bne.w	80045a8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7fd fa92 	bl	80019c4 <HAL_GetTick>
 80044a0:	1bc0      	subs	r0, r0, r7
 80044a2:	2864      	cmp	r0, #100	; 0x64
 80044a4:	d9f3      	bls.n	800448e <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 80044a6:	2003      	movs	r0, #3
 80044a8:	e2a9      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044aa:	2e01      	cmp	r6, #1
 80044ac:	d19b      	bne.n	80043e6 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80044ae:	6a23      	ldr	r3, [r4, #32]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8299 	beq.w	80049e8 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80044b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f013 0f08 	tst.w	r3, #8
 80044c2:	d029      	beq.n	8004518 <HAL_RCC_OscConfig+0x15c>
 80044c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ce:	4298      	cmp	r0, r3
 80044d0:	d92a      	bls.n	8004528 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044d2:	f7ff feb9 	bl	8004248 <RCC_SetFlashLatencyFromMSIRange>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	f040 8288 	bne.w	80049ec <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	f042 0208 	orr.w	r2, r2, #8
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80044ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80044f0:	430a      	orrs	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80044fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004500:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004502:	f7ff ff4b 	bl	800439c <HAL_RCC_GetHCLKFreq>
 8004506:	4bba      	ldr	r3, [pc, #744]	; (80047f0 <HAL_RCC_OscConfig+0x434>)
 8004508:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800450a:	4bba      	ldr	r3, [pc, #744]	; (80047f4 <HAL_RCC_OscConfig+0x438>)
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	f7fd fa57 	bl	80019c0 <HAL_InitTick>
        if (status != HAL_OK)
 8004512:	2800      	cmp	r0, #0
 8004514:	d08e      	beq.n	8004434 <HAL_RCC_OscConfig+0x78>
 8004516:	e272      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004526:	e7d2      	b.n	80044ce <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	f042 0208 	orr.w	r2, r2, #8
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800453a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800453c:	430a      	orrs	r2, r1
 800453e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004540:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004548:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800454c:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800454e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004550:	f7ff fe7a 	bl	8004248 <RCC_SetFlashLatencyFromMSIRange>
 8004554:	2800      	cmp	r0, #0
 8004556:	d0d4      	beq.n	8004502 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8004558:	2001      	movs	r0, #1
 800455a:	e250      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800455c:	f7fd fa32 	bl	80019c4 <HAL_GetTick>
 8004560:	1bc0      	subs	r0, r0, r7
 8004562:	2802      	cmp	r0, #2
 8004564:	f67f af4c 	bls.w	8004400 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004568:	2003      	movs	r0, #3
 800456a:	e248      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800456c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004570:	6813      	ldr	r3, [r2, #0]
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004578:	f7fd fa24 	bl	80019c4 <HAL_GetTick>
 800457c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800457e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f013 0f02 	tst.w	r3, #2
 8004588:	f43f af54 	beq.w	8004434 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800458c:	f7fd fa1a 	bl	80019c4 <HAL_GetTick>
 8004590:	1bc0      	subs	r0, r0, r7
 8004592:	2802      	cmp	r0, #2
 8004594:	d9f3      	bls.n	800457e <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8004596:	2003      	movs	r0, #3
 8004598:	e231      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800459a:	2e03      	cmp	r6, #3
 800459c:	f47f af55 	bne.w	800444a <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80045a0:	6863      	ldr	r3, [r4, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8224 	beq.w	80049f0 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	f013 0f02 	tst.w	r3, #2
 80045ae:	d056      	beq.n	800465e <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045b0:	2d04      	cmp	r5, #4
 80045b2:	d03d      	beq.n	8004630 <HAL_RCC_OscConfig+0x274>
 80045b4:	2d0c      	cmp	r5, #12
 80045b6:	d039      	beq.n	800462c <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b8:	6923      	ldr	r3, [r4, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 808a 	beq.w	80046d4 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80045c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c4:	6813      	ldr	r3, [r2, #0]
 80045c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80045cc:	f7fd f9fa 	bl	80019c4 <HAL_GetTick>
 80045d0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80045dc:	d136      	bne.n	800464c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045de:	f7fd f9f1 	bl	80019c4 <HAL_GetTick>
 80045e2:	1b80      	subs	r0, r0, r6
 80045e4:	2802      	cmp	r0, #2
 80045e6:	d9f4      	bls.n	80045d2 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 80045e8:	2003      	movs	r0, #3
 80045ea:	e208      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80045ec:	6813      	ldr	r3, [r2, #0]
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
}
 80045f4:	e744      	b.n	8004480 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80045f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004600:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004608:	601a      	str	r2, [r3, #0]
}
 800460a:	e739      	b.n	8004480 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 800460c:	f7fd f9da 	bl	80019c4 <HAL_GetTick>
 8004610:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800461c:	d0c4      	beq.n	80045a8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461e:	f7fd f9d1 	bl	80019c4 <HAL_GetTick>
 8004622:	1bc0      	subs	r0, r0, r7
 8004624:	2864      	cmp	r0, #100	; 0x64
 8004626:	d9f4      	bls.n	8004612 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8004628:	2003      	movs	r0, #3
 800462a:	e1e8      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800462c:	2e02      	cmp	r6, #2
 800462e:	d1c3      	bne.n	80045b8 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004630:	6923      	ldr	r3, [r4, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 81de 	beq.w	80049f4 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004638:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800463a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800463e:	6853      	ldr	r3, [r2, #4]
 8004640:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004644:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004648:	6053      	str	r3, [r2, #4]
}
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800464e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004652:	6853      	ldr	r3, [r2, #4]
 8004654:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004658:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800465c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	f013 0f08 	tst.w	r3, #8
 8004664:	d07e      	beq.n	8004764 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004666:	69a3      	ldr	r3, [r4, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d062      	beq.n	8004732 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 800466c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004674:	69e1      	ldr	r1, [r4, #28]
 8004676:	f003 0210 	and.w	r2, r3, #16
 800467a:	4291      	cmp	r1, r2
 800467c:	d011      	beq.n	80046a2 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800467e:	f003 0203 	and.w	r2, r3, #3
 8004682:	2a02      	cmp	r2, #2
 8004684:	f000 81b8 	beq.w	80049f8 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004688:	f013 0f01 	tst.w	r3, #1
 800468c:	d138      	bne.n	8004700 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800468e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004692:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004696:	f023 0310 	bic.w	r3, r3, #16
 800469a:	69e1      	ldr	r1, [r4, #28]
 800469c:	430b      	orrs	r3, r1
 800469e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80046a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80046b2:	f7fd f987 	bl	80019c4 <HAL_GetTick>
 80046b6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80046b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c0:	f013 0f02 	tst.w	r3, #2
 80046c4:	d14e      	bne.n	8004764 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c6:	f7fd f97d 	bl	80019c4 <HAL_GetTick>
 80046ca:	1b80      	subs	r0, r0, r6
 80046cc:	2811      	cmp	r0, #17
 80046ce:	d9f3      	bls.n	80046b8 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 80046d0:	2003      	movs	r0, #3
 80046d2:	e194      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80046d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d8:	6813      	ldr	r3, [r2, #0]
 80046da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80046e0:	f7fd f970 	bl	80019c4 <HAL_GetTick>
 80046e4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80046e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80046f0:	d0b5      	beq.n	800465e <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f2:	f7fd f967 	bl	80019c4 <HAL_GetTick>
 80046f6:	1b80      	subs	r0, r0, r6
 80046f8:	2802      	cmp	r0, #2
 80046fa:	d9f4      	bls.n	80046e6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80046fc:	2003      	movs	r0, #3
 80046fe:	e17e      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004704:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004710:	f7fd f958 	bl	80019c4 <HAL_GetTick>
 8004714:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800471e:	f013 0f02 	tst.w	r3, #2
 8004722:	d0b4      	beq.n	800468e <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004724:	f7fd f94e 	bl	80019c4 <HAL_GetTick>
 8004728:	1b80      	subs	r0, r0, r6
 800472a:	2811      	cmp	r0, #17
 800472c:	d9f3      	bls.n	8004716 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 800472e:	2003      	movs	r0, #3
 8004730:	e165      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004736:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004742:	f7fd f93f 	bl	80019c4 <HAL_GetTick>
 8004746:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004750:	f013 0f02 	tst.w	r3, #2
 8004754:	d006      	beq.n	8004764 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004756:	f7fd f935 	bl	80019c4 <HAL_GetTick>
 800475a:	1b80      	subs	r0, r0, r6
 800475c:	2811      	cmp	r0, #17
 800475e:	d9f3      	bls.n	8004748 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8004760:	2003      	movs	r0, #3
 8004762:	e14c      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	f013 0f04 	tst.w	r3, #4
 800476a:	f000 80b8 	beq.w	80048de <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800476e:	4b22      	ldr	r3, [pc, #136]	; (80047f8 <HAL_RCC_OscConfig+0x43c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004776:	d110      	bne.n	800479a <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8004778:	f7ff fc86 	bl	8004088 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800477c:	f7fd f922 	bl	80019c4 <HAL_GetTick>
 8004780:	4606      	mov	r6, r0
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_RCC_OscConfig+0x43c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f413 7f80 	tst.w	r3, #256	; 0x100
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478c:	f7fd f91a 	bl	80019c4 <HAL_GetTick>
 8004790:	1b80      	subs	r0, r0, r6
 8004792:	2802      	cmp	r0, #2
 8004794:	d9f5      	bls.n	8004782 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8004796:	2003      	movs	r0, #3
 8004798:	e131      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800479a:	68e3      	ldr	r3, [r4, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d068      	beq.n	8004872 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80047a0:	2b85      	cmp	r3, #133	; 0x85
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047b0:	f043 0304 	orr.w	r3, r3, #4
 80047b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80047b8:	f7fd f904 	bl	80019c4 <HAL_GetTick>
 80047bc:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80047ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f013 0f02 	tst.w	r3, #2
 80047da:	d10f      	bne.n	80047fc <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047dc:	f7fd f8f2 	bl	80019c4 <HAL_GetTick>
 80047e0:	1b80      	subs	r0, r0, r6
 80047e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80047e6:	4298      	cmp	r0, r3
 80047e8:	d9f1      	bls.n	80047ce <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 80047ea:	2003      	movs	r0, #3
 80047ec:	e107      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
 80047ee:	bf00      	nop
 80047f0:	20000074 	.word	0x20000074
 80047f4:	20000078 	.word	0x20000078
 80047f8:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80047fc:	68e3      	ldr	r3, [r4, #12]
 80047fe:	2b81      	cmp	r3, #129	; 0x81
 8004800:	d001      	beq.n	8004806 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004802:	2b85      	cmp	r3, #133	; 0x85
 8004804:	d11a      	bne.n	800483c <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8004806:	f7fd f8dd 	bl	80019c4 <HAL_GetTick>
 800480a:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800480c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004810:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004824:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004828:	d159      	bne.n	80048de <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fd f8cb 	bl	80019c4 <HAL_GetTick>
 800482e:	1b80      	subs	r0, r0, r6
 8004830:	f241 3388 	movw	r3, #5000	; 0x1388
 8004834:	4298      	cmp	r0, r3
 8004836:	d9f1      	bls.n	800481c <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8004838:	2003      	movs	r0, #3
 800483a:	e0e0      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 800483c:	f7fd f8c2 	bl	80019c4 <HAL_GetTick>
 8004840:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004846:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800484a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800485e:	d03e      	beq.n	80048de <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004860:	f7fd f8b0 	bl	80019c4 <HAL_GetTick>
 8004864:	1b80      	subs	r0, r0, r6
 8004866:	f241 3388 	movw	r3, #5000	; 0x1388
 800486a:	4298      	cmp	r0, r3
 800486c:	d9f1      	bls.n	8004852 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 800486e:	2003      	movs	r0, #3
 8004870:	e0c5      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8004872:	f7fd f8a7 	bl	80019c4 <HAL_GetTick>
 8004876:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800487c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004890:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004894:	d008      	beq.n	80048a8 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004896:	f7fd f895 	bl	80019c4 <HAL_GetTick>
 800489a:	1b80      	subs	r0, r0, r6
 800489c:	f241 3388 	movw	r3, #5000	; 0x1388
 80048a0:	4298      	cmp	r0, r3
 80048a2:	d9f1      	bls.n	8004888 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 80048a4:	2003      	movs	r0, #3
 80048a6:	e0aa      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80048a8:	f7fd f88c 	bl	80019c4 <HAL_GetTick>
 80048ac:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f013 0f02 	tst.w	r3, #2
 80048ca:	d008      	beq.n	80048de <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048cc:	f7fd f87a 	bl	80019c4 <HAL_GetTick>
 80048d0:	1b80      	subs	r0, r0, r6
 80048d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80048d6:	4298      	cmp	r0, r3
 80048d8:	d9f1      	bls.n	80048be <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 80048da:	2003      	movs	r0, #3
 80048dc:	e08f      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 808b 	beq.w	80049fc <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048e6:	2d0c      	cmp	r5, #12
 80048e8:	d060      	beq.n	80049ac <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d016      	beq.n	800491c <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80048ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048f8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80048fa:	f7fd f863 	bl	80019c4 <HAL_GetTick>
 80048fe:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800490a:	d148      	bne.n	800499e <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800490c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004910:	68d1      	ldr	r1, [r2, #12]
 8004912:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <HAL_RCC_OscConfig+0x65c>)
 8004914:	400b      	ands	r3, r1
 8004916:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004918:	2000      	movs	r0, #0
 800491a:	e070      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800491c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004920:	6813      	ldr	r3, [r2, #0]
 8004922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004926:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004928:	f7fd f84c 	bl	80019c4 <HAL_GetTick>
 800492c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800492e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004938:	d12a      	bne.n	8004990 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800493a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800493e:	68d3      	ldr	r3, [r2, #12]
 8004940:	4936      	ldr	r1, [pc, #216]	; (8004a1c <HAL_RCC_OscConfig+0x660>)
 8004942:	4019      	ands	r1, r3
 8004944:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004946:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004948:	4303      	orrs	r3, r0
 800494a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800494c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004950:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004952:	4303      	orrs	r3, r0
 8004954:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004956:	4303      	orrs	r3, r0
 8004958:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800495a:	4303      	orrs	r3, r0
 800495c:	430b      	orrs	r3, r1
 800495e:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004960:	6813      	ldr	r3, [r2, #0]
 8004962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004966:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004968:	68d3      	ldr	r3, [r2, #12]
 800496a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004970:	f7fd f828 	bl	80019c4 <HAL_GetTick>
 8004974:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004980:	d13e      	bne.n	8004a00 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004982:	f7fd f81f 	bl	80019c4 <HAL_GetTick>
 8004986:	1b00      	subs	r0, r0, r4
 8004988:	280a      	cmp	r0, #10
 800498a:	d9f4      	bls.n	8004976 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 800498c:	2003      	movs	r0, #3
 800498e:	e036      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004990:	f7fd f818 	bl	80019c4 <HAL_GetTick>
 8004994:	1b40      	subs	r0, r0, r5
 8004996:	280a      	cmp	r0, #10
 8004998:	d9c9      	bls.n	800492e <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 800499a:	2003      	movs	r0, #3
 800499c:	e02f      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499e:	f7fd f811 	bl	80019c4 <HAL_GetTick>
 80049a2:	1b00      	subs	r0, r0, r4
 80049a4:	280a      	cmp	r0, #10
 80049a6:	d9ab      	bls.n	8004900 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 80049a8:	2003      	movs	r0, #3
 80049aa:	e028      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d029      	beq.n	8004a04 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 80049b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b4:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80049b6:	f003 0103 	and.w	r1, r3, #3
 80049ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049bc:	4291      	cmp	r1, r2
 80049be:	d123      	bne.n	8004a08 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80049c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049c6:	428a      	cmp	r2, r1
 80049c8:	d120      	bne.n	8004a0c <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80049ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80049d0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80049d4:	d11c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80049d6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80049da:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80049dc:	4293      	cmp	r3, r2
 80049de:	d119      	bne.n	8004a14 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 80049e0:	2000      	movs	r0, #0
 80049e2:	e00c      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 80049e4:	2001      	movs	r0, #1
}
 80049e6:	4770      	bx	lr
        return HAL_ERROR;
 80049e8:	2001      	movs	r0, #1
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 80049ec:	2001      	movs	r0, #1
 80049ee:	e006      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80049f0:	2001      	movs	r0, #1
 80049f2:	e004      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80049f4:	2001      	movs	r0, #1
 80049f6:	e002      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 80049f8:	2001      	movs	r0, #1
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 80049fc:	2000      	movs	r0, #0
}
 80049fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004a00:	2000      	movs	r0, #0
 8004a02:	e7fc      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004a04:	2001      	movs	r0, #1
 8004a06:	e7fa      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8004a08:	2001      	movs	r0, #1
 8004a0a:	e7f8      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	e7f6      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
 8004a10:	2001      	movs	r0, #1
 8004a12:	e7f4      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
 8004a14:	2001      	movs	r0, #1
 8004a16:	e7f2      	b.n	80049fe <HAL_RCC_OscConfig+0x642>
 8004a18:	eefefffc 	.word	0xeefefffc
 8004a1c:	11c1808c 	.word	0x11c1808c

08004a20 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004a20:	2800      	cmp	r0, #0
 8004a22:	f000 8127 	beq.w	8004c74 <HAL_RCC_ClockConfig+0x254>
{
 8004a26:	b570      	push	{r4, r5, r6, lr}
 8004a28:	460c      	mov	r4, r1
 8004a2a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b93      	ldr	r3, [pc, #588]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	428b      	cmp	r3, r1
 8004a36:	d32d      	bcc.n	8004a94 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	f013 0f02 	tst.w	r3, #2
 8004a3e:	d13f      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	f013 0f20 	tst.w	r3, #32
 8004a46:	d153      	bne.n	8004af0 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a4e:	d16a      	bne.n	8004b26 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	f013 0f04 	tst.w	r3, #4
 8004a56:	f040 8083 	bne.w	8004b60 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5a:	682b      	ldr	r3, [r5, #0]
 8004a5c:	f013 0f08 	tst.w	r3, #8
 8004a60:	f040 8097 	bne.w	8004b92 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	f013 0f01 	tst.w	r3, #1
 8004a6a:	f000 80de 	beq.w	8004c2a <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a6e:	686b      	ldr	r3, [r5, #4]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	f000 80a8 	beq.w	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	f000 80ad 	beq.w	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 80b2 	bne.w	8004be6 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	f012 0f02 	tst.w	r2, #2
 8004a8c:	f040 80b1 	bne.w	8004bf2 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004a90:	2001      	movs	r0, #1
 8004a92:	e0ee      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a94:	4a79      	ldr	r2, [pc, #484]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004a96:	6813      	ldr	r3, [r2, #0]
 8004a98:	f023 0307 	bic.w	r3, r3, #7
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004aa0:	f7fc ff90 	bl	80019c4 <HAL_GetTick>
 8004aa4:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b75      	ldr	r3, [pc, #468]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	42a3      	cmp	r3, r4
 8004ab0:	d0c2      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ab2:	f7fc ff87 	bl	80019c4 <HAL_GetTick>
 8004ab6:	1b80      	subs	r0, r0, r6
 8004ab8:	2802      	cmp	r0, #2
 8004aba:	d9f4      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004abc:	2003      	movs	r0, #3
 8004abe:	e0d8      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004ac0:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ac6:	688a      	ldr	r2, [r1, #8]
 8004ac8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004acc:	4313      	orrs	r3, r2
 8004ace:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004ad0:	f7fc ff78 	bl	80019c4 <HAL_GetTick>
 8004ad4:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004ae0:	d1ae      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ae2:	f7fc ff6f 	bl	80019c4 <HAL_GetTick>
 8004ae6:	1b80      	subs	r0, r0, r6
 8004ae8:	2802      	cmp	r0, #2
 8004aea:	d9f4      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004aec:	2003      	movs	r0, #3
 8004aee:	e0c0      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004af0:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af6:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8004afa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004b04:	f7fc ff5e 	bl	80019c4 <HAL_GetTick>
 8004b08:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b16:	d197      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b18:	f7fc ff54 	bl	80019c4 <HAL_GetTick>
 8004b1c:	1b80      	subs	r0, r0, r6
 8004b1e:	2802      	cmp	r0, #2
 8004b20:	d9f3      	bls.n	8004b0a <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004b22:	2003      	movs	r0, #3
 8004b24:	e0a5      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004b26:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b2c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8004b30:	f023 030f 	bic.w	r3, r3, #15
 8004b34:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004b38:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004b3c:	f7fc ff42 	bl	80019c4 <HAL_GetTick>
 8004b40:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004b4e:	f47f af7f 	bne.w	8004a50 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b52:	f7fc ff37 	bl	80019c4 <HAL_GetTick>
 8004b56:	1b80      	subs	r0, r0, r6
 8004b58:	2802      	cmp	r0, #2
 8004b5a:	d9f2      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8004b5c:	2003      	movs	r0, #3
 8004b5e:	e088      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004b60:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b66:	688a      	ldr	r2, [r1, #8]
 8004b68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004b70:	f7fc ff28 	bl	80019c4 <HAL_GetTick>
 8004b74:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b80:	f47f af6b 	bne.w	8004a5a <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b84:	f7fc ff1e 	bl	80019c4 <HAL_GetTick>
 8004b88:	1b80      	subs	r0, r0, r6
 8004b8a:	2802      	cmp	r0, #2
 8004b8c:	d9f3      	bls.n	8004b76 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004b8e:	2003      	movs	r0, #3
 8004b90:	e06f      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004b92:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b98:	6893      	ldr	r3, [r2, #8]
 8004b9a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004b9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004ba2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004ba4:	f7fc ff0e 	bl	80019c4 <HAL_GetTick>
 8004ba8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004bb4:	f47f af56 	bne.w	8004a64 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bb8:	f7fc ff04 	bl	80019c4 <HAL_GetTick>
 8004bbc:	1b80      	subs	r0, r0, r6
 8004bbe:	2802      	cmp	r0, #2
 8004bc0:	d9f3      	bls.n	8004baa <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004bc2:	2003      	movs	r0, #3
 8004bc4:	e055      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	e04d      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004be0:	d107      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004be2:	2001      	movs	r0, #1
 8004be4:	e045      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004bf0:	d042      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bf6:	688a      	ldr	r2, [r1, #8]
 8004bf8:	f022 0203 	bic.w	r2, r2, #3
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004c00:	f7fc fee0 	bl	80019c4 <HAL_GetTick>
 8004c04:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c10:	686a      	ldr	r2, [r5, #4]
 8004c12:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004c16:	d008      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c18:	f7fc fed4 	bl	80019c4 <HAL_GetTick>
 8004c1c:	1b80      	subs	r0, r0, r6
 8004c1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c22:	4298      	cmp	r0, r3
 8004c24:	d9ef      	bls.n	8004c06 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004c26:	2003      	movs	r0, #3
 8004c28:	e023      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	d915      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4a11      	ldr	r2, [pc, #68]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004c38:	6813      	ldr	r3, [r2, #0]
 8004c3a:	f023 0307 	bic.w	r3, r3, #7
 8004c3e:	4323      	orrs	r3, r4
 8004c40:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004c42:	f7fc febf 	bl	80019c4 <HAL_GetTick>
 8004c46:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	d006      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c54:	f7fc feb6 	bl	80019c4 <HAL_GetTick>
 8004c58:	1b40      	subs	r0, r0, r5
 8004c5a:	2802      	cmp	r0, #2
 8004c5c:	d9f4      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8004c5e:	2003      	movs	r0, #3
 8004c60:	e007      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c62:	f7ff fb9b 	bl	800439c <HAL_RCC_GetHCLKFreq>
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004c68:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	f7fc fea7 	bl	80019c0 <HAL_InitTick>
}
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004c74:	2001      	movs	r0, #1
}
 8004c76:	4770      	bx	lr
        return HAL_ERROR;
 8004c78:	2001      	movs	r0, #1
 8004c7a:	e7fa      	b.n	8004c72 <HAL_RCC_ClockConfig+0x252>
 8004c7c:	58004000 	.word	0x58004000
 8004c80:	20000074 	.word	0x20000074
 8004c84:	20000078 	.word	0x20000078

08004c88 <HAL_RCC_GetPCLK1Freq>:
{
 8004c88:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c8a:	f7ff fb87 	bl	800439c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004c98:	4a02      	ldr	r2, [pc, #8]	; (8004ca4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004c9e:	40d8      	lsrs	r0, r3
 8004ca0:	bd08      	pop	{r3, pc}
 8004ca2:	bf00      	nop
 8004ca4:	080127d0 	.word	0x080127d0

08004ca8 <HAL_RCC_GetPCLK2Freq>:
{
 8004ca8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004caa:	f7ff fb77 	bl	800439c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004cb8:	4a02      	ldr	r2, [pc, #8]	; (8004cc4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004cbe:	40d8      	lsrs	r0, r3
 8004cc0:	bd08      	pop	{r3, pc}
 8004cc2:	bf00      	nop
 8004cc4:	080127d0 	.word	0x080127d0

08004cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ccc:	6803      	ldr	r3, [r0, #0]
 8004cce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004cd2:	f040 80ab 	bne.w	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004cd6:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	f013 0f01 	tst.w	r3, #1
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ce0:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ce6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004cea:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004cee:	b292      	uxth	r2, r2
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	f013 0f02 	tst.w	r3, #2
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cfe:	68a2      	ldr	r2, [r4, #8]
 8004d00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d04:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d08:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004d0c:	b292      	uxth	r2, r2
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	f013 0f20 	tst.w	r3, #32
 8004d1a:	d009      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d1c:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d22:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004d36:	d00c      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d38:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d3e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d42:	0c02      	lsrs	r2, r0, #16
 8004d44:	0412      	lsls	r2, r2, #16
 8004d46:	ea23 0302 	bic.w	r3, r3, r2
 8004d4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004d58:	d00c      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d60:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d64:	0c02      	lsrs	r2, r0, #16
 8004d66:	0412      	lsls	r2, r2, #16
 8004d68:	ea23 0302 	bic.w	r3, r3, r2
 8004d6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004d7a:	d00c      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004d7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d82:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d86:	0c02      	lsrs	r2, r0, #16
 8004d88:	0412      	lsls	r2, r2, #16
 8004d8a:	ea23 0302 	bic.w	r3, r3, r2
 8004d8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d9c:	f040 809e 	bne.w	8004edc <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004da6:	f040 80aa 	bne.w	8004efe <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004db0:	f040 80b6 	bne.w	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	f013 0f10 	tst.w	r3, #16
 8004dba:	d00e      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004dbc:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dc2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004dc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004dd0:	68e3      	ldr	r3, [r4, #12]
 8004dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd6:	f000 80b4 	beq.w	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004de0:	d00f      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004de2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004de8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004dec:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004df6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004df8:	b91b      	cbnz	r3, 8004e02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004dfa:	68cb      	ldr	r3, [r1, #12]
 8004dfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e00:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004e08:	d00e      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e10:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004e1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e24:	f000 8092 	beq.w	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004e28:	4628      	mov	r0, r5
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004e2c:	f7ff f92c 	bl	8004088 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004e30:	f7fc fdc8 	bl	80019c4 <HAL_GetTick>
 8004e34:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004e36:	4b48      	ldr	r3, [pc, #288]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e40:	f7fc fdc0 	bl	80019c4 <HAL_GetTick>
 8004e44:	1b40      	subs	r0, r0, r5
 8004e46:	2802      	cmp	r0, #2
 8004e48:	d9f5      	bls.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8004e4a:	2503      	movs	r5, #3
 8004e4c:	e000      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004e4e:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004e50:	2d00      	cmp	r5, #0
 8004e52:	f47f af41 	bne.w	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004e62:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d024      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004e70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004e74:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004e78:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004e7c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004e80:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004e84:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004e88:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004e8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004e90:	f012 0f02 	tst.w	r2, #2
 8004e94:	d10f      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8004e96:	2d00      	cmp	r5, #0
 8004e98:	f47f af1e 	bne.w	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ea2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004ea6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004eb0:	e712      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	e7ec      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8004eb6:	f7fc fd85 	bl	80019c4 <HAL_GetTick>
 8004eba:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec4:	f013 0f02 	tst.w	r3, #2
 8004ec8:	d1e5      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eca:	f7fc fd7b 	bl	80019c4 <HAL_GetTick>
 8004ece:	1b80      	subs	r0, r0, r6
 8004ed0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ed4:	4298      	cmp	r0, r3
 8004ed6:	d9f1      	bls.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8004ed8:	2503      	movs	r5, #3
 8004eda:	e7dc      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004edc:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004ede:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004ee2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004ee6:	0919      	lsrs	r1, r3, #4
 8004ee8:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004eec:	ea22 0201 	bic.w	r2, r2, r1
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004efc:	e750      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004efe:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004f00:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004f04:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004f08:	0919      	lsrs	r1, r3, #4
 8004f0a:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004f0e:	ea22 0201 	bic.w	r2, r2, r1
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004f1e:	e744      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f20:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004f22:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004f26:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004f2a:	0919      	lsrs	r1, r3, #4
 8004f2c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004f30:	ea22 0201 	bic.w	r2, r2, r1
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004f40:	e738      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004f42:	68cb      	ldr	r3, [r1, #12]
 8004f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f48:	60cb      	str	r3, [r1, #12]
 8004f4a:	e746      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f4c:	68cb      	ldr	r3, [r1, #12]
 8004f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f52:	60cb      	str	r3, [r1, #12]
 8004f54:	e768      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f56:	bf00      	nop
 8004f58:	58000400 	.word	0x58000400

08004f5c <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f5c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d036      	beq.n	8004fd2 <HAL_RTC_DeactivateAlarm+0x76>
 8004f64:	2301      	movs	r3, #1
 8004f66:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004f72:	22ca      	movs	r2, #202	; 0xca
 8004f74:	625a      	str	r2, [r3, #36]	; 0x24
 8004f76:	2253      	movs	r2, #83	; 0x53
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004f7a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004f7e:	d019      	beq.n	8004fb4 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004f80:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004f82:	699a      	ldr	r2, [r3, #24]
 8004f84:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004f88:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004f92:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004f94:	f022 0202 	bic.w	r2, r2, #2
 8004f98:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004fa0:	22ff      	movs	r2, #255	; 0xff
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004faa:	2300      	movs	r3, #0
 8004fac:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004fba:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fc2:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004fc4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004fcc:	2201      	movs	r2, #1
 8004fce:	65da      	str	r2, [r3, #92]	; 0x5c
 8004fd0:	e7e5      	b.n	8004f9e <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8004fd2:	2002      	movs	r0, #2
}
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40002800 	.word	0x40002800

08004fdc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004fe2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004fe4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004fe6:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004fe8:	f015 0f01 	tst.w	r5, #1
 8004fec:	d106      	bne.n	8004ffc <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004fee:	f015 0f02 	tst.w	r5, #2
 8004ff2:	d109      	bne.n	8005008 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005002:	f7fc fe87 	bl	8001d14 <HAL_RTC_AlarmAEventCallback>
 8005006:	e7f2      	b.n	8004fee <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800500a:	2202      	movs	r2, #2
 800500c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800500e:	4620      	mov	r0, r4
 8005010:	f000 f9ee 	bl	80053f0 <HAL_RTCEx_AlarmBEventCallback>
 8005014:	e7ee      	b.n	8004ff4 <HAL_RTC_AlarmIRQHandler+0x18>
 8005016:	bf00      	nop
 8005018:	40002800 	.word	0x40002800

0800501c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800501c:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800501e:	4a0b      	ldr	r2, [pc, #44]	; (800504c <HAL_RTC_WaitForSynchro+0x30>)
 8005020:	68d3      	ldr	r3, [r2, #12]
 8005022:	f023 0320 	bic.w	r3, r3, #32
 8005026:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005028:	f7fc fccc 	bl	80019c4 <HAL_GetTick>
 800502c:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <HAL_RTC_WaitForSynchro+0x30>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f013 0f20 	tst.w	r3, #32
 8005036:	d107      	bne.n	8005048 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005038:	f7fc fcc4 	bl	80019c4 <HAL_GetTick>
 800503c:	1b00      	subs	r0, r0, r4
 800503e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005042:	d9f4      	bls.n	800502e <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8005044:	2003      	movs	r0, #3
 8005046:	e000      	b.n	800504a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005048:	2000      	movs	r0, #0
}
 800504a:	bd10      	pop	{r4, pc}
 800504c:	40002800 	.word	0x40002800

08005050 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005050:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005052:	4b11      	ldr	r3, [pc, #68]	; (8005098 <RTC_EnterInitMode+0x48>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f013 0f40 	tst.w	r3, #64	; 0x40
 800505a:	d002      	beq.n	8005062 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800505c:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800505e:	4620      	mov	r0, r4
 8005060:	bd70      	pop	{r4, r5, r6, pc}
 8005062:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005064:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <RTC_EnterInitMode+0x48>)
 8005066:	68d3      	ldr	r3, [r2, #12]
 8005068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800506e:	f7fc fca9 	bl	80019c4 <HAL_GetTick>
 8005072:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8005074:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <RTC_EnterInitMode+0x48>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800507e:	d1ee      	bne.n	800505e <RTC_EnterInitMode+0xe>
 8005080:	2c03      	cmp	r4, #3
 8005082:	d0ec      	beq.n	800505e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005084:	f7fc fc9e 	bl	80019c4 <HAL_GetTick>
 8005088:	1b43      	subs	r3, r0, r5
 800508a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800508e:	d9f2      	bls.n	8005076 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005090:	2403      	movs	r4, #3
 8005092:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8005096:	e7ee      	b.n	8005076 <RTC_EnterInitMode+0x26>
 8005098:	40002800 	.word	0x40002800

0800509c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800509c:	b510      	push	{r4, lr}
 800509e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <RTC_ExitInitMode+0x4c>)
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050a8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f013 0f20 	tst.w	r3, #32
 80050b0:	d107      	bne.n	80050c2 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050b2:	f7ff ffb3 	bl	800501c <HAL_RTC_WaitForSynchro>
 80050b6:	4603      	mov	r3, r0
 80050b8:	b1a0      	cbz	r0, 80050e4 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80050c0:	e010      	b.n	80050e4 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050c2:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <RTC_ExitInitMode+0x4c>)
 80050c4:	6993      	ldr	r3, [r2, #24]
 80050c6:	f023 0320 	bic.w	r3, r3, #32
 80050ca:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050cc:	f7ff ffa6 	bl	800501c <HAL_RTC_WaitForSynchro>
 80050d0:	4603      	mov	r3, r0
 80050d2:	b110      	cbz	r0, 80050da <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050da:	4903      	ldr	r1, [pc, #12]	; (80050e8 <RTC_ExitInitMode+0x4c>)
 80050dc:	698a      	ldr	r2, [r1, #24]
 80050de:	f042 0220 	orr.w	r2, r2, #32
 80050e2:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd10      	pop	{r4, pc}
 80050e8:	40002800 	.word	0x40002800

080050ec <HAL_RTC_Init>:
  if (hrtc != NULL)
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d052      	beq.n	8005196 <HAL_RTC_Init+0xaa>
{
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80050f4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80050f8:	b163      	cbz	r3, 8005114 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80050fa:	2302      	movs	r3, #2
 80050fc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005100:	4b26      	ldr	r3, [pc, #152]	; (800519c <HAL_RTC_Init+0xb0>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f013 0f10 	tst.w	r3, #16
 8005108:	d009      	beq.n	800511e <HAL_RTC_Init+0x32>
      status = HAL_OK;
 800510a:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 800510c:	2301      	movs	r3, #1
 800510e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005112:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8005114:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8005118:	f7fc fab2 	bl	8001680 <HAL_RTC_MspInit>
 800511c:	e7ed      	b.n	80050fa <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800511e:	4b1f      	ldr	r3, [pc, #124]	; (800519c <HAL_RTC_Init+0xb0>)
 8005120:	22ca      	movs	r2, #202	; 0xca
 8005122:	625a      	str	r2, [r3, #36]	; 0x24
 8005124:	2253      	movs	r2, #83	; 0x53
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8005128:	4620      	mov	r0, r4
 800512a:	f7ff ff91 	bl	8005050 <RTC_EnterInitMode>
      if (status == HAL_OK)
 800512e:	b128      	cbz	r0, 800513c <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005130:	4b1a      	ldr	r3, [pc, #104]	; (800519c <HAL_RTC_Init+0xb0>)
 8005132:	22ff      	movs	r2, #255	; 0xff
 8005134:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005136:	2800      	cmp	r0, #0
 8005138:	d1eb      	bne.n	8005112 <HAL_RTC_Init+0x26>
 800513a:	e7e7      	b.n	800510c <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800513c:	4b17      	ldr	r3, [pc, #92]	; (800519c <HAL_RTC_Init+0xb0>)
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8005144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005148:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800514a:	6999      	ldr	r1, [r3, #24]
 800514c:	6862      	ldr	r2, [r4, #4]
 800514e:	6920      	ldr	r0, [r4, #16]
 8005150:	4302      	orrs	r2, r0
 8005152:	69a0      	ldr	r0, [r4, #24]
 8005154:	4302      	orrs	r2, r0
 8005156:	430a      	orrs	r2, r1
 8005158:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800515a:	68e2      	ldr	r2, [r4, #12]
 800515c:	68a1      	ldr	r1, [r4, #8]
 800515e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005162:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800516a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800516c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800516e:	4301      	orrs	r1, r0
 8005170:	430a      	orrs	r2, r1
 8005172:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8005174:	4620      	mov	r0, r4
 8005176:	f7ff ff91 	bl	800509c <RTC_ExitInitMode>
        if (status == HAL_OK)
 800517a:	2800      	cmp	r0, #0
 800517c:	d1d8      	bne.n	8005130 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 800517e:	4907      	ldr	r1, [pc, #28]	; (800519c <HAL_RTC_Init+0xb0>)
 8005180:	698b      	ldr	r3, [r1, #24]
 8005182:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005186:	6a22      	ldr	r2, [r4, #32]
 8005188:	69e5      	ldr	r5, [r4, #28]
 800518a:	432a      	orrs	r2, r5
 800518c:	6965      	ldr	r5, [r4, #20]
 800518e:	432a      	orrs	r2, r5
 8005190:	4313      	orrs	r3, r2
 8005192:	618b      	str	r3, [r1, #24]
 8005194:	e7cc      	b.n	8005130 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005196:	2001      	movs	r0, #1
}
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40002800 	.word	0x40002800

080051a0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80051a0:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80051a2:	e002      	b.n	80051aa <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80051a4:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80051a6:	380a      	subs	r0, #10
 80051a8:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80051aa:	2809      	cmp	r0, #9
 80051ac:	d8fa      	bhi.n	80051a4 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	b2db      	uxtb	r3, r3
}
 80051b2:	4318      	orrs	r0, r3
 80051b4:	4770      	bx	lr
	...

080051b8 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80051b8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f000 80b0 	beq.w	8005322 <HAL_RTC_SetAlarm_IT+0x16a>
{
 80051c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c6:	4605      	mov	r5, r0
 80051c8:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80051ca:	2301      	movs	r3, #1
 80051cc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051d0:	2302      	movs	r3, #2
 80051d2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80051d6:	4b54      	ldr	r3, [pc, #336]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 80051d8:	68de      	ldr	r6, [r3, #12]
 80051da:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80051de:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80051e2:	d043      	beq.n	800526c <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80051e4:	bb12      	cbnz	r2, 800522c <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051ec:	d101      	bne.n	80051f2 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80051f2:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80051f6:	7820      	ldrb	r0, [r4, #0]
 80051f8:	f7ff ffd2 	bl	80051a0 <RTC_ByteToBcd2>
 80051fc:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80051fe:	7860      	ldrb	r0, [r4, #1]
 8005200:	f7ff ffce 	bl	80051a0 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005204:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005208:	78a0      	ldrb	r0, [r4, #2]
 800520a:	f7ff ffc9 	bl	80051a0 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800520e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005210:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005212:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005216:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800521a:	f7ff ffc1 	bl	80051a0 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800521e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005222:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005224:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005226:	ea48 0000 	orr.w	r0, r8, r0
 800522a:	e020      	b.n	800526e <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800522c:	6948      	ldr	r0, [r1, #20]
 800522e:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8005232:	d009      	beq.n	8005248 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005234:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005238:	d006      	beq.n	8005248 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800523a:	4b3b      	ldr	r3, [pc, #236]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005242:	d101      	bne.n	8005248 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005244:	2300      	movs	r3, #0
 8005246:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005248:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800524a:	7863      	ldrb	r3, [r4, #1]
 800524c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800524e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005252:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005254:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005256:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005258:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800525c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005260:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005264:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005266:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005268:	4318      	orrs	r0, r3
 800526a:	e000      	b.n	800526e <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 800526c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800526e:	4b2e      	ldr	r3, [pc, #184]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 8005270:	22ca      	movs	r2, #202	; 0xca
 8005272:	625a      	str	r2, [r3, #36]	; 0x24
 8005274:	2253      	movs	r2, #83	; 0x53
 8005276:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005278:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800527a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527e:	d02a      	beq.n	80052d6 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005280:	4b29      	ldr	r3, [pc, #164]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 8005282:	699a      	ldr	r2, [r3, #24]
 8005284:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8005288:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800528a:	2202      	movs	r2, #2
 800528c:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800528e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005292:	d040      	beq.n	8005316 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005294:	4b24      	ldr	r3, [pc, #144]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 8005296:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005298:	69a2      	ldr	r2, [r4, #24]
 800529a:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800529c:	6862      	ldr	r2, [r4, #4]
 800529e:	4b22      	ldr	r3, [pc, #136]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 80052a0:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80052a2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80052a4:	f042 0202 	orr.w	r2, r2, #2
 80052a8:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80052b0:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80052b2:	4a1e      	ldr	r2, [pc, #120]	; (800532c <HAL_RTC_SetAlarm_IT+0x174>)
 80052b4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80052b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052c0:	4b19      	ldr	r3, [pc, #100]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80052cc:	2000      	movs	r0, #0
 80052ce:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80052d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80052d6:	4b14      	ldr	r3, [pc, #80]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80052de:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80052e0:	2201      	movs	r2, #1
 80052e2:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80052e4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80052e8:	d00f      	beq.n	800530a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80052ea:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 80052ec:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80052ee:	69a2      	ldr	r2, [r4, #24]
 80052f0:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 80052f6:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80052f8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005306:	619a      	str	r2, [r3, #24]
 8005308:	e7d3      	b.n	80052b2 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800530a:	69a3      	ldr	r3, [r4, #24]
 800530c:	69e2      	ldr	r2, [r4, #28]
 800530e:	4313      	orrs	r3, r2
 8005310:	4a05      	ldr	r2, [pc, #20]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 8005312:	6453      	str	r3, [r2, #68]	; 0x44
 8005314:	e7ed      	b.n	80052f2 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005316:	69a3      	ldr	r3, [r4, #24]
 8005318:	69e2      	ldr	r2, [r4, #28]
 800531a:	4313      	orrs	r3, r2
 800531c:	4a02      	ldr	r2, [pc, #8]	; (8005328 <HAL_RTC_SetAlarm_IT+0x170>)
 800531e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005320:	e7bc      	b.n	800529c <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8005322:	2002      	movs	r0, #2
}
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40002800 	.word	0x40002800
 800532c:	58000800 	.word	0x58000800

08005330 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005330:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d017      	beq.n	8005368 <HAL_RTCEx_EnableBypassShadow+0x38>
 8005338:	2101      	movs	r1, #1
 800533a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800533e:	2302      	movs	r3, #2
 8005340:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005344:	4b09      	ldr	r3, [pc, #36]	; (800536c <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8005346:	22ca      	movs	r2, #202	; 0xca
 8005348:	625a      	str	r2, [r3, #36]	; 0x24
 800534a:	2253      	movs	r2, #83	; 0x53
 800534c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	f042 0220 	orr.w	r2, r2, #32
 8005354:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005356:	22ff      	movs	r2, #255	; 0xff
 8005358:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800535a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800535e:	2300      	movs	r3, #0
 8005360:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005364:	4618      	mov	r0, r3
 8005366:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005368:	2002      	movs	r0, #2
}
 800536a:	4770      	bx	lr
 800536c:	40002800 	.word	0x40002800

08005370 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005370:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d020      	beq.n	80053ba <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8005378:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800537a:	2101      	movs	r1, #1
 800537c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005380:	2302      	movs	r3, #2
 8005382:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005386:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8005388:	22ca      	movs	r2, #202	; 0xca
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
 800538c:	2253      	movs	r2, #83	; 0x53
 800538e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005396:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005398:	4c0a      	ldr	r4, [pc, #40]	; (80053c4 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800539a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800539e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053a2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053a6:	22ff      	movs	r2, #255	; 0xff
 80053a8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80053aa:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053ae:	2300      	movs	r3, #0
 80053b0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80053b4:	4618      	mov	r0, r3
}
 80053b6:	bc10      	pop	{r4}
 80053b8:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80053ba:	2002      	movs	r0, #2
}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40002800 	.word	0x40002800
 80053c4:	58000800 	.word	0x58000800

080053c8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80053c8:	b510      	push	{r4, lr}
 80053ca:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80053cc:	4b07      	ldr	r3, [pc, #28]	; (80053ec <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053d4:	d103      	bne.n	80053de <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80053dc:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80053de:	4b03      	ldr	r3, [pc, #12]	; (80053ec <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80053e0:	2240      	movs	r2, #64	; 0x40
 80053e2:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80053e4:	f7fc fc9a 	bl	8001d1c <HAL_RTCEx_SSRUEventCallback>
 80053e8:	e7f5      	b.n	80053d6 <HAL_RTCEx_SSRUIRQHandler+0xe>
 80053ea:	bf00      	nop
 80053ec:	40002800 	.word	0x40002800

080053f0 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80053f0:	4770      	bx	lr

080053f2 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80053f2:	0089      	lsls	r1, r1, #2
 80053f4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80053f8:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80053fc:	600a      	str	r2, [r1, #0]
}
 80053fe:	4770      	bx	lr

08005400 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005400:	0089      	lsls	r1, r1, #2
 8005402:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005406:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800540a:	6808      	ldr	r0, [r1, #0]
}
 800540c:	4770      	bx	lr
	...

08005410 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005410:	4b07      	ldr	r3, [pc, #28]	; (8005430 <SUBGHZSPI_Init+0x20>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005418:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800541a:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800541e:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005420:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005424:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800542c:	601a      	str	r2, [r3, #0]
}
 800542e:	4770      	bx	lr
 8005430:	58010000 	.word	0x58010000

08005434 <HAL_SUBGHZ_Init>:
{
 8005434:	b530      	push	{r4, r5, lr}
 8005436:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8005438:	2800      	cmp	r0, #0
 800543a:	d058      	beq.n	80054ee <HAL_SUBGHZ_Init+0xba>
 800543c:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 800543e:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005440:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005444:	b10b      	cbz	r3, 800544a <HAL_SUBGHZ_Init+0x16>
 8005446:	2d03      	cmp	r5, #3
 8005448:	d10b      	bne.n	8005462 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 800544a:	2300      	movs	r3, #0
 800544c:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 800544e:	4620      	mov	r0, r4
 8005450:	f7fc f9c6 	bl	80017e0 <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005454:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <HAL_SUBGHZ_Init+0xc0>)
 8005456:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800545a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800545e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005462:	b185      	cbz	r5, 8005486 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005464:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <HAL_SUBGHZ_Init+0xc4>)
 8005466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800546a:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 800546c:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800546e:	6820      	ldr	r0, [r4, #0]
 8005470:	f7ff ffce 	bl	8005410 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005474:	2301      	movs	r3, #1
 8005476:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005478:	2300      	movs	r3, #0
 800547a:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800547c:	2301      	movs	r3, #1
 800547e:	71a3      	strb	r3, [r4, #6]
}
 8005480:	4628      	mov	r0, r5
 8005482:	b003      	add	sp, #12
 8005484:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005486:	2302      	movs	r3, #2
 8005488:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800548a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800548e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005492:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800549a:	4b18      	ldr	r3, [pc, #96]	; (80054fc <HAL_SUBGHZ_Init+0xc8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80054a2:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80054a6:	2264      	movs	r2, #100	; 0x64
 80054a8:	fb02 f303 	mul.w	r3, r2, r3
 80054ac:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 80054ae:	9b01      	ldr	r3, [sp, #4]
 80054b0:	b1d3      	cbz	r3, 80054e8 <HAL_SUBGHZ_Init+0xb4>
      count--;
 80054b2:	9b01      	ldr	r3, [sp, #4]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80054b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80054c4:	d1f3      	bne.n	80054ae <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <HAL_SUBGHZ_Init+0xc4>)
 80054c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80054cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054da:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80054dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e0:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80054e2:	2d00      	cmp	r5, #0
 80054e4:	d1ca      	bne.n	800547c <HAL_SUBGHZ_Init+0x48>
 80054e6:	e7c2      	b.n	800546e <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80054e8:	2501      	movs	r5, #1
 80054ea:	60a5      	str	r5, [r4, #8]
        break;
 80054ec:	e7eb      	b.n	80054c6 <HAL_SUBGHZ_Init+0x92>
    return status;
 80054ee:	2501      	movs	r5, #1
 80054f0:	e7c6      	b.n	8005480 <HAL_SUBGHZ_Init+0x4c>
 80054f2:	bf00      	nop
 80054f4:	58000800 	.word	0x58000800
 80054f8:	58000400 	.word	0x58000400
 80054fc:	20000074 	.word	0x20000074

08005500 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005500:	b082      	sub	sp, #8
 8005502:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005504:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <SUBGHZSPI_Transmit+0x70>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800550c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005510:	2064      	movs	r0, #100	; 0x64
 8005512:	fb00 f303 	mul.w	r3, r0, r3
 8005516:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005518:	9b01      	ldr	r3, [sp, #4]
 800551a:	b14b      	cbz	r3, 8005530 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800551c:	9b01      	ldr	r3, [sp, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005522:	4b14      	ldr	r3, [pc, #80]	; (8005574 <SUBGHZSPI_Transmit+0x74>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f013 0f02 	tst.w	r3, #2
 800552a:	d0f5      	beq.n	8005518 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800552c:	2000      	movs	r0, #0
 800552e:	e001      	b.n	8005534 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005530:	2001      	movs	r0, #1
 8005532:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8005534:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <SUBGHZSPI_Transmit+0x74>)
 8005536:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005538:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <SUBGHZSPI_Transmit+0x70>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005540:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005544:	2164      	movs	r1, #100	; 0x64
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800554c:	9b01      	ldr	r3, [sp, #4]
 800554e:	b143      	cbz	r3, 8005562 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005550:	9b01      	ldr	r3, [sp, #4]
 8005552:	3b01      	subs	r3, #1
 8005554:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005556:	4b07      	ldr	r3, [pc, #28]	; (8005574 <SUBGHZSPI_Transmit+0x74>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f013 0f01 	tst.w	r3, #1
 800555e:	d0f5      	beq.n	800554c <SUBGHZSPI_Transmit+0x4c>
 8005560:	e001      	b.n	8005566 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005562:	2001      	movs	r0, #1
 8005564:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005566:	4b03      	ldr	r3, [pc, #12]	; (8005574 <SUBGHZSPI_Transmit+0x74>)
 8005568:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800556a:	b002      	add	sp, #8
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000074 	.word	0x20000074
 8005574:	58010000 	.word	0x58010000

08005578 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005578:	b082      	sub	sp, #8
 800557a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800557c:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <SUBGHZSPI_Receive+0x78>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005584:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005588:	2064      	movs	r0, #100	; 0x64
 800558a:	fb00 f303 	mul.w	r3, r0, r3
 800558e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005590:	9b01      	ldr	r3, [sp, #4]
 8005592:	b14b      	cbz	r3, 80055a8 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005594:	9b01      	ldr	r3, [sp, #4]
 8005596:	3b01      	subs	r3, #1
 8005598:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800559a:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <SUBGHZSPI_Receive+0x7c>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f013 0f02 	tst.w	r3, #2
 80055a2:	d0f5      	beq.n	8005590 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80055a4:	2000      	movs	r0, #0
 80055a6:	e001      	b.n	80055ac <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80055a8:	2001      	movs	r0, #1
 80055aa:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80055ac:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <SUBGHZSPI_Receive+0x7c>)
 80055ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80055b2:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80055b6:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <SUBGHZSPI_Receive+0x78>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80055be:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80055c2:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80055c6:	fb0c f303 	mul.w	r3, ip, r3
 80055ca:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80055cc:	9b01      	ldr	r3, [sp, #4]
 80055ce:	b143      	cbz	r3, 80055e2 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80055d0:	9b01      	ldr	r3, [sp, #4]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80055d6:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <SUBGHZSPI_Receive+0x7c>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f013 0f01 	tst.w	r3, #1
 80055de:	d0f5      	beq.n	80055cc <SUBGHZSPI_Receive+0x54>
 80055e0:	e001      	b.n	80055e6 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80055e2:	2001      	movs	r0, #1
 80055e4:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80055e6:	4b03      	ldr	r3, [pc, #12]	; (80055f4 <SUBGHZSPI_Receive+0x7c>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	700b      	strb	r3, [r1, #0]

  return status;
}
 80055ec:	b002      	add	sp, #8
 80055ee:	4770      	bx	lr
 80055f0:	20000074 	.word	0x20000074
 80055f4:	58010000 	.word	0x58010000

080055f8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80055f8:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80055fa:	4b13      	ldr	r3, [pc, #76]	; (8005648 <SUBGHZ_WaitOnBusy+0x50>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005602:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005606:	2264      	movs	r2, #100	; 0x64
 8005608:	fb02 f303 	mul.w	r3, r2, r3
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	e006      	b.n	800561e <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005610:	2302      	movs	r3, #2
 8005612:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005614:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8005616:	b002      	add	sp, #8
 8005618:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800561a:	4213      	tst	r3, r2
 800561c:	d012      	beq.n	8005644 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800561e:	4b0b      	ldr	r3, [pc, #44]	; (800564c <SUBGHZ_WaitOnBusy+0x54>)
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f013 0304 	ands.w	r3, r3, #4
 8005626:	d000      	beq.n	800562a <SUBGHZ_WaitOnBusy+0x32>
 8005628:	2301      	movs	r3, #1
    if (count == 0U)
 800562a:	9a01      	ldr	r2, [sp, #4]
 800562c:	2a00      	cmp	r2, #0
 800562e:	d0ef      	beq.n	8005610 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8005630:	9a01      	ldr	r2, [sp, #4]
 8005632:	3a01      	subs	r2, #1
 8005634:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005636:	4a05      	ldr	r2, [pc, #20]	; (800564c <SUBGHZ_WaitOnBusy+0x54>)
 8005638:	6952      	ldr	r2, [r2, #20]
 800563a:	f012 0202 	ands.w	r2, r2, #2
 800563e:	d0ec      	beq.n	800561a <SUBGHZ_WaitOnBusy+0x22>
 8005640:	2201      	movs	r2, #1
 8005642:	e7ea      	b.n	800561a <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8005644:	2000      	movs	r0, #0
 8005646:	e7e6      	b.n	8005616 <SUBGHZ_WaitOnBusy+0x1e>
 8005648:	20000074 	.word	0x20000074
 800564c:	58000400 	.word	0x58000400

08005650 <SUBGHZ_CheckDeviceReady>:
{
 8005650:	b500      	push	{lr}
 8005652:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005654:	7903      	ldrb	r3, [r0, #4]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d004      	beq.n	8005664 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800565a:	f7ff ffcd 	bl	80055f8 <SUBGHZ_WaitOnBusy>
}
 800565e:	b003      	add	sp, #12
 8005660:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005664:	4b0d      	ldr	r3, [pc, #52]	; (800569c <SUBGHZ_CheckDeviceReady+0x4c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800566c:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8005670:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005672:	4a0b      	ldr	r2, [pc, #44]	; (80056a0 <SUBGHZ_CheckDeviceReady+0x50>)
 8005674:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005678:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800567c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8005680:	9b01      	ldr	r3, [sp, #4]
 8005682:	3b01      	subs	r3, #1
 8005684:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8005686:	9b01      	ldr	r3, [sp, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f9      	bne.n	8005680 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800568c:	4a04      	ldr	r2, [pc, #16]	; (80056a0 <SUBGHZ_CheckDeviceReady+0x50>)
 800568e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800569a:	e7de      	b.n	800565a <SUBGHZ_CheckDeviceReady+0xa>
 800569c:	20000074 	.word	0x20000074
 80056a0:	58000400 	.word	0x58000400

080056a4 <HAL_SUBGHZ_WriteRegisters>:
{
 80056a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a8:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80056aa:	7980      	ldrb	r0, [r0, #6]
 80056ac:	fa5f f880 	uxtb.w	r8, r0
 80056b0:	f1b8 0f01 	cmp.w	r8, #1
 80056b4:	d13e      	bne.n	8005734 <HAL_SUBGHZ_WriteRegisters+0x90>
 80056b6:	460c      	mov	r4, r1
 80056b8:	4617      	mov	r7, r2
 80056ba:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80056bc:	796b      	ldrb	r3, [r5, #5]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d03b      	beq.n	800573a <HAL_SUBGHZ_WriteRegisters+0x96>
 80056c2:	2301      	movs	r3, #1
 80056c4:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80056c6:	2302      	movs	r3, #2
 80056c8:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80056ca:	4628      	mov	r0, r5
 80056cc:	f7ff ffc0 	bl	8005650 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056d0:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80056d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80056de:	210d      	movs	r1, #13
 80056e0:	4628      	mov	r0, r5
 80056e2:	f7ff ff0d 	bl	8005500 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80056e6:	0a21      	lsrs	r1, r4, #8
 80056e8:	4628      	mov	r0, r5
 80056ea:	f7ff ff09 	bl	8005500 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80056ee:	b2e1      	uxtb	r1, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f7ff ff05 	bl	8005500 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80056f6:	2400      	movs	r4, #0
 80056f8:	e005      	b.n	8005706 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80056fa:	5d39      	ldrb	r1, [r7, r4]
 80056fc:	4628      	mov	r0, r5
 80056fe:	f7ff feff 	bl	8005500 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005702:	3401      	adds	r4, #1
 8005704:	b2a4      	uxth	r4, r4
 8005706:	42b4      	cmp	r4, r6
 8005708:	d3f7      	bcc.n	80056fa <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800570a:	4a0d      	ldr	r2, [pc, #52]	; (8005740 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800570c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005718:	4628      	mov	r0, r5
 800571a:	f7ff ff6d 	bl	80055f8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800571e:	68ab      	ldr	r3, [r5, #8]
 8005720:	b90b      	cbnz	r3, 8005726 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8005722:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005726:	2301      	movs	r3, #1
 8005728:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800572a:	2300      	movs	r3, #0
 800572c:	716b      	strb	r3, [r5, #5]
}
 800572e:	4640      	mov	r0, r8
 8005730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005734:	f04f 0802 	mov.w	r8, #2
 8005738:	e7f9      	b.n	800572e <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 800573a:	f04f 0802 	mov.w	r8, #2
 800573e:	e7f6      	b.n	800572e <HAL_SUBGHZ_WriteRegisters+0x8a>
 8005740:	58000400 	.word	0x58000400

08005744 <HAL_SUBGHZ_ReadRegisters>:
{
 8005744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005748:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800574a:	7980      	ldrb	r0, [r0, #6]
 800574c:	fa5f f880 	uxtb.w	r8, r0
 8005750:	f1b8 0f01 	cmp.w	r8, #1
 8005754:	d141      	bne.n	80057da <HAL_SUBGHZ_ReadRegisters+0x96>
 8005756:	460c      	mov	r4, r1
 8005758:	4615      	mov	r5, r2
 800575a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800575c:	7973      	ldrb	r3, [r6, #5]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d03e      	beq.n	80057e0 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8005762:	2301      	movs	r3, #1
 8005764:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005766:	4630      	mov	r0, r6
 8005768:	f7ff ff72 	bl	8005650 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800576c:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800576e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800577a:	211d      	movs	r1, #29
 800577c:	4630      	mov	r0, r6
 800577e:	f7ff febf 	bl	8005500 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005782:	0a21      	lsrs	r1, r4, #8
 8005784:	4630      	mov	r0, r6
 8005786:	f7ff febb 	bl	8005500 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800578a:	b2e1      	uxtb	r1, r4
 800578c:	4630      	mov	r0, r6
 800578e:	f7ff feb7 	bl	8005500 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005792:	2100      	movs	r1, #0
 8005794:	4630      	mov	r0, r6
 8005796:	f7ff feb3 	bl	8005500 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800579a:	2400      	movs	r4, #0
 800579c:	e006      	b.n	80057ac <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800579e:	4629      	mov	r1, r5
 80057a0:	4630      	mov	r0, r6
 80057a2:	f7ff fee9 	bl	8005578 <SUBGHZSPI_Receive>
      pData++;
 80057a6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80057a8:	3401      	adds	r4, #1
 80057aa:	b2a4      	uxth	r4, r4
 80057ac:	42bc      	cmp	r4, r7
 80057ae:	d3f6      	bcc.n	800579e <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057b0:	4a0d      	ldr	r2, [pc, #52]	; (80057e8 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80057b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80057be:	4630      	mov	r0, r6
 80057c0:	f7ff ff1a 	bl	80055f8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80057c4:	68b3      	ldr	r3, [r6, #8]
 80057c6:	b90b      	cbnz	r3, 80057cc <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80057c8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80057cc:	2301      	movs	r3, #1
 80057ce:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80057d0:	2300      	movs	r3, #0
 80057d2:	7173      	strb	r3, [r6, #5]
}
 80057d4:	4640      	mov	r0, r8
 80057d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80057da:	f04f 0802 	mov.w	r8, #2
 80057de:	e7f9      	b.n	80057d4 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80057e0:	f04f 0802 	mov.w	r8, #2
 80057e4:	e7f6      	b.n	80057d4 <HAL_SUBGHZ_ReadRegisters+0x90>
 80057e6:	bf00      	nop
 80057e8:	58000400 	.word	0x58000400

080057ec <HAL_SUBGHZ_ExecSetCmd>:
{
 80057ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80057f2:	7980      	ldrb	r0, [r0, #6]
 80057f4:	fa5f f980 	uxtb.w	r9, r0
 80057f8:	f1b9 0f01 	cmp.w	r9, #1
 80057fc:	d143      	bne.n	8005886 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 80057fe:	4688      	mov	r8, r1
 8005800:	4617      	mov	r7, r2
 8005802:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005804:	796b      	ldrb	r3, [r5, #5]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d040      	beq.n	800588c <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800580a:	2301      	movs	r3, #1
 800580c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800580e:	4628      	mov	r0, r5
 8005810:	f7ff ff1e 	bl	8005650 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005814:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005818:	d005      	beq.n	8005826 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 800581a:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 800581e:	d002      	beq.n	8005826 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005820:	2300      	movs	r3, #0
 8005822:	712b      	strb	r3, [r5, #4]
 8005824:	e001      	b.n	800582a <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005826:	2301      	movs	r3, #1
 8005828:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800582a:	4a1a      	ldr	r2, [pc, #104]	; (8005894 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800582c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005830:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005838:	4641      	mov	r1, r8
 800583a:	4628      	mov	r0, r5
 800583c:	f7ff fe60 	bl	8005500 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005840:	2400      	movs	r4, #0
 8005842:	e005      	b.n	8005850 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005844:	5d39      	ldrb	r1, [r7, r4]
 8005846:	4628      	mov	r0, r5
 8005848:	f7ff fe5a 	bl	8005500 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800584c:	3401      	adds	r4, #1
 800584e:	b2a4      	uxth	r4, r4
 8005850:	42b4      	cmp	r4, r6
 8005852:	d3f7      	bcc.n	8005844 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005854:	4a0f      	ldr	r2, [pc, #60]	; (8005894 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005856:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800585a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8005862:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005866:	d10a      	bne.n	800587e <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005868:	68ab      	ldr	r3, [r5, #8]
 800586a:	b90b      	cbnz	r3, 8005870 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 800586c:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005870:	2301      	movs	r3, #1
 8005872:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005874:	2300      	movs	r3, #0
 8005876:	716b      	strb	r3, [r5, #5]
}
 8005878:	4648      	mov	r0, r9
 800587a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800587e:	4628      	mov	r0, r5
 8005880:	f7ff feba 	bl	80055f8 <SUBGHZ_WaitOnBusy>
 8005884:	e7f0      	b.n	8005868 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8005886:	f04f 0902 	mov.w	r9, #2
 800588a:	e7f5      	b.n	8005878 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 800588c:	f04f 0902 	mov.w	r9, #2
 8005890:	e7f2      	b.n	8005878 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8005892:	bf00      	nop
 8005894:	58000400 	.word	0x58000400

08005898 <HAL_SUBGHZ_ExecGetCmd>:
{
 8005898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800589e:	7980      	ldrb	r0, [r0, #6]
 80058a0:	fa5f f880 	uxtb.w	r8, r0
 80058a4:	f1b8 0f01 	cmp.w	r8, #1
 80058a8:	d139      	bne.n	800591e <HAL_SUBGHZ_ExecGetCmd+0x86>
 80058aa:	460c      	mov	r4, r1
 80058ac:	4615      	mov	r5, r2
 80058ae:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80058b0:	7973      	ldrb	r3, [r6, #5]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d036      	beq.n	8005924 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80058b6:	2301      	movs	r3, #1
 80058b8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff fec8 	bl	8005650 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80058c0:	4a1a      	ldr	r2, [pc, #104]	; (800592c <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80058c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80058c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80058ce:	4621      	mov	r1, r4
 80058d0:	4630      	mov	r0, r6
 80058d2:	f7ff fe15 	bl	8005500 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80058d6:	2100      	movs	r1, #0
 80058d8:	4630      	mov	r0, r6
 80058da:	f7ff fe11 	bl	8005500 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80058de:	2400      	movs	r4, #0
 80058e0:	e006      	b.n	80058f0 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80058e2:	4629      	mov	r1, r5
 80058e4:	4630      	mov	r0, r6
 80058e6:	f7ff fe47 	bl	8005578 <SUBGHZSPI_Receive>
      pData++;
 80058ea:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80058ec:	3401      	adds	r4, #1
 80058ee:	b2a4      	uxth	r4, r4
 80058f0:	42bc      	cmp	r4, r7
 80058f2:	d3f6      	bcc.n	80058e2 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80058f4:	4a0d      	ldr	r2, [pc, #52]	; (800592c <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80058f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80058fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005902:	4630      	mov	r0, r6
 8005904:	f7ff fe78 	bl	80055f8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005908:	68b3      	ldr	r3, [r6, #8]
 800590a:	b90b      	cbnz	r3, 8005910 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 800590c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005910:	2301      	movs	r3, #1
 8005912:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005914:	2300      	movs	r3, #0
 8005916:	7173      	strb	r3, [r6, #5]
}
 8005918:	4640      	mov	r0, r8
 800591a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800591e:	f04f 0802 	mov.w	r8, #2
 8005922:	e7f9      	b.n	8005918 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005924:	f04f 0802 	mov.w	r8, #2
 8005928:	e7f6      	b.n	8005918 <HAL_SUBGHZ_ExecGetCmd+0x80>
 800592a:	bf00      	nop
 800592c:	58000400 	.word	0x58000400

08005930 <HAL_SUBGHZ_IRQHandler>:
{
 8005930:	b530      	push	{r4, r5, lr}
 8005932:	b083      	sub	sp, #12
 8005934:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8005936:	2300      	movs	r3, #0
 8005938:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800593c:	2302      	movs	r3, #2
 800593e:	aa01      	add	r2, sp, #4
 8005940:	2112      	movs	r1, #18
 8005942:	f7ff ffa9 	bl	8005898 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005946:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800594a:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800594e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005952:	2302      	movs	r3, #2
 8005954:	aa01      	add	r2, sp, #4
 8005956:	4619      	mov	r1, r3
 8005958:	4628      	mov	r0, r5
 800595a:	f7ff ff47 	bl	80057ec <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800595e:	f014 0f01 	tst.w	r4, #1
 8005962:	d123      	bne.n	80059ac <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005964:	f014 0f02 	tst.w	r4, #2
 8005968:	d124      	bne.n	80059b4 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800596a:	f014 0f04 	tst.w	r4, #4
 800596e:	d125      	bne.n	80059bc <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005970:	f014 0f08 	tst.w	r4, #8
 8005974:	d126      	bne.n	80059c4 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005976:	f014 0f10 	tst.w	r4, #16
 800597a:	d127      	bne.n	80059cc <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800597c:	f014 0f20 	tst.w	r4, #32
 8005980:	d128      	bne.n	80059d4 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005982:	f014 0f40 	tst.w	r4, #64	; 0x40
 8005986:	d129      	bne.n	80059dc <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005988:	f014 0f80 	tst.w	r4, #128	; 0x80
 800598c:	d006      	beq.n	800599c <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800598e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005992:	d027      	beq.n	80059e4 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005994:	2101      	movs	r1, #1
 8005996:	4628      	mov	r0, r5
 8005998:	f00b fc54 	bl	8011244 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800599c:	f414 7f00 	tst.w	r4, #512	; 0x200
 80059a0:	d125      	bne.n	80059ee <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80059a2:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 80059a6:	d126      	bne.n	80059f6 <HAL_SUBGHZ_IRQHandler+0xc6>
}
 80059a8:	b003      	add	sp, #12
 80059aa:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80059ac:	4628      	mov	r0, r5
 80059ae:	f00b fc31 	bl	8011214 <HAL_SUBGHZ_TxCpltCallback>
 80059b2:	e7d7      	b.n	8005964 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80059b4:	4628      	mov	r0, r5
 80059b6:	f00b fc35 	bl	8011224 <HAL_SUBGHZ_RxCpltCallback>
 80059ba:	e7d6      	b.n	800596a <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80059bc:	4628      	mov	r0, r5
 80059be:	f00b fc65 	bl	801128c <HAL_SUBGHZ_PreambleDetectedCallback>
 80059c2:	e7d5      	b.n	8005970 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80059c4:	4628      	mov	r0, r5
 80059c6:	f00b fc69 	bl	801129c <HAL_SUBGHZ_SyncWordValidCallback>
 80059ca:	e7d4      	b.n	8005976 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80059cc:	4628      	mov	r0, r5
 80059ce:	f00b fc6d 	bl	80112ac <HAL_SUBGHZ_HeaderValidCallback>
 80059d2:	e7d3      	b.n	800597c <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80059d4:	4628      	mov	r0, r5
 80059d6:	f00b fc51 	bl	801127c <HAL_SUBGHZ_HeaderErrorCallback>
 80059da:	e7d2      	b.n	8005982 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80059dc:	4628      	mov	r0, r5
 80059de:	f00b fc29 	bl	8011234 <HAL_SUBGHZ_CRCErrorCallback>
 80059e2:	e7d1      	b.n	8005988 <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80059e4:	2100      	movs	r1, #0
 80059e6:	4628      	mov	r0, r5
 80059e8:	f00b fc2c 	bl	8011244 <HAL_SUBGHZ_CADStatusCallback>
 80059ec:	e7d6      	b.n	800599c <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80059ee:	4628      	mov	r0, r5
 80059f0:	f00b fc3a 	bl	8011268 <HAL_SUBGHZ_RxTxTimeoutCallback>
 80059f4:	e7d5      	b.n	80059a2 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80059f6:	4628      	mov	r0, r5
 80059f8:	f00b fc60 	bl	80112bc <HAL_SUBGHZ_LrFhssHopCallback>
}
 80059fc:	e7d4      	b.n	80059a8 <HAL_SUBGHZ_IRQHandler+0x78>
	...

08005a00 <HAL_SUBGHZ_WriteBuffer>:
{
 8005a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a04:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a06:	7980      	ldrb	r0, [r0, #6]
 8005a08:	fa5f f880 	uxtb.w	r8, r0
 8005a0c:	f1b8 0f01 	cmp.w	r8, #1
 8005a10:	d138      	bne.n	8005a84 <HAL_SUBGHZ_WriteBuffer+0x84>
 8005a12:	460c      	mov	r4, r1
 8005a14:	4617      	mov	r7, r2
 8005a16:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005a18:	796b      	ldrb	r3, [r5, #5]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d035      	beq.n	8005a8a <HAL_SUBGHZ_WriteBuffer+0x8a>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7ff fe14 	bl	8005650 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a28:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005a2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005a36:	210e      	movs	r1, #14
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f7ff fd61 	bl	8005500 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005a3e:	4621      	mov	r1, r4
 8005a40:	4628      	mov	r0, r5
 8005a42:	f7ff fd5d 	bl	8005500 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a46:	2400      	movs	r4, #0
 8005a48:	e005      	b.n	8005a56 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005a4a:	5d39      	ldrb	r1, [r7, r4]
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff fd57 	bl	8005500 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a52:	3401      	adds	r4, #1
 8005a54:	b2a4      	uxth	r4, r4
 8005a56:	42b4      	cmp	r4, r6
 8005a58:	d3f7      	bcc.n	8005a4a <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a5a:	4a0d      	ldr	r2, [pc, #52]	; (8005a90 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005a5c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f7ff fdc5 	bl	80055f8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a6e:	68ab      	ldr	r3, [r5, #8]
 8005a70:	b90b      	cbnz	r3, 8005a76 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8005a72:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a76:	2301      	movs	r3, #1
 8005a78:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	716b      	strb	r3, [r5, #5]
}
 8005a7e:	4640      	mov	r0, r8
 8005a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005a84:	f04f 0802 	mov.w	r8, #2
 8005a88:	e7f9      	b.n	8005a7e <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8005a8a:	f04f 0802 	mov.w	r8, #2
 8005a8e:	e7f6      	b.n	8005a7e <HAL_SUBGHZ_WriteBuffer+0x7e>
 8005a90:	58000400 	.word	0x58000400

08005a94 <HAL_SUBGHZ_ReadBuffer>:
{
 8005a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a98:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a9a:	7980      	ldrb	r0, [r0, #6]
 8005a9c:	fa5f f880 	uxtb.w	r8, r0
 8005aa0:	f1b8 0f01 	cmp.w	r8, #1
 8005aa4:	d13d      	bne.n	8005b22 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	4615      	mov	r5, r2
 8005aaa:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005aac:	7973      	ldrb	r3, [r6, #5]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d03a      	beq.n	8005b28 <HAL_SUBGHZ_ReadBuffer+0x94>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f7ff fdca 	bl	8005650 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005abc:	4a1c      	ldr	r2, [pc, #112]	; (8005b30 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005abe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005ac2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005aca:	211e      	movs	r1, #30
 8005acc:	4630      	mov	r0, r6
 8005ace:	f7ff fd17 	bl	8005500 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f7ff fd13 	bl	8005500 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005ada:	2100      	movs	r1, #0
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7ff fd0f 	bl	8005500 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005ae2:	2400      	movs	r4, #0
 8005ae4:	e006      	b.n	8005af4 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f7ff fd45 	bl	8005578 <SUBGHZSPI_Receive>
      pData++;
 8005aee:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005af0:	3401      	adds	r4, #1
 8005af2:	b2a4      	uxth	r4, r4
 8005af4:	42bc      	cmp	r4, r7
 8005af6:	d3f6      	bcc.n	8005ae6 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005af8:	4a0d      	ldr	r2, [pc, #52]	; (8005b30 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005afa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b06:	4630      	mov	r0, r6
 8005b08:	f7ff fd76 	bl	80055f8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b0c:	68b3      	ldr	r3, [r6, #8]
 8005b0e:	b90b      	cbnz	r3, 8005b14 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005b10:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b14:	2301      	movs	r3, #1
 8005b16:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005b18:	2300      	movs	r3, #0
 8005b1a:	7173      	strb	r3, [r6, #5]
}
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005b22:	f04f 0802 	mov.w	r8, #2
 8005b26:	e7f9      	b.n	8005b1c <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005b28:	f04f 0802 	mov.w	r8, #2
 8005b2c:	e7f6      	b.n	8005b1c <HAL_SUBGHZ_ReadBuffer+0x88>
 8005b2e:	bf00      	nop
 8005b30:	58000400 	.word	0x58000400

08005b34 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005b34:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	e852 3f00 	ldrex	r3, [r2]
 8005b3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	e842 3100 	strex	r1, r3, [r2]
 8005b42:	2900      	cmp	r1, #0
 8005b44:	d1f6      	bne.n	8005b34 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005b46:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	f102 0308 	add.w	r3, r2, #8
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	3208      	adds	r2, #8
 8005b56:	e842 3100 	strex	r1, r3, [r2]
 8005b5a:	2900      	cmp	r1, #0
 8005b5c:	d1f3      	bne.n	8005b46 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b5e:	2320      	movs	r3, #32
 8005b60:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005b64:	4770      	bx	lr

08005b66 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b66:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	e852 3f00 	ldrex	r3, [r2]
 8005b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	e842 3100 	strex	r1, r3, [r2]
 8005b74:	2900      	cmp	r1, #0
 8005b76:	d1f6      	bne.n	8005b66 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b78:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	f102 0308 	add.w	r3, r2, #8
 8005b7e:	e853 3f00 	ldrex	r3, [r3]
 8005b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b86:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	3208      	adds	r2, #8
 8005b8c:	e842 3100 	strex	r1, r3, [r2]
 8005b90:	2900      	cmp	r1, #0
 8005b92:	d1f1      	bne.n	8005b78 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b94:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d006      	beq.n	8005ba8 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b9a:	2320      	movs	r3, #32
 8005b9c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ba4:	6743      	str	r3, [r0, #116]	; 0x74
}
 8005ba6:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	e852 3f00 	ldrex	r3, [r2]
 8005bae:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	e842 3100 	strex	r1, r3, [r2]
 8005bb6:	2900      	cmp	r1, #0
 8005bb8:	d1f6      	bne.n	8005ba8 <UART_EndRxTransfer+0x42>
 8005bba:	e7ee      	b.n	8005b9a <UART_EndRxTransfer+0x34>

08005bbc <HAL_UART_Transmit_DMA>:
{
 8005bbc:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005bbe:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005bc2:	2a20      	cmp	r2, #32
 8005bc4:	d13d      	bne.n	8005c42 <HAL_UART_Transmit_DMA+0x86>
{
 8005bc6:	b510      	push	{r4, lr}
 8005bc8:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	d03b      	beq.n	8005c46 <HAL_UART_Transmit_DMA+0x8a>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d03b      	beq.n	8005c4a <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8005bd2:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005bd4:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8005bd8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005be2:	2221      	movs	r2, #33	; 0x21
 8005be4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8005be8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005bea:	b1ca      	cbz	r2, 8005c20 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005bec:	4918      	ldr	r1, [pc, #96]	; (8005c50 <HAL_UART_Transmit_DMA+0x94>)
 8005bee:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005bf0:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005bf2:	4918      	ldr	r1, [pc, #96]	; (8005c54 <HAL_UART_Transmit_DMA+0x98>)
 8005bf4:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005bf6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005bf8:	4917      	ldr	r1, [pc, #92]	; (8005c58 <HAL_UART_Transmit_DMA+0x9c>)
 8005bfa:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005bfc:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005bfe:	2100      	movs	r1, #0
 8005c00:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005c02:	6802      	ldr	r2, [r0, #0]
 8005c04:	3228      	adds	r2, #40	; 0x28
 8005c06:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005c08:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8005c0a:	f7fd fe3b 	bl	8003884 <HAL_DMA_Start_IT>
 8005c0e:	b138      	cbz	r0, 8005c20 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c10:	2310      	movs	r3, #16
 8005c12:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8005c16:	2320      	movs	r3, #32
 8005c18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	e00f      	b.n	8005c40 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	2240      	movs	r2, #64	; 0x40
 8005c24:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c26:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	f102 0308 	add.w	r3, r2, #8
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	3208      	adds	r2, #8
 8005c36:	e842 3100 	strex	r1, r3, [r2]
 8005c3a:	2900      	cmp	r1, #0
 8005c3c:	d1f3      	bne.n	8005c26 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8005c3e:	2000      	movs	r0, #0
}
 8005c40:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005c42:	2002      	movs	r0, #2
}
 8005c44:	4770      	bx	lr
      return HAL_ERROR;
 8005c46:	2001      	movs	r0, #1
 8005c48:	e7fa      	b.n	8005c40 <HAL_UART_Transmit_DMA+0x84>
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	e7f8      	b.n	8005c40 <HAL_UART_Transmit_DMA+0x84>
 8005c4e:	bf00      	nop
 8005c50:	08005c5d 	.word	0x08005c5d
 8005c54:	08005ccb 	.word	0x08005ccb
 8005c58:	08005cd7 	.word	0x08005cd7

08005c5c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c5c:	b508      	push	{r3, lr}
 8005c5e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c60:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f013 0f20 	tst.w	r3, #32
 8005c6a:	d118      	bne.n	8005c9e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c72:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	f102 0308 	add.w	r3, r2, #8
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	3208      	adds	r2, #8
 8005c82:	e842 3100 	strex	r1, r3, [r2]
 8005c86:	2900      	cmp	r1, #0
 8005c88:	d1f3      	bne.n	8005c72 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c8a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	e852 3f00 	ldrex	r3, [r2]
 8005c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	e842 3100 	strex	r1, r3, [r2]
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	d1f6      	bne.n	8005c8a <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c9c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005c9e:	f7fc f97d 	bl	8001f9c <HAL_UART_TxCpltCallback>
}
 8005ca2:	e7fb      	b.n	8005c9c <UART_DMATransmitCplt+0x40>

08005ca4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca4:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ca6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	e852 3f00 	ldrex	r3, [r2]
 8005cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	e842 3100 	strex	r1, r3, [r2]
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	d1f6      	bne.n	8005ca6 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cb8:	2320      	movs	r3, #32
 8005cba:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cc2:	f7fc f96b 	bl	8001f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cc6:	bd08      	pop	{r3, pc}

08005cc8 <HAL_UART_TxHalfCpltCallback>:
}
 8005cc8:	4770      	bx	lr

08005cca <UART_DMATxHalfCplt>:
{
 8005cca:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005ccc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005cce:	f7ff fffb 	bl	8005cc8 <HAL_UART_TxHalfCpltCallback>
}
 8005cd2:	bd08      	pop	{r3, pc}

08005cd4 <HAL_UART_ErrorCallback>:
}
 8005cd4:	4770      	bx	lr

08005cd6 <UART_DMAError>:
{
 8005cd6:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cd8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005cda:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005cde:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cea:	d001      	beq.n	8005cf0 <UART_DMAError+0x1a>
 8005cec:	2a21      	cmp	r2, #33	; 0x21
 8005cee:	d010      	beq.n	8005d12 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005cf8:	d001      	beq.n	8005cfe <UART_DMAError+0x28>
 8005cfa:	2d22      	cmp	r5, #34	; 0x22
 8005cfc:	d010      	beq.n	8005d20 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005cfe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005d02:	f043 0310 	orr.w	r3, r3, #16
 8005d06:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f7ff ffe2 	bl	8005cd4 <HAL_UART_ErrorCallback>
}
 8005d10:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f7ff ff0b 	bl	8005b34 <UART_EndTxTransfer>
 8005d1e:	e7e7      	b.n	8005cf0 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005d26:	4620      	mov	r0, r4
 8005d28:	f7ff ff1d 	bl	8005b66 <UART_EndRxTransfer>
 8005d2c:	e7e7      	b.n	8005cfe <UART_DMAError+0x28>

08005d2e <UART_DMAAbortOnError>:
{
 8005d2e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d30:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005d38:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005d3c:	f7ff ffca 	bl	8005cd4 <HAL_UART_ErrorCallback>
}
 8005d40:	bd08      	pop	{r3, pc}

08005d42 <HAL_UARTEx_RxEventCallback>:
}
 8005d42:	4770      	bx	lr

08005d44 <HAL_UART_IRQHandler>:
{
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d48:	6801      	ldr	r1, [r0, #0]
 8005d4a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d4c:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d4e:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d50:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005d54:	401a      	ands	r2, r3
 8005d56:	d108      	bne.n	8005d6a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d58:	f013 0f20 	tst.w	r3, #32
 8005d5c:	d005      	beq.n	8005d6a <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d5e:	f010 0f20 	tst.w	r0, #32
 8005d62:	d134      	bne.n	8005dce <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d64:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005d68:	d131      	bne.n	8005dce <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8005d6a:	b12a      	cbz	r2, 8005d78 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d6c:	4a99      	ldr	r2, [pc, #612]	; (8005fd4 <HAL_UART_IRQHandler+0x290>)
 8005d6e:	402a      	ands	r2, r5
 8005d70:	d133      	bne.n	8005dda <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d72:	4e99      	ldr	r6, [pc, #612]	; (8005fd8 <HAL_UART_IRQHandler+0x294>)
 8005d74:	4230      	tst	r0, r6
 8005d76:	d130      	bne.n	8005dda <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d78:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005d7a:	2a01      	cmp	r2, #1
 8005d7c:	f000 80c6 	beq.w	8005f0c <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005d84:	d003      	beq.n	8005d8e <HAL_UART_IRQHandler+0x4a>
 8005d86:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005d8a:	f040 8165 	bne.w	8006058 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d92:	d007      	beq.n	8005da4 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d94:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005d98:	f040 8165 	bne.w	8006066 <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d9c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005da0:	f040 8161 	bne.w	8006066 <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005da4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005da8:	d003      	beq.n	8005db2 <HAL_UART_IRQHandler+0x6e>
 8005daa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dae:	f040 8161 	bne.w	8006074 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005db2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005db6:	d003      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x7c>
 8005db8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005dbc:	f040 815e 	bne.w	800607c <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005dc0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005dc4:	d002      	beq.n	8005dcc <HAL_UART_IRQHandler+0x88>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f2c0 815c 	blt.w	8006084 <HAL_UART_IRQHandler+0x340>
}
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005dce:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0fb      	beq.n	8005dcc <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	4798      	blx	r3
      return;
 8005dd8:	e7f8      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dda:	f013 0f01 	tst.w	r3, #1
 8005dde:	d009      	beq.n	8005df4 <HAL_UART_IRQHandler+0xb0>
 8005de0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005de4:	d006      	beq.n	8005df4 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005de6:	2601      	movs	r6, #1
 8005de8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dea:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005dee:	4331      	orrs	r1, r6
 8005df0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005df4:	f013 0f02 	tst.w	r3, #2
 8005df8:	d00b      	beq.n	8005e12 <HAL_UART_IRQHandler+0xce>
 8005dfa:	f015 0f01 	tst.w	r5, #1
 8005dfe:	d008      	beq.n	8005e12 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e00:	6821      	ldr	r1, [r4, #0]
 8005e02:	2602      	movs	r6, #2
 8005e04:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e06:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005e0a:	f041 0104 	orr.w	r1, r1, #4
 8005e0e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e12:	f013 0f04 	tst.w	r3, #4
 8005e16:	d00b      	beq.n	8005e30 <HAL_UART_IRQHandler+0xec>
 8005e18:	f015 0f01 	tst.w	r5, #1
 8005e1c:	d008      	beq.n	8005e30 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e1e:	6821      	ldr	r1, [r4, #0]
 8005e20:	2604      	movs	r6, #4
 8005e22:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e24:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005e28:	f041 0102 	orr.w	r1, r1, #2
 8005e2c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e30:	f013 0f08 	tst.w	r3, #8
 8005e34:	d00b      	beq.n	8005e4e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e36:	f010 0f20 	tst.w	r0, #32
 8005e3a:	d100      	bne.n	8005e3e <HAL_UART_IRQHandler+0xfa>
 8005e3c:	b13a      	cbz	r2, 8005e4e <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	2108      	movs	r1, #8
 8005e42:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e44:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e4e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005e52:	d00c      	beq.n	8005e6e <HAL_UART_IRQHandler+0x12a>
 8005e54:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005e58:	d009      	beq.n	8005e6e <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e60:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e62:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005e66:	f042 0220 	orr.w	r2, r2, #32
 8005e6a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e6e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	d0aa      	beq.n	8005dcc <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e76:	f013 0f20 	tst.w	r3, #32
 8005e7a:	d009      	beq.n	8005e90 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e7c:	f010 0f20 	tst.w	r0, #32
 8005e80:	d102      	bne.n	8005e88 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e82:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005e86:	d003      	beq.n	8005e90 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005e88:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005e8a:	b10b      	cbz	r3, 8005e90 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005e90:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e9c:	d102      	bne.n	8005ea4 <HAL_UART_IRQHandler+0x160>
 8005e9e:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005ea2:	d02c      	beq.n	8005efe <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff fe5e 	bl	8005b66 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005eb2:	d020      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	f102 0308 	add.w	r3, r2, #8
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	3208      	adds	r2, #8
 8005ec4:	e842 3100 	strex	r1, r3, [r2]
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	d1f3      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005ecc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005ed0:	b16b      	cbz	r3, 8005eee <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ed2:	4a42      	ldr	r2, [pc, #264]	; (8005fdc <HAL_UART_IRQHandler+0x298>)
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ed6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005eda:	f7fd fd59 	bl	8003990 <HAL_DMA_Abort_IT>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f43f af74 	beq.w	8005dcc <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ee4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005ee8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005eea:	4798      	blx	r3
 8005eec:	e76e      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f7ff fef0 	bl	8005cd4 <HAL_UART_ErrorCallback>
 8005ef4:	e76a      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff feec 	bl	8005cd4 <HAL_UART_ErrorCallback>
 8005efc:	e766      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7ff fee8 	bl	8005cd4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	2300      	movs	r3, #0
 8005f06:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 8005f0a:	e75f      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f0c:	f013 0f10 	tst.w	r3, #16
 8005f10:	f43f af36 	beq.w	8005d80 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f14:	f010 0f10 	tst.w	r0, #16
 8005f18:	f43f af32 	beq.w	8005d80 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f28:	d05a      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f2a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005f2e:	6813      	ldr	r3, [r2, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f43f af49 	beq.w	8005dcc <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f3a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005f3e:	4299      	cmp	r1, r3
 8005f40:	f67f af44 	bls.w	8005dcc <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005f44:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f48:	6813      	ldr	r3, [r2, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f013 0f20 	tst.w	r3, #32
 8005f50:	d132      	bne.n	8005fb8 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	e852 3f00 	ldrex	r3, [r2]
 8005f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	e842 3100 	strex	r1, r3, [r2]
 8005f60:	2900      	cmp	r1, #0
 8005f62:	d1f6      	bne.n	8005f52 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	f102 0308 	add.w	r3, r2, #8
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	3208      	adds	r2, #8
 8005f74:	e842 3100 	strex	r1, r3, [r2]
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	d1f3      	bne.n	8005f64 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	f102 0308 	add.w	r3, r2, #8
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	3208      	adds	r2, #8
 8005f8c:	e842 3100 	strex	r1, r3, [r2]
 8005f90:	2900      	cmp	r1, #0
 8005f92:	d1f3      	bne.n	8005f7c <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 8005f94:	2320      	movs	r3, #32
 8005f96:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	e852 3f00 	ldrex	r3, [r2]
 8005fa4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	e842 3100 	strex	r1, r3, [r2]
 8005fac:	2900      	cmp	r1, #0
 8005fae:	d1f6      	bne.n	8005f9e <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fb0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005fb4:	f7fd fcb2 	bl	800391c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fbc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005fc0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	1ac9      	subs	r1, r1, r3
 8005fc8:	b289      	uxth	r1, r1
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f7ff feb9 	bl	8005d42 <HAL_UARTEx_RxEventCallback>
      return;
 8005fd0:	e6fc      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>
 8005fd2:	bf00      	nop
 8005fd4:	10000001 	.word	0x10000001
 8005fd8:	04000120 	.word	0x04000120
 8005fdc:	08005d2f 	.word	0x08005d2f
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fe0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005fe4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	1ac9      	subs	r1, r1, r3
 8005fec:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005fee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f43f aee9 	beq.w	8005dcc <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	f43f aee6 	beq.w	8005dcc <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006000:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	e852 3f00 	ldrex	r3, [r2]
 8006006:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	e842 3000 	strex	r0, r3, [r2]
 800600e:	2800      	cmp	r0, #0
 8006010:	d1f6      	bne.n	8006000 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006012:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	f102 0308 	add.w	r3, r2, #8
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006020:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	3208      	adds	r2, #8
 8006026:	e842 3000 	strex	r0, r3, [r2]
 800602a:	2800      	cmp	r0, #0
 800602c:	d1f1      	bne.n	8006012 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 800602e:	2320      	movs	r3, #32
 8006030:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006034:	2300      	movs	r3, #0
 8006036:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8006038:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	e852 3f00 	ldrex	r3, [r2]
 8006040:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	e842 3000 	strex	r0, r3, [r2]
 8006048:	2800      	cmp	r0, #0
 800604a:	d1f6      	bne.n	800603a <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800604c:	2302      	movs	r3, #2
 800604e:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006050:	4620      	mov	r0, r4
 8006052:	f7ff fe76 	bl	8005d42 <HAL_UARTEx_RxEventCallback>
      return;
 8006056:	e6b9      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006058:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800605c:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800605e:	4620      	mov	r0, r4
 8006060:	f000 fe62 	bl	8006d28 <HAL_UARTEx_WakeupCallback>
    return;
 8006064:	e6b2      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8006066:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006068:	2b00      	cmp	r3, #0
 800606a:	f43f aeaf 	beq.w	8005dcc <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800606e:	4620      	mov	r0, r4
 8006070:	4798      	blx	r3
    return;
 8006072:	e6ab      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8006074:	4620      	mov	r0, r4
 8006076:	f7ff fe15 	bl	8005ca4 <UART_EndTransmit_IT>
    return;
 800607a:	e6a7      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800607c:	4620      	mov	r0, r4
 800607e:	f000 fe55 	bl	8006d2c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8006082:	e6a3      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006084:	4620      	mov	r0, r4
 8006086:	f000 fe50 	bl	8006d2a <HAL_UARTEx_RxFifoFullCallback>
    return;
 800608a:	e69f      	b.n	8005dcc <HAL_UART_IRQHandler+0x88>

0800608c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800608c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800608e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006092:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8006096:	2a22      	cmp	r2, #34	; 0x22
 8006098:	d005      	beq.n	80060a6 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800609a:	6802      	ldr	r2, [r0, #0]
 800609c:	6993      	ldr	r3, [r2, #24]
 800609e:	f043 0308 	orr.w	r3, r3, #8
 80060a2:	6193      	str	r3, [r2, #24]
  }
}
 80060a4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060a6:	6802      	ldr	r2, [r0, #0]
 80060a8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80060ae:	400b      	ands	r3, r1
 80060b0:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80060b2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80060b4:	3301      	adds	r3, #1
 80060b6:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80060b8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80060c6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e9      	bne.n	80060a4 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	e852 3f00 	ldrex	r3, [r2]
 80060d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	e842 3100 	strex	r1, r3, [r2]
 80060de:	2900      	cmp	r1, #0
 80060e0:	d1f6      	bne.n	80060d0 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	f102 0308 	add.w	r3, r2, #8
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	3208      	adds	r2, #8
 80060f2:	e842 3100 	strex	r1, r3, [r2]
 80060f6:	2900      	cmp	r1, #0
 80060f8:	d1f3      	bne.n	80060e2 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 80060fa:	2320      	movs	r3, #32
 80060fc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8006100:	2300      	movs	r3, #0
 8006102:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006104:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006106:	6803      	ldr	r3, [r0, #0]
 8006108:	4a16      	ldr	r2, [pc, #88]	; (8006164 <UART_RxISR_8BIT+0xd8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00c      	beq.n	8006128 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006114:	d008      	beq.n	8006128 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006116:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	e852 3f00 	ldrex	r3, [r2]
 800611c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	e842 3100 	strex	r1, r3, [r2]
 8006124:	2900      	cmp	r1, #0
 8006126:	d1f6      	bne.n	8006116 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006128:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d116      	bne.n	800615c <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612e:	2300      	movs	r3, #0
 8006130:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006132:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	e852 3f00 	ldrex	r3, [r2]
 8006138:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	e842 3100 	strex	r1, r3, [r2]
 8006140:	2900      	cmp	r1, #0
 8006142:	d1f6      	bne.n	8006132 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006144:	6803      	ldr	r3, [r0, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	f012 0f10 	tst.w	r2, #16
 800614c:	d001      	beq.n	8006152 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800614e:	2210      	movs	r2, #16
 8006150:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006152:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006156:	f7ff fdf4 	bl	8005d42 <HAL_UARTEx_RxEventCallback>
 800615a:	e7a3      	b.n	80060a4 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800615c:	f7fb ff2e 	bl	8001fbc <HAL_UART_RxCpltCallback>
 8006160:	e7a0      	b.n	80060a4 <UART_RxISR_8BIT+0x18>
 8006162:	bf00      	nop
 8006164:	40008000 	.word	0x40008000

08006168 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006168:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800616a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800616e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8006172:	2b22      	cmp	r3, #34	; 0x22
 8006174:	d005      	beq.n	8006182 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006176:	6802      	ldr	r2, [r0, #0]
 8006178:	6993      	ldr	r3, [r2, #24]
 800617a:	f043 0308 	orr.w	r3, r3, #8
 800617e:	6193      	str	r3, [r2, #24]
  }
}
 8006180:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006182:	6803      	ldr	r3, [r0, #0]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006186:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8006188:	4013      	ands	r3, r2
 800618a:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800618c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800618e:	3302      	adds	r3, #2
 8006190:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006192:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29b      	uxth	r3, r3
 800619c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80061a0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1ea      	bne.n	8006180 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	e852 3f00 	ldrex	r3, [r2]
 80061b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	e842 3100 	strex	r1, r3, [r2]
 80061b8:	2900      	cmp	r1, #0
 80061ba:	d1f6      	bne.n	80061aa <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	f102 0308 	add.w	r3, r2, #8
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	3208      	adds	r2, #8
 80061cc:	e842 3100 	strex	r1, r3, [r2]
 80061d0:	2900      	cmp	r1, #0
 80061d2:	d1f3      	bne.n	80061bc <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80061d4:	2320      	movs	r3, #32
 80061d6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061de:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061e0:	6803      	ldr	r3, [r0, #0]
 80061e2:	4a16      	ldr	r2, [pc, #88]	; (800623c <UART_RxISR_16BIT+0xd4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00c      	beq.n	8006202 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80061ee:	d008      	beq.n	8006202 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061f0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	e852 3f00 	ldrex	r3, [r2]
 80061f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	e842 3100 	strex	r1, r3, [r2]
 80061fe:	2900      	cmp	r1, #0
 8006200:	d1f6      	bne.n	80061f0 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006202:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d116      	bne.n	8006236 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006208:	2300      	movs	r3, #0
 800620a:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	e852 3f00 	ldrex	r3, [r2]
 8006212:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	e842 3100 	strex	r1, r3, [r2]
 800621a:	2900      	cmp	r1, #0
 800621c:	d1f6      	bne.n	800620c <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800621e:	6803      	ldr	r3, [r0, #0]
 8006220:	69da      	ldr	r2, [r3, #28]
 8006222:	f012 0f10 	tst.w	r2, #16
 8006226:	d001      	beq.n	800622c <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006228:	2210      	movs	r2, #16
 800622a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800622c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006230:	f7ff fd87 	bl	8005d42 <HAL_UARTEx_RxEventCallback>
 8006234:	e7a4      	b.n	8006180 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006236:	f7fb fec1 	bl	8001fbc <HAL_UART_RxCpltCallback>
 800623a:	e7a1      	b.n	8006180 <UART_RxISR_16BIT+0x18>
 800623c:	40008000 	.word	0x40008000

08006240 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8006244:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006248:	6803      	ldr	r3, [r0, #0]
 800624a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800624c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006250:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006254:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8006258:	2a22      	cmp	r2, #34	; 0x22
 800625a:	d005      	beq.n	8006268 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	f042 0208 	orr.w	r2, r2, #8
 8006262:	619a      	str	r2, [r3, #24]
  }
}
 8006264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006268:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800626a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800626e:	e008      	b.n	8006282 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006270:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006274:	2b00      	cmp	r3, #0
 8006276:	d14c      	bne.n	8006312 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8006278:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d04e      	beq.n	8006320 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006282:	2f00      	cmp	r7, #0
 8006284:	f000 809a 	beq.w	80063bc <UART_RxISR_8BIT_FIFOEN+0x17c>
 8006288:	f015 0f20 	tst.w	r5, #32
 800628c:	f000 8096 	beq.w	80063bc <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006294:	b2f3      	uxtb	r3, r6
 8006296:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006298:	400b      	ands	r3, r1
 800629a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800629c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800629e:	3301      	adds	r3, #1
 80062a0:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80062a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80062b4:	f015 0f07 	tst.w	r5, #7
 80062b8:	d0de      	beq.n	8006278 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062ba:	f015 0f01 	tst.w	r5, #1
 80062be:	d009      	beq.n	80062d4 <UART_RxISR_8BIT_FIFOEN+0x94>
 80062c0:	f419 7f80 	tst.w	r9, #256	; 0x100
 80062c4:	d006      	beq.n	80062d4 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062c6:	2201      	movs	r2, #1
 80062c8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062d4:	f015 0f02 	tst.w	r5, #2
 80062d8:	d00b      	beq.n	80062f2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80062da:	f018 0f01 	tst.w	r8, #1
 80062de:	d008      	beq.n	80062f2 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	2202      	movs	r2, #2
 80062e4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80062ea:	f043 0304 	orr.w	r3, r3, #4
 80062ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062f2:	f015 0f04 	tst.w	r5, #4
 80062f6:	d0bb      	beq.n	8006270 <UART_RxISR_8BIT_FIFOEN+0x30>
 80062f8:	f018 0f01 	tst.w	r8, #1
 80062fc:	d0b8      	beq.n	8006270 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	2204      	movs	r2, #4
 8006302:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006304:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006308:	f043 0302 	orr.w	r3, r3, #2
 800630c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006310:	e7ae      	b.n	8006270 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff fcde 	bl	8005cd4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006318:	2300      	movs	r3, #0
 800631a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800631e:	e7ab      	b.n	8006278 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006320:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	e852 3f00 	ldrex	r3, [r2]
 8006326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	e842 3100 	strex	r1, r3, [r2]
 800632e:	2900      	cmp	r1, #0
 8006330:	d1f6      	bne.n	8006320 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006332:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	f102 0308 	add.w	r3, r2, #8
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006340:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	3208      	adds	r2, #8
 8006346:	e842 3100 	strex	r1, r3, [r2]
 800634a:	2900      	cmp	r1, #0
 800634c:	d1f1      	bne.n	8006332 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800634e:	2320      	movs	r3, #32
 8006350:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006358:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	4a29      	ldr	r2, [pc, #164]	; (8006404 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006368:	d106      	bne.n	8006378 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d00d      	beq.n	800638c <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8006370:	4620      	mov	r0, r4
 8006372:	f7fb fe23 	bl	8001fbc <HAL_UART_RxCpltCallback>
 8006376:	e784      	b.n	8006282 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006378:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	e852 3f00 	ldrex	r3, [r2]
 800637e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	e842 3100 	strex	r1, r3, [r2]
 8006386:	2900      	cmp	r1, #0
 8006388:	d1f6      	bne.n	8006378 <UART_RxISR_8BIT_FIFOEN+0x138>
 800638a:	e7ee      	b.n	800636a <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638c:	2300      	movs	r3, #0
 800638e:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006390:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	e852 3f00 	ldrex	r3, [r2]
 8006396:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	e842 3100 	strex	r1, r3, [r2]
 800639e:	2900      	cmp	r1, #0
 80063a0:	d1f6      	bne.n	8006390 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	69da      	ldr	r2, [r3, #28]
 80063a6:	f012 0f10 	tst.w	r2, #16
 80063aa:	d001      	beq.n	80063b0 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ac:	2210      	movs	r2, #16
 80063ae:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063b0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80063b4:	4620      	mov	r0, r4
 80063b6:	f7ff fcc4 	bl	8005d42 <HAL_UARTEx_RxEventCallback>
 80063ba:	e762      	b.n	8006282 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80063bc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80063c0:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f43f af4e 	beq.w	8006264 <UART_RxISR_8BIT_FIFOEN+0x24>
 80063c8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80063cc:	429a      	cmp	r2, r3
 80063ce:	f67f af49 	bls.w	8006264 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80063d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	f102 0308 	add.w	r3, r2, #8
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	3208      	adds	r2, #8
 80063e2:	e842 3100 	strex	r1, r3, [r2]
 80063e6:	2900      	cmp	r1, #0
 80063e8:	d1f3      	bne.n	80063d2 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 80063ec:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80063ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	e852 3f00 	ldrex	r3, [r2]
 80063f4:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	e842 3100 	strex	r1, r3, [r2]
 80063fc:	2900      	cmp	r1, #0
 80063fe:	d1f6      	bne.n	80063ee <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8006400:	e730      	b.n	8006264 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006402:	bf00      	nop
 8006404:	40008000 	.word	0x40008000
 8006408:	0800608d 	.word	0x0800608d

0800640c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800640c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006410:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006414:	6803      	ldr	r3, [r0, #0]
 8006416:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006418:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800641c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006420:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8006424:	2a22      	cmp	r2, #34	; 0x22
 8006426:	d005      	beq.n	8006434 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	f042 0208 	orr.w	r2, r2, #8
 800642e:	619a      	str	r2, [r3, #24]
  }
}
 8006430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006434:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006436:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800643a:	e008      	b.n	800644e <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800643c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006440:	2b00      	cmp	r3, #0
 8006442:	d14b      	bne.n	80064dc <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8006444:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d04d      	beq.n	80064ea <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800644e:	2f00      	cmp	r7, #0
 8006450:	f000 8099 	beq.w	8006586 <UART_RxISR_16BIT_FIFOEN+0x17a>
 8006454:	f015 0f20 	tst.w	r5, #32
 8006458:	f000 8095 	beq.w	8006586 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006460:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8006462:	4033      	ands	r3, r6
 8006464:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006468:	3302      	adds	r3, #2
 800646a:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800646c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29b      	uxth	r3, r3
 8006476:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800647e:	f015 0f07 	tst.w	r5, #7
 8006482:	d0df      	beq.n	8006444 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006484:	f015 0f01 	tst.w	r5, #1
 8006488:	d009      	beq.n	800649e <UART_RxISR_16BIT_FIFOEN+0x92>
 800648a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800648e:	d006      	beq.n	800649e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006490:	2201      	movs	r2, #1
 8006492:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006494:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006498:	4313      	orrs	r3, r2
 800649a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800649e:	f015 0f02 	tst.w	r5, #2
 80064a2:	d00b      	beq.n	80064bc <UART_RxISR_16BIT_FIFOEN+0xb0>
 80064a4:	f018 0f01 	tst.w	r8, #1
 80064a8:	d008      	beq.n	80064bc <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	2202      	movs	r2, #2
 80064ae:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064b0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80064b4:	f043 0304 	orr.w	r3, r3, #4
 80064b8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064bc:	f015 0f04 	tst.w	r5, #4
 80064c0:	d0bc      	beq.n	800643c <UART_RxISR_16BIT_FIFOEN+0x30>
 80064c2:	f018 0f01 	tst.w	r8, #1
 80064c6:	d0b9      	beq.n	800643c <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	2204      	movs	r2, #4
 80064cc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80064d2:	f043 0302 	orr.w	r3, r3, #2
 80064d6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80064da:	e7af      	b.n	800643c <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80064dc:	4620      	mov	r0, r4
 80064de:	f7ff fbf9 	bl	8005cd4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80064e8:	e7ac      	b.n	8006444 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	e852 3f00 	ldrex	r3, [r2]
 80064f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f4:	e842 3100 	strex	r1, r3, [r2]
 80064f8:	2900      	cmp	r1, #0
 80064fa:	d1f6      	bne.n	80064ea <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	f102 0308 	add.w	r3, r2, #8
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800650a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	3208      	adds	r2, #8
 8006510:	e842 3100 	strex	r1, r3, [r2]
 8006514:	2900      	cmp	r1, #0
 8006516:	d1f1      	bne.n	80064fc <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8006518:	2320      	movs	r3, #32
 800651a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006522:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	4a29      	ldr	r2, [pc, #164]	; (80065cc <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006532:	d106      	bne.n	8006542 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006534:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006536:	2b01      	cmp	r3, #1
 8006538:	d00d      	beq.n	8006556 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 800653a:	4620      	mov	r0, r4
 800653c:	f7fb fd3e 	bl	8001fbc <HAL_UART_RxCpltCallback>
 8006540:	e785      	b.n	800644e <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006542:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	e852 3f00 	ldrex	r3, [r2]
 8006548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	e842 3100 	strex	r1, r3, [r2]
 8006550:	2900      	cmp	r1, #0
 8006552:	d1f6      	bne.n	8006542 <UART_RxISR_16BIT_FIFOEN+0x136>
 8006554:	e7ee      	b.n	8006534 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006556:	2300      	movs	r3, #0
 8006558:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800655a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	e852 3f00 	ldrex	r3, [r2]
 8006560:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	e842 3100 	strex	r1, r3, [r2]
 8006568:	2900      	cmp	r1, #0
 800656a:	d1f6      	bne.n	800655a <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	f012 0f10 	tst.w	r2, #16
 8006574:	d001      	beq.n	800657a <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006576:	2210      	movs	r2, #16
 8006578:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800657a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800657e:	4620      	mov	r0, r4
 8006580:	f7ff fbdf 	bl	8005d42 <HAL_UARTEx_RxEventCallback>
 8006584:	e763      	b.n	800644e <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006586:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800658a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800658c:	2b00      	cmp	r3, #0
 800658e:	f43f af4f 	beq.w	8006430 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006592:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006596:	429a      	cmp	r2, r3
 8006598:	f67f af4a 	bls.w	8006430 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800659c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	f102 0308 	add.w	r3, r2, #8
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	3208      	adds	r2, #8
 80065ac:	e842 3100 	strex	r1, r3, [r2]
 80065b0:	2900      	cmp	r1, #0
 80065b2:	d1f3      	bne.n	800659c <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 80065b6:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80065b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	e852 3f00 	ldrex	r3, [r2]
 80065be:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	e842 3100 	strex	r1, r3, [r2]
 80065c6:	2900      	cmp	r1, #0
 80065c8:	d1f6      	bne.n	80065b8 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 80065ca:	e731      	b.n	8006430 <UART_RxISR_16BIT_FIFOEN+0x24>
 80065cc:	40008000 	.word	0x40008000
 80065d0:	08006169 	.word	0x08006169

080065d4 <UART_SetConfig>:
{
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80065d8:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065da:	6883      	ldr	r3, [r0, #8]
 80065dc:	6902      	ldr	r2, [r0, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	6942      	ldr	r2, [r0, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	69c2      	ldr	r2, [r0, #28]
 80065e6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065e8:	6808      	ldr	r0, [r1, #0]
 80065ea:	4a9d      	ldr	r2, [pc, #628]	; (8006860 <UART_SetConfig+0x28c>)
 80065ec:	4002      	ands	r2, r0
 80065ee:	4313      	orrs	r3, r2
 80065f0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f2:	6822      	ldr	r2, [r4, #0]
 80065f4:	6853      	ldr	r3, [r2, #4]
 80065f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80065fa:	68e1      	ldr	r1, [r4, #12]
 80065fc:	430b      	orrs	r3, r1
 80065fe:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006600:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	4b97      	ldr	r3, [pc, #604]	; (8006864 <UART_SetConfig+0x290>)
 8006606:	429a      	cmp	r2, r3
 8006608:	d001      	beq.n	800660e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800660a:	6a23      	ldr	r3, [r4, #32]
 800660c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800660e:	6893      	ldr	r3, [r2, #8]
 8006610:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006614:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006618:	430b      	orrs	r3, r1
 800661a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800661c:	6822      	ldr	r2, [r4, #0]
 800661e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006620:	f023 030f 	bic.w	r3, r3, #15
 8006624:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006626:	430b      	orrs	r3, r1
 8006628:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	4a8e      	ldr	r2, [pc, #568]	; (8006868 <UART_SetConfig+0x294>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d01c      	beq.n	800666c <UART_SetConfig+0x98>
 8006632:	4a8e      	ldr	r2, [pc, #568]	; (800686c <UART_SetConfig+0x298>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d031      	beq.n	800669c <UART_SetConfig+0xc8>
 8006638:	4a8a      	ldr	r2, [pc, #552]	; (8006864 <UART_SetConfig+0x290>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d04b      	beq.n	80066d6 <UART_SetConfig+0x102>
 800663e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006640:	4988      	ldr	r1, [pc, #544]	; (8006864 <UART_SetConfig+0x290>)
 8006642:	428b      	cmp	r3, r1
 8006644:	d068      	beq.n	8006718 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006646:	69e0      	ldr	r0, [r4, #28]
 8006648:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800664c:	f000 80a5 	beq.w	800679a <UART_SetConfig+0x1c6>
    switch (clocksource)
 8006650:	2a08      	cmp	r2, #8
 8006652:	f200 811f 	bhi.w	8006894 <UART_SetConfig+0x2c0>
 8006656:	e8df f012 	tbh	[pc, r2, lsl #1]
 800665a:	00d3      	.short	0x00d3
 800665c:	00d100f5 	.word	0x00d100f5
 8006660:	00f8011d 	.word	0x00f8011d
 8006664:	011d011d 	.word	0x011d011d
 8006668:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800666c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006670:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006674:	f002 0203 	and.w	r2, r2, #3
 8006678:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800667c:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8006680:	2a03      	cmp	r2, #3
 8006682:	d809      	bhi.n	8006698 <UART_SetConfig+0xc4>
 8006684:	e8df f002 	tbb	[pc, r2]
 8006688:	063c0402 	.word	0x063c0402
 800668c:	2201      	movs	r2, #1
 800668e:	e7d7      	b.n	8006640 <UART_SetConfig+0x6c>
 8006690:	2204      	movs	r2, #4
 8006692:	e7d5      	b.n	8006640 <UART_SetConfig+0x6c>
 8006694:	2208      	movs	r2, #8
 8006696:	e7d3      	b.n	8006640 <UART_SetConfig+0x6c>
 8006698:	2210      	movs	r2, #16
 800669a:	e7d1      	b.n	8006640 <UART_SetConfig+0x6c>
 800669c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066a0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80066a4:	f002 020c 	and.w	r2, r2, #12
 80066a8:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80066ac:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 80066b0:	2a0c      	cmp	r2, #12
 80066b2:	d80e      	bhi.n	80066d2 <UART_SetConfig+0xfe>
 80066b4:	e8df f002 	tbb	[pc, r2]
 80066b8:	0d0d0d07 	.word	0x0d0d0d07
 80066bc:	0d0d0d09 	.word	0x0d0d0d09
 80066c0:	0d0d0d26 	.word	0x0d0d0d26
 80066c4:	0b          	.byte	0x0b
 80066c5:	00          	.byte	0x00
 80066c6:	2200      	movs	r2, #0
 80066c8:	e7ba      	b.n	8006640 <UART_SetConfig+0x6c>
 80066ca:	2204      	movs	r2, #4
 80066cc:	e7b8      	b.n	8006640 <UART_SetConfig+0x6c>
 80066ce:	2208      	movs	r2, #8
 80066d0:	e7b6      	b.n	8006640 <UART_SetConfig+0x6c>
 80066d2:	2210      	movs	r2, #16
 80066d4:	e7b4      	b.n	8006640 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80066d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066da:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80066de:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80066e2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80066e6:	d00f      	beq.n	8006708 <UART_SetConfig+0x134>
 80066e8:	d805      	bhi.n	80066f6 <UART_SetConfig+0x122>
 80066ea:	b17a      	cbz	r2, 800670c <UART_SetConfig+0x138>
 80066ec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80066f0:	d10e      	bne.n	8006710 <UART_SetConfig+0x13c>
 80066f2:	2204      	movs	r2, #4
 80066f4:	e7a4      	b.n	8006640 <UART_SetConfig+0x6c>
 80066f6:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80066fa:	d10b      	bne.n	8006714 <UART_SetConfig+0x140>
 80066fc:	2208      	movs	r2, #8
 80066fe:	e79f      	b.n	8006640 <UART_SetConfig+0x6c>
 8006700:	2202      	movs	r2, #2
 8006702:	e79d      	b.n	8006640 <UART_SetConfig+0x6c>
 8006704:	2202      	movs	r2, #2
 8006706:	e79b      	b.n	8006640 <UART_SetConfig+0x6c>
 8006708:	2202      	movs	r2, #2
 800670a:	e799      	b.n	8006640 <UART_SetConfig+0x6c>
 800670c:	2200      	movs	r2, #0
 800670e:	e797      	b.n	8006640 <UART_SetConfig+0x6c>
 8006710:	2210      	movs	r2, #16
 8006712:	e795      	b.n	8006640 <UART_SetConfig+0x6c>
 8006714:	2210      	movs	r2, #16
 8006716:	e793      	b.n	8006640 <UART_SetConfig+0x6c>
    switch (clocksource)
 8006718:	2a08      	cmp	r2, #8
 800671a:	f200 809c 	bhi.w	8006856 <UART_SetConfig+0x282>
 800671e:	e8df f002 	tbb	[pc, r2]
 8006722:	9a08      	.short	0x9a08
 8006724:	9a379a3a 	.word	0x9a379a3a
 8006728:	9a9a      	.short	0x9a9a
 800672a:	05          	.byte	0x05
 800672b:	00          	.byte	0x00
 800672c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006730:	e004      	b.n	800673c <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006732:	f7fe faa9 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006736:	2800      	cmp	r0, #0
 8006738:	f000 808f 	beq.w	800685a <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800673c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800673e:	4b4c      	ldr	r3, [pc, #304]	; (8006870 <UART_SetConfig+0x29c>)
 8006740:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006744:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006748:	6865      	ldr	r5, [r4, #4]
 800674a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800674e:	4299      	cmp	r1, r3
 8006750:	f200 8094 	bhi.w	800687c <UART_SetConfig+0x2a8>
 8006754:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006758:	f200 8092 	bhi.w	8006880 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800675c:	2600      	movs	r6, #0
 800675e:	4633      	mov	r3, r6
 8006760:	4631      	mov	r1, r6
 8006762:	f7fa fa21 	bl	8000ba8 <__aeabi_uldivmod>
 8006766:	0209      	lsls	r1, r1, #8
 8006768:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800676c:	0200      	lsls	r0, r0, #8
 800676e:	086b      	lsrs	r3, r5, #1
 8006770:	18c0      	adds	r0, r0, r3
 8006772:	462a      	mov	r2, r5
 8006774:	4633      	mov	r3, r6
 8006776:	f141 0100 	adc.w	r1, r1, #0
 800677a:	f7fa fa15 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800677e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006782:	4b3c      	ldr	r3, [pc, #240]	; (8006874 <UART_SetConfig+0x2a0>)
 8006784:	429a      	cmp	r2, r3
 8006786:	d87d      	bhi.n	8006884 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	60d8      	str	r0, [r3, #12]
 800678c:	4630      	mov	r0, r6
 800678e:	e050      	b.n	8006832 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006790:	f7fd fd7c 	bl	800428c <HAL_RCC_GetSysClockFreq>
        break;
 8006794:	e7cf      	b.n	8006736 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8006796:	4838      	ldr	r0, [pc, #224]	; (8006878 <UART_SetConfig+0x2a4>)
 8006798:	e7d0      	b.n	800673c <UART_SetConfig+0x168>
    switch (clocksource)
 800679a:	2a08      	cmp	r2, #8
 800679c:	d874      	bhi.n	8006888 <UART_SetConfig+0x2b4>
 800679e:	e8df f002 	tbb	[pc, r2]
 80067a2:	2707      	.short	0x2707
 80067a4:	732a7305 	.word	0x732a7305
 80067a8:	7373      	.short	0x7373
 80067aa:	0b          	.byte	0x0b
 80067ab:	00          	.byte	0x00
 80067ac:	4832      	ldr	r0, [pc, #200]	; (8006878 <UART_SetConfig+0x2a4>)
 80067ae:	e003      	b.n	80067b8 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b0:	f7fe fa6a 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d069      	beq.n	800688c <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067ba:	4b2d      	ldr	r3, [pc, #180]	; (8006870 <UART_SetConfig+0x29c>)
 80067bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80067c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80067c4:	6862      	ldr	r2, [r4, #4]
 80067c6:	0853      	lsrs	r3, r2, #1
 80067c8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80067cc:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d0:	f1a0 0210 	sub.w	r2, r0, #16
 80067d4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80067d8:	429a      	cmp	r2, r3
 80067da:	d859      	bhi.n	8006890 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067dc:	b283      	uxth	r3, r0
 80067de:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067e2:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80067e6:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	60d8      	str	r0, [r3, #12]
 80067ec:	2000      	movs	r0, #0
 80067ee:	e020      	b.n	8006832 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f0:	f7fe fa5a 	bl	8004ca8 <HAL_RCC_GetPCLK2Freq>
        break;
 80067f4:	e7de      	b.n	80067b4 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 80067f6:	f7fd fd49 	bl	800428c <HAL_RCC_GetSysClockFreq>
        break;
 80067fa:	e7db      	b.n	80067b4 <UART_SetConfig+0x1e0>
    switch (clocksource)
 80067fc:	481e      	ldr	r0, [pc, #120]	; (8006878 <UART_SetConfig+0x2a4>)
 80067fe:	e003      	b.n	8006808 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006800:	f7fe fa42 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006804:	2800      	cmp	r0, #0
 8006806:	d047      	beq.n	8006898 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006808:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800680a:	4b19      	ldr	r3, [pc, #100]	; (8006870 <UART_SetConfig+0x29c>)
 800680c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006810:	fbb0 f0f3 	udiv	r0, r0, r3
 8006814:	6863      	ldr	r3, [r4, #4]
 8006816:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800681a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800681e:	f1a0 0210 	sub.w	r2, r0, #16
 8006822:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006826:	429a      	cmp	r2, r3
 8006828:	d838      	bhi.n	800689c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	b280      	uxth	r0, r0
 800682e:	60d8      	str	r0, [r3, #12]
 8006830:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8006832:	2301      	movs	r3, #1
 8006834:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006838:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800683c:	2300      	movs	r3, #0
 800683e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8006840:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006842:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006844:	f7fe fa30 	bl	8004ca8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006848:	e7dc      	b.n	8006804 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800684a:	f7fd fd1f 	bl	800428c <HAL_RCC_GetSysClockFreq>
        break;
 800684e:	e7d9      	b.n	8006804 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8006850:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006854:	e7d8      	b.n	8006808 <UART_SetConfig+0x234>
    switch (clocksource)
 8006856:	2001      	movs	r0, #1
 8006858:	e7eb      	b.n	8006832 <UART_SetConfig+0x25e>
 800685a:	2000      	movs	r0, #0
 800685c:	e7e9      	b.n	8006832 <UART_SetConfig+0x25e>
 800685e:	bf00      	nop
 8006860:	cfff69f3 	.word	0xcfff69f3
 8006864:	40008000 	.word	0x40008000
 8006868:	40013800 	.word	0x40013800
 800686c:	40004400 	.word	0x40004400
 8006870:	08012830 	.word	0x08012830
 8006874:	000ffcff 	.word	0x000ffcff
 8006878:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800687c:	2001      	movs	r0, #1
 800687e:	e7d8      	b.n	8006832 <UART_SetConfig+0x25e>
 8006880:	2001      	movs	r0, #1
 8006882:	e7d6      	b.n	8006832 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8006884:	2001      	movs	r0, #1
 8006886:	e7d4      	b.n	8006832 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006888:	2001      	movs	r0, #1
 800688a:	e7d2      	b.n	8006832 <UART_SetConfig+0x25e>
 800688c:	2000      	movs	r0, #0
 800688e:	e7d0      	b.n	8006832 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006890:	2001      	movs	r0, #1
 8006892:	e7ce      	b.n	8006832 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006894:	2001      	movs	r0, #1
 8006896:	e7cc      	b.n	8006832 <UART_SetConfig+0x25e>
 8006898:	2000      	movs	r0, #0
 800689a:	e7ca      	b.n	8006832 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800689c:	2001      	movs	r0, #1
 800689e:	e7c8      	b.n	8006832 <UART_SetConfig+0x25e>

080068a0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068a2:	f013 0f01 	tst.w	r3, #1
 80068a6:	d006      	beq.n	80068b6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068a8:	6802      	ldr	r2, [r0, #0]
 80068aa:	6853      	ldr	r3, [r2, #4]
 80068ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068b0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80068b2:	430b      	orrs	r3, r1
 80068b4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068b8:	f013 0f02 	tst.w	r3, #2
 80068bc:	d006      	beq.n	80068cc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068be:	6802      	ldr	r2, [r0, #0]
 80068c0:	6853      	ldr	r3, [r2, #4]
 80068c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80068c8:	430b      	orrs	r3, r1
 80068ca:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068ce:	f013 0f04 	tst.w	r3, #4
 80068d2:	d006      	beq.n	80068e2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068d4:	6802      	ldr	r2, [r0, #0]
 80068d6:	6853      	ldr	r3, [r2, #4]
 80068d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068dc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80068de:	430b      	orrs	r3, r1
 80068e0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068e4:	f013 0f08 	tst.w	r3, #8
 80068e8:	d006      	beq.n	80068f8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ea:	6802      	ldr	r2, [r0, #0]
 80068ec:	6853      	ldr	r3, [r2, #4]
 80068ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068f2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068fa:	f013 0f10 	tst.w	r3, #16
 80068fe:	d006      	beq.n	800690e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006900:	6802      	ldr	r2, [r0, #0]
 8006902:	6893      	ldr	r3, [r2, #8]
 8006904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006908:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800690a:	430b      	orrs	r3, r1
 800690c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800690e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006910:	f013 0f20 	tst.w	r3, #32
 8006914:	d006      	beq.n	8006924 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006916:	6802      	ldr	r2, [r0, #0]
 8006918:	6893      	ldr	r3, [r2, #8]
 800691a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800691e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006920:	430b      	orrs	r3, r1
 8006922:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006924:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006926:	f013 0f40 	tst.w	r3, #64	; 0x40
 800692a:	d00a      	beq.n	8006942 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800692c:	6802      	ldr	r2, [r0, #0]
 800692e:	6853      	ldr	r3, [r2, #4]
 8006930:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006934:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006936:	430b      	orrs	r3, r1
 8006938:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800693a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800693c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006940:	d00b      	beq.n	800695a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006942:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006944:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006948:	d006      	beq.n	8006958 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800694a:	6802      	ldr	r2, [r0, #0]
 800694c:	6853      	ldr	r3, [r2, #4]
 800694e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006952:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006954:	430b      	orrs	r3, r1
 8006956:	6053      	str	r3, [r2, #4]
}
 8006958:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800695a:	6802      	ldr	r2, [r0, #0]
 800695c:	6853      	ldr	r3, [r2, #4]
 800695e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006962:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006964:	430b      	orrs	r3, r1
 8006966:	6053      	str	r3, [r2, #4]
 8006968:	e7eb      	b.n	8006942 <UART_AdvFeatureConfig+0xa2>

0800696a <UART_WaitOnFlagUntilTimeout>:
{
 800696a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800696e:	4605      	mov	r5, r0
 8006970:	460f      	mov	r7, r1
 8006972:	4616      	mov	r6, r2
 8006974:	4699      	mov	r9, r3
 8006976:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697a:	682c      	ldr	r4, [r5, #0]
 800697c:	69e4      	ldr	r4, [r4, #28]
 800697e:	ea37 0304 	bics.w	r3, r7, r4
 8006982:	bf0c      	ite	eq
 8006984:	f04f 0c01 	moveq.w	ip, #1
 8006988:	f04f 0c00 	movne.w	ip, #0
 800698c:	45b4      	cmp	ip, r6
 800698e:	d157      	bne.n	8006a40 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8006990:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006994:	d0f1      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fb f815 	bl	80019c4 <HAL_GetTick>
 800699a:	eba0 0009 	sub.w	r0, r0, r9
 800699e:	4540      	cmp	r0, r8
 80069a0:	d82f      	bhi.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x98>
 80069a2:	f1b8 0f00 	cmp.w	r8, #0
 80069a6:	d02c      	beq.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	f012 0f04 	tst.w	r2, #4
 80069b0:	d0e3      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069b2:	69da      	ldr	r2, [r3, #28]
 80069b4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80069b8:	d0df      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069be:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80069c0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	e852 3f00 	ldrex	r3, [r2]
 80069c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	e842 3100 	strex	r1, r3, [r2]
 80069ce:	2900      	cmp	r1, #0
 80069d0:	d1f6      	bne.n	80069c0 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	f102 0308 	add.w	r3, r2, #8
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	3208      	adds	r2, #8
 80069e2:	e842 3100 	strex	r1, r3, [r2]
 80069e6:	2900      	cmp	r1, #0
 80069e8:	d1f3      	bne.n	80069d2 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 80069ea:	2320      	movs	r3, #32
 80069ec:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80069f0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069f4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 80069f8:	2300      	movs	r3, #0
 80069fa:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 80069fe:	2003      	movs	r0, #3
 8006a00:	e01f      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a02:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	e852 3f00 	ldrex	r3, [r2]
 8006a08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	e842 3100 	strex	r1, r3, [r2]
 8006a10:	2900      	cmp	r1, #0
 8006a12:	d1f6      	bne.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a14:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	f102 0308 	add.w	r3, r2, #8
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	3208      	adds	r2, #8
 8006a24:	e842 3100 	strex	r1, r3, [r2]
 8006a28:	2900      	cmp	r1, #0
 8006a2a:	d1f3      	bne.n	8006a14 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8006a2c:	2320      	movs	r3, #32
 8006a2e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006a32:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8006a36:	2300      	movs	r3, #0
 8006a38:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 8006a3c:	2003      	movs	r0, #3
 8006a3e:	e000      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 8006a40:	2000      	movs	r0, #0
}
 8006a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006a46 <UART_CheckIdleState>:
{
 8006a46:	b530      	push	{r4, r5, lr}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8006a52:	f7fa ffb7 	bl	80019c4 <HAL_GetTick>
 8006a56:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a58:	6822      	ldr	r2, [r4, #0]
 8006a5a:	6812      	ldr	r2, [r2, #0]
 8006a5c:	f012 0f08 	tst.w	r2, #8
 8006a60:	d110      	bne.n	8006a84 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f013 0f04 	tst.w	r3, #4
 8006a6a:	d119      	bne.n	8006aa0 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8006a6c:	2320      	movs	r3, #32
 8006a6e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a72:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a76:	2000      	movs	r0, #0
 8006a78:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a7a:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8006a7c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006a80:	b003      	add	sp, #12
 8006a82:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a92:	4620      	mov	r0, r4
 8006a94:	f7ff ff69 	bl	800696a <UART_WaitOnFlagUntilTimeout>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d0e2      	beq.n	8006a62 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006a9c:	2003      	movs	r0, #3
 8006a9e:	e7ef      	b.n	8006a80 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	462b      	mov	r3, r5
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f7ff ff5b 	bl	800696a <UART_WaitOnFlagUntilTimeout>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d0d9      	beq.n	8006a6c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006ab8:	2003      	movs	r0, #3
 8006aba:	e7e1      	b.n	8006a80 <UART_CheckIdleState+0x3a>

08006abc <HAL_UART_Init>:
  if (huart == NULL)
 8006abc:	b378      	cbz	r0, 8006b1e <HAL_UART_Init+0x62>
{
 8006abe:	b510      	push	{r4, lr}
 8006ac0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006ac2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006ac6:	b30b      	cbz	r3, 8006b0c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006ac8:	2324      	movs	r3, #36	; 0x24
 8006aca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	6813      	ldr	r3, [r2, #0]
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f7ff fd7b 	bl	80065d4 <UART_SetConfig>
 8006ade:	2801      	cmp	r0, #1
 8006ae0:	d013      	beq.n	8006b0a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ae4:	b9bb      	cbnz	r3, 8006b16 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	6853      	ldr	r3, [r2, #4]
 8006aea:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006aee:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006af0:	6822      	ldr	r2, [r4, #0]
 8006af2:	6893      	ldr	r3, [r2, #8]
 8006af4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006af8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006afa:	6822      	ldr	r2, [r4, #0]
 8006afc:	6813      	ldr	r3, [r2, #0]
 8006afe:	f043 0301 	orr.w	r3, r3, #1
 8006b02:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006b04:	4620      	mov	r0, r4
 8006b06:	f7ff ff9e 	bl	8006a46 <UART_CheckIdleState>
}
 8006b0a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006b0c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8006b10:	f7fb f940 	bl	8001d94 <HAL_UART_MspInit>
 8006b14:	e7d8      	b.n	8006ac8 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006b16:	4620      	mov	r0, r4
 8006b18:	f7ff fec2 	bl	80068a0 <UART_AdvFeatureConfig>
 8006b1c:	e7e3      	b.n	8006ae6 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006b1e:	2001      	movs	r0, #1
}
 8006b20:	4770      	bx	lr
	...

08006b24 <UART_Start_Receive_IT>:
{
 8006b24:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006b26:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006b28:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006b2c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8006b34:	6883      	ldr	r3, [r0, #8]
 8006b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3a:	d006      	beq.n	8006b4a <UART_Start_Receive_IT+0x26>
 8006b3c:	b9a3      	cbnz	r3, 8006b68 <UART_Start_Receive_IT+0x44>
 8006b3e:	6903      	ldr	r3, [r0, #16]
 8006b40:	b973      	cbnz	r3, 8006b60 <UART_Start_Receive_IT+0x3c>
 8006b42:	23ff      	movs	r3, #255	; 0xff
 8006b44:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b48:	e014      	b.n	8006b74 <UART_Start_Receive_IT+0x50>
 8006b4a:	6903      	ldr	r3, [r0, #16]
 8006b4c:	b923      	cbnz	r3, 8006b58 <UART_Start_Receive_IT+0x34>
 8006b4e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006b52:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b56:	e00d      	b.n	8006b74 <UART_Start_Receive_IT+0x50>
 8006b58:	23ff      	movs	r3, #255	; 0xff
 8006b5a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b5e:	e009      	b.n	8006b74 <UART_Start_Receive_IT+0x50>
 8006b60:	237f      	movs	r3, #127	; 0x7f
 8006b62:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b66:	e005      	b.n	8006b74 <UART_Start_Receive_IT+0x50>
 8006b68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b6c:	d02d      	beq.n	8006bca <UART_Start_Receive_IT+0xa6>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b7a:	2322      	movs	r3, #34	; 0x22
 8006b7c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b80:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	f101 0308 	add.w	r3, r1, #8
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	3108      	adds	r1, #8
 8006b90:	e841 3400 	strex	r4, r3, [r1]
 8006b94:	2c00      	cmp	r4, #0
 8006b96:	d1f3      	bne.n	8006b80 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b98:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9e:	d01e      	beq.n	8006bde <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba0:	6883      	ldr	r3, [r0, #8]
 8006ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba6:	d042      	beq.n	8006c2e <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8006ba8:	4b29      	ldr	r3, [pc, #164]	; (8006c50 <UART_Start_Receive_IT+0x12c>)
 8006baa:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006bac:	6903      	ldr	r3, [r0, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d043      	beq.n	8006c3a <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006bb2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	e852 3f00 	ldrex	r3, [r2]
 8006bb8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	e842 3100 	strex	r1, r3, [r2]
 8006bc0:	2900      	cmp	r1, #0
 8006bc2:	d1f6      	bne.n	8006bb2 <UART_Start_Receive_IT+0x8e>
}
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	bc10      	pop	{r4}
 8006bc8:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006bca:	6903      	ldr	r3, [r0, #16]
 8006bcc:	b91b      	cbnz	r3, 8006bd6 <UART_Start_Receive_IT+0xb2>
 8006bce:	237f      	movs	r3, #127	; 0x7f
 8006bd0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006bd4:	e7ce      	b.n	8006b74 <UART_Start_Receive_IT+0x50>
 8006bd6:	233f      	movs	r3, #63	; 0x3f
 8006bd8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006bdc:	e7ca      	b.n	8006b74 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006bde:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d8dc      	bhi.n	8006ba0 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be6:	6883      	ldr	r3, [r0, #8]
 8006be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bec:	d019      	beq.n	8006c22 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006bee:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <UART_Start_Receive_IT+0x130>)
 8006bf0:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006bf2:	6903      	ldr	r3, [r0, #16]
 8006bf4:	b143      	cbz	r3, 8006c08 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bf6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	e852 3f00 	ldrex	r3, [r2]
 8006bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	e842 3100 	strex	r1, r3, [r2]
 8006c04:	2900      	cmp	r1, #0
 8006c06:	d1f6      	bne.n	8006bf6 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c08:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	f102 0308 	add.w	r3, r2, #8
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	3208      	adds	r2, #8
 8006c18:	e842 3100 	strex	r1, r3, [r2]
 8006c1c:	2900      	cmp	r1, #0
 8006c1e:	d1f3      	bne.n	8006c08 <UART_Start_Receive_IT+0xe4>
 8006c20:	e7d0      	b.n	8006bc4 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c22:	6903      	ldr	r3, [r0, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e2      	bne.n	8006bee <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c28:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <UART_Start_Receive_IT+0x134>)
 8006c2a:	6743      	str	r3, [r0, #116]	; 0x74
 8006c2c:	e7e1      	b.n	8006bf2 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c2e:	6903      	ldr	r3, [r0, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1b9      	bne.n	8006ba8 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006c34:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <UART_Start_Receive_IT+0x138>)
 8006c36:	6743      	str	r3, [r0, #116]	; 0x74
 8006c38:	e7b8      	b.n	8006bac <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c3a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	e852 3f00 	ldrex	r3, [r2]
 8006c40:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	e842 3100 	strex	r1, r3, [r2]
 8006c48:	2900      	cmp	r1, #0
 8006c4a:	d1f6      	bne.n	8006c3a <UART_Start_Receive_IT+0x116>
 8006c4c:	e7ba      	b.n	8006bc4 <UART_Start_Receive_IT+0xa0>
 8006c4e:	bf00      	nop
 8006c50:	0800608d 	.word	0x0800608d
 8006c54:	08006241 	.word	0x08006241
 8006c58:	0800640d 	.word	0x0800640d
 8006c5c:	08006169 	.word	0x08006169

08006c60 <HAL_UART_Receive_IT>:
{
 8006c60:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c62:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d117      	bne.n	8006c9a <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8006c6a:	b1c1      	cbz	r1, 8006c9e <HAL_UART_Receive_IT+0x3e>
 8006c6c:	b1ca      	cbz	r2, 8006ca2 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c72:	6803      	ldr	r3, [r0, #0]
 8006c74:	4c0c      	ldr	r4, [pc, #48]	; (8006ca8 <HAL_UART_Receive_IT+0x48>)
 8006c76:	42a3      	cmp	r3, r4
 8006c78:	d00c      	beq.n	8006c94 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006c80:	d008      	beq.n	8006c94 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c82:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	e854 3f00 	ldrex	r3, [r4]
 8006c88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	e844 3500 	strex	r5, r3, [r4]
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	d1f6      	bne.n	8006c82 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c94:	f7ff ff46 	bl	8006b24 <UART_Start_Receive_IT>
 8006c98:	e000      	b.n	8006c9c <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8006c9a:	2002      	movs	r0, #2
}
 8006c9c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	e7fc      	b.n	8006c9c <HAL_UART_Receive_IT+0x3c>
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	e7fa      	b.n	8006c9c <HAL_UART_Receive_IT+0x3c>
 8006ca6:	bf00      	nop
 8006ca8:	40008000 	.word	0x40008000

08006cac <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006cac:	b082      	sub	sp, #8
 8006cae:	ab02      	add	r3, sp, #8
 8006cb0:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006cb4:	6802      	ldr	r2, [r0, #0]
 8006cb6:	6853      	ldr	r3, [r2, #4]
 8006cb8:	f023 0310 	bic.w	r3, r3, #16
 8006cbc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006cc4:	6802      	ldr	r2, [r0, #0]
 8006cc6:	6853      	ldr	r3, [r2, #4]
 8006cc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ccc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006cd0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006cd4:	6053      	str	r3, [r2, #4]
}
 8006cd6:	b002      	add	sp, #8
 8006cd8:	4770      	bx	lr
	...

08006cdc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cdc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006cde:	b92b      	cbnz	r3, 8006cec <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ce6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006cea:	4770      	bx	lr
{
 8006cec:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cee:	6803      	ldr	r3, [r0, #0]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cf6:	6899      	ldr	r1, [r3, #8]
 8006cf8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cfa:	4d09      	ldr	r5, [pc, #36]	; (8006d20 <UARTEx_SetNbDataToProcess+0x44>)
 8006cfc:	5c6b      	ldrb	r3, [r5, r1]
 8006cfe:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d00:	4c08      	ldr	r4, [pc, #32]	; (8006d24 <UARTEx_SetNbDataToProcess+0x48>)
 8006d02:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d04:	fb93 f3f1 	sdiv	r3, r3, r1
 8006d08:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d0c:	5cab      	ldrb	r3, [r5, r2]
 8006d0e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d10:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d16:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006d1a:	bc30      	pop	{r4, r5}
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	08012850 	.word	0x08012850
 8006d24:	08012848 	.word	0x08012848

08006d28 <HAL_UARTEx_WakeupCallback>:
}
 8006d28:	4770      	bx	lr

08006d2a <HAL_UARTEx_RxFifoFullCallback>:
}
 8006d2a:	4770      	bx	lr

08006d2c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006d2c:	4770      	bx	lr

08006d2e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	ab04      	add	r3, sp, #16
 8006d34:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8006d38:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d035      	beq.n	8006dac <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8006d40:	4604      	mov	r4, r0
 8006d42:	2301      	movs	r3, #1
 8006d44:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006d48:	2324      	movs	r3, #36	; 0x24
 8006d4a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8006d4e:	6802      	ldr	r2, [r0, #0]
 8006d50:	6813      	ldr	r3, [r2, #0]
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006d58:	6801      	ldr	r1, [r0, #0]
 8006d5a:	688b      	ldr	r3, [r1, #8]
 8006d5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d60:	9a02      	ldr	r2, [sp, #8]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006d66:	b1aa      	cbz	r2, 8006d94 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006d68:	6822      	ldr	r2, [r4, #0]
 8006d6a:	6813      	ldr	r3, [r2, #0]
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006d72:	f7fa fe27 	bl	80019c4 <HAL_GetTick>
 8006d76:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d78:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006d7c:	9200      	str	r2, [sp, #0]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d84:	4620      	mov	r0, r4
 8006d86:	f7ff fdf0 	bl	800696a <UART_WaitOnFlagUntilTimeout>
 8006d8a:	b948      	cbnz	r0, 8006da0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006d8c:	2320      	movs	r3, #32
 8006d8e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8006d92:	e006      	b.n	8006da2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006d94:	ab04      	add	r3, sp, #16
 8006d96:	e913 0006 	ldmdb	r3, {r1, r2}
 8006d9a:	f7ff ff87 	bl	8006cac <UARTEx_Wakeup_AddressConfig>
 8006d9e:	e7e3      	b.n	8006d68 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006da0:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006da2:	2300      	movs	r3, #0
 8006da4:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8006da8:	b004      	add	sp, #16
 8006daa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006dac:	2002      	movs	r0, #2
 8006dae:	e7fb      	b.n	8006da8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006db0 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006db0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d010      	beq.n	8006dda <HAL_UARTEx_EnableStopMode+0x2a>
 8006db8:	2301      	movs	r3, #1
 8006dba:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006dbe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	e852 3f00 	ldrex	r3, [r2]
 8006dc4:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	e842 3100 	strex	r1, r3, [r2]
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	d1f6      	bne.n	8006dbe <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006dda:	2002      	movs	r0, #2
}
 8006ddc:	4770      	bx	lr

08006dde <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006dde:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d01d      	beq.n	8006e22 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006de6:	b510      	push	{r4, lr}
 8006de8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006dea:	2301      	movs	r3, #1
 8006dec:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006df0:	2324      	movs	r3, #36	; 0x24
 8006df2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006df6:	6802      	ldr	r2, [r0, #0]
 8006df8:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006dfa:	6811      	ldr	r1, [r2, #0]
 8006dfc:	f021 0101 	bic.w	r1, r1, #1
 8006e00:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006e06:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006e0a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e0c:	6802      	ldr	r2, [r0, #0]
 8006e0e:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006e10:	f7ff ff64 	bl	8006cdc <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006e14:	2320      	movs	r3, #32
 8006e16:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006e20:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006e22:	2002      	movs	r0, #2
}
 8006e24:	4770      	bx	lr

08006e26 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006e26:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006e28:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d01d      	beq.n	8006e6c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006e30:	4604      	mov	r4, r0
 8006e32:	2301      	movs	r3, #1
 8006e34:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006e38:	2324      	movs	r3, #36	; 0x24
 8006e3a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e3e:	6803      	ldr	r3, [r0, #0]
 8006e40:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e4a:	6802      	ldr	r2, [r0, #0]
 8006e4c:	6893      	ldr	r3, [r2, #8]
 8006e4e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006e52:	4319      	orrs	r1, r3
 8006e54:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006e56:	f7ff ff41 	bl	8006cdc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e5e:	2320      	movs	r3, #32
 8006e60:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006e64:	2000      	movs	r0, #0
 8006e66:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006e6c:	2002      	movs	r0, #2
 8006e6e:	e7fc      	b.n	8006e6a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006e70 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006e70:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006e72:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d01d      	beq.n	8006eb6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006e82:	2324      	movs	r3, #36	; 0x24
 8006e84:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e88:	6803      	ldr	r3, [r0, #0]
 8006e8a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	f022 0201 	bic.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e94:	6802      	ldr	r2, [r0, #0]
 8006e96:	6893      	ldr	r3, [r2, #8]
 8006e98:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006e9c:	4319      	orrs	r1, r3
 8006e9e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006ea0:	f7ff ff1c 	bl	8006cdc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006ea8:	2320      	movs	r3, #32
 8006eaa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006eb4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006eb6:	2002      	movs	r0, #2
 8006eb8:	e7fc      	b.n	8006eb4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006ebc <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006ebc:	2804      	cmp	r0, #4
 8006ebe:	d807      	bhi.n	8006ed0 <LmHandlerPackageIsInitialized+0x14>
{
 8006ec0:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <LmHandlerPackageIsInitialized+0x1c>)
 8006ec4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	b11b      	cbz	r3, 8006ed4 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006ecc:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006ece:	bd08      	pop	{r3, pc}
        return false;
 8006ed0:	2000      	movs	r0, #0
}
 8006ed2:	4770      	bx	lr
        return false;
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	e7fa      	b.n	8006ece <LmHandlerPackageIsInitialized+0x12>
 8006ed8:	2000058c 	.word	0x2000058c

08006edc <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	4605      	mov	r5, r0
 8006ee0:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006ee2:	2400      	movs	r4, #0
 8006ee4:	e005      	b.n	8006ef2 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	b10b      	cbz	r3, 8006eee <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8006eea:	4630      	mov	r0, r6
 8006eec:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006eee:	3401      	adds	r4, #1
 8006ef0:	b264      	sxtb	r4, r4
 8006ef2:	2c04      	cmp	r4, #4
 8006ef4:	dc24      	bgt.n	8006f40 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8006ef6:	4b13      	ldr	r3, [pc, #76]	; (8006f44 <LmHandlerPackagesNotify+0x68>)
 8006ef8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0f6      	beq.n	8006eee <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8006f00:	2d03      	cmp	r5, #3
 8006f02:	d8f4      	bhi.n	8006eee <LmHandlerPackagesNotify+0x12>
 8006f04:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <LmHandlerPackagesNotify+0x30>)
 8006f06:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8006f0a:	bf00      	nop
 8006f0c:	08006ee7 	.word	0x08006ee7
 8006f10:	08006f1d 	.word	0x08006f1d
 8006f14:	08006f29 	.word	0x08006f29
 8006f18:	08006f35 	.word	0x08006f35
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0e5      	beq.n	8006eee <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8006f22:	4630      	mov	r0, r6
 8006f24:	4798      	blx	r3
 8006f26:	e7e2      	b.n	8006eee <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0df      	beq.n	8006eee <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8006f2e:	4630      	mov	r0, r6
 8006f30:	4798      	blx	r3
 8006f32:	e7dc      	b.n	8006eee <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0d9      	beq.n	8006eee <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	4798      	blx	r3
 8006f3e:	e7d6      	b.n	8006eee <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 8006f40:	bd70      	pop	{r4, r5, r6, pc}
 8006f42:	bf00      	nop
 8006f44:	2000058c 	.word	0x2000058c

08006f48 <MlmeIndication>:
{
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8006f4c:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <MlmeIndication+0x4c>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8006f52:	7842      	ldrb	r2, [r0, #1]
 8006f54:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8006f56:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8006f5a:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8006f5c:	f9b1 2000 	ldrsh.w	r2, [r1]
 8006f60:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8006f62:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8006f66:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8006f68:	78ca      	ldrb	r2, [r1, #3]
 8006f6a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8006f6c:	6842      	ldr	r2, [r0, #4]
 8006f6e:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8006f70:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <MlmeIndication+0x50>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	b13b      	cbz	r3, 8006f88 <MlmeIndication+0x40>
 8006f78:	7802      	ldrb	r2, [r0, #0]
 8006f7a:	2a0a      	cmp	r2, #10
 8006f7c:	d004      	beq.n	8006f88 <MlmeIndication+0x40>
 8006f7e:	2a0e      	cmp	r2, #14
 8006f80:	d002      	beq.n	8006f88 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8006f82:	4904      	ldr	r1, [pc, #16]	; (8006f94 <MlmeIndication+0x4c>)
 8006f84:	2000      	movs	r0, #0
 8006f86:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8006f88:	4621      	mov	r1, r4
 8006f8a:	2003      	movs	r0, #3
 8006f8c:	f7ff ffa6 	bl	8006edc <LmHandlerPackagesNotify>
}
 8006f90:	bd10      	pop	{r4, pc}
 8006f92:	bf00      	nop
 8006f94:	20000088 	.word	0x20000088
 8006f98:	20000588 	.word	0x20000588

08006f9c <McpsConfirm>:
{
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8006fa0:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <McpsConfirm+0x3c>)
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006fa6:	7842      	ldrb	r2, [r0, #1]
 8006fa8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006faa:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8006fae:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006fb0:	68c2      	ldr	r2, [r0, #12]
 8006fb2:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006fb4:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8006fb8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8006fba:	6902      	ldr	r2, [r0, #16]
 8006fbc:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006fbe:	7902      	ldrb	r2, [r0, #4]
 8006fc0:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8006fc2:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <McpsConfirm+0x40>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc8:	b10b      	cbz	r3, 8006fce <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8006fca:	4803      	ldr	r0, [pc, #12]	; (8006fd8 <McpsConfirm+0x3c>)
 8006fcc:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8006fce:	4621      	mov	r1, r4
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	f7ff ff83 	bl	8006edc <LmHandlerPackagesNotify>
}
 8006fd6:	bd10      	pop	{r4, pc}
 8006fd8:	2000009c 	.word	0x2000009c
 8006fdc:	20000588 	.word	0x20000588

08006fe0 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8006fe0:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006fe2:	2400      	movs	r4, #0
 8006fe4:	e001      	b.n	8006fea <LmHandlerPackageIsTxPending+0xa>
 8006fe6:	3401      	adds	r4, #1
 8006fe8:	b264      	sxtb	r4, r4
 8006fea:	2c04      	cmp	r4, #4
 8006fec:	dc0a      	bgt.n	8007004 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 8006fee:	4b07      	ldr	r3, [pc, #28]	; (800700c <LmHandlerPackageIsTxPending+0x2c>)
 8006ff0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0f6      	beq.n	8006fe6 <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	4798      	blx	r3
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d0f1      	beq.n	8006fe6 <LmHandlerPackageIsTxPending+0x6>
 8007002:	e000      	b.n	8007006 <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	bd10      	pop	{r4, pc}
 800700a:	bf00      	nop
 800700c:	2000058c 	.word	0x2000058c

08007010 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8007010:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007012:	2400      	movs	r4, #0
 8007014:	e001      	b.n	800701a <LmHandlerPackagesProcess+0xa>
 8007016:	3401      	adds	r4, #1
 8007018:	b264      	sxtb	r4, r4
 800701a:	2c04      	cmp	r4, #4
 800701c:	dc12      	bgt.n	8007044 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800701e:	4b0a      	ldr	r3, [pc, #40]	; (8007048 <LmHandlerPackagesProcess+0x38>)
 8007020:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d0f6      	beq.n	8007016 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007028:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0f3      	beq.n	8007016 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800702e:	b2e0      	uxtb	r0, r4
 8007030:	f7ff ff44 	bl	8006ebc <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007034:	2800      	cmp	r0, #0
 8007036:	d0ee      	beq.n	8007016 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8007038:	4b03      	ldr	r3, [pc, #12]	; (8007048 <LmHandlerPackagesProcess+0x38>)
 800703a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	4798      	blx	r3
 8007042:	e7e8      	b.n	8007016 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8007044:	bd38      	pop	{r3, r4, r5, pc}
 8007046:	bf00      	nop
 8007048:	2000058c 	.word	0x2000058c

0800704c <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800704c:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800704e:	4b04      	ldr	r3, [pc, #16]	; (8007060 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 8007050:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 8007052:	4b04      	ldr	r3, [pc, #16]	; (8007064 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	b103      	cbz	r3, 800705c <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800705a:	4798      	blx	r3
    }
}
 800705c:	bd08      	pop	{r3, pc}
 800705e:	bf00      	nop
 8007060:	200005a0 	.word	0x200005a0
 8007064:	20000588 	.word	0x20000588

08007068 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 8007068:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800706a:	4b04      	ldr	r3, [pc, #16]	; (800707c <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 800706c:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800706e:	4b04      	ldr	r3, [pc, #16]	; (8007080 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007074:	b103      	cbz	r3, 8007078 <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 8007076:	4798      	blx	r3
    }
}
 8007078:	bd08      	pop	{r3, pc}
 800707a:	bf00      	nop
 800707c:	200005a0 	.word	0x200005a0
 8007080:	20000588 	.word	0x20000588

08007084 <LmHandlerJoin>:
{
 8007084:	b530      	push	{r4, r5, lr}
 8007086:	b091      	sub	sp, #68	; 0x44
 8007088:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800708a:	2301      	movs	r3, #1
 800708c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007090:	4b33      	ldr	r3, [pc, #204]	; (8007160 <LmHandlerJoin+0xdc>)
 8007092:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8007096:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800709a:	f993 1005 	ldrsb.w	r1, [r3, #5]
 800709e:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 80070a2:	2802      	cmp	r0, #2
 80070a4:	d022      	beq.n	80070ec <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 80070a6:	2001      	movs	r0, #1
 80070a8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80070ac:	4b2d      	ldr	r3, [pc, #180]	; (8007164 <LmHandlerJoin+0xe0>)
 80070ae:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 80070b0:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 80070b2:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80070b4:	2100      	movs	r1, #0
 80070b6:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 80070b8:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 80070ba:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <LmHandlerJoin+0xe4>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	b1f3      	cbz	r3, 80070fe <LmHandlerJoin+0x7a>
        LoRaMacStart();
 80070c0:	f003 fb0c 	bl	800a6dc <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80070ca:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80070ce:	a801      	add	r0, sp, #4
 80070d0:	f003 fd42 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 80070d4:	4b24      	ldr	r3, [pc, #144]	; (8007168 <LmHandlerJoin+0xe4>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	b103      	cbz	r3, 80070dc <LmHandlerJoin+0x58>
 80070da:	b114      	cbz	r4, 80070e2 <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 80070dc:	a80b      	add	r0, sp, #44	; 0x2c
 80070de:	f003 ffef 	bl	800b0c0 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80070e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070e4:	4b21      	ldr	r3, [pc, #132]	; (800716c <LmHandlerJoin+0xe8>)
 80070e6:	601a      	str	r2, [r3, #0]
}
 80070e8:	b011      	add	sp, #68	; 0x44
 80070ea:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80070ec:	2202      	movs	r2, #2
 80070ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80070f2:	4b1c      	ldr	r3, [pc, #112]	; (8007164 <LmHandlerJoin+0xe0>)
 80070f4:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 80070f6:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 80070f8:	f003 faf0 	bl	800a6dc <LoRaMacStart>
 80070fc:	e7ea      	b.n	80070d4 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 80070fe:	231f      	movs	r3, #31
 8007100:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8007104:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007108:	a801      	add	r0, sp, #4
 800710a:	f003 fd25 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800710e:	2320      	movs	r3, #32
 8007110:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8007114:	4d12      	ldr	r5, [pc, #72]	; (8007160 <LmHandlerJoin+0xdc>)
 8007116:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800711a:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800711e:	a801      	add	r0, sp, #4
 8007120:	f003 fd1a 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8007124:	2322      	movs	r3, #34	; 0x22
 8007126:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800712a:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800712e:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007132:	a801      	add	r0, sp, #4
 8007134:	f003 fd10 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8007138:	2321      	movs	r3, #33	; 0x21
 800713a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800713e:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8007142:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007146:	a801      	add	r0, sp, #4
 8007148:	f003 fd06 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800714c:	2329      	movs	r3, #41	; 0x29
 800714e:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8007152:	4b07      	ldr	r3, [pc, #28]	; (8007170 <LmHandlerJoin+0xec>)
 8007154:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007156:	a801      	add	r0, sp, #4
 8007158:	f003 fcfe 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
 800715c:	e7b0      	b.n	80070c0 <LmHandlerJoin+0x3c>
 800715e:	bf00      	nop
 8007160:	200005a0 	.word	0x200005a0
 8007164:	2000007c 	.word	0x2000007c
 8007168:	2000057c 	.word	0x2000057c
 800716c:	20000580 	.word	0x20000580
 8007170:	01000400 	.word	0x01000400

08007174 <LmHandlerDeviceTimeReq>:
{
 8007174:	b500      	push	{lr}
 8007176:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8007178:	2309      	movs	r3, #9
 800717a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800717e:	a801      	add	r0, sp, #4
 8007180:	f003 ff9e 	bl	800b0c0 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8007184:	9a05      	ldr	r2, [sp, #20]
 8007186:	4b04      	ldr	r3, [pc, #16]	; (8007198 <LmHandlerDeviceTimeReq+0x24>)
 8007188:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800718a:	b910      	cbnz	r0, 8007192 <LmHandlerDeviceTimeReq+0x1e>
}
 800718c:	b007      	add	sp, #28
 800718e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007192:	f04f 30ff 	mov.w	r0, #4294967295
 8007196:	e7f9      	b.n	800718c <LmHandlerDeviceTimeReq+0x18>
 8007198:	20000580 	.word	0x20000580

0800719c <LmHandlerGetDutyCycleWaitTime>:
}
 800719c:	4b01      	ldr	r3, [pc, #4]	; (80071a4 <LmHandlerGetDutyCycleWaitTime+0x8>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	20000580 	.word	0x20000580

080071a8 <LmHandlerJoinStatus>:
{
 80071a8:	b500      	push	{lr}
 80071aa:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80071b2:	4668      	mov	r0, sp
 80071b4:	f003 fb5c 	bl	800a870 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 80071b8:	b920      	cbnz	r0, 80071c4 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80071ba:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80071be:	b110      	cbz	r0, 80071c6 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 80071c0:	2001      	movs	r0, #1
 80071c2:	e000      	b.n	80071c6 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 80071c4:	2000      	movs	r0, #0
}
 80071c6:	b00b      	add	sp, #44	; 0x2c
 80071c8:	f85d fb04 	ldr.w	pc, [sp], #4

080071cc <LmHandlerIsBusy>:
{
 80071cc:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 80071ce:	f003 f833 	bl	800a238 <LoRaMacIsBusy>
 80071d2:	b100      	cbz	r0, 80071d6 <LmHandlerIsBusy+0xa>
}
 80071d4:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80071d6:	f7ff ffe7 	bl	80071a8 <LmHandlerJoinStatus>
 80071da:	2801      	cmp	r0, #1
 80071dc:	d006      	beq.n	80071ec <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <LmHandlerIsBusy+0x28>)
 80071e0:	7a19      	ldrb	r1, [r3, #8]
 80071e2:	79d8      	ldrb	r0, [r3, #7]
 80071e4:	f7ff ff4e 	bl	8007084 <LmHandlerJoin>
        return true;
 80071e8:	2001      	movs	r0, #1
 80071ea:	e7f3      	b.n	80071d4 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 80071ec:	f7ff fef8 	bl	8006fe0 <LmHandlerPackageIsTxPending>
 80071f0:	e7f0      	b.n	80071d4 <LmHandlerIsBusy+0x8>
 80071f2:	bf00      	nop
 80071f4:	2000007c 	.word	0x2000007c

080071f8 <LmHandlerSend>:
{
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	4604      	mov	r4, r0
 80071fe:	460d      	mov	r5, r1
 8007200:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 8007202:	f003 f819 	bl	800a238 <LoRaMacIsBusy>
 8007206:	2800      	cmp	r0, #0
 8007208:	d168      	bne.n	80072dc <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 800720a:	f003 f833 	bl	800a274 <LoRaMacIsStopped>
 800720e:	2800      	cmp	r0, #0
 8007210:	d167      	bne.n	80072e2 <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8007212:	f7ff ffc9 	bl	80071a8 <LmHandlerJoinStatus>
 8007216:	2801      	cmp	r0, #1
 8007218:	d137      	bne.n	800728a <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 800721a:	4b35      	ldr	r3, [pc, #212]	; (80072f0 <LmHandlerSend+0xf8>)
 800721c:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800721e:	3d00      	subs	r5, #0
 8007220:	bf18      	it	ne
 8007222:	2501      	movne	r5, #1
 8007224:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007228:	4b32      	ldr	r3, [pc, #200]	; (80072f4 <LmHandlerSend+0xfc>)
 800722a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800722e:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007232:	4669      	mov	r1, sp
 8007234:	7860      	ldrb	r0, [r4, #1]
 8007236:	f003 fab1 	bl	800a79c <LoRaMacQueryTxPossible>
 800723a:	b370      	cbz	r0, 800729a <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800723c:	2300      	movs	r3, #0
 800723e:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007242:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007244:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8007248:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800724c:	4b28      	ldr	r3, [pc, #160]	; (80072f0 <LmHandlerSend+0xf8>)
 800724e:	f103 0c10 	add.w	ip, r3, #16
 8007252:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007256:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800725a:	4a26      	ldr	r2, [pc, #152]	; (80072f4 <LmHandlerSend+0xfc>)
 800725c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007260:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8007262:	4631      	mov	r1, r6
 8007264:	a801      	add	r0, sp, #4
 8007266:	f004 f82f 	bl	800b2c8 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800726a:	9a05      	ldr	r2, [sp, #20]
 800726c:	4b22      	ldr	r3, [pc, #136]	; (80072f8 <LmHandlerSend+0x100>)
 800726e:	601a      	str	r2, [r3, #0]
    switch( status )
 8007270:	2811      	cmp	r0, #17
 8007272:	d830      	bhi.n	80072d6 <LmHandlerSend+0xde>
 8007274:	e8df f000 	tbb	[pc, r0]
 8007278:	2f2f1c21 	.word	0x2f2f1c21
 800727c:	382f2f2f 	.word	0x382f2f2f
 8007280:	2c2f2f2f 	.word	0x2c2f2f2f
 8007284:	1c1c2f2f 	.word	0x1c1c2f2f
 8007288:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800728a:	4b1c      	ldr	r3, [pc, #112]	; (80072fc <LmHandlerSend+0x104>)
 800728c:	7a19      	ldrb	r1, [r3, #8]
 800728e:	79d8      	ldrb	r0, [r3, #7]
 8007290:	f7ff fef8 	bl	8007084 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007294:	f06f 0502 	mvn.w	r5, #2
 8007298:	e00c      	b.n	80072b4 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800729a:	7823      	ldrb	r3, [r4, #0]
 800729c:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80072a0:	7863      	ldrb	r3, [r4, #1]
 80072a2:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80072a6:	6863      	ldr	r3, [r4, #4]
 80072a8:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 80072aa:	f04f 35ff 	mov.w	r5, #4294967295
 80072ae:	e7cd      	b.n	800724c <LmHandlerSend+0x54>
    switch( status )
 80072b0:	f06f 0501 	mvn.w	r5, #1
}
 80072b4:	4628      	mov	r0, r5
 80072b6:	b006      	add	sp, #24
 80072b8:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 80072ba:	4b11      	ldr	r3, [pc, #68]	; (8007300 <LmHandlerSend+0x108>)
 80072bc:	2200      	movs	r2, #0
 80072be:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 80072c0:	f115 0f07 	cmn.w	r5, #7
 80072c4:	d0f6      	beq.n	80072b4 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80072c6:	2500      	movs	r5, #0
 80072c8:	e7f4      	b.n	80072b4 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80072ca:	f06f 0504 	mvn.w	r5, #4
            break;
 80072ce:	e7f1      	b.n	80072b4 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80072d0:	f06f 0505 	mvn.w	r5, #5
            break;
 80072d4:	e7ee      	b.n	80072b4 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80072d6:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 80072da:	e7eb      	b.n	80072b4 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80072dc:	f06f 0501 	mvn.w	r5, #1
 80072e0:	e7e8      	b.n	80072b4 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80072e2:	f06f 0502 	mvn.w	r5, #2
 80072e6:	e7e5      	b.n	80072b4 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80072e8:	f06f 0502 	mvn.w	r5, #2
 80072ec:	e7e2      	b.n	80072b4 <LmHandlerSend+0xbc>
 80072ee:	bf00      	nop
 80072f0:	2000009c 	.word	0x2000009c
 80072f4:	200005a0 	.word	0x200005a0
 80072f8:	20000580 	.word	0x20000580
 80072fc:	2000007c 	.word	0x2000007c
 8007300:	20000584 	.word	0x20000584

08007304 <LmHandlerProcess>:
{
 8007304:	b500      	push	{lr}
 8007306:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8007308:	f002 ffc0 	bl	800a28c <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800730c:	f7ff fe80 	bl	8007010 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8007310:	f7ff fe66 	bl	8006fe0 <LmHandlerPackageIsTxPending>
 8007314:	b910      	cbnz	r0, 800731c <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8007316:	4b0b      	ldr	r3, [pc, #44]	; (8007344 <LmHandlerProcess+0x40>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	b913      	cbnz	r3, 8007322 <LmHandlerProcess+0x1e>
}
 800731c:	b003      	add	sp, #12
 800731e:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 8007322:	2200      	movs	r2, #0
 8007324:	f88d 2000 	strb.w	r2, [sp]
 8007328:	f88d 2001 	strb.w	r2, [sp, #1]
 800732c:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <LmHandlerProcess+0x44>)
 8007330:	78d9      	ldrb	r1, [r3, #3]
 8007332:	4668      	mov	r0, sp
 8007334:	f7ff ff60 	bl	80071f8 <LmHandlerSend>
 8007338:	2800      	cmp	r0, #0
 800733a:	d1ef      	bne.n	800731c <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800733c:	4b01      	ldr	r3, [pc, #4]	; (8007344 <LmHandlerProcess+0x40>)
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]
 8007342:	e7eb      	b.n	800731c <LmHandlerProcess+0x18>
 8007344:	20000584 	.word	0x20000584
 8007348:	200005a0 	.word	0x200005a0

0800734c <LmHandlerRequestClass>:
{
 800734c:	b510      	push	{r4, lr}
 800734e:	b08a      	sub	sp, #40	; 0x28
 8007350:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 8007352:	f002 ff71 	bl	800a238 <LoRaMacIsBusy>
 8007356:	bbb0      	cbnz	r0, 80073c6 <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8007358:	f7ff ff26 	bl	80071a8 <LmHandlerJoinStatus>
 800735c:	2801      	cmp	r0, #1
 800735e:	d135      	bne.n	80073cc <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 8007360:	2300      	movs	r3, #0
 8007362:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007366:	4668      	mov	r0, sp
 8007368:	f003 fa82 	bl	800a870 <LoRaMacMibGetRequestConfirm>
 800736c:	bb88      	cbnz	r0, 80073d2 <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 800736e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 8007372:	42a3      	cmp	r3, r4
 8007374:	d030      	beq.n	80073d8 <LmHandlerRequestClass+0x8c>
        switch( newClass )
 8007376:	2c01      	cmp	r4, #1
 8007378:	d030      	beq.n	80073dc <LmHandlerRequestClass+0x90>
 800737a:	2c02      	cmp	r4, #2
 800737c:	d014      	beq.n	80073a8 <LmHandlerRequestClass+0x5c>
 800737e:	b114      	cbz	r4, 8007386 <LmHandlerRequestClass+0x3a>
 8007380:	2000      	movs	r0, #0
}
 8007382:	b00a      	add	sp, #40	; 0x28
 8007384:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 8007386:	b90b      	cbnz	r3, 800738c <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007388:	2000      	movs	r0, #0
 800738a:	e7fa      	b.n	8007382 <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 800738c:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007390:	4668      	mov	r0, sp
 8007392:	f003 fbe1 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
 8007396:	bb20      	cbnz	r0, 80073e2 <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8007398:	4b18      	ldr	r3, [pc, #96]	; (80073fc <LmHandlerRequestClass+0xb0>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739e:	b31b      	cbz	r3, 80073e8 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 80073a0:	4620      	mov	r0, r4
 80073a2:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80073a4:	2000      	movs	r0, #0
 80073a6:	e7ec      	b.n	8007382 <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 80073a8:	bb03      	cbnz	r3, 80073ec <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 80073aa:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80073ae:	4668      	mov	r0, sp
 80073b0:	f003 fbd2 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
 80073b4:	b9e8      	cbnz	r0, 80073f2 <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 80073b6:	4b11      	ldr	r3, [pc, #68]	; (80073fc <LmHandlerRequestClass+0xb0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073bc:	b1e3      	cbz	r3, 80073f8 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 80073be:	4620      	mov	r0, r4
 80073c0:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80073c2:	2000      	movs	r0, #0
 80073c4:	e7dd      	b.n	8007382 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80073c6:	f06f 0001 	mvn.w	r0, #1
 80073ca:	e7da      	b.n	8007382 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80073cc:	f06f 0002 	mvn.w	r0, #2
 80073d0:	e7d7      	b.n	8007382 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	e7d4      	b.n	8007382 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80073d8:	2000      	movs	r0, #0
 80073da:	e7d2      	b.n	8007382 <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	e7cf      	b.n	8007382 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 80073e2:	f04f 30ff 	mov.w	r0, #4294967295
 80073e6:	e7cc      	b.n	8007382 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80073e8:	2000      	movs	r0, #0
 80073ea:	e7ca      	b.n	8007382 <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	e7c7      	b.n	8007382 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295
 80073f6:	e7c4      	b.n	8007382 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80073f8:	2000      	movs	r0, #0
 80073fa:	e7c2      	b.n	8007382 <LmHandlerRequestClass+0x36>
 80073fc:	20000588 	.word	0x20000588

08007400 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 8007400:	b170      	cbz	r0, 8007420 <LmHandlerGetCurrentClass+0x20>
{
 8007402:	b510      	push	{r4, lr}
 8007404:	b08a      	sub	sp, #40	; 0x28
 8007406:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8007408:	2300      	movs	r3, #0
 800740a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800740e:	4668      	mov	r0, sp
 8007410:	f003 fa2e 	bl	800a870 <LoRaMacMibGetRequestConfirm>
 8007414:	b938      	cbnz	r0, 8007426 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8007416:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800741a:	7023      	strb	r3, [r4, #0]
}
 800741c:	b00a      	add	sp, #40	; 0x28
 800741e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007420:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007424:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007426:	f04f 30ff 	mov.w	r0, #4294967295
 800742a:	e7f7      	b.n	800741c <LmHandlerGetCurrentClass+0x1c>

0800742c <McpsIndication>:
{
 800742c:	b510      	push	{r4, lr}
 800742e:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 8007430:	2300      	movs	r3, #0
 8007432:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 8007436:	4a1d      	ldr	r2, [pc, #116]	; (80074ac <McpsIndication+0x80>)
 8007438:	2301      	movs	r3, #1
 800743a:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 800743c:	7843      	ldrb	r3, [r0, #1]
 800743e:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007440:	2b00      	cmp	r3, #0
 8007442:	d131      	bne.n	80074a8 <McpsIndication+0x7c>
 8007444:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8007446:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800744a:	4b18      	ldr	r3, [pc, #96]	; (80074ac <McpsIndication+0x80>)
 800744c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800744e:	f9b1 2000 	ldrsh.w	r2, [r1]
 8007452:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8007454:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8007458:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800745a:	78ca      	ldrb	r2, [r1, #3]
 800745c:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800745e:	6902      	ldr	r2, [r0, #16]
 8007460:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 8007462:	78c3      	ldrb	r3, [r0, #3]
 8007464:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8007468:	7b03      	ldrb	r3, [r0, #12]
 800746a:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800746e:	6883      	ldr	r3, [r0, #8]
 8007470:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 8007472:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <McpsIndication+0x84>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	b113      	cbz	r3, 8007480 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800747a:	490c      	ldr	r1, [pc, #48]	; (80074ac <McpsIndication+0x80>)
 800747c:	a802      	add	r0, sp, #8
 800747e:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8007480:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <McpsIndication+0x84>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	b113      	cbz	r3, 800748e <McpsIndication+0x62>
 8007488:	7e22      	ldrb	r2, [r4, #24]
 800748a:	b102      	cbz	r2, 800748e <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800748c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800748e:	4621      	mov	r1, r4
 8007490:	2001      	movs	r0, #1
 8007492:	f7ff fd23 	bl	8006edc <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8007496:	f10d 0007 	add.w	r0, sp, #7
 800749a:	f7ff ffb1 	bl	8007400 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800749e:	7963      	ldrb	r3, [r4, #5]
 80074a0:	b113      	cbz	r3, 80074a8 <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 80074a2:	4b04      	ldr	r3, [pc, #16]	; (80074b4 <McpsIndication+0x88>)
 80074a4:	2201      	movs	r2, #1
 80074a6:	701a      	strb	r2, [r3, #0]
}
 80074a8:	b004      	add	sp, #16
 80074aa:	bd10      	pop	{r4, pc}
 80074ac:	20000088 	.word	0x20000088
 80074b0:	20000588 	.word	0x20000588
 80074b4:	20000584 	.word	0x20000584

080074b8 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 80074b8:	b180      	cbz	r0, 80074dc <LmHandlerGetTxDatarate+0x24>
{
 80074ba:	b510      	push	{r4, lr}
 80074bc:	b08a      	sub	sp, #40	; 0x28
 80074be:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 80074c0:	2320      	movs	r3, #32
 80074c2:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 80074c6:	4668      	mov	r0, sp
 80074c8:	f003 f9d2 	bl	800a870 <LoRaMacMibGetRequestConfirm>
 80074cc:	b948      	cbnz	r0, 80074e2 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 80074ce:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80074d2:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80074d4:	4a04      	ldr	r2, [pc, #16]	; (80074e8 <LmHandlerGetTxDatarate+0x30>)
 80074d6:	7113      	strb	r3, [r2, #4]
}
 80074d8:	b00a      	add	sp, #40	; 0x28
 80074da:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80074dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80074e0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80074e2:	f04f 30ff 	mov.w	r0, #4294967295
 80074e6:	e7f7      	b.n	80074d8 <LmHandlerGetTxDatarate+0x20>
 80074e8:	200005a0 	.word	0x200005a0

080074ec <LmHandlerSetSystemMaxRxError>:
{
 80074ec:	b500      	push	{lr}
 80074ee:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80074f0:	2323      	movs	r3, #35	; 0x23
 80074f2:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 80074f6:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80074f8:	4668      	mov	r0, sp
 80074fa:	f003 fb2d 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
 80074fe:	b910      	cbnz	r0, 8007506 <LmHandlerSetSystemMaxRxError+0x1a>
}
 8007500:	b00b      	add	sp, #44	; 0x2c
 8007502:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007506:	f04f 30ff 	mov.w	r0, #4294967295
 800750a:	e7f9      	b.n	8007500 <LmHandlerSetSystemMaxRxError+0x14>

0800750c <LmHandlerConfigure>:
{
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	b08e      	sub	sp, #56	; 0x38
 8007510:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 8007512:	4c6d      	ldr	r4, [pc, #436]	; (80076c8 <LmHandlerConfigure+0x1bc>)
 8007514:	2218      	movs	r2, #24
 8007516:	4620      	mov	r0, r4
 8007518:	f008 f945 	bl	800f7a6 <memcpy1>
    IsUplinkTxPending = false;
 800751c:	4b6b      	ldr	r3, [pc, #428]	; (80076cc <LmHandlerConfigure+0x1c0>)
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 8007522:	f7fb f9fd 	bl	8002920 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8007526:	7822      	ldrb	r2, [r4, #0]
 8007528:	2301      	movs	r3, #1
 800752a:	4093      	lsls	r3, r2
 800752c:	6841      	ldr	r1, [r0, #4]
 800752e:	420b      	tst	r3, r1
 8007530:	d106      	bne.n	8007540 <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8007532:	4b67      	ldr	r3, [pc, #412]	; (80076d0 <LmHandlerConfigure+0x1c4>)
 8007534:	2201      	movs	r2, #1
 8007536:	2100      	movs	r1, #0
 8007538:	4608      	mov	r0, r1
 800753a:	f00a f813 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800753e:	e7fe      	b.n	800753e <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8007540:	4964      	ldr	r1, [pc, #400]	; (80076d4 <LmHandlerConfigure+0x1c8>)
 8007542:	4865      	ldr	r0, [pc, #404]	; (80076d8 <LmHandlerConfigure+0x1cc>)
 8007544:	f002 feea 	bl	800a31c <LoRaMacInitialization>
 8007548:	2800      	cmp	r0, #0
 800754a:	f040 80b7 	bne.w	80076bc <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 800754e:	2327      	movs	r3, #39	; 0x27
 8007550:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007554:	a804      	add	r0, sp, #16
 8007556:	f003 faff 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
 800755a:	2800      	cmp	r0, #0
 800755c:	d17c      	bne.n	8007658 <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 800755e:	4b5f      	ldr	r3, [pc, #380]	; (80076dc <LmHandlerConfigure+0x1d0>)
 8007560:	2201      	movs	r2, #1
 8007562:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 8007564:	4b5d      	ldr	r3, [pc, #372]	; (80076dc <LmHandlerConfigure+0x1d0>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 809e 	beq.w	80076aa <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800756e:	4b5c      	ldr	r3, [pc, #368]	; (80076e0 <LmHandlerConfigure+0x1d4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	b10b      	cbz	r3, 800757a <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8007576:	2000      	movs	r0, #0
 8007578:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800757a:	2327      	movs	r3, #39	; 0x27
 800757c:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007580:	a804      	add	r0, sp, #16
 8007582:	f003 f975 	bl	800a870 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 8007586:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 8007588:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 800758c:	4b4e      	ldr	r3, [pc, #312]	; (80076c8 <LmHandlerConfigure+0x1bc>)
 800758e:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 8007590:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 8007594:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 8007596:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 800759a:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800759c:	4b4d      	ldr	r3, [pc, #308]	; (80076d4 <LmHandlerConfigure+0x1c8>)
 800759e:	68d9      	ldr	r1, [r3, #12]
 80075a0:	6898      	ldr	r0, [r3, #8]
 80075a2:	f008 f813 	bl	800f5cc <SecureElementInitMcuID>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	f040 808b 	bne.w	80076c2 <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 80075ac:	2306      	movs	r3, #6
 80075ae:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80075b2:	a804      	add	r0, sp, #16
 80075b4:	f003 f95c 	bl	800a870 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80075b8:	4c4a      	ldr	r4, [pc, #296]	; (80076e4 <LmHandlerConfigure+0x1d8>)
 80075ba:	9b05      	ldr	r3, [sp, #20]
 80075bc:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80075be:	a804      	add	r0, sp, #16
 80075c0:	f003 faca 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 80075c4:	2302      	movs	r3, #2
 80075c6:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 80075ca:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80075cc:	a804      	add	r0, sp, #16
 80075ce:	f003 f94f 	bl	800a870 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 80075d2:	2303      	movs	r3, #3
 80075d4:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 80075d8:	3408      	adds	r4, #8
 80075da:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80075dc:	a804      	add	r0, sp, #16
 80075de:	f003 f947 	bl	800a870 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 80075e2:	f008 f88d 	bl	800f700 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80075e6:	260f      	movs	r6, #15
 80075e8:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80075ec:	2301      	movs	r3, #1
 80075ee:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80075f2:	a804      	add	r0, sp, #16
 80075f4:	f003 fab0 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80075f8:	2310      	movs	r3, #16
 80075fa:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80075fe:	2500      	movs	r5, #0
 8007600:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007604:	eb0d 0003 	add.w	r0, sp, r3
 8007608:	f003 faa6 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800760c:	2304      	movs	r3, #4
 800760e:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007612:	4c2d      	ldr	r4, [pc, #180]	; (80076c8 <LmHandlerConfigure+0x1bc>)
 8007614:	78a3      	ldrb	r3, [r4, #2]
 8007616:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800761a:	a804      	add	r0, sp, #16
 800761c:	f003 fa9c 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8007620:	233a      	movs	r3, #58	; 0x3a
 8007622:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8007626:	6963      	ldr	r3, [r4, #20]
 8007628:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800762a:	a804      	add	r0, sp, #16
 800762c:	f003 fa94 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007630:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007634:	a902      	add	r1, sp, #8
 8007636:	7820      	ldrb	r0, [r4, #0]
 8007638:	f004 ffee 	bl	800c618 <RegionGetPhyParam>
 800763c:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800763e:	1b43      	subs	r3, r0, r5
 8007640:	bf18      	it	ne
 8007642:	2301      	movne	r3, #1
 8007644:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 8007646:	2014      	movs	r0, #20
 8007648:	f7ff ff50 	bl	80074ec <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800764c:	79e0      	ldrb	r0, [r4, #7]
 800764e:	f003 ff29 	bl	800b4a4 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8007652:	4628      	mov	r0, r5
}
 8007654:	b00e      	add	sp, #56	; 0x38
 8007656:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8007658:	2328      	movs	r3, #40	; 0x28
 800765a:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800765e:	4b20      	ldr	r3, [pc, #128]	; (80076e0 <LmHandlerConfigure+0x1d4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	b14b      	cbz	r3, 800767a <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007666:	a804      	add	r0, sp, #16
 8007668:	f003 f902 	bl	800a870 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800766c:	4b1c      	ldr	r3, [pc, #112]	; (80076e0 <LmHandlerConfigure+0x1d4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f240 51cc 	movw	r1, #1484	; 0x5cc
 8007676:	9805      	ldr	r0, [sp, #20]
 8007678:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800767a:	2327      	movs	r3, #39	; 0x27
 800767c:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007680:	a804      	add	r0, sp, #16
 8007682:	f003 fa69 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
 8007686:	2800      	cmp	r0, #0
 8007688:	f47f af6c 	bne.w	8007564 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800768c:	2301      	movs	r3, #1
 800768e:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007692:	a804      	add	r0, sp, #16
 8007694:	f003 f8ec 	bl	800a870 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 8007698:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	f43f af61 	beq.w	8007564 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 80076a2:	4b0e      	ldr	r3, [pc, #56]	; (80076dc <LmHandlerConfigure+0x1d0>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	701a      	strb	r2, [r3, #0]
 80076a8:	e75c      	b.n	8007564 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 80076aa:	2305      	movs	r3, #5
 80076ac:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80076b0:	2300      	movs	r3, #0
 80076b2:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80076b4:	a804      	add	r0, sp, #16
 80076b6:	f003 fa4f 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
 80076ba:	e76f      	b.n	800759c <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
 80076c0:	e7c8      	b.n	8007654 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295
 80076c6:	e7c5      	b.n	8007654 <LmHandlerConfigure+0x148>
 80076c8:	200005a0 	.word	0x200005a0
 80076cc:	20000584 	.word	0x20000584
 80076d0:	08012858 	.word	0x08012858
 80076d4:	200005c8 	.word	0x200005c8
 80076d8:	200005e0 	.word	0x200005e0
 80076dc:	2000057c 	.word	0x2000057c
 80076e0:	20000588 	.word	0x20000588
 80076e4:	20000564 	.word	0x20000564

080076e8 <LmHandlerPackageRegister>:
{
 80076e8:	b530      	push	{r4, r5, lr}
 80076ea:	b083      	sub	sp, #12
 80076ec:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	9301      	str	r3, [sp, #4]
    switch( id )
 80076f2:	4604      	mov	r4, r0
 80076f4:	b9d8      	cbnz	r0, 800772e <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 80076f6:	f000 fc1b 	bl	8007f30 <LmhpCompliancePackageFactory>
 80076fa:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 80076fc:	9b01      	ldr	r3, [sp, #4]
 80076fe:	b1f3      	cbz	r3, 800773e <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 8007700:	4a10      	ldr	r2, [pc, #64]	; (8007744 <LmHandlerPackageRegister+0x5c>)
 8007702:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007706:	4a10      	ldr	r2, [pc, #64]	; (8007748 <LmHandlerPackageRegister+0x60>)
 8007708:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800770a:	4a10      	ldr	r2, [pc, #64]	; (800774c <LmHandlerPackageRegister+0x64>)
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8007710:	6319      	str	r1, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8007712:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8007714:	6359      	str	r1, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007716:	490e      	ldr	r1, [pc, #56]	; (8007750 <LmHandlerPackageRegister+0x68>)
 8007718:	62d9      	str	r1, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800771a:	6992      	ldr	r2, [r2, #24]
 800771c:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	22f2      	movs	r2, #242	; 0xf2
 8007722:	490c      	ldr	r1, [pc, #48]	; (8007754 <LmHandlerPackageRegister+0x6c>)
 8007724:	4628      	mov	r0, r5
 8007726:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8007728:	2000      	movs	r0, #0
}
 800772a:	b003      	add	sp, #12
 800772c:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800772e:	a901      	add	r1, sp, #4
 8007730:	f000 fc04 	bl	8007f3c <LmhpPackagesRegister>
 8007734:	2800      	cmp	r0, #0
 8007736:	d0e1      	beq.n	80076fc <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	e7f5      	b.n	800772a <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 800773e:	f04f 30ff 	mov.w	r0, #4294967295
 8007742:	e7f2      	b.n	800772a <LmHandlerPackageRegister+0x42>
 8007744:	2000058c 	.word	0x2000058c
 8007748:	08007085 	.word	0x08007085
 800774c:	20000588 	.word	0x20000588
 8007750:	08007175 	.word	0x08007175
 8007754:	20000470 	.word	0x20000470

08007758 <LmHandlerInit>:
{
 8007758:	b500      	push	{lr}
 800775a:	b083      	sub	sp, #12
 800775c:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800775e:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <LmHandlerInit+0x6c>)
 8007760:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007762:	4b19      	ldr	r3, [pc, #100]	; (80077c8 <LmHandlerInit+0x70>)
 8007764:	4a19      	ldr	r2, [pc, #100]	; (80077cc <LmHandlerInit+0x74>)
 8007766:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007768:	4a19      	ldr	r2, [pc, #100]	; (80077d0 <LmHandlerInit+0x78>)
 800776a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800776c:	4a19      	ldr	r2, [pc, #100]	; (80077d4 <LmHandlerInit+0x7c>)
 800776e:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007770:	4a19      	ldr	r2, [pc, #100]	; (80077d8 <LmHandlerInit+0x80>)
 8007772:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007774:	6802      	ldr	r2, [r0, #0]
 8007776:	4b19      	ldr	r3, [pc, #100]	; (80077dc <LmHandlerInit+0x84>)
 8007778:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800777a:	6842      	ldr	r2, [r0, #4]
 800777c:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800777e:	6882      	ldr	r2, [r0, #8]
 8007780:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8007782:	68c2      	ldr	r2, [r0, #12]
 8007784:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8007786:	4a16      	ldr	r2, [pc, #88]	; (80077e0 <LmHandlerInit+0x88>)
 8007788:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800778a:	6982      	ldr	r2, [r0, #24]
 800778c:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800778e:	4b15      	ldr	r3, [pc, #84]	; (80077e4 <LmHandlerInit+0x8c>)
 8007790:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8007792:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007794:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 8007796:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <LmHandlerInit+0x90>)
 8007798:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800779a:	4a14      	ldr	r2, [pc, #80]	; (80077ec <LmHandlerInit+0x94>)
 800779c:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800779e:	4619      	mov	r1, r3
 80077a0:	2000      	movs	r0, #0
 80077a2:	f7ff ffa1 	bl	80076e8 <LmHandlerPackageRegister>
 80077a6:	b930      	cbnz	r0, 80077b6 <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 80077a8:	a801      	add	r0, sp, #4
 80077aa:	f000 fbc5 	bl	8007f38 <LmhpPackagesRegistrationInit>
 80077ae:	b928      	cbnz	r0, 80077bc <LmHandlerInit+0x64>
}
 80077b0:	b003      	add	sp, #12
 80077b2:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80077b6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ba:	e7f9      	b.n	80077b0 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e7f6      	b.n	80077b0 <LmHandlerInit+0x58>
 80077c2:	bf00      	nop
 80077c4:	20000588 	.word	0x20000588
 80077c8:	200005e0 	.word	0x200005e0
 80077cc:	08006f9d 	.word	0x08006f9d
 80077d0:	0800742d 	.word	0x0800742d
 80077d4:	08007871 	.word	0x08007871
 80077d8:	08006f49 	.word	0x08006f49
 80077dc:	200005c8 	.word	0x200005c8
 80077e0:	0800c5c1 	.word	0x0800c5c1
 80077e4:	200005b8 	.word	0x200005b8
 80077e8:	0800704d 	.word	0x0800704d
 80077ec:	08007069 	.word	0x08007069

080077f0 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 80077f0:	b161      	cbz	r1, 800780c <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 80077f2:	b118      	cbz	r0, 80077fc <LmHandlerGetVersion+0xc>
 80077f4:	2801      	cmp	r0, #1
 80077f6:	d005      	beq.n	8007804 <LmHandlerGetVersion+0x14>
 80077f8:	2000      	movs	r0, #0
 80077fa:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 80077fc:	4a05      	ldr	r2, [pc, #20]	; (8007814 <LmHandlerGetVersion+0x24>)
 80077fe:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8007800:	2000      	movs	r0, #0
            break;
 8007802:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8007804:	4a04      	ldr	r2, [pc, #16]	; (8007818 <LmHandlerGetVersion+0x28>)
 8007806:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8007808:	2000      	movs	r0, #0
            break;
 800780a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	01000400 	.word	0x01000400
 8007818:	02010001 	.word	0x02010001

0800781c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800781c:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800781e:	f003 fe5f 	bl	800b4e0 <LoRaMacDeInitialization>
 8007822:	b900      	cbnz	r0, 8007826 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8007824:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007826:	f06f 0001 	mvn.w	r0, #1
 800782a:	e7fb      	b.n	8007824 <LmHandlerStop+0x8>

0800782c <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800782c:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800782e:	f002 ff83 	bl	800a738 <LoRaMacHalt>
 8007832:	b900      	cbnz	r0, 8007836 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8007834:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007836:	f06f 0001 	mvn.w	r0, #1
 800783a:	e7fb      	b.n	8007834 <LmHandlerHalt+0x8>

0800783c <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800783c:	b180      	cbz	r0, 8007860 <LmHandlerGetTxPower+0x24>
{
 800783e:	b510      	push	{r4, lr}
 8007840:	b08a      	sub	sp, #40	; 0x28
 8007842:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8007844:	2321      	movs	r3, #33	; 0x21
 8007846:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800784a:	4668      	mov	r0, sp
 800784c:	f003 f810 	bl	800a870 <LoRaMacMibGetRequestConfirm>
 8007850:	b948      	cbnz	r0, 8007866 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8007852:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8007856:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 8007858:	4a04      	ldr	r2, [pc, #16]	; (800786c <LmHandlerGetTxPower+0x30>)
 800785a:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 800785c:	b00a      	add	sp, #40	; 0x28
 800785e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007864:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
 800786a:	e7f7      	b.n	800785c <LmHandlerGetTxPower+0x20>
 800786c:	200005a0 	.word	0x200005a0

08007870 <MlmeConfirm>:
{
 8007870:	b510      	push	{r4, lr}
 8007872:	b08a      	sub	sp, #40	; 0x28
 8007874:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8007876:	4b2c      	ldr	r3, [pc, #176]	; (8007928 <MlmeConfirm+0xb8>)
 8007878:	2200      	movs	r2, #0
 800787a:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800787c:	7842      	ldrb	r2, [r0, #1]
 800787e:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8007880:	4b2a      	ldr	r3, [pc, #168]	; (800792c <MlmeConfirm+0xbc>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	b10b      	cbz	r3, 800788c <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8007888:	4827      	ldr	r0, [pc, #156]	; (8007928 <MlmeConfirm+0xb8>)
 800788a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800788c:	4621      	mov	r1, r4
 800788e:	2002      	movs	r0, #2
 8007890:	f7ff fb24 	bl	8006edc <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8007894:	7823      	ldrb	r3, [r4, #0]
 8007896:	2b05      	cmp	r3, #5
 8007898:	d037      	beq.n	800790a <MlmeConfirm+0x9a>
 800789a:	2b0b      	cmp	r3, #11
 800789c:	d03d      	beq.n	800791a <MlmeConfirm+0xaa>
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d001      	beq.n	80078a6 <MlmeConfirm+0x36>
}
 80078a2:	b00a      	add	sp, #40	; 0x28
 80078a4:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 80078a6:	2306      	movs	r3, #6
 80078a8:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80078ac:	4668      	mov	r0, sp
 80078ae:	f002 ffdf 	bl	800a870 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 80078b2:	9901      	ldr	r1, [sp, #4]
 80078b4:	4b1e      	ldr	r3, [pc, #120]	; (8007930 <MlmeConfirm+0xc0>)
 80078b6:	79d8      	ldrb	r0, [r3, #7]
 80078b8:	f007 fe66 	bl	800f588 <SecureElementSetDevAddr>
 80078bc:	b910      	cbnz	r0, 80078c4 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80078be:	9a01      	ldr	r2, [sp, #4]
 80078c0:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <MlmeConfirm+0xc4>)
 80078c2:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80078c4:	4c1a      	ldr	r4, [pc, #104]	; (8007930 <MlmeConfirm+0xc0>)
 80078c6:	1d20      	adds	r0, r4, #4
 80078c8:	f7ff fdf6 	bl	80074b8 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 80078cc:	1d60      	adds	r0, r4, #5
 80078ce:	f7ff ffb5 	bl	800783c <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80078d2:	4b15      	ldr	r3, [pc, #84]	; (8007928 <MlmeConfirm+0xb8>)
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	b18b      	cbz	r3, 80078fc <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80078d8:	4b15      	ldr	r3, [pc, #84]	; (8007930 <MlmeConfirm+0xc0>)
 80078da:	22ff      	movs	r2, #255	; 0xff
 80078dc:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80078de:	4b13      	ldr	r3, [pc, #76]	; (800792c <MlmeConfirm+0xbc>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	b10b      	cbz	r3, 80078ea <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80078e6:	4812      	ldr	r0, [pc, #72]	; (8007930 <MlmeConfirm+0xc0>)
 80078e8:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <MlmeConfirm+0xb8>)
 80078ec:	785b      	ldrb	r3, [r3, #1]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1d7      	bne.n	80078a2 <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 80078f2:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <MlmeConfirm+0xc0>)
 80078f4:	79d8      	ldrb	r0, [r3, #7]
 80078f6:	f007 ff15 	bl	800f724 <SecureElementPrintSessionKeys>
            break;
 80078fa:	e7d2      	b.n	80078a2 <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80078fc:	2200      	movs	r2, #0
 80078fe:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8007900:	4b0d      	ldr	r3, [pc, #52]	; (8007938 <MlmeConfirm+0xc8>)
 8007902:	7858      	ldrb	r0, [r3, #1]
 8007904:	f7ff fd22 	bl	800734c <LmHandlerRequestClass>
 8007908:	e7e9      	b.n	80078de <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 800790a:	4b0c      	ldr	r3, [pc, #48]	; (800793c <MlmeConfirm+0xcc>)
 800790c:	2201      	movs	r2, #1
 800790e:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007910:	7a22      	ldrb	r2, [r4, #8]
 8007912:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8007914:	7a62      	ldrb	r2, [r4, #9]
 8007916:	74da      	strb	r2, [r3, #19]
            break;
 8007918:	e7c3      	b.n	80078a2 <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800791a:	7863      	ldrb	r3, [r4, #1]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0c0      	beq.n	80078a2 <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 8007920:	f7ff fc28 	bl	8007174 <LmHandlerDeviceTimeReq>
}
 8007924:	e7bd      	b.n	80078a2 <MlmeConfirm+0x32>
 8007926:	bf00      	nop
 8007928:	2000009c 	.word	0x2000009c
 800792c:	20000588 	.word	0x20000588
 8007930:	2000007c 	.word	0x2000007c
 8007934:	20000564 	.word	0x20000564
 8007938:	200005a0 	.word	0x200005a0
 800793c:	20000088 	.word	0x20000088

08007940 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8007940:	b510      	push	{r4, lr}
 8007942:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8007944:	f7ff ff72 	bl	800782c <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8007948:	4604      	mov	r4, r0
 800794a:	b148      	cbz	r0, 8007960 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800794c:	b92c      	cbnz	r4, 800795a <LmHandlerNvmDataStore+0x1a>
 800794e:	4b18      	ldr	r3, [pc, #96]	; (80079b0 <LmHandlerNvmDataStore+0x70>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	b10b      	cbz	r3, 800795a <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8007956:	2001      	movs	r0, #1
 8007958:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800795a:	4620      	mov	r0, r4
 800795c:	b00a      	add	sp, #40	; 0x28
 800795e:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8007960:	f004 fe36 	bl	800c5d0 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 8007964:	f110 0f02 	cmn.w	r0, #2
 8007968:	d012      	beq.n	8007990 <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800796a:	b9d0      	cbnz	r0, 80079a2 <LmHandlerNvmDataStore+0x62>
 800796c:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <LmHandlerNvmDataStore+0x70>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	b1cb      	cbz	r3, 80079a8 <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 8007974:	2327      	movs	r3, #39	; 0x27
 8007976:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800797a:	4668      	mov	r0, sp
 800797c:	f002 ff78 	bl	800a870 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <LmHandlerNvmDataStore+0x70>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 800798a:	9801      	ldr	r0, [sp, #4]
 800798c:	4798      	blx	r3
 800798e:	e001      	b.n	8007994 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8007990:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8007994:	f004 fe2c 	bl	800c5f0 <NvmDataMgmtStoreEnd>
 8007998:	2800      	cmp	r0, #0
 800799a:	d0d7      	beq.n	800794c <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800799c:	f04f 34ff 	mov.w	r4, #4294967295
 80079a0:	e7db      	b.n	800795a <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80079a2:	f04f 34ff 	mov.w	r4, #4294967295
 80079a6:	e7f5      	b.n	8007994 <LmHandlerNvmDataStore+0x54>
 80079a8:	f04f 34ff 	mov.w	r4, #4294967295
 80079ac:	e7f2      	b.n	8007994 <LmHandlerNvmDataStore+0x54>
 80079ae:	bf00      	nop
 80079b0:	20000588 	.word	0x20000588

080079b4 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 80079b4:	4b01      	ldr	r3, [pc, #4]	; (80079bc <LmhpComplianceIsInitialized+0x8>)
 80079b6:	7818      	ldrb	r0, [r3, #0]
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	200005f4 	.word	0x200005f4

080079c0 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 80079c0:	4b01      	ldr	r3, [pc, #4]	; (80079c8 <LmhpComplianceIsTxPending+0x8>)
 80079c2:	7858      	ldrb	r0, [r3, #1]
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	200005f4 	.word	0x200005f4

080079cc <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 80079cc:	4770      	bx	lr

080079ce <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 80079ce:	4770      	bx	lr

080079d0 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 80079d0:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <OnProcessTimer+0x18>)
 80079d4:	7a9b      	ldrb	r3, [r3, #10]
 80079d6:	b113      	cbz	r3, 80079de <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 80079d8:	4b03      	ldr	r3, [pc, #12]	; (80079e8 <OnProcessTimer+0x18>)
 80079da:	2201      	movs	r2, #1
 80079dc:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 80079de:	4b03      	ldr	r3, [pc, #12]	; (80079ec <OnProcessTimer+0x1c>)
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	b103      	cbz	r3, 80079e6 <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 80079e4:	4798      	blx	r3
    }
}
 80079e6:	bd08      	pop	{r3, pc}
 80079e8:	200005f4 	.word	0x200005f4
 80079ec:	200000b8 	.word	0x200000b8

080079f0 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 80079f0:	4b8c      	ldr	r3, [pc, #560]	; (8007c24 <LmhpComplianceOnMcpsIndication+0x234>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 8205 	beq.w	8007e04 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 80079fa:	78c3      	ldrb	r3, [r0, #3]
 80079fc:	b90b      	cbnz	r3, 8007a02 <LmhpComplianceOnMcpsIndication+0x12>
 80079fe:	7b83      	ldrb	r3, [r0, #14]
 8007a00:	b11b      	cbz	r3, 8007a0a <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8007a02:	4a88      	ldr	r2, [pc, #544]	; (8007c24 <LmhpComplianceOnMcpsIndication+0x234>)
 8007a04:	8a13      	ldrh	r3, [r2, #16]
 8007a06:	3301      	adds	r3, #1
 8007a08:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 8007a0a:	7b43      	ldrb	r3, [r0, #13]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 81f9 	beq.w	8007e04 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8007a12:	78c3      	ldrb	r3, [r0, #3]
 8007a14:	2be0      	cmp	r3, #224	; 0xe0
 8007a16:	f040 81f5 	bne.w	8007e04 <LmhpComplianceOnMcpsIndication+0x414>
{
 8007a1a:	b570      	push	{r4, r5, r6, lr}
 8007a1c:	b096      	sub	sp, #88	; 0x58
    ComplianceTestState.DataBufferSize = 0;
 8007a1e:	4b81      	ldr	r3, [pc, #516]	; (8007c24 <LmhpComplianceOnMcpsIndication+0x234>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 8007a24:	6884      	ldr	r4, [r0, #8]
 8007a26:	7823      	ldrb	r3, [r4, #0]
 8007a28:	2b7f      	cmp	r3, #127	; 0x7f
 8007a2a:	f200 8093 	bhi.w	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
 8007a2e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007a32:	0080      	.short	0x0080
 8007a34:	00a2009d 	.word	0x00a2009d
 8007a38:	00b200aa 	.word	0x00b200aa
 8007a3c:	00c600bf 	.word	0x00c600bf
 8007a40:	00f000df 	.word	0x00f000df
 8007a44:	0131011d 	.word	0x0131011d
 8007a48:	00910091 	.word	0x00910091
 8007a4c:	00910091 	.word	0x00910091
 8007a50:	00910091 	.word	0x00910091
 8007a54:	00910091 	.word	0x00910091
 8007a58:	00910091 	.word	0x00910091
 8007a5c:	00910091 	.word	0x00910091
 8007a60:	00910091 	.word	0x00910091
 8007a64:	00910091 	.word	0x00910091
 8007a68:	00910091 	.word	0x00910091
 8007a6c:	00910091 	.word	0x00910091
 8007a70:	01350091 	.word	0x01350091
 8007a74:	0140013c 	.word	0x0140013c
 8007a78:	00910091 	.word	0x00910091
 8007a7c:	00910091 	.word	0x00910091
 8007a80:	00910091 	.word	0x00910091
 8007a84:	00910091 	.word	0x00910091
 8007a88:	00910091 	.word	0x00910091
 8007a8c:	00910091 	.word	0x00910091
 8007a90:	00910091 	.word	0x00910091
 8007a94:	00910091 	.word	0x00910091
 8007a98:	00910091 	.word	0x00910091
 8007a9c:	00910091 	.word	0x00910091
 8007aa0:	00910091 	.word	0x00910091
 8007aa4:	00910091 	.word	0x00910091
 8007aa8:	00910091 	.word	0x00910091
 8007aac:	00910091 	.word	0x00910091
 8007ab0:	00910091 	.word	0x00910091
 8007ab4:	00910091 	.word	0x00910091
 8007ab8:	00910091 	.word	0x00910091
 8007abc:	00910091 	.word	0x00910091
 8007ac0:	00910091 	.word	0x00910091
 8007ac4:	00910091 	.word	0x00910091
 8007ac8:	00910091 	.word	0x00910091
 8007acc:	00910091 	.word	0x00910091
 8007ad0:	00910091 	.word	0x00910091
 8007ad4:	00910091 	.word	0x00910091
 8007ad8:	00910091 	.word	0x00910091
 8007adc:	00910091 	.word	0x00910091
 8007ae0:	00910091 	.word	0x00910091
 8007ae4:	00910091 	.word	0x00910091
 8007ae8:	00910091 	.word	0x00910091
 8007aec:	00910091 	.word	0x00910091
 8007af0:	00910091 	.word	0x00910091
 8007af4:	00910091 	.word	0x00910091
 8007af8:	00910091 	.word	0x00910091
 8007afc:	00910091 	.word	0x00910091
 8007b00:	00910091 	.word	0x00910091
 8007b04:	00910091 	.word	0x00910091
 8007b08:	00910091 	.word	0x00910091
 8007b0c:	00910091 	.word	0x00910091
 8007b10:	00910091 	.word	0x00910091
 8007b14:	00910091 	.word	0x00910091
 8007b18:	00910091 	.word	0x00910091
 8007b1c:	00910091 	.word	0x00910091
 8007b20:	00910091 	.word	0x00910091
 8007b24:	00910091 	.word	0x00910091
 8007b28:	00910091 	.word	0x00910091
 8007b2c:	016c014b 	.word	0x016c014b
 8007b30:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8007b32:	4b3c      	ldr	r3, [pc, #240]	; (8007c24 <LmhpComplianceOnMcpsIndication+0x234>)
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	2101      	movs	r1, #1
 8007b38:	7299      	strb	r1, [r3, #10]
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8007b3e:	68d8      	ldr	r0, [r3, #12]
 8007b40:	7a9a      	ldrb	r2, [r3, #10]
 8007b42:	1854      	adds	r4, r2, r1
 8007b44:	729c      	strb	r4, [r3, #10]
 8007b46:	2406      	movs	r4, #6
 8007b48:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8007b4a:	68d8      	ldr	r0, [r3, #12]
 8007b4c:	7a9a      	ldrb	r2, [r3, #10]
 8007b4e:	1854      	adds	r4, r2, r1
 8007b50:	729c      	strb	r4, [r3, #10]
 8007b52:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 8007b54:	4b33      	ldr	r3, [pc, #204]	; (8007c24 <LmhpComplianceOnMcpsIndication+0x234>)
 8007b56:	7a9b      	ldrb	r3, [r3, #10]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 814c 	beq.w	8007df6 <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 8007b5e:	4b32      	ldr	r3, [pc, #200]	; (8007c28 <LmhpComplianceOnMcpsIndication+0x238>)
 8007b60:	7a5b      	ldrb	r3, [r3, #9]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 813d 	beq.w	8007de2 <LmhpComplianceOnMcpsIndication+0x3f2>
}
 8007b68:	b016      	add	sp, #88	; 0x58
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 8007b6c:	4b2d      	ldr	r3, [pc, #180]	; (8007c24 <LmhpComplianceOnMcpsIndication+0x234>)
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8007b74:	e7ee      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 8007b76:	4b2d      	ldr	r3, [pc, #180]	; (8007c2c <LmhpComplianceOnMcpsIndication+0x23c>)
 8007b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0ea      	beq.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8007b7e:	2101      	movs	r1, #1
 8007b80:	2002      	movs	r0, #2
 8007b82:	4798      	blx	r3
 8007b84:	e7e6      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8007b86:	7862      	ldrb	r2, [r4, #1]
 8007b88:	4b26      	ldr	r3, [pc, #152]	; (8007c24 <LmhpComplianceOnMcpsIndication+0x234>)
 8007b8a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 8007b94:	e7de      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 8007b96:	2304      	movs	r3, #4
 8007b98:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8007b9c:	7863      	ldrb	r3, [r4, #1]
 8007b9e:	3b00      	subs	r3, #0
 8007ba0:	bf18      	it	ne
 8007ba2:	2301      	movne	r3, #1
 8007ba4:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007ba8:	a801      	add	r0, sp, #4
 8007baa:	f002 ffd5 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
                break;
 8007bae:	e7d1      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8007bb0:	7860      	ldrb	r0, [r4, #1]
 8007bb2:	3800      	subs	r0, #0
 8007bb4:	bf18      	it	ne
 8007bb6:	2001      	movne	r0, #1
 8007bb8:	f003 fc74 	bl	800b4a4 <LoRaMacTestSetDutyCycleOn>
                break;
 8007bbc:	e7ca      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8007bbe:	ad01      	add	r5, sp, #4
 8007bc0:	4e1b      	ldr	r6, [pc, #108]	; (8007c30 <LmhpComplianceOnMcpsIndication+0x240>)
 8007bc2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bca:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007bce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8007bd2:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8007bd4:	2b0a      	cmp	r3, #10
 8007bd6:	d8bd      	bhi.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8007bd8:	4a16      	ldr	r2, [pc, #88]	; (8007c34 <LmhpComplianceOnMcpsIndication+0x244>)
 8007bda:	6812      	ldr	r2, [r2, #0]
 8007bdc:	6852      	ldr	r2, [r2, #4]
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	d0b8      	beq.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8007be2:	a916      	add	r1, sp, #88	; 0x58
 8007be4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007be8:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8007bec:	4790      	blx	r2
                break;
 8007bee:	e7b1      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8007bf0:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8007bf2:	1e53      	subs	r3, r2, #1
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d8ac      	bhi.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8007bfa:	1e50      	subs	r0, r2, #1
 8007bfc:	bf18      	it	ne
 8007bfe:	2001      	movne	r0, #1
 8007c00:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <LmhpComplianceOnMcpsIndication+0x234>)
 8007c02:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8007c04:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <LmhpComplianceOnMcpsIndication+0x244>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0a2      	beq.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8007c0e:	4798      	blx	r3
 8007c10:	e7a0      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8007c12:	4b04      	ldr	r3, [pc, #16]	; (8007c24 <LmhpComplianceOnMcpsIndication+0x234>)
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	2101      	movs	r1, #1
 8007c18:	7299      	strb	r1, [r3, #10]
 8007c1a:	2308      	movs	r3, #8
 8007c1c:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8007c1e:	460b      	mov	r3, r1
 8007c20:	e01b      	b.n	8007c5a <LmhpComplianceOnMcpsIndication+0x26a>
 8007c22:	bf00      	nop
 8007c24:	200005f4 	.word	0x200005f4
 8007c28:	2000062c 	.word	0x2000062c
 8007c2c:	200000b8 	.word	0x200000b8
 8007c30:	0801225c 	.word	0x0801225c
 8007c34:	200005f0 	.word	0x200005f0
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8007c38:	6882      	ldr	r2, [r0, #8]
 8007c3a:	f101 0c01 	add.w	ip, r1, #1
 8007c3e:	5c52      	ldrb	r2, [r2, r1]
 8007c40:	4971      	ldr	r1, [pc, #452]	; (8007e08 <LmhpComplianceOnMcpsIndication+0x418>)
 8007c42:	68cd      	ldr	r5, [r1, #12]
 8007c44:	7a8c      	ldrb	r4, [r1, #10]
 8007c46:	f104 0e01 	add.w	lr, r4, #1
 8007c4a:	f881 e00a 	strb.w	lr, [r1, #10]
 8007c4e:	3201      	adds	r2, #1
 8007c50:	552a      	strb	r2, [r5, r4]
                     i++ )
 8007c52:	3301      	adds	r3, #1
 8007c54:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8007c56:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8007c5a:	4a6b      	ldr	r2, [pc, #428]	; (8007e08 <LmhpComplianceOnMcpsIndication+0x418>)
 8007c5c:	7a52      	ldrb	r2, [r2, #9]
 8007c5e:	7b04      	ldrb	r4, [r0, #12]
 8007c60:	42a2      	cmp	r2, r4
 8007c62:	bf28      	it	cs
 8007c64:	4622      	movcs	r2, r4
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d8e6      	bhi.n	8007c38 <LmhpComplianceOnMcpsIndication+0x248>
 8007c6a:	e773      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8007c6c:	4b66      	ldr	r3, [pc, #408]	; (8007e08 <LmhpComplianceOnMcpsIndication+0x418>)
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	2101      	movs	r1, #1
 8007c72:	7299      	strb	r1, [r3, #10]
 8007c74:	2109      	movs	r1, #9
 8007c76:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8007c78:	8a18      	ldrh	r0, [r3, #16]
 8007c7a:	68d9      	ldr	r1, [r3, #12]
 8007c7c:	7a9a      	ldrb	r2, [r3, #10]
 8007c7e:	1c54      	adds	r4, r2, #1
 8007c80:	729c      	strb	r4, [r3, #10]
 8007c82:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8007c84:	8a1a      	ldrh	r2, [r3, #16]
 8007c86:	68d8      	ldr	r0, [r3, #12]
 8007c88:	7a99      	ldrb	r1, [r3, #10]
 8007c8a:	1c4c      	adds	r4, r1, #1
 8007c8c:	729c      	strb	r4, [r3, #10]
 8007c8e:	0a13      	lsrs	r3, r2, #8
 8007c90:	5443      	strb	r3, [r0, r1]
                break;
 8007c92:	e75f      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 8007c94:	4b5c      	ldr	r3, [pc, #368]	; (8007e08 <LmhpComplianceOnMcpsIndication+0x418>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	821a      	strh	r2, [r3, #16]
                break;
 8007c9a:	e75b      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 8007c9c:	2305      	movs	r3, #5
 8007c9e:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 8007ca2:	a801      	add	r0, sp, #4
 8007ca4:	f003 fa0c 	bl	800b0c0 <LoRaMacMlmeRequest>
                break;
 8007ca8:	e754      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 8007caa:	4b58      	ldr	r3, [pc, #352]	; (8007e0c <LmhpComplianceOnMcpsIndication+0x41c>)
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	4798      	blx	r3
                break;
 8007cb0:	e750      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8007cb2:	7860      	ldrb	r0, [r4, #1]
 8007cb4:	4b54      	ldr	r3, [pc, #336]	; (8007e08 <LmhpComplianceOnMcpsIndication+0x418>)
 8007cb6:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8007cb8:	4b55      	ldr	r3, [pc, #340]	; (8007e10 <LmhpComplianceOnMcpsIndication+0x420>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f43f af48 	beq.w	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8007cc4:	4798      	blx	r3
 8007cc6:	e745      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 8007cc8:	7b03      	ldrb	r3, [r0, #12]
 8007cca:	2b07      	cmp	r3, #7
 8007ccc:	f47f af42 	bne.w	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 8007cd0:	2306      	movs	r3, #6
 8007cd2:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8007cd6:	7863      	ldrb	r3, [r4, #1]
 8007cd8:	78a2      	ldrb	r2, [r4, #2]
 8007cda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 8007cde:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007ce2:	78e3      	ldrb	r3, [r4, #3]
 8007ce4:	7922      	ldrb	r2, [r4, #4]
 8007ce6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007cea:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007cec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007cf0:	2264      	movs	r2, #100	; 0x64
 8007cf2:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8007cf6:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8007cf8:	6883      	ldr	r3, [r0, #8]
 8007cfa:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007cfe:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 8007d02:	a801      	add	r0, sp, #4
 8007d04:	f003 f9dc 	bl	800b0c0 <LoRaMacMlmeRequest>
                break;
 8007d08:	e724      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8007d0a:	233b      	movs	r3, #59	; 0x3b
 8007d0c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                mibReq.Param.IsCertPortOn = false;
 8007d10:	2300      	movs	r3, #0
 8007d12:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007d16:	a80c      	add	r0, sp, #48	; 0x30
 8007d18:	f002 ff1e 	bl	800ab58 <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 8007d1c:	4b3a      	ldr	r3, [pc, #232]	; (8007e08 <LmhpComplianceOnMcpsIndication+0x418>)
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8007d24:	e716      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 8007d26:	232a      	movs	r3, #42	; 0x2a
 8007d28:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8007d2c:	a801      	add	r0, sp, #4
 8007d2e:	f002 fd9f 	bl	800a870 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8007d32:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8007d34:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8007d36:	4b34      	ldr	r3, [pc, #208]	; (8007e08 <LmhpComplianceOnMcpsIndication+0x418>)
 8007d38:	68dc      	ldr	r4, [r3, #12]
 8007d3a:	7a98      	ldrb	r0, [r3, #10]
 8007d3c:	1c45      	adds	r5, r0, #1
 8007d3e:	729d      	strb	r5, [r3, #10]
 8007d40:	257f      	movs	r5, #127	; 0x7f
 8007d42:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8007d44:	4832      	ldr	r0, [pc, #200]	; (8007e10 <LmhpComplianceOnMcpsIndication+0x420>)
 8007d46:	6800      	ldr	r0, [r0, #0]
 8007d48:	68dd      	ldr	r5, [r3, #12]
 8007d4a:	7a9c      	ldrb	r4, [r3, #10]
 8007d4c:	1c66      	adds	r6, r4, #1
 8007d4e:	729e      	strb	r6, [r3, #10]
 8007d50:	78c6      	ldrb	r6, [r0, #3]
 8007d52:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8007d54:	68dd      	ldr	r5, [r3, #12]
 8007d56:	7a9c      	ldrb	r4, [r3, #10]
 8007d58:	1c66      	adds	r6, r4, #1
 8007d5a:	729e      	strb	r6, [r3, #10]
 8007d5c:	7886      	ldrb	r6, [r0, #2]
 8007d5e:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8007d60:	68dd      	ldr	r5, [r3, #12]
 8007d62:	7a9c      	ldrb	r4, [r3, #10]
 8007d64:	1c66      	adds	r6, r4, #1
 8007d66:	729e      	strb	r6, [r3, #10]
 8007d68:	7846      	ldrb	r6, [r0, #1]
 8007d6a:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8007d6c:	68dd      	ldr	r5, [r3, #12]
 8007d6e:	7a9c      	ldrb	r4, [r3, #10]
 8007d70:	1c66      	adds	r6, r4, #1
 8007d72:	729e      	strb	r6, [r3, #10]
 8007d74:	7800      	ldrb	r0, [r0, #0]
 8007d76:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8007d78:	68dc      	ldr	r4, [r3, #12]
 8007d7a:	7a98      	ldrb	r0, [r3, #10]
 8007d7c:	1c45      	adds	r5, r0, #1
 8007d7e:	729d      	strb	r5, [r3, #10]
 8007d80:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8007d84:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8007d86:	68dc      	ldr	r4, [r3, #12]
 8007d88:	7a98      	ldrb	r0, [r3, #10]
 8007d8a:	1c45      	adds	r5, r0, #1
 8007d8c:	729d      	strb	r5, [r3, #10]
 8007d8e:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007d92:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8007d94:	68dc      	ldr	r4, [r3, #12]
 8007d96:	7a98      	ldrb	r0, [r3, #10]
 8007d98:	1c45      	adds	r5, r0, #1
 8007d9a:	729d      	strb	r5, [r3, #10]
 8007d9c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8007da0:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8007da2:	68dc      	ldr	r4, [r3, #12]
 8007da4:	7a98      	ldrb	r0, [r3, #10]
 8007da6:	1c45      	adds	r5, r0, #1
 8007da8:	729d      	strb	r5, [r3, #10]
 8007daa:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8007dac:	68d8      	ldr	r0, [r3, #12]
 8007dae:	7a99      	ldrb	r1, [r3, #10]
 8007db0:	1c4c      	adds	r4, r1, #1
 8007db2:	729c      	strb	r4, [r3, #10]
 8007db4:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8007db8:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8007dba:	68d8      	ldr	r0, [r3, #12]
 8007dbc:	7a99      	ldrb	r1, [r3, #10]
 8007dbe:	1c4c      	adds	r4, r1, #1
 8007dc0:	729c      	strb	r4, [r3, #10]
 8007dc2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007dc6:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8007dc8:	68d8      	ldr	r0, [r3, #12]
 8007dca:	7a99      	ldrb	r1, [r3, #10]
 8007dcc:	1c4c      	adds	r4, r1, #1
 8007dce:	729c      	strb	r4, [r3, #10]
 8007dd0:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8007dd4:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8007dd6:	68d8      	ldr	r0, [r3, #12]
 8007dd8:	7a99      	ldrb	r1, [r3, #10]
 8007dda:	1c4c      	adds	r4, r1, #1
 8007ddc:	729c      	strb	r4, [r3, #10]
 8007dde:	5442      	strb	r2, [r0, r1]
                break;
 8007de0:	e6b8      	b.n	8007b54 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 8007de2:	4c0c      	ldr	r4, [pc, #48]	; (8007e14 <LmhpComplianceOnMcpsIndication+0x424>)
 8007de4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007de8:	4620      	mov	r0, r4
 8007dea:	f009 ffaf 	bl	8011d4c <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8007dee:	4620      	mov	r0, r4
 8007df0:	f009 ff66 	bl	8011cc0 <UTIL_TIMER_Start>
 8007df4:	e6b8      	b.n	8007b68 <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 8007df6:	4807      	ldr	r0, [pc, #28]	; (8007e14 <LmhpComplianceOnMcpsIndication+0x424>)
 8007df8:	f009 ff08 	bl	8011c0c <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8007dfc:	4b02      	ldr	r3, [pc, #8]	; (8007e08 <LmhpComplianceOnMcpsIndication+0x418>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	705a      	strb	r2, [r3, #1]
 8007e02:	e6b1      	b.n	8007b68 <LmhpComplianceOnMcpsIndication+0x178>
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	200005f4 	.word	0x200005f4
 8007e0c:	200000b8 	.word	0x200000b8
 8007e10:	200005f0 	.word	0x200005f0
 8007e14:	2000062c 	.word	0x2000062c

08007e18 <LmhpComplianceProcess>:
{
 8007e18:	b530      	push	{r4, r5, lr}
 8007e1a:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8007e1c:	4b27      	ldr	r3, [pc, #156]	; (8007ebc <LmhpComplianceProcess+0xa4>)
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	b993      	cbnz	r3, 8007e48 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8007e22:	4b26      	ldr	r3, [pc, #152]	; (8007ebc <LmhpComplianceProcess+0xa4>)
 8007e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d13d      	bne.n	8007ea8 <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 8007e2c:	4b23      	ldr	r3, [pc, #140]	; (8007ebc <LmhpComplianceProcess+0xa4>)
 8007e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e32:	b13b      	cbz	r3, 8007e44 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8007e34:	4b21      	ldr	r3, [pc, #132]	; (8007ebc <LmhpComplianceProcess+0xa4>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 8007e3c:	4b20      	ldr	r3, [pc, #128]	; (8007ec0 <LmhpComplianceProcess+0xa8>)
 8007e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e40:	b103      	cbz	r3, 8007e44 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8007e42:	4798      	blx	r3
}
 8007e44:	b003      	add	sp, #12
 8007e46:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 8007e48:	f009 fea0 	bl	8011b8c <UTIL_TIMER_GetCurrentTime>
 8007e4c:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8007e4e:	4b1b      	ldr	r3, [pc, #108]	; (8007ebc <LmhpComplianceProcess+0xa4>)
 8007e50:	685d      	ldr	r5, [r3, #4]
 8007e52:	f7ff f9a3 	bl	800719c <LmHandlerGetDutyCycleWaitTime>
 8007e56:	4405      	add	r5, r0
 8007e58:	42a5      	cmp	r5, r4
 8007e5a:	d2e7      	bcs.n	8007e2c <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 8007e5c:	4b17      	ldr	r3, [pc, #92]	; (8007ebc <LmhpComplianceProcess+0xa4>)
 8007e5e:	7a9b      	ldrb	r3, [r3, #10]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0e3      	beq.n	8007e2c <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 8007e64:	22e0      	movs	r2, #224	; 0xe0
 8007e66:	f88d 2000 	strb.w	r2, [sp]
 8007e6a:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8007e6e:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <LmhpComplianceProcess+0xa4>)
 8007e70:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 8007e72:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8007e74:	2201      	movs	r2, #1
 8007e76:	7a19      	ldrb	r1, [r3, #8]
 8007e78:	4668      	mov	r0, sp
 8007e7a:	f7ff f9bd 	bl	80071f8 <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 8007e7e:	b110      	cbz	r0, 8007e86 <LmhpComplianceProcess+0x6e>
 8007e80:	f110 0f07 	cmn.w	r0, #7
 8007e84:	d106      	bne.n	8007e94 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 8007e86:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <LmhpComplianceProcess+0xa4>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8007e8c:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8007e8e:	4b0b      	ldr	r3, [pc, #44]	; (8007ebc <LmhpComplianceProcess+0xa4>)
 8007e90:	605c      	str	r4, [r3, #4]
 8007e92:	e7cb      	b.n	8007e2c <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 8007e94:	4d0b      	ldr	r5, [pc, #44]	; (8007ec4 <LmhpComplianceProcess+0xac>)
 8007e96:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f009 ff56 	bl	8011d4c <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f009 ff0d 	bl	8011cc0 <UTIL_TIMER_Start>
 8007ea6:	e7f2      	b.n	8007e8e <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 8007ea8:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <LmhpComplianceProcess+0xa4>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8007eb0:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 8007eb4:	f7ff fa4a 	bl	800734c <LmHandlerRequestClass>
 8007eb8:	e7b8      	b.n	8007e2c <LmhpComplianceProcess+0x14>
 8007eba:	bf00      	nop
 8007ebc:	200005f4 	.word	0x200005f4
 8007ec0:	200000b8 	.word	0x200000b8
 8007ec4:	2000062c 	.word	0x2000062c

08007ec8 <LmhpComplianceInit>:
{
 8007ec8:	b530      	push	{r4, r5, lr}
 8007eca:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8007ecc:	b188      	cbz	r0, 8007ef2 <LmhpComplianceInit+0x2a>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	b179      	cbz	r1, 8007ef2 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 8007ed2:	4813      	ldr	r0, [pc, #76]	; (8007f20 <LmhpComplianceInit+0x58>)
 8007ed4:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8007ed6:	4b13      	ldr	r3, [pc, #76]	; (8007f24 <LmhpComplianceInit+0x5c>)
 8007ed8:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8007eda:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8007edc:	2201      	movs	r2, #1
 8007ede:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	9200      	str	r2, [sp, #0]
 8007ee4:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <LmhpComplianceInit+0x60>)
 8007ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8007eea:	4810      	ldr	r0, [pc, #64]	; (8007f2c <LmhpComplianceInit+0x64>)
 8007eec:	f009 fe30 	bl	8011b50 <UTIL_TIMER_Create>
 8007ef0:	e004      	b.n	8007efc <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4a0a      	ldr	r2, [pc, #40]	; (8007f20 <LmhpComplianceInit+0x58>)
 8007ef6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8007ef8:	4a0a      	ldr	r2, [pc, #40]	; (8007f24 <LmhpComplianceInit+0x5c>)
 8007efa:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8007efc:	4c09      	ldr	r4, [pc, #36]	; (8007f24 <LmhpComplianceInit+0x5c>)
 8007efe:	2500      	movs	r5, #0
 8007f00:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8007f02:	2220      	movs	r2, #32
 8007f04:	4629      	mov	r1, r5
 8007f06:	f104 0014 	add.w	r0, r4, #20
 8007f0a:	f007 fc64 	bl	800f7d6 <memset1>
    ComplianceTestState.IsTxPending = false;
 8007f0e:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8007f10:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8007f12:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8007f16:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8007f1a:	b003      	add	sp, #12
 8007f1c:	bd30      	pop	{r4, r5, pc}
 8007f1e:	bf00      	nop
 8007f20:	200005f0 	.word	0x200005f0
 8007f24:	200005f4 	.word	0x200005f4
 8007f28:	080079d1 	.word	0x080079d1
 8007f2c:	2000062c 	.word	0x2000062c

08007f30 <LmhpCompliancePackageFactory>:
}
 8007f30:	4800      	ldr	r0, [pc, #0]	; (8007f34 <LmhpCompliancePackageFactory+0x4>)
 8007f32:	4770      	bx	lr
 8007f34:	200000b8 	.word	0x200000b8

08007f38 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 8007f38:	2000      	movs	r0, #0
 8007f3a:	4770      	bx	lr

08007f3c <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	4770      	bx	lr
	...

08007f44 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007f44:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <UpdateRxSlotIdleState+0x20>)
 8007f46:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d004      	beq.n	8007f58 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8007f4e:	4b06      	ldr	r3, [pc, #24]	; (8007f68 <UpdateRxSlotIdleState+0x24>)
 8007f50:	2206      	movs	r2, #6
 8007f52:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 8007f56:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007f58:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <UpdateRxSlotIdleState+0x24>)
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20008000 	.word	0x20008000
 8007f68:	20000648 	.word	0x20000648

08007f6c <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8007f6c:	4b01      	ldr	r3, [pc, #4]	; (8007f74 <LoRaMacEnableRequests+0x8>)
 8007f6e:	f883 0492 	strb.w	r0, [r3, #1170]	; 0x492
}
 8007f72:	4770      	bx	lr
 8007f74:	20000648 	.word	0x20000648

08007f78 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8007f78:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8007f7a:	4b15      	ldr	r3, [pc, #84]	; (8007fd0 <LoRaMacHandleIndicationEvents+0x58>)
 8007f7c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8007f80:	f013 0f08 	tst.w	r3, #8
 8007f84:	d00e      	beq.n	8007fa4 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8007f86:	4812      	ldr	r0, [pc, #72]	; (8007fd0 <LoRaMacHandleIndicationEvents+0x58>)
 8007f88:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 8007f8c:	f36f 03c3 	bfc	r3, #3, #1
 8007f90:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8007f94:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8007f9e:	f500 608d 	add.w	r0, r0, #1128	; 0x468
 8007fa2:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007fa4:	4b0a      	ldr	r3, [pc, #40]	; (8007fd0 <LoRaMacHandleIndicationEvents+0x58>)
 8007fa6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8007faa:	f013 0f02 	tst.w	r3, #2
 8007fae:	d00e      	beq.n	8007fce <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8007fb0:	4807      	ldr	r0, [pc, #28]	; (8007fd0 <LoRaMacHandleIndicationEvents+0x58>)
 8007fb2:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 8007fb6:	f36f 0341 	bfc	r3, #1, #1
 8007fba:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8007fbe:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8007fc8:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 8007fcc:	4798      	blx	r3
    }
}
 8007fce:	bd08      	pop	{r3, pc}
 8007fd0:	20000648 	.word	0x20000648

08007fd4 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8007fd4:	b110      	cbz	r0, 8007fdc <CheckForMinimumAbpDatarate+0x8>
 8007fd6:	2901      	cmp	r1, #1
 8007fd8:	d001      	beq.n	8007fde <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 8007fda:	2000      	movs	r0, #0
}
 8007fdc:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8007fde:	2a00      	cmp	r2, #0
 8007fe0:	d0fc      	beq.n	8007fdc <CheckForMinimumAbpDatarate+0x8>
    return false;
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	4770      	bx	lr
	...

08007fe8 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007fe8:	4b07      	ldr	r3, [pc, #28]	; (8008008 <LoRaMacCheckForRxAbort+0x20>)
 8007fea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007fee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ff2:	d008      	beq.n	8008006 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8007ff4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007ff8:	4a03      	ldr	r2, [pc, #12]	; (8008008 <LoRaMacCheckForRxAbort+0x20>)
 8007ffa:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007ffe:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8008002:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8008006:	4770      	bx	lr
 8008008:	20000648 	.word	0x20000648

0800800c <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800800c:	4b06      	ldr	r3, [pc, #24]	; (8008028 <CalculateBackOff+0x1c>)
 800800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008010:	b94b      	cbnz	r3, 8008026 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008012:	4a05      	ldr	r2, [pc, #20]	; (8008028 <CalculateBackOff+0x1c>)
 8008014:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
 8008018:	4904      	ldr	r1, [pc, #16]	; (800802c <CalculateBackOff+0x20>)
 800801a:	f8d1 141c 	ldr.w	r1, [r1, #1052]	; 0x41c
 800801e:	3b01      	subs	r3, #1
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8008026:	4770      	bx	lr
 8008028:	20008000 	.word	0x20008000
 800802c:	20000648 	.word	0x20000648

08008030 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8008030:	b508      	push	{r3, lr}
 8008032:	4684      	mov	ip, r0
 8008034:	4608      	mov	r0, r1
 8008036:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008038:	4b06      	ldr	r3, [pc, #24]	; (8008054 <SetTxContinuousWave+0x24>)
 800803a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803c:	4662      	mov	r2, ip
 800803e:	b249      	sxtb	r1, r1
 8008040:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008042:	4a05      	ldr	r2, [pc, #20]	; (8008058 <SetTxContinuousWave+0x28>)
 8008044:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008048:	f043 0302 	orr.w	r3, r3, #2
 800804c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8008050:	2000      	movs	r0, #0
 8008052:	bd08      	pop	{r3, pc}
 8008054:	08012fbc 	.word	0x08012fbc
 8008058:	20000648 	.word	0x20000648

0800805c <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800805c:	4602      	mov	r2, r0
 800805e:	b1f8      	cbz	r0, 80080a0 <DetermineFrameType+0x44>
 8008060:	b301      	cbz	r1, 80080a4 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008062:	7b03      	ldrb	r3, [r0, #12]
 8008064:	f013 030f 	ands.w	r3, r3, #15
 8008068:	d005      	beq.n	8008076 <DetermineFrameType+0x1a>
 800806a:	f890 0020 	ldrb.w	r0, [r0, #32]
 800806e:	b110      	cbz	r0, 8008076 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8008070:	2000      	movs	r0, #0
 8008072:	7008      	strb	r0, [r1, #0]
 8008074:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8008076:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800807a:	b910      	cbnz	r0, 8008082 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800807c:	2301      	movs	r3, #1
 800807e:	700b      	strb	r3, [r1, #0]
 8008080:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008082:	b92b      	cbnz	r3, 8008090 <DetermineFrameType+0x34>
 8008084:	f892 0020 	ldrb.w	r0, [r2, #32]
 8008088:	b910      	cbnz	r0, 8008090 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800808a:	2302      	movs	r3, #2
 800808c:	700b      	strb	r3, [r1, #0]
 800808e:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8008090:	b953      	cbnz	r3, 80080a8 <DetermineFrameType+0x4c>
 8008092:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008096:	b14a      	cbz	r2, 80080ac <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8008098:	2203      	movs	r2, #3
 800809a:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800809c:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800809e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80080a0:	2003      	movs	r0, #3
 80080a2:	4770      	bx	lr
 80080a4:	2003      	movs	r0, #3
 80080a6:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 80080a8:	2018      	movs	r0, #24
 80080aa:	4770      	bx	lr
 80080ac:	2018      	movs	r0, #24
}
 80080ae:	4770      	bx	lr

080080b0 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 80080b0:	4288      	cmp	r0, r1
 80080b2:	d201      	bcs.n	80080b8 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 80080b4:	2000      	movs	r0, #0
 80080b6:	4770      	bx	lr
        return true;
 80080b8:	2001      	movs	r0, #1
}
 80080ba:	4770      	bx	lr

080080bc <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80080bc:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80080be:	4b0b      	ldr	r3, [pc, #44]	; (80080ec <CheckRetransUnconfirmedUplink+0x30>)
 80080c0:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 80080c4:	4b0a      	ldr	r3, [pc, #40]	; (80080f0 <CheckRetransUnconfirmedUplink+0x34>)
 80080c6:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 80080ca:	f7ff fff1 	bl	80080b0 <CheckRetrans>
 80080ce:	b950      	cbnz	r0, 80080e6 <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80080d0:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <CheckRetransUnconfirmedUplink+0x34>)
 80080d2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80080d6:	f013 0f02 	tst.w	r3, #2
 80080da:	d004      	beq.n	80080e6 <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80080dc:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <CheckRetransUnconfirmedUplink+0x34>)
 80080de:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d900      	bls.n	80080e8 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 80080e6:	bd08      	pop	{r3, pc}
            return true;
 80080e8:	2001      	movs	r0, #1
 80080ea:	e7fc      	b.n	80080e6 <CheckRetransUnconfirmedUplink+0x2a>
 80080ec:	20008000 	.word	0x20008000
 80080f0:	20000648 	.word	0x20000648

080080f4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80080f4:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80080f6:	4b09      	ldr	r3, [pc, #36]	; (800811c <CheckRetransConfirmedUplink+0x28>)
 80080f8:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 80080fc:	4b08      	ldr	r3, [pc, #32]	; (8008120 <CheckRetransConfirmedUplink+0x2c>)
 80080fe:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 8008102:	f7ff ffd5 	bl	80080b0 <CheckRetrans>
 8008106:	b940      	cbnz	r0, 800811a <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008108:	4b05      	ldr	r3, [pc, #20]	; (8008120 <CheckRetransConfirmedUplink+0x2c>)
 800810a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800810e:	f013 0f02 	tst.w	r3, #2
 8008112:	d002      	beq.n	800811a <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008114:	4b02      	ldr	r3, [pc, #8]	; (8008120 <CheckRetransConfirmedUplink+0x2c>)
 8008116:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
        {
            return true;
        }
    }
    return false;
}
 800811a:	bd08      	pop	{r3, pc}
 800811c:	20008000 	.word	0x20008000
 8008120:	20000648 	.word	0x20000648

08008124 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 8008124:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008128:	d000      	beq.n	800812c <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800812a:	3001      	adds	r0, #1
    }
    return counter;
}
 800812c:	4770      	bx	lr
	...

08008130 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8008130:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008132:	4b12      	ldr	r3, [pc, #72]	; (800817c <StopRetransmission+0x4c>)
 8008134:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8008138:	f013 0f02 	tst.w	r3, #2
 800813c:	d004      	beq.n	8008148 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800813e:	4b0f      	ldr	r3, [pc, #60]	; (800817c <StopRetransmission+0x4c>)
 8008140:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008144:	2b01      	cmp	r3, #1
 8008146:	d908      	bls.n	800815a <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008148:	4b0d      	ldr	r3, [pc, #52]	; (8008180 <StopRetransmission+0x50>)
 800814a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800814e:	b123      	cbz	r3, 800815a <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8008150:	4c0b      	ldr	r4, [pc, #44]	; (8008180 <StopRetransmission+0x50>)
 8008152:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008154:	f7ff ffe6 	bl	8008124 <IncreaseAdrAckCounter>
 8008158:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800815a:	4b08      	ldr	r3, [pc, #32]	; (800817c <StopRetransmission+0x4c>)
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8008162:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8008166:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800816a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800816e:	f022 0202 	bic.w	r2, r2, #2
 8008172:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8008176:	2001      	movs	r0, #1
 8008178:	bd10      	pop	{r4, pc}
 800817a:	bf00      	nop
 800817c:	20000648 	.word	0x20000648
 8008180:	20008000 	.word	0x20008000

08008184 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8008184:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008186:	4b04      	ldr	r3, [pc, #16]	; (8008198 <OnMacProcessNotify+0x14>)
 8008188:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800818c:	b113      	cbz	r3, 8008194 <OnMacProcessNotify+0x10>
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	b103      	cbz	r3, 8008194 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008192:	4798      	blx	r3
    }
}
 8008194:	bd08      	pop	{r3, pc}
 8008196:	bf00      	nop
 8008198:	20000648 	.word	0x20000648

0800819c <OnRadioRxError>:
{
 800819c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800819e:	4a04      	ldr	r2, [pc, #16]	; (80081b0 <OnRadioRxError+0x14>)
 80081a0:	7813      	ldrb	r3, [r2, #0]
 80081a2:	f043 0304 	orr.w	r3, r3, #4
 80081a6:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 80081a8:	f7ff ffec 	bl	8008184 <OnMacProcessNotify>
}
 80081ac:	bd08      	pop	{r3, pc}
 80081ae:	bf00      	nop
 80081b0:	20000644 	.word	0x20000644

080081b4 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80081b4:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80081b6:	4b04      	ldr	r3, [pc, #16]	; (80081c8 <CallNvmDataChangeCallback+0x14>)
 80081b8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80081bc:	b113      	cbz	r3, 80081c4 <CallNvmDataChangeCallback+0x10>
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	b103      	cbz	r3, 80081c4 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80081c2:	4798      	blx	r3
    }
}
 80081c4:	bd08      	pop	{r3, pc}
 80081c6:	bf00      	nop
 80081c8:	20000648 	.word	0x20000648

080081cc <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80081cc:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <IsRequestPending+0x14>)
 80081ce:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
 80081d2:	f010 0005 	ands.w	r0, r0, #5
 80081d6:	d100      	bne.n	80081da <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 80081d8:	4770      	bx	lr
        return 1;
 80081da:	2001      	movs	r0, #1
 80081dc:	e7fc      	b.n	80081d8 <IsRequestPending+0xc>
 80081de:	bf00      	nop
 80081e0:	20000648 	.word	0x20000648

080081e4 <GetMaxAppPayloadWithoutFOptsLength>:
{
 80081e4:	b500      	push	{lr}
 80081e6:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80081e8:	4b0d      	ldr	r3, [pc, #52]	; (8008220 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 80081ea:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 80081ee:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 80081f2:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80081f6:	220d      	movs	r2, #13
 80081f8:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80081fc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008200:	b113      	cbz	r3, 8008208 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008202:	230e      	movs	r3, #14
 8008204:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008208:	a902      	add	r1, sp, #8
 800820a:	4b05      	ldr	r3, [pc, #20]	; (8008220 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800820c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008210:	f004 fa02 	bl	800c618 <RegionGetPhyParam>
 8008214:	9001      	str	r0, [sp, #4]
}
 8008216:	b2c0      	uxtb	r0, r0
 8008218:	b005      	add	sp, #20
 800821a:	f85d fb04 	ldr.w	pc, [sp], #4
 800821e:	bf00      	nop
 8008220:	20008000 	.word	0x20008000

08008224 <ValidatePayloadLength>:
{
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4605      	mov	r5, r0
 8008228:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800822a:	4608      	mov	r0, r1
 800822c:	f7ff ffda 	bl	80081e4 <GetMaxAppPayloadWithoutFOptsLength>
 8008230:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8008232:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008234:	4293      	cmp	r3, r2
 8008236:	d303      	bcc.n	8008240 <ValidatePayloadLength+0x1c>
 8008238:	2aff      	cmp	r2, #255	; 0xff
 800823a:	d903      	bls.n	8008244 <ValidatePayloadLength+0x20>
    return false;
 800823c:	2000      	movs	r0, #0
 800823e:	e000      	b.n	8008242 <ValidatePayloadLength+0x1e>
 8008240:	2000      	movs	r0, #0
}
 8008242:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8008244:	2001      	movs	r0, #1
 8008246:	e7fc      	b.n	8008242 <ValidatePayloadLength+0x1e>

08008248 <ProcessRadioTxDone>:
{
 8008248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800824a:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800824c:	4b3b      	ldr	r3, [pc, #236]	; (800833c <ProcessRadioTxDone+0xf4>)
 800824e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008252:	2b02      	cmp	r3, #2
 8008254:	d002      	beq.n	800825c <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8008256:	4b3a      	ldr	r3, [pc, #232]	; (8008340 <ProcessRadioTxDone+0xf8>)
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800825c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008260:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8008262:	f009 fc93 	bl	8011b8c <UTIL_TIMER_GetCurrentTime>
 8008266:	4b37      	ldr	r3, [pc, #220]	; (8008344 <ProcessRadioTxDone+0xfc>)
 8008268:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800826a:	4c37      	ldr	r4, [pc, #220]	; (8008348 <ProcessRadioTxDone+0x100>)
 800826c:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8008270:	1a2d      	subs	r5, r5, r0
 8008272:	f504 7660 	add.w	r6, r4, #896	; 0x380
 8008276:	4429      	add	r1, r5
 8008278:	4630      	mov	r0, r6
 800827a:	f009 fd67 	bl	8011d4c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800827e:	4630      	mov	r0, r6
 8008280:	f009 fd1e 	bl	8011cc0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8008284:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8008288:	f504 7666 	add.w	r6, r4, #920	; 0x398
 800828c:	4429      	add	r1, r5
 800828e:	4630      	mov	r0, r6
 8008290:	f009 fd5c 	bl	8011d4c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8008294:	4630      	mov	r0, r6
 8008296:	f009 fd13 	bl	8011cc0 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829a:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 800829e:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d134      	bne.n	8008310 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80082a6:	4b28      	ldr	r3, [pc, #160]	; (8008348 <ProcessRadioTxDone+0x100>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80082ae:	4b25      	ldr	r3, [pc, #148]	; (8008344 <ProcessRadioTxDone+0xfc>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4c22      	ldr	r4, [pc, #136]	; (800833c <ProcessRadioTxDone+0xf4>)
 80082b4:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 80082b6:	4f24      	ldr	r7, [pc, #144]	; (8008348 <ProcessRadioTxDone+0x100>)
 80082b8:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 80082bc:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80082c0:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80082c2:	ae0c      	add	r6, sp, #48	; 0x30
 80082c4:	4630      	mov	r0, r6
 80082c6:	f009 fbd5 	bl	8011a74 <SysTimeGetMcuTime>
 80082ca:	ad02      	add	r5, sp, #8
 80082cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80082d6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80082da:	4628      	mov	r0, r5
 80082dc:	f009 fb67 	bl	80119ae <SysTimeSub>
 80082e0:	ab07      	add	r3, sp, #28
 80082e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80082e6:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80082ea:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80082ee:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 80082f0:	2301      	movs	r3, #1
 80082f2:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80082f6:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 80082fa:	b90b      	cbnz	r3, 8008300 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 80082fc:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008300:	a904      	add	r1, sp, #16
 8008302:	4b0e      	ldr	r3, [pc, #56]	; (800833c <ProcessRadioTxDone+0xf4>)
 8008304:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008308:	f004 f99e 	bl	800c648 <RegionSetBandTxDone>
}
 800830c:	b00f      	add	sp, #60	; 0x3c
 800830e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8008310:	2315      	movs	r3, #21
 8008312:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008316:	a90a      	add	r1, sp, #40	; 0x28
 8008318:	4b08      	ldr	r3, [pc, #32]	; (800833c <ProcessRadioTxDone+0xf4>)
 800831a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800831e:	f004 f97b 	bl	800c618 <RegionGetPhyParam>
 8008322:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008324:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8008328:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800832c:	4401      	add	r1, r0
 800832e:	4620      	mov	r0, r4
 8008330:	f009 fd0c 	bl	8011d4c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8008334:	4620      	mov	r0, r4
 8008336:	f009 fcc3 	bl	8011cc0 <UTIL_TIMER_Start>
 800833a:	e7b8      	b.n	80082ae <ProcessRadioTxDone+0x66>
 800833c:	20008000 	.word	0x20008000
 8008340:	08012fbc 	.word	0x08012fbc
 8008344:	20000c04 	.word	0x20000c04
 8008348:	20000648 	.word	0x20000648

0800834c <OnRetransmitTimeoutTimerEvent>:
{
 800834c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800834e:	4c07      	ldr	r4, [pc, #28]	; (800836c <OnRetransmitTimeoutTimerEvent+0x20>)
 8008350:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8008354:	f009 fc5a 	bl	8011c0c <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8008358:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800835c:	b113      	cbz	r3, 8008364 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800835e:	2201      	movs	r2, #1
 8008360:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    OnMacProcessNotify( );
 8008364:	f7ff ff0e 	bl	8008184 <OnMacProcessNotify>
}
 8008368:	bd10      	pop	{r4, pc}
 800836a:	bf00      	nop
 800836c:	20000648 	.word	0x20000648

08008370 <PrepareRxDoneAbort>:
{
 8008370:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8008372:	4b0e      	ldr	r3, [pc, #56]	; (80083ac <PrepareRxDoneAbort+0x3c>)
 8008374:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008378:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800837c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8008380:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8008384:	b973      	cbnz	r3, 80083a4 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8008386:	4b09      	ldr	r3, [pc, #36]	; (80083ac <PrepareRxDoneAbort+0x3c>)
 8008388:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800838c:	f042 0202 	orr.w	r2, r2, #2
 8008390:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008394:	b2d2      	uxtb	r2, r2
 8008396:	f042 0210 	orr.w	r2, r2, #16
 800839a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800839e:	f7ff fdd1 	bl	8007f44 <UpdateRxSlotIdleState>
}
 80083a2:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 80083a4:	2000      	movs	r0, #0
 80083a6:	f7ff ffd1 	bl	800834c <OnRetransmitTimeoutTimerEvent>
 80083aa:	e7ec      	b.n	8008386 <PrepareRxDoneAbort+0x16>
 80083ac:	20000648 	.word	0x20000648

080083b0 <LoRaMacCheckForBeaconAcquisition>:
{
 80083b0:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80083b2:	200b      	movs	r0, #11
 80083b4:	f003 fbb6 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 80083b8:	b188      	cbz	r0, 80083de <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <LoRaMacCheckForBeaconAcquisition+0x38>)
 80083bc:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80083c0:	f010 0f01 	tst.w	r0, #1
 80083c4:	d10d      	bne.n	80083e2 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80083c6:	f010 0004 	ands.w	r0, r0, #4
 80083ca:	d009      	beq.n	80083e0 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80083cc:	461a      	mov	r2, r3
 80083ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80083d2:	f023 0302 	bic.w	r3, r3, #2
 80083d6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80083da:	2001      	movs	r0, #1
 80083dc:	e000      	b.n	80083e0 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 80083de:	2000      	movs	r0, #0
}
 80083e0:	bd08      	pop	{r3, pc}
    return 0x00;
 80083e2:	2000      	movs	r0, #0
 80083e4:	e7fc      	b.n	80083e0 <LoRaMacCheckForBeaconAcquisition+0x30>
 80083e6:	bf00      	nop
 80083e8:	20000648 	.word	0x20000648

080083ec <GetFCntDown>:
{
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	9c04      	ldr	r4, [sp, #16]
 80083f0:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80083f2:	b1f2      	cbz	r2, 8008432 <GetFCntDown+0x46>
 80083f4:	4694      	mov	ip, r2
 80083f6:	b1f4      	cbz	r4, 8008436 <GetFCntDown+0x4a>
 80083f8:	b1fd      	cbz	r5, 800843a <GetFCntDown+0x4e>
    switch( addrID )
 80083fa:	b188      	cbz	r0, 8008420 <GetFCntDown+0x34>
 80083fc:	2801      	cmp	r0, #1
 80083fe:	d11e      	bne.n	800843e <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8008400:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008404:	2b01      	cmp	r3, #1
 8008406:	d002      	beq.n	800840e <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8008408:	2303      	movs	r3, #3
 800840a:	7023      	strb	r3, [r4, #0]
 800840c:	e00a      	b.n	8008424 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800840e:	b121      	cbz	r1, 800841a <GetFCntDown+0x2e>
 8008410:	2903      	cmp	r1, #3
 8008412:	d002      	beq.n	800841a <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8008414:	2301      	movs	r3, #1
 8008416:	7023      	strb	r3, [r4, #0]
 8008418:	e004      	b.n	8008424 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800841a:	2302      	movs	r3, #2
 800841c:	7023      	strb	r3, [r4, #0]
 800841e:	e001      	b.n	8008424 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8008420:	2304      	movs	r3, #4
 8008422:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8008424:	462a      	mov	r2, r5
 8008426:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800842a:	7820      	ldrb	r0, [r4, #0]
 800842c:	f003 fda4 	bl	800bf78 <LoRaMacCryptoGetFCntDown>
}
 8008430:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008432:	2009      	movs	r0, #9
 8008434:	e7fc      	b.n	8008430 <GetFCntDown+0x44>
 8008436:	2009      	movs	r0, #9
 8008438:	e7fa      	b.n	8008430 <GetFCntDown+0x44>
 800843a:	2009      	movs	r0, #9
 800843c:	e7f8      	b.n	8008430 <GetFCntDown+0x44>
    switch( addrID )
 800843e:	2005      	movs	r0, #5
 8008440:	e7f6      	b.n	8008430 <GetFCntDown+0x44>

08008442 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8008442:	2801      	cmp	r0, #1
 8008444:	d900      	bls.n	8008448 <RemoveMacCommands+0x6>
 8008446:	4770      	bx	lr
{
 8008448:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800844a:	2a01      	cmp	r2, #1
 800844c:	d105      	bne.n	800845a <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800844e:	f011 0f20 	tst.w	r1, #32
 8008452:	d004      	beq.n	800845e <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8008454:	f003 fa12 	bl	800b87c <LoRaMacCommandsRemoveStickyAnsCmds>
 8008458:	e001      	b.n	800845e <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800845a:	f003 fa0f 	bl	800b87c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800845e:	bd08      	pop	{r3, pc}

08008460 <ProcessMacCommands>:
{
 8008460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008464:	b08f      	sub	sp, #60	; 0x3c
 8008466:	4698      	mov	r8, r3
    uint8_t status = 0;
 8008468:	2300      	movs	r3, #0
 800846a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800846e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8008472:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8008476:	2b01      	cmp	r3, #1
 8008478:	f200 82da 	bhi.w	8008a30 <ProcessMacCommands+0x5d0>
 800847c:	4605      	mov	r5, r0
 800847e:	460c      	mov	r4, r1
 8008480:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 8008482:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 8008486:	42bc      	cmp	r4, r7
 8008488:	f080 82d2 	bcs.w	8008a30 <ProcessMacCommands+0x5d0>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800848c:	5d28      	ldrb	r0, [r5, r4]
 800848e:	f003 fa4d 	bl	800b92c <LoRaMacCommandsGetCmdSize>
 8008492:	4420      	add	r0, r4
 8008494:	42b8      	cmp	r0, r7
 8008496:	f300 82cb 	bgt.w	8008a30 <ProcessMacCommands+0x5d0>
        switch( payload[macIndex++] )
 800849a:	1c66      	adds	r6, r4, #1
 800849c:	b2f6      	uxtb	r6, r6
 800849e:	5d2b      	ldrb	r3, [r5, r4]
 80084a0:	3b02      	subs	r3, #2
 80084a2:	2b11      	cmp	r3, #17
 80084a4:	f200 82c4 	bhi.w	8008a30 <ProcessMacCommands+0x5d0>
 80084a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80084ac:	00280012 	.word	0x00280012
 80084b0:	00c000ad 	.word	0x00c000ad
 80084b4:	011e0106 	.word	0x011e0106
 80084b8:	01740157 	.word	0x01740157
 80084bc:	02c201c0 	.word	0x02c201c0
 80084c0:	01f002c2 	.word	0x01f002c2
 80084c4:	02c202c2 	.word	0x02c202c2
 80084c8:	02690252 	.word	0x02690252
 80084cc:	02a20288 	.word	0x02a20288
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80084d0:	2005      	movs	r0, #5
 80084d2:	f003 fb27 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 80084d6:	b908      	cbnz	r0, 80084dc <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 80084d8:	4634      	mov	r4, r6
 80084da:	e7d4      	b.n	8008486 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80084dc:	2105      	movs	r1, #5
 80084de:	2000      	movs	r0, #0
 80084e0:	f003 fad4 	bl	800ba8c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80084e4:	1ca3      	adds	r3, r4, #2
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	5da9      	ldrb	r1, [r5, r6]
 80084ea:	4aa7      	ldr	r2, [pc, #668]	; (8008788 <ProcessMacCommands+0x328>)
 80084ec:	f882 145c 	strb.w	r1, [r2, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80084f0:	3403      	adds	r4, #3
 80084f2:	b2e4      	uxtb	r4, r4
 80084f4:	5ceb      	ldrb	r3, [r5, r3]
 80084f6:	f882 345d 	strb.w	r3, [r2, #1117]	; 0x45d
 80084fa:	e7c4      	b.n	8008486 <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008502:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8008506:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800850a:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800850e:	f1b9 0f00 	cmp.w	r9, #0
 8008512:	d036      	beq.n	8008582 <ProcessMacCommands+0x122>
                    macIndex += 4;
 8008514:	3405      	adds	r4, #5
 8008516:	b2e4      	uxtb	r4, r4
 8008518:	e7b5      	b.n	8008486 <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800851a:	2305      	movs	r3, #5
 800851c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8008520:	e050      	b.n	80085c4 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8008522:	4b9a      	ldr	r3, [pc, #616]	; (800878c <ProcessMacCommands+0x32c>)
 8008524:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8008528:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800852c:	4293      	cmp	r3, r2
 800852e:	da03      	bge.n	8008538 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8008530:	4b96      	ldr	r3, [pc, #600]	; (800878c <ProcessMacCommands+0x32c>)
 8008532:	2101      	movs	r1, #1
 8008534:	f883 111d 	strb.w	r1, [r3, #285]	; 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8008538:	4b94      	ldr	r3, [pc, #592]	; (800878c <ProcessMacCommands+0x32c>)
 800853a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800853e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8008542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008546:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800854a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800854e:	e04d      	b.n	80085ec <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008550:	2201      	movs	r2, #1
 8008552:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8008556:	2003      	movs	r0, #3
 8008558:	f003 f91c 	bl	800b794 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800855c:	3401      	adds	r4, #1
 800855e:	b2e4      	uxtb	r4, r4
 8008560:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008564:	498a      	ldr	r1, [pc, #552]	; (8008790 <ProcessMacCommands+0x330>)
 8008566:	fba1 2103 	umull	r2, r1, r1, r3
 800856a:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 800856e:	d3ef      	bcc.n	8008550 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 8008570:	441e      	add	r6, r3
 8008572:	b2f6      	uxtb	r6, r6
 8008574:	1e74      	subs	r4, r6, #1
 8008576:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 8008578:	42a7      	cmp	r7, r4
 800857a:	d93a      	bls.n	80085f2 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800857c:	5d2b      	ldrb	r3, [r5, r4]
 800857e:	2b03      	cmp	r3, #3
 8008580:	d136      	bne.n	80085f0 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8008582:	1e73      	subs	r3, r6, #1
 8008584:	442b      	add	r3, r5
 8008586:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008588:	4b80      	ldr	r3, [pc, #512]	; (800878c <ProcessMacCommands+0x32c>)
 800858a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800858e:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008592:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 8008596:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800859a:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800859e:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80085a2:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 80085a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80085aa:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 80085ae:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80085b2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80085b6:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80085b8:	2a00      	cmp	r2, #0
 80085ba:	d0ae      	beq.n	800851a <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80085bc:	1bbb      	subs	r3, r7, r6
 80085be:	3301      	adds	r3, #1
 80085c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80085c4:	ab05      	add	r3, sp, #20
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	ab03      	add	r3, sp, #12
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	f10d 030b 	add.w	r3, sp, #11
 80085d0:	f10d 020a 	add.w	r2, sp, #10
 80085d4:	a907      	add	r1, sp, #28
 80085d6:	486d      	ldr	r0, [pc, #436]	; (800878c <ProcessMacCommands+0x32c>)
 80085d8:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80085dc:	f004 f8b4 	bl	800c748 <RegionLinkAdrReq>
 80085e0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 80085e4:	f000 0007 	and.w	r0, r0, #7
 80085e8:	2807      	cmp	r0, #7
 80085ea:	d09a      	beq.n	8008522 <ProcessMacCommands+0xc2>
{
 80085ec:	2400      	movs	r4, #0
 80085ee:	e7b7      	b.n	8008560 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80085f0:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 80085f2:	42bc      	cmp	r4, r7
 80085f4:	d204      	bcs.n	8008600 <ProcessMacCommands+0x1a0>
                        macIndex--;
 80085f6:	3c01      	subs	r4, #1
 80085f8:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 80085fa:	f04f 0901 	mov.w	r9, #1
 80085fe:	e742      	b.n	8008486 <ProcessMacCommands+0x26>
 8008600:	f04f 0901 	mov.w	r9, #1
                break;
 8008604:	e73f      	b.n	8008486 <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008606:	3402      	adds	r4, #2
 8008608:	b2e4      	uxtb	r4, r4
 800860a:	5dab      	ldrb	r3, [r5, r6]
 800860c:	f003 030f 	and.w	r3, r3, #15
 8008610:	495e      	ldr	r1, [pc, #376]	; (800878c <ProcessMacCommands+0x32c>)
 8008612:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8008616:	2201      	movs	r2, #1
 8008618:	fa02 f303 	lsl.w	r3, r2, r3
 800861c:	f8a1 3120 	strh.w	r3, [r1, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008620:	2200      	movs	r2, #0
 8008622:	a90b      	add	r1, sp, #44	; 0x2c
 8008624:	2004      	movs	r0, #4
 8008626:	f003 f8b5 	bl	800b794 <LoRaMacCommandsAddCmd>
                break;
 800862a:	e72c      	b.n	8008486 <ProcessMacCommands+0x26>
                status = 0x07;
 800862c:	2307      	movs	r3, #7
 800862e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008632:	5dab      	ldrb	r3, [r5, r6]
 8008634:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008638:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800863c:	57ab      	ldrsb	r3, [r5, r6]
 800863e:	f003 030f 	and.w	r3, r3, #15
 8008642:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8008646:	1ca3      	adds	r3, r4, #2
 8008648:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800864a:	1ce1      	adds	r1, r4, #3
 800864c:	b2c9      	uxtb	r1, r1
 800864e:	5ceb      	ldrb	r3, [r5, r3]
 8008650:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008652:	1d22      	adds	r2, r4, #4
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	5c69      	ldrb	r1, [r5, r1]
 8008658:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800865c:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800865e:	3405      	adds	r4, #5
 8008660:	b2e4      	uxtb	r4, r4
 8008662:	5caa      	ldrb	r2, [r5, r2]
 8008664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008668:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800866a:	2264      	movs	r2, #100	; 0x64
 800866c:	fb02 f303 	mul.w	r3, r2, r3
 8008670:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008672:	a907      	add	r1, sp, #28
 8008674:	4b45      	ldr	r3, [pc, #276]	; (800878c <ProcessMacCommands+0x32c>)
 8008676:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800867a:	f004 f881 	bl	800c780 <RegionRxParamSetupReq>
 800867e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8008682:	f000 0307 	and.w	r3, r0, #7
 8008686:	2b07      	cmp	r3, #7
 8008688:	d007      	beq.n	800869a <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 800868a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800868e:	2201      	movs	r2, #1
 8008690:	a90b      	add	r1, sp, #44	; 0x2c
 8008692:	2005      	movs	r0, #5
 8008694:	f003 f87e 	bl	800b794 <LoRaMacCommandsAddCmd>
                break;
 8008698:	e6f5      	b.n	8008486 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800869a:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800869e:	4b3b      	ldr	r3, [pc, #236]	; (800878c <ProcessMacCommands+0x32c>)
 80086a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80086a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80086a8:	9a08      	ldr	r2, [sp, #32]
 80086aa:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80086ac:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80086ae:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80086b2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80086b6:	e7e8      	b.n	800868a <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80086b8:	4b33      	ldr	r3, [pc, #204]	; (8008788 <ProcessMacCommands+0x328>)
 80086ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80086be:	b17b      	cbz	r3, 80086e0 <ProcessMacCommands+0x280>
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	b17b      	cbz	r3, 80086e4 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80086c4:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80086c6:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80086ca:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 80086ce:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80086d2:	2202      	movs	r2, #2
 80086d4:	a90b      	add	r1, sp, #44	; 0x2c
 80086d6:	2006      	movs	r0, #6
 80086d8:	f003 f85c 	bl	800b794 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 80086dc:	4634      	mov	r4, r6
                break;
 80086de:	e6d2      	b.n	8008486 <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80086e0:	20ff      	movs	r0, #255	; 0xff
 80086e2:	e7f0      	b.n	80086c6 <ProcessMacCommands+0x266>
 80086e4:	20ff      	movs	r0, #255	; 0xff
 80086e6:	e7ee      	b.n	80086c6 <ProcessMacCommands+0x266>
                status = 0x03;
 80086e8:	2303      	movs	r3, #3
 80086ea:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 80086ee:	1ca3      	adds	r3, r4, #2
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	57aa      	ldrsb	r2, [r5, r6]
 80086f4:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 80086f8:	aa07      	add	r2, sp, #28
 80086fa:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80086fc:	1ce2      	adds	r2, r4, #3
 80086fe:	b2d2      	uxtb	r2, r2
 8008700:	5ceb      	ldrb	r3, [r5, r3]
 8008702:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008704:	1d21      	adds	r1, r4, #4
 8008706:	b2c9      	uxtb	r1, r1
 8008708:	5caa      	ldrb	r2, [r5, r2]
 800870a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800870e:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008710:	1d62      	adds	r2, r4, #5
 8008712:	b2d2      	uxtb	r2, r2
 8008714:	5c69      	ldrb	r1, [r5, r1]
 8008716:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800871a:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800871c:	2164      	movs	r1, #100	; 0x64
 800871e:	fb01 f303 	mul.w	r3, r1, r3
 8008722:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8008728:	3406      	adds	r4, #6
 800872a:	b2e4      	uxtb	r4, r4
 800872c:	56ab      	ldrsb	r3, [r5, r2]
 800872e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8008732:	a905      	add	r1, sp, #20
 8008734:	4b15      	ldr	r3, [pc, #84]	; (800878c <ProcessMacCommands+0x32c>)
 8008736:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800873a:	f004 f830 	bl	800c79e <RegionNewChannelReq>
 800873e:	b2c3      	uxtb	r3, r0
 8008740:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8008744:	2800      	cmp	r0, #0
 8008746:	f6ff ae9e 	blt.w	8008486 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800874a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800874e:	2201      	movs	r2, #1
 8008750:	a90b      	add	r1, sp, #44	; 0x2c
 8008752:	2007      	movs	r0, #7
 8008754:	f003 f81e 	bl	800b794 <LoRaMacCommandsAddCmd>
                break;
 8008758:	e695      	b.n	8008486 <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800875a:	3402      	adds	r4, #2
 800875c:	b2e4      	uxtb	r4, r4
 800875e:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 8008760:	f013 030f 	ands.w	r3, r3, #15
 8008764:	d100      	bne.n	8008768 <ProcessMacCommands+0x308>
                    delay++;
 8008766:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8008768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800876c:	fb02 f303 	mul.w	r3, r2, r3
 8008770:	4a06      	ldr	r2, [pc, #24]	; (800878c <ProcessMacCommands+0x32c>)
 8008772:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008774:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008778:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800877a:	2200      	movs	r2, #0
 800877c:	a90b      	add	r1, sp, #44	; 0x2c
 800877e:	2008      	movs	r0, #8
 8008780:	f003 f808 	bl	800b794 <LoRaMacCommandsAddCmd>
                break;
 8008784:	e67f      	b.n	8008486 <ProcessMacCommands+0x26>
 8008786:	bf00      	nop
 8008788:	20000648 	.word	0x20000648
 800878c:	20008000 	.word	0x20008000
 8008790:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8008794:	3402      	adds	r4, #2
 8008796:	b2e4      	uxtb	r4, r4
 8008798:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800879a:	2200      	movs	r2, #0
 800879c:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 80087a0:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80087a4:	f013 0f20 	tst.w	r3, #32
 80087a8:	d002      	beq.n	80087b0 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80087aa:	2201      	movs	r2, #1
 80087ac:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80087b0:	f013 0f10 	tst.w	r3, #16
 80087b4:	d002      	beq.n	80087bc <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 80087b6:	2201      	movs	r2, #1
 80087b8:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80087bc:	f003 030f 	and.w	r3, r3, #15
 80087c0:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80087c4:	a903      	add	r1, sp, #12
 80087c6:	4b9c      	ldr	r3, [pc, #624]	; (8008a38 <ProcessMacCommands+0x5d8>)
 80087c8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80087cc:	f003 fff6 	bl	800c7bc <RegionTxParamSetupReq>
 80087d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80087d4:	f43f ae57 	beq.w	8008486 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80087d8:	f89d a00c 	ldrb.w	sl, [sp, #12]
 80087dc:	4e96      	ldr	r6, [pc, #600]	; (8008a38 <ProcessMacCommands+0x5d8>)
 80087de:	f886 a07c 	strb.w	sl, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80087e2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80087e6:	f886 307d 	strb.w	r3, [r6, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80087ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80087ee:	4a93      	ldr	r2, [pc, #588]	; (8008a3c <ProcessMacCommands+0x5dc>)
 80087f0:	5cd0      	ldrb	r0, [r2, r3]
 80087f2:	f7f7 ffeb 	bl	80007cc <__aeabi_ui2f>
 80087f6:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80087fa:	2302      	movs	r3, #2
 80087fc:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008800:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008804:	a907      	add	r1, sp, #28
 8008806:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800880a:	f003 ff05 	bl	800c618 <RegionGetPhyParam>
 800880e:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008810:	b240      	sxtb	r0, r0
 8008812:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8008816:	4298      	cmp	r0, r3
 8008818:	bfb8      	it	lt
 800881a:	4618      	movlt	r0, r3
 800881c:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008820:	2200      	movs	r2, #0
 8008822:	a90b      	add	r1, sp, #44	; 0x2c
 8008824:	2009      	movs	r0, #9
 8008826:	f002 ffb5 	bl	800b794 <LoRaMacCommandsAddCmd>
                break;
 800882a:	e62c      	b.n	8008486 <ProcessMacCommands+0x26>
                status = 0x03;
 800882c:	2303      	movs	r3, #3
 800882e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8008832:	1ca3      	adds	r3, r4, #2
 8008834:	b2db      	uxtb	r3, r3
 8008836:	5daa      	ldrb	r2, [r5, r6]
 8008838:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800883c:	1ce1      	adds	r1, r4, #3
 800883e:	b2c9      	uxtb	r1, r1
 8008840:	5ceb      	ldrb	r3, [r5, r3]
 8008842:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008844:	1d22      	adds	r2, r4, #4
 8008846:	b2d2      	uxtb	r2, r2
 8008848:	5c69      	ldrb	r1, [r5, r1]
 800884a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800884e:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008850:	3405      	adds	r4, #5
 8008852:	b2e4      	uxtb	r4, r4
 8008854:	5caa      	ldrb	r2, [r5, r2]
 8008856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800885a:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800885c:	2264      	movs	r2, #100	; 0x64
 800885e:	fb02 f303 	mul.w	r3, r2, r3
 8008862:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8008864:	a907      	add	r1, sp, #28
 8008866:	4b74      	ldr	r3, [pc, #464]	; (8008a38 <ProcessMacCommands+0x5d8>)
 8008868:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800886c:	f003 ffb5 	bl	800c7da <RegionDlChannelReq>
 8008870:	b2c3      	uxtb	r3, r0
 8008872:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8008876:	2800      	cmp	r0, #0
 8008878:	f6ff ae05 	blt.w	8008486 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800887c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008880:	2201      	movs	r2, #1
 8008882:	a90b      	add	r1, sp, #44	; 0x2c
 8008884:	200a      	movs	r0, #10
 8008886:	f002 ff85 	bl	800b794 <LoRaMacCommandsAddCmd>
                break;
 800888a:	e5fc      	b.n	8008486 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800888c:	2009      	movs	r0, #9
 800888e:	f003 f949 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 8008892:	b928      	cbnz	r0, 80088a0 <ProcessMacCommands+0x440>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008894:	4b6a      	ldr	r3, [pc, #424]	; (8008a40 <ProcessMacCommands+0x5e0>)
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
        switch( payload[macIndex++] )
 800889c:	4634      	mov	r4, r6
 800889e:	e5f2      	b.n	8008486 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80088a0:	2109      	movs	r1, #9
 80088a2:	2000      	movs	r0, #0
 80088a4:	f003 f8f2 	bl	800ba8c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80088a8:	a803      	add	r0, sp, #12
 80088aa:	2300      	movs	r3, #0
 80088ac:	9303      	str	r3, [sp, #12]
 80088ae:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 80088b0:	f10d 0a14 	add.w	sl, sp, #20
 80088b4:	9305      	str	r3, [sp, #20]
 80088b6:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 80088b8:	f10d 0b1c 	add.w	fp, sp, #28
 80088bc:	9307      	str	r3, [sp, #28]
 80088be:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80088c0:	1ca1      	adds	r1, r4, #2
 80088c2:	b2c9      	uxtb	r1, r1
 80088c4:	5dab      	ldrb	r3, [r5, r6]
 80088c6:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80088c8:	1ce2      	adds	r2, r4, #3
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	5c69      	ldrb	r1, [r5, r1]
 80088ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80088d2:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80088d4:	1d21      	adds	r1, r4, #4
 80088d6:	b2c9      	uxtb	r1, r1
 80088d8:	5caa      	ldrb	r2, [r5, r2]
 80088da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088de:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80088e0:	1d62      	adds	r2, r4, #5
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	5c69      	ldrb	r1, [r5, r1]
 80088e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80088ea:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80088ec:	3406      	adds	r4, #6
 80088ee:	b2e4      	uxtb	r4, r4
 80088f0:	5caa      	ldrb	r2, [r5, r2]
 80088f2:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80088f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088fa:	fb01 f202 	mul.w	r2, r1, r2
 80088fe:	0a12      	lsrs	r2, r2, #8
 8008900:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8008904:	c803      	ldmia	r0, {r0, r1}
 8008906:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800890a:	4a4e      	ldr	r2, [pc, #312]	; (8008a44 <ProcessMacCommands+0x5e4>)
 800890c:	441a      	add	r2, r3
 800890e:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8008910:	4658      	mov	r0, fp
 8008912:	f009 f88d 	bl	8011a30 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008916:	4e4a      	ldr	r6, [pc, #296]	; (8008a40 <ProcessMacCommands+0x5e0>)
 8008918:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 8008922:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8008926:	a80c      	add	r0, sp, #48	; 0x30
 8008928:	f009 f841 	bl	80119ae <SysTimeSub>
 800892c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008932:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008936:	4650      	mov	r0, sl
 8008938:	f009 f81a 	bl	8011970 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800893c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008940:	f009 f854 	bl	80119ec <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8008944:	f002 fe88 	bl	800b658 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008948:	2301      	movs	r3, #1
 800894a:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
 800894e:	e59a      	b.n	8008486 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8008950:	200c      	movs	r0, #12
 8008952:	f003 f8e7 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 8008956:	b908      	cbnz	r0, 800895c <ProcessMacCommands+0x4fc>
        switch( payload[macIndex++] )
 8008958:	4634      	mov	r4, r6
 800895a:	e594      	b.n	8008486 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800895c:	210c      	movs	r1, #12
 800895e:	2000      	movs	r0, #0
 8008960:	f003 f894 	bl	800ba8c <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008964:	4b36      	ldr	r3, [pc, #216]	; (8008a40 <ProcessMacCommands+0x5e0>)
 8008966:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800896a:	3b04      	subs	r3, #4
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b01      	cmp	r3, #1
 8008970:	d801      	bhi.n	8008976 <ProcessMacCommands+0x516>
        switch( payload[macIndex++] )
 8008972:	4634      	mov	r4, r6
 8008974:	e587      	b.n	8008486 <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 8008976:	f002 fe6b 	bl	800b650 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800897a:	4634      	mov	r4, r6
 800897c:	e583      	b.n	8008486 <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800897e:	1ca2      	adds	r2, r4, #2
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008984:	1ce1      	adds	r1, r4, #3
 8008986:	b2c9      	uxtb	r1, r1
 8008988:	5caa      	ldrb	r2, [r5, r2]
 800898a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800898e:	1d22      	adds	r2, r4, #4
 8008990:	b2d2      	uxtb	r2, r2
 8008992:	5c69      	ldrb	r1, [r5, r1]
 8008994:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8008998:	3405      	adds	r4, #5
 800899a:	b2e4      	uxtb	r4, r4
 800899c:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800899e:	2164      	movs	r1, #100	; 0x64
 80089a0:	fb03 f101 	mul.w	r1, r3, r1
 80089a4:	f000 000f 	and.w	r0, r0, #15
 80089a8:	f002 fe53 	bl	800b652 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 80089ac:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80089b0:	2201      	movs	r2, #1
 80089b2:	a90b      	add	r1, sp, #44	; 0x2c
 80089b4:	2011      	movs	r0, #17
 80089b6:	f002 feed 	bl	800b794 <LoRaMacCommandsAddCmd>
                break;
 80089ba:	e564      	b.n	8008486 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80089bc:	200d      	movs	r0, #13
 80089be:	f003 f8b1 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 80089c2:	b908      	cbnz	r0, 80089c8 <ProcessMacCommands+0x568>
        switch( payload[macIndex++] )
 80089c4:	4634      	mov	r4, r6
 80089c6:	e55e      	b.n	8008486 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80089c8:	210d      	movs	r1, #13
 80089ca:	2000      	movs	r0, #0
 80089cc:	f003 f85e 	bl	800ba8c <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80089d0:	1ca2      	adds	r2, r4, #2
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80089d6:	1ce3      	adds	r3, r4, #3
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 80089dc:	3404      	adds	r4, #4
 80089de:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80089e0:	4a19      	ldr	r2, [pc, #100]	; (8008a48 <ProcessMacCommands+0x5e8>)
 80089e2:	6812      	ldr	r2, [r2, #0]
 80089e4:	5ce9      	ldrb	r1, [r5, r3]
 80089e6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 80089ea:	f002 fe34 	bl	800b656 <LoRaMacClassBBeaconTimingAns>
 80089ee:	e54a      	b.n	8008486 <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 80089f0:	1ca1      	adds	r1, r4, #2
 80089f2:	b2c9      	uxtb	r1, r1
 80089f4:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80089f6:	1ce2      	adds	r2, r4, #3
 80089f8:	b2d2      	uxtb	r2, r2
 80089fa:	5c68      	ldrb	r0, [r5, r1]
 80089fc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008a00:	3404      	adds	r4, #4
 8008a02:	b2e4      	uxtb	r4, r4
 8008a04:	5ca8      	ldrb	r0, [r5, r2]
 8008a06:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008a0a:	2064      	movs	r0, #100	; 0x64
 8008a0c:	fb03 f000 	mul.w	r0, r3, r0
 8008a10:	f002 fe23 	bl	800b65a <LoRaMacClassBBeaconFreqReq>
 8008a14:	b140      	cbz	r0, 8008a28 <ProcessMacCommands+0x5c8>
                        macCmdPayload[0] = 1;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	a90b      	add	r1, sp, #44	; 0x2c
 8008a20:	2013      	movs	r0, #19
 8008a22:	f002 feb7 	bl	800b794 <LoRaMacCommandsAddCmd>
                break;
 8008a26:	e52e      	b.n	8008486 <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8008a2e:	e7f5      	b.n	8008a1c <ProcessMacCommands+0x5bc>
}
 8008a30:	b00f      	add	sp, #60	; 0x3c
 8008a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a36:	bf00      	nop
 8008a38:	20008000 	.word	0x20008000
 8008a3c:	080128e4 	.word	0x080128e4
 8008a40:	20000648 	.word	0x20000648
 8008a44:	12d53d80 	.word	0x12d53d80
 8008a48:	20000bf4 	.word	0x20000bf4

08008a4c <ProcessRadioRxDone>:
{
 8008a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a50:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 8008a52:	4ba5      	ldr	r3, [pc, #660]	; (8008ce8 <ProcessRadioRxDone+0x29c>)
 8008a54:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8008a56:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8008a58:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8008a5c:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008a64:	4aa1      	ldr	r2, [pc, #644]	; (8008cec <ProcessRadioRxDone+0x2a0>)
 8008a66:	f8d2 90e4 	ldr.w	r9, [r2, #228]	; 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8008a6a:	4aa1      	ldr	r2, [pc, #644]	; (8008cf0 <ProcessRadioRxDone+0x2a4>)
 8008a6c:	7811      	ldrb	r1, [r2, #0]
 8008a6e:	f363 0100 	bfi	r1, r3, #0, #1
 8008a72:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 8008a74:	4c9f      	ldr	r4, [pc, #636]	; (8008cf4 <ProcessRadioRxDone+0x2a8>)
 8008a76:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8008a7a:	f8a4 848c 	strh.w	r8, [r4, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 8008a7e:	f884 748e 	strb.w	r7, [r4, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008a82:	f894 2490 	ldrb.w	r2, [r4, #1168]	; 0x490
 8008a86:	f884 248f 	strb.w	r2, [r4, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 8008a8a:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 8008a8e:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8008a92:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8008a96:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8008a9a:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 8008a9e:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8008aa2:	f884 342e 	strb.w	r3, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008aa6:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008aaa:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8008aae:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008ab2:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8008ab6:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 8008aba:	4b8f      	ldr	r3, [pc, #572]	; (8008cf8 <ProcessRadioRxDone+0x2ac>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8008ac0:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 8008ac4:	b1d3      	cbz	r3, 8008afc <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f002 fdae 	bl	800b62a <LoRaMacClassBRxBeacon>
 8008ace:	b9d0      	cbnz	r0, 8008b06 <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008ad0:	4b86      	ldr	r3, [pc, #536]	; (8008cec <ProcessRadioRxDone+0x2a0>)
 8008ad2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d01d      	beq.n	8008b16 <ProcessRadioRxDone+0xca>
    if( size == 0 )
 8008ada:	2d00      	cmp	r5, #0
 8008adc:	d038      	beq.n	8008b50 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 8008ade:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8008ae0:	0963      	lsrs	r3, r4, #5
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	2b06      	cmp	r3, #6
 8008ae6:	f200 82fc 	bhi.w	80090e2 <ProcessRadioRxDone+0x696>
 8008aea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008aee:	0038      	.short	0x0038
 8008af0:	00d102fa 	.word	0x00d102fa
 8008af4:	00cd02fa 	.word	0x00cd02fa
 8008af8:	02cc02fa 	.word	0x02cc02fa
        TimerStop( &MacCtx.RxWindowTimer2 );
 8008afc:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008b00:	f009 f884 	bl	8011c0c <UTIL_TIMER_Stop>
 8008b04:	e7df      	b.n	8008ac6 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008b06:	4b7b      	ldr	r3, [pc, #492]	; (8008cf4 <ProcessRadioRxDone+0x2a8>)
 8008b08:	f8a3 847e 	strh.w	r8, [r3, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008b0c:	f883 7480 	strb.w	r7, [r3, #1152]	; 0x480
}
 8008b10:	b025      	add	sp, #148	; 0x94
 8008b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008b16:	f002 fd8c 	bl	800b632 <LoRaMacClassBIsPingExpected>
 8008b1a:	b150      	cbz	r0, 8008b32 <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f002 fd7d 	bl	800b61c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008b22:	2000      	movs	r0, #0
 8008b24:	f002 fd7f 	bl	800b626 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008b28:	4b72      	ldr	r3, [pc, #456]	; (8008cf4 <ProcessRadioRxDone+0x2a8>)
 8008b2a:	2204      	movs	r2, #4
 8008b2c:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 8008b30:	e7d3      	b.n	8008ada <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008b32:	f002 fd80 	bl	800b636 <LoRaMacClassBIsMulticastExpected>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d0cf      	beq.n	8008ada <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	f002 fd6f 	bl	800b61e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008b40:	2000      	movs	r0, #0
 8008b42:	f002 fd71 	bl	800b628 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008b46:	4b6b      	ldr	r3, [pc, #428]	; (8008cf4 <ProcessRadioRxDone+0x2a8>)
 8008b48:	2205      	movs	r2, #5
 8008b4a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 8008b4e:	e7c4      	b.n	8008ada <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b50:	4b68      	ldr	r3, [pc, #416]	; (8008cf4 <ProcessRadioRxDone+0x2a8>)
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 8008b58:	f7ff fc0a 	bl	8008370 <PrepareRxDoneAbort>
        return;
 8008b5c:	e7d8      	b.n	8008b10 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008b5e:	2d10      	cmp	r5, #16
 8008b60:	d92e      	bls.n	8008bc0 <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 8008b62:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 8008b64:	b2ed      	uxtb	r5, r5
 8008b66:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008b6a:	4b60      	ldr	r3, [pc, #384]	; (8008cec <ProcessRadioRxDone+0x2a0>)
 8008b6c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008b70:	bb6b      	cbnz	r3, 8008bce <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 8008b72:	a804      	add	r0, sp, #16
 8008b74:	f006 fcfa 	bl	800f56c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8008b78:	aa08      	add	r2, sp, #32
 8008b7a:	a904      	add	r1, sp, #16
 8008b7c:	20ff      	movs	r0, #255	; 0xff
 8008b7e:	f003 fb4d 	bl	800c21c <LoRaMacCryptoHandleJoinAccept>
 8008b82:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008b84:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8008b88:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008b8c:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008b90:	4b56      	ldr	r3, [pc, #344]	; (8008cec <ProcessRadioRxDone+0x2a0>)
 8008b92:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8008b96:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8008b9a:	2207      	movs	r2, #7
 8008b9c:	a903      	add	r1, sp, #12
 8008b9e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008ba2:	f003 fd6d 	bl	800c680 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8008ba6:	b904      	cbnz	r4, 8008baa <ProcessRadioRxDone+0x15e>
 8008ba8:	b9c0      	cbnz	r0, 8008bdc <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008baa:	2001      	movs	r0, #1
 8008bac:	f002 ffba 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	f000 8282 	beq.w	80090ba <ProcessRadioRxDone+0x66e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	2007      	movs	r0, #7
 8008bba:	f002 ff67 	bl	800ba8c <LoRaMacConfirmQueueSetStatus>
 8008bbe:	e27c      	b.n	80090ba <ProcessRadioRxDone+0x66e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008bc0:	4b4c      	ldr	r3, [pc, #304]	; (8008cf4 <ProcessRadioRxDone+0x2a8>)
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8008bc8:	f7ff fbd2 	bl	8008370 <PrepareRxDoneAbort>
                return;
 8008bcc:	e7a0      	b.n	8008b10 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008bce:	4b49      	ldr	r3, [pc, #292]	; (8008cf4 <ProcessRadioRxDone+0x2a8>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8008bd6:	f7ff fbcb 	bl	8008370 <PrepareRxDoneAbort>
                return;
 8008bda:	e799      	b.n	8008b10 <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008bdc:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8008be0:	4c42      	ldr	r4, [pc, #264]	; (8008cec <ProcessRadioRxDone+0x2a0>)
 8008be2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008be6:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8008bea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008bee:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008bf2:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8008bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bfa:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008bfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c00:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8008c04:	2002      	movs	r0, #2
 8008c06:	f006 fcbf 	bl	800f588 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008c0a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8008c0e:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8008c12:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008c16:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008c1a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008c1e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008c22:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8008c26:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8008c28:	b90b      	cbnz	r3, 8008c2e <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008c2e:	4c2f      	ldr	r4, [pc, #188]	; (8008cec <ProcessRadioRxDone+0x2a0>)
 8008c30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c36:	fb02 f303 	mul.w	r3, r2, r3
 8008c3a:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008c3c:	4413      	add	r3, r2
 8008c3e:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8008c40:	2601      	movs	r6, #1
 8008c42:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008c4c:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8008c50:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 8008c52:	3d11      	subs	r5, #17
 8008c54:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 8008c58:	4b26      	ldr	r3, [pc, #152]	; (8008cf4 <ProcessRadioRxDone+0x2a8>)
 8008c5a:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8008c5e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008c62:	a921      	add	r1, sp, #132	; 0x84
 8008c64:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8008c68:	f003 fd1a 	bl	800c6a0 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8008c72:	4630      	mov	r0, r6
 8008c74:	f002 ff56 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	f000 821e 	beq.w	80090ba <ProcessRadioRxDone+0x66e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8008c7e:	4631      	mov	r1, r6
 8008c80:	2000      	movs	r0, #0
 8008c82:	f002 ff03 	bl	800ba8c <LoRaMacConfirmQueueSetStatus>
 8008c86:	e218      	b.n	80090ba <ProcessRadioRxDone+0x66e>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008c88:	4b1a      	ldr	r3, [pc, #104]	; (8008cf4 <ProcessRadioRxDone+0x2a8>)
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008c90:	4b16      	ldr	r3, [pc, #88]	; (8008cec <ProcessRadioRxDone+0x2a0>)
 8008c92:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8008c96:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008c9a:	4a16      	ldr	r2, [pc, #88]	; (8008cf4 <ProcessRadioRxDone+0x2a8>)
 8008c9c:	f992 2424 	ldrsb.w	r2, [r2, #1060]	; 0x424
 8008ca0:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008ca4:	220d      	movs	r2, #13
 8008ca6:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008caa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008cae:	b113      	cbz	r3, 8008cb6 <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008cb0:	230e      	movs	r3, #14
 8008cb2:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008cb6:	a91f      	add	r1, sp, #124	; 0x7c
 8008cb8:	4b0c      	ldr	r3, [pc, #48]	; (8008cec <ProcessRadioRxDone+0x2a0>)
 8008cba:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008cbe:	f003 fcab 	bl	800c618 <RegionGetPhyParam>
 8008cc2:	901e      	str	r0, [sp, #120]	; 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008cc4:	f1a5 030d 	sub.w	r3, r5, #13
 8008cc8:	b21b      	sxth	r3, r3
 8008cca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008cce:	b200      	sxth	r0, r0
 8008cd0:	4283      	cmp	r3, r0
 8008cd2:	dc01      	bgt.n	8008cd8 <ProcessRadioRxDone+0x28c>
 8008cd4:	2d0b      	cmp	r5, #11
 8008cd6:	d811      	bhi.n	8008cfc <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008cd8:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <ProcessRadioRxDone+0x2a8>)
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8008ce0:	f7ff fb46 	bl	8008370 <PrepareRxDoneAbort>
                return;
 8008ce4:	e714      	b.n	8008b10 <ProcessRadioRxDone+0xc4>
 8008ce6:	bf00      	nop
 8008ce8:	20000bf4 	.word	0x20000bf4
 8008cec:	20008000 	.word	0x20008000
 8008cf0:	20000644 	.word	0x20000644
 8008cf4:	20000648 	.word	0x20000648
 8008cf8:	08012fbc 	.word	0x08012fbc
            macMsgData.Buffer = payload;
 8008cfc:	9612      	str	r6, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 8008cfe:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008d02:	4bb8      	ldr	r3, [pc, #736]	; (8008fe4 <ProcessRadioRxDone+0x598>)
 8008d04:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008d06:	23ff      	movs	r3, #255	; 0xff
 8008d08:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008d0c:	a812      	add	r0, sp, #72	; 0x48
 8008d0e:	f003 fb53 	bl	800c3b8 <LoRaMacParserData>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d142      	bne.n	8008d9c <ProcessRadioRxDone+0x350>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008d16:	4bb4      	ldr	r3, [pc, #720]	; (8008fe8 <ProcessRadioRxDone+0x59c>)
 8008d18:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d044      	beq.n	8008daa <ProcessRadioRxDone+0x35e>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008d20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d22:	4bb2      	ldr	r3, [pc, #712]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008d24:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8008d28:	a904      	add	r1, sp, #16
 8008d2a:	a812      	add	r0, sp, #72	; 0x48
 8008d2c:	f7ff f996 	bl	800805c <DetermineFrameType>
 8008d30:	4605      	mov	r5, r0
 8008d32:	2800      	cmp	r0, #0
 8008d34:	d164      	bne.n	8008e00 <ProcessRadioRxDone+0x3b4>
            downLinkCounter = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d066      	beq.n	8008e0e <ProcessRadioRxDone+0x3c2>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8008d40:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008d42:	2d01      	cmp	r5, #1
 8008d44:	d10a      	bne.n	8008d5c <ProcessRadioRxDone+0x310>
 8008d46:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	f040 808d 	bne.w	8008e6a <ProcessRadioRxDone+0x41e>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8008d50:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8008d54:	f013 0f60 	tst.w	r3, #96	; 0x60
 8008d58:	f040 8087 	bne.w	8008e6a <ProcessRadioRxDone+0x41e>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8008d5c:	ab07      	add	r3, sp, #28
 8008d5e:	9301      	str	r3, [sp, #4]
 8008d60:	f10d 031b 	add.w	r3, sp, #27
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	4ba0      	ldr	r3, [pc, #640]	; (8008fe8 <ProcessRadioRxDone+0x59c>)
 8008d68:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8008d6c:	aa12      	add	r2, sp, #72	; 0x48
 8008d6e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7ff fb3a 	bl	80083ec <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	f000 8082 	beq.w	8008e82 <ProcessRadioRxDone+0x436>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008d7e:	2807      	cmp	r0, #7
 8008d80:	d07a      	beq.n	8008e78 <ProcessRadioRxDone+0x42c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d82:	4b9a      	ldr	r3, [pc, #616]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008d8a:	9a07      	ldr	r2, [sp, #28]
 8008d8c:	4b97      	ldr	r3, [pc, #604]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008d8e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008d92:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 8008d96:	f7ff faeb 	bl	8008370 <PrepareRxDoneAbort>
                return;
 8008d9a:	e6b9      	b.n	8008b10 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d9c:	4b93      	ldr	r3, [pc, #588]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8008da4:	f7ff fae4 	bl	8008370 <PrepareRxDoneAbort>
                return;
 8008da8:	e6b2      	b.n	8008b10 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8008daa:	f002 fc42 	bl	800b632 <LoRaMacClassBIsPingExpected>
 8008dae:	b188      	cbz	r0, 8008dd4 <ProcessRadioRxDone+0x388>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008db0:	2000      	movs	r0, #0
 8008db2:	f002 fc33 	bl	800b61c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8008db6:	2000      	movs	r0, #0
 8008db8:	f002 fc35 	bl	800b626 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008dbc:	4b8b      	ldr	r3, [pc, #556]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008dc4:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8008dc8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008dcc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008dce:	f002 fc49 	bl	800b664 <LoRaMacClassBSetFPendingBit>
 8008dd2:	e7a5      	b.n	8008d20 <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008dd4:	f002 fc2f 	bl	800b636 <LoRaMacClassBIsMulticastExpected>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d0a1      	beq.n	8008d20 <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f002 fc1e 	bl	800b61e <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008de2:	2000      	movs	r0, #0
 8008de4:	f002 fc20 	bl	800b628 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008de8:	4b80      	ldr	r3, [pc, #512]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008dea:	2205      	movs	r2, #5
 8008dec:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008df0:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8008df4:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008df8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008dfa:	f002 fc33 	bl	800b664 <LoRaMacClassBSetFPendingBit>
 8008dfe:	e78f      	b.n	8008d20 <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008e00:	4b7a      	ldr	r3, [pc, #488]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8008e08:	f7ff fab2 	bl	8008370 <PrepareRxDoneAbort>
                return;
 8008e0c:	e680      	b.n	8008b10 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008e0e:	461e      	mov	r6, r3
 8008e10:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008e14:	4974      	ldr	r1, [pc, #464]	; (8008fe8 <ProcessRadioRxDone+0x59c>)
 8008e16:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8008e1a:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8008e1e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008e20:	428a      	cmp	r2, r1
 8008e22:	d002      	beq.n	8008e2a <ProcessRadioRxDone+0x3de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008e24:	3301      	adds	r3, #1
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	e788      	b.n	8008d3c <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008e2a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8008e2e:	486e      	ldr	r0, [pc, #440]	; (8008fe8 <ProcessRadioRxDone+0x59c>)
 8008e30:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008e34:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008e38:	2900      	cmp	r1, #0
 8008e3a:	d0f3      	beq.n	8008e24 <ProcessRadioRxDone+0x3d8>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008e3c:	2330      	movs	r3, #48	; 0x30
 8008e3e:	fb03 0306 	mla	r3, r3, r6, r0
 8008e42:	f893 60ea 	ldrb.w	r6, [r3, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008e46:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	9307      	str	r3, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008e4e:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d002      	beq.n	8008e5c <ProcessRadioRxDone+0x410>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008e56:	4691      	mov	r9, r2
                    multicast = 1;
 8008e58:	2501      	movs	r5, #1
 8008e5a:	e772      	b.n	8008d42 <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008e5c:	4b63      	ldr	r3, [pc, #396]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008e5e:	2103      	movs	r1, #3
 8008e60:	f883 148f 	strb.w	r1, [r3, #1167]	; 0x48f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008e64:	4691      	mov	r9, r2
                    multicast = 1;
 8008e66:	2501      	movs	r5, #1
 8008e68:	e76b      	b.n	8008d42 <ProcessRadioRxDone+0x2f6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008e6a:	4b60      	ldr	r3, [pc, #384]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8008e72:	f7ff fa7d 	bl	8008370 <PrepareRxDoneAbort>
                return;
 8008e76:	e64b      	b.n	8008b10 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008e78:	4b5c      	ldr	r3, [pc, #368]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008e7a:	2208      	movs	r2, #8
 8008e7c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8008e80:	e783      	b.n	8008d8a <ProcessRadioRxDone+0x33e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008e82:	ab12      	add	r3, sp, #72	; 0x48
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	9b07      	ldr	r3, [sp, #28]
 8008e88:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f003 f91c 	bl	800c0cc <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d14a      	bne.n	8008f2e <ProcessRadioRxDone+0x4e2>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008e98:	4b54      	ldr	r3, [pc, #336]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	f883 1421 	strb.w	r1, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8008ea0:	f883 5422 	strb.w	r5, [r3, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8008ea4:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8008ea8:	f883 142c 	strb.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008eac:	9a07      	ldr	r2, [sp, #28]
 8008eae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008eb2:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008eb6:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8008eba:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008ebe:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008ec2:	f883 1441 	strb.w	r1, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008ec6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008eca:	f893 048f 	ldrb.w	r0, [r3, #1167]	; 0x48f
 8008ece:	2801      	cmp	r0, #1
 8008ed0:	d93b      	bls.n	8008f4a <ProcessRadioRxDone+0x4fe>
            if( multicast == 1 )
 8008ed2:	2d01      	cmp	r5, #1
 8008ed4:	d03f      	beq.n	8008f56 <ProcessRadioRxDone+0x50a>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008ed6:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008eda:	2ca0      	cmp	r4, #160	; 0xa0
 8008edc:	d040      	beq.n	8008f60 <ProcessRadioRxDone+0x514>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	4a41      	ldr	r2, [pc, #260]	; (8008fe8 <ProcessRadioRxDone+0x59c>)
 8008ee2:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008ee6:	4a41      	ldr	r2, [pc, #260]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008ee8:	f882 3420 	strb.w	r3, [r2, #1056]	; 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8008eec:	4b3e      	ldr	r3, [pc, #248]	; (8008fe8 <ProcessRadioRxDone+0x59c>)
 8008eee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ef2:	b923      	cbnz	r3, 8008efe <ProcessRadioRxDone+0x4b2>
 8008ef4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8008ef8:	f013 0f10 	tst.w	r3, #16
 8008efc:	d007      	beq.n	8008f0e <ProcessRadioRxDone+0x4c2>
 8008efe:	4b3a      	ldr	r3, [pc, #232]	; (8008fe8 <ProcessRadioRxDone+0x59c>)
 8008f00:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008f04:	b91b      	cbnz	r3, 8008f0e <ProcessRadioRxDone+0x4c2>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8008f06:	4b39      	ldr	r3, [pc, #228]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008f0e:	4b37      	ldr	r3, [pc, #220]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008f10:	f893 2440 	ldrb.w	r2, [r3, #1088]	; 0x440
 8008f14:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8008f18:	f7ff fa93 	bl	8008442 <RemoveMacCommands>
            switch( fType )
 8008f1c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	f200 8099 	bhi.w	8009058 <ProcessRadioRxDone+0x60c>
 8008f26:	e8df f003 	tbb	[pc, r3]
 8008f2a:	6536      	.short	0x6536
 8008f2c:	8777      	.short	0x8777
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8008f2e:	2802      	cmp	r0, #2
 8008f30:	d006      	beq.n	8008f40 <ProcessRadioRxDone+0x4f4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008f32:	4b2e      	ldr	r3, [pc, #184]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008f34:	220b      	movs	r2, #11
 8008f36:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8008f3a:	f7ff fa19 	bl	8008370 <PrepareRxDoneAbort>
                return;
 8008f3e:	e5e7      	b.n	8008b10 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8008f40:	4b2a      	ldr	r3, [pc, #168]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008f42:	220a      	movs	r2, #10
 8008f44:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8008f48:	e7f7      	b.n	8008f3a <ProcessRadioRxDone+0x4ee>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8008f4a:	4b27      	ldr	r3, [pc, #156]	; (8008fe8 <ProcessRadioRxDone+0x59c>)
 8008f4c:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
 8008f54:	e7bd      	b.n	8008ed2 <ProcessRadioRxDone+0x486>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8008f56:	4b25      	ldr	r3, [pc, #148]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008f58:	2202      	movs	r2, #2
 8008f5a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8008f5e:	e7c5      	b.n	8008eec <ProcessRadioRxDone+0x4a0>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8008f60:	4b21      	ldr	r3, [pc, #132]	; (8008fe8 <ProcessRadioRxDone+0x59c>)
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008f68:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8008f6c:	b913      	cbnz	r3, 8008f74 <ProcessRadioRxDone+0x528>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8008f6e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008f70:	4b1d      	ldr	r3, [pc, #116]	; (8008fe8 <ProcessRadioRxDone+0x59c>)
 8008f72:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008f74:	4b1d      	ldr	r3, [pc, #116]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8008f7c:	4290      	cmp	r0, r2
 8008f7e:	d9b5      	bls.n	8008eec <ProcessRadioRxDone+0x4a0>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8008f80:	4b19      	ldr	r3, [pc, #100]	; (8008fe8 <ProcessRadioRxDone+0x59c>)
 8008f82:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008f86:	4b19      	ldr	r3, [pc, #100]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008f88:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8008f8c:	4a18      	ldr	r2, [pc, #96]	; (8008ff0 <ProcessRadioRxDone+0x5a4>)
 8008f8e:	6812      	ldr	r2, [r2, #0]
 8008f90:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 8008f94:	e7aa      	b.n	8008eec <ProcessRadioRxDone+0x4a0>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008f96:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8008f9a:	4c14      	ldr	r4, [pc, #80]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008f9c:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	f002 020f 	and.w	r2, r2, #15
 8008fa8:	2100      	movs	r1, #0
 8008faa:	a816      	add	r0, sp, #88	; 0x58
 8008fac:	f7ff fa58 	bl	8008460 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008fb0:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8008fb4:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008fb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fba:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008fbe:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8008fc2:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8008fcc:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8008fd0:	2be0      	cmp	r3, #224	; 0xe0
 8008fd2:	d048      	beq.n	8009066 <ProcessRadioRxDone+0x61a>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008fd4:	4a05      	ldr	r2, [pc, #20]	; (8008fec <ProcessRadioRxDone+0x5a0>)
 8008fd6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8008fda:	f043 0302 	orr.w	r3, r3, #2
 8008fde:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 8008fe2:	e06a      	b.n	80090ba <ProcessRadioRxDone+0x66e>
 8008fe4:	20000880 	.word	0x20000880
 8008fe8:	20008000 	.word	0x20008000
 8008fec:	20000648 	.word	0x20000648
 8008ff0:	20000bf4 	.word	0x20000bf4
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008ff4:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8008ff8:	4c44      	ldr	r4, [pc, #272]	; (800910c <ProcessRadioRxDone+0x6c0>)
 8008ffa:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	463b      	mov	r3, r7
 8009002:	f002 020f 	and.w	r2, r2, #15
 8009006:	2100      	movs	r1, #0
 8009008:	a816      	add	r0, sp, #88	; 0x58
 800900a:	f7ff fa29 	bl	8008460 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800900e:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8009012:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 8009016:	e7d9      	b.n	8008fcc <ProcessRadioRxDone+0x580>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8009018:	4c3c      	ldr	r4, [pc, #240]	; (800910c <ProcessRadioRxDone+0x6c0>)
 800901a:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	463b      	mov	r3, r7
 8009022:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8009026:	2100      	movs	r1, #0
 8009028:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800902a:	f7ff fa19 	bl	8008460 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800902e:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8009032:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 8009036:	e7c9      	b.n	8008fcc <ProcessRadioRxDone+0x580>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009038:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800903c:	4b33      	ldr	r3, [pc, #204]	; (800910c <ProcessRadioRxDone+0x6c0>)
 800903e:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009042:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009044:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009048:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800904c:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8009050:	2201      	movs	r2, #1
 8009052:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8009056:	e7b9      	b.n	8008fcc <ProcessRadioRxDone+0x580>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009058:	4b2c      	ldr	r3, [pc, #176]	; (800910c <ProcessRadioRxDone+0x6c0>)
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 8009060:	f7ff f986 	bl	8008370 <PrepareRxDoneAbort>
                    break;
 8009064:	e7b2      	b.n	8008fcc <ProcessRadioRxDone+0x580>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8009066:	4a2a      	ldr	r2, [pc, #168]	; (8009110 <ProcessRadioRxDone+0x6c4>)
 8009068:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 800906c:	2a00      	cmp	r2, #0
 800906e:	d1b1      	bne.n	8008fd4 <ProcessRadioRxDone+0x588>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009070:	4a26      	ldr	r2, [pc, #152]	; (800910c <ProcessRadioRxDone+0x6c0>)
 8009072:	f882 3423 	strb.w	r3, [r2, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8009076:	2300      	movs	r3, #0
 8009078:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800907c:	f882 342c 	strb.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8009080:	f882 342d 	strb.w	r3, [r2, #1069]	; 0x42d
 8009084:	e7a6      	b.n	8008fd4 <ProcessRadioRxDone+0x588>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009086:	1e6a      	subs	r2, r5, #1
 8009088:	4c20      	ldr	r4, [pc, #128]	; (800910c <ProcessRadioRxDone+0x6c0>)
 800908a:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800908e:	b292      	uxth	r2, r2
 8009090:	1c71      	adds	r1, r6, #1
 8009092:	4638      	mov	r0, r7
 8009094:	f006 fb87 	bl	800f7a6 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009098:	2303      	movs	r3, #3
 800909a:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80090a4:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80090a8:	3d01      	subs	r5, #1
 80090aa:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80090ae:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 80090b2:	f043 0302 	orr.w	r3, r3, #2
 80090b6:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80090ba:	4b14      	ldr	r3, [pc, #80]	; (800910c <ProcessRadioRxDone+0x6c0>)
 80090bc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d915      	bls.n	80090f0 <ProcessRadioRxDone+0x6a4>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 80090c4:	4b11      	ldr	r3, [pc, #68]	; (800910c <ProcessRadioRxDone+0x6c0>)
 80090c6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d006      	beq.n	80090dc <ProcessRadioRxDone+0x690>
        MacCtx.MacFlags.Bits.MacDone = 1;
 80090ce:	4a0f      	ldr	r2, [pc, #60]	; (800910c <ProcessRadioRxDone+0x6c0>)
 80090d0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80090d4:	f043 0310 	orr.w	r3, r3, #16
 80090d8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 80090dc:	f7fe ff32 	bl	8007f44 <UpdateRxSlotIdleState>
 80090e0:	e516      	b.n	8008b10 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80090e2:	4b0a      	ldr	r3, [pc, #40]	; (800910c <ProcessRadioRxDone+0x6c0>)
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 80090ea:	f7ff f941 	bl	8008370 <PrepareRxDoneAbort>
            break;
 80090ee:	e7e4      	b.n	80090ba <ProcessRadioRxDone+0x66e>
        if( MacCtx.NodeAckRequested == true )
 80090f0:	4b06      	ldr	r3, [pc, #24]	; (800910c <ProcessRadioRxDone+0x6c0>)
 80090f2:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0e4      	beq.n	80090c4 <ProcessRadioRxDone+0x678>
            if( MacCtx.McpsConfirm.AckReceived == true )
 80090fa:	4b04      	ldr	r3, [pc, #16]	; (800910c <ProcessRadioRxDone+0x6c0>)
 80090fc:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0df      	beq.n	80090c4 <ProcessRadioRxDone+0x678>
                OnRetransmitTimeoutTimerEvent( NULL );
 8009104:	2000      	movs	r0, #0
 8009106:	f7ff f921 	bl	800834c <OnRetransmitTimeoutTimerEvent>
 800910a:	e7db      	b.n	80090c4 <ProcessRadioRxDone+0x678>
 800910c:	20000648 	.word	0x20000648
 8009110:	20008000 	.word	0x20008000

08009114 <ProcessRadioTxTimeout>:
{
 8009114:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009116:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <ProcessRadioTxTimeout+0x40>)
 8009118:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800911c:	2b02      	cmp	r3, #2
 800911e:	d002      	beq.n	8009126 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8009120:	4b0d      	ldr	r3, [pc, #52]	; (8009158 <ProcessRadioTxTimeout+0x44>)
 8009122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009124:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009126:	f7fe ff0d 	bl	8007f44 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800912a:	4c0c      	ldr	r4, [pc, #48]	; (800915c <ProcessRadioTxTimeout+0x48>)
 800912c:	2002      	movs	r0, #2
 800912e:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009132:	f002 fcd9 	bl	800bae8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009136:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800913a:	b113      	cbz	r3, 8009142 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800913c:	2201      	movs	r2, #1
 800913e:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009142:	4a06      	ldr	r2, [pc, #24]	; (800915c <ProcessRadioTxTimeout+0x48>)
 8009144:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8009148:	f043 0310 	orr.w	r3, r3, #16
 800914c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 8009150:	bd10      	pop	{r4, pc}
 8009152:	bf00      	nop
 8009154:	20008000 	.word	0x20008000
 8009158:	08012fbc 	.word	0x08012fbc
 800915c:	20000648 	.word	0x20000648

08009160 <CheckForClassBCollision>:
{
 8009160:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009162:	f002 fa64 	bl	800b62e <LoRaMacClassBIsBeaconExpected>
 8009166:	b978      	cbnz	r0, 8009188 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009168:	4b09      	ldr	r3, [pc, #36]	; (8009190 <CheckForClassBCollision+0x30>)
 800916a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800916e:	2b01      	cmp	r3, #1
 8009170:	d001      	beq.n	8009176 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8009172:	2000      	movs	r0, #0
}
 8009174:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009176:	f002 fa5c 	bl	800b632 <LoRaMacClassBIsPingExpected>
 800917a:	b938      	cbnz	r0, 800918c <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800917c:	f002 fa5b 	bl	800b636 <LoRaMacClassBIsMulticastExpected>
 8009180:	2800      	cmp	r0, #0
 8009182:	d0f7      	beq.n	8009174 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009184:	200f      	movs	r0, #15
 8009186:	e7f5      	b.n	8009174 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8009188:	200e      	movs	r0, #14
 800918a:	e7f3      	b.n	8009174 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800918c:	200f      	movs	r0, #15
 800918e:	e7f1      	b.n	8009174 <CheckForClassBCollision+0x14>
 8009190:	20008000 	.word	0x20008000

08009194 <HandleRadioRxErrorTimeout>:
{
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	4605      	mov	r5, r0
 8009198:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800919a:	4b34      	ldr	r3, [pc, #208]	; (800926c <HandleRadioRxErrorTimeout+0xd8>)
 800919c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d002      	beq.n	80091aa <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 80091a4:	4b32      	ldr	r3, [pc, #200]	; (8009270 <HandleRadioRxErrorTimeout+0xdc>)
 80091a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a8:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80091aa:	f002 fa40 	bl	800b62e <LoRaMacClassBIsBeaconExpected>
 80091ae:	4606      	mov	r6, r0
 80091b0:	bb50      	cbnz	r0, 8009208 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80091b2:	4b2e      	ldr	r3, [pc, #184]	; (800926c <HandleRadioRxErrorTimeout+0xd8>)
 80091b4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d02c      	beq.n	8009216 <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 80091bc:	2e00      	cmp	r6, #0
 80091be:	d152      	bne.n	8009266 <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80091c0:	4b2c      	ldr	r3, [pc, #176]	; (8009274 <HandleRadioRxErrorTimeout+0xe0>)
 80091c2:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d13c      	bne.n	8009244 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 80091ca:	4b2a      	ldr	r3, [pc, #168]	; (8009274 <HandleRadioRxErrorTimeout+0xe0>)
 80091cc:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 80091d0:	b113      	cbz	r3, 80091d8 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80091d2:	4b28      	ldr	r3, [pc, #160]	; (8009274 <HandleRadioRxErrorTimeout+0xe0>)
 80091d4:	f883 5441 	strb.w	r5, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80091d8:	4628      	mov	r0, r5
 80091da:	f002 fc85 	bl	800bae8 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80091de:	4b23      	ldr	r3, [pc, #140]	; (800926c <HandleRadioRxErrorTimeout+0xd8>)
 80091e0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80091e2:	f008 fcdd 	bl	8011ba0 <UTIL_TIMER_GetElapsedTime>
 80091e6:	4b23      	ldr	r3, [pc, #140]	; (8009274 <HandleRadioRxErrorTimeout+0xe0>)
 80091e8:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80091ec:	4298      	cmp	r0, r3
 80091ee:	d33a      	bcc.n	8009266 <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80091f0:	4c20      	ldr	r4, [pc, #128]	; (8009274 <HandleRadioRxErrorTimeout+0xe0>)
 80091f2:	f504 7066 	add.w	r0, r4, #920	; 0x398
 80091f6:	f008 fd09 	bl	8011c0c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80091fa:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 80091fe:	f043 0310 	orr.w	r3, r3, #16
 8009202:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
 8009206:	e02e      	b.n	8009266 <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009208:	2002      	movs	r0, #2
 800920a:	f002 fa06 	bl	800b61a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800920e:	2000      	movs	r0, #0
 8009210:	f002 fa08 	bl	800b624 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009214:	e7cd      	b.n	80091b2 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009216:	f002 fa0c 	bl	800b632 <LoRaMacClassBIsPingExpected>
 800921a:	4607      	mov	r7, r0
 800921c:	b950      	cbnz	r0, 8009234 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800921e:	f002 fa0a 	bl	800b636 <LoRaMacClassBIsMulticastExpected>
 8009222:	2800      	cmp	r0, #0
 8009224:	d0ca      	beq.n	80091bc <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009226:	2000      	movs	r0, #0
 8009228:	f002 f9f9 	bl	800b61e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800922c:	2000      	movs	r0, #0
 800922e:	f002 f9fb 	bl	800b628 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8009232:	e018      	b.n	8009266 <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009234:	2000      	movs	r0, #0
 8009236:	f002 f9f1 	bl	800b61c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800923a:	2000      	movs	r0, #0
 800923c:	f002 f9f3 	bl	800b626 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8009240:	463e      	mov	r6, r7
 8009242:	e7ec      	b.n	800921e <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 8009244:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <HandleRadioRxErrorTimeout+0xe0>)
 8009246:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800924a:	b113      	cbz	r3, 8009252 <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800924c:	4b09      	ldr	r3, [pc, #36]	; (8009274 <HandleRadioRxErrorTimeout+0xe0>)
 800924e:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8009252:	4620      	mov	r0, r4
 8009254:	f002 fc48 	bl	800bae8 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 8009258:	4a06      	ldr	r2, [pc, #24]	; (8009274 <HandleRadioRxErrorTimeout+0xe0>)
 800925a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800925e:	f043 0310 	orr.w	r3, r3, #16
 8009262:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 8009266:	f7fe fe6d 	bl	8007f44 <UpdateRxSlotIdleState>
}
 800926a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800926c:	20008000 	.word	0x20008000
 8009270:	08012fbc 	.word	0x08012fbc
 8009274:	20000648 	.word	0x20000648

08009278 <ProcessRadioRxError>:
{
 8009278:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800927a:	2106      	movs	r1, #6
 800927c:	2005      	movs	r0, #5
 800927e:	f7ff ff89 	bl	8009194 <HandleRadioRxErrorTimeout>
}
 8009282:	bd08      	pop	{r3, pc}

08009284 <ProcessRadioRxTimeout>:
{
 8009284:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009286:	2104      	movs	r1, #4
 8009288:	2003      	movs	r0, #3
 800928a:	f7ff ff83 	bl	8009194 <HandleRadioRxErrorTimeout>
}
 800928e:	bd08      	pop	{r3, pc}

08009290 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009290:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009294:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8009296:	4a14      	ldr	r2, [pc, #80]	; (80092e8 <LoRaMacHandleIrqEvents+0x58>)
 8009298:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800929a:	2000      	movs	r0, #0
 800929c:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800929e:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 80092a2:	b303      	cbz	r3, 80092e6 <LoRaMacHandleIrqEvents+0x56>
{
 80092a4:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 80092a6:	b2dc      	uxtb	r4, r3
 80092a8:	f013 0f20 	tst.w	r3, #32
 80092ac:	d10c      	bne.n	80092c8 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 80092ae:	f014 0f10 	tst.w	r4, #16
 80092b2:	d10c      	bne.n	80092ce <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 80092b4:	f014 0f08 	tst.w	r4, #8
 80092b8:	d10c      	bne.n	80092d4 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 80092ba:	f014 0f04 	tst.w	r4, #4
 80092be:	d10c      	bne.n	80092da <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 80092c0:	f014 0f02 	tst.w	r4, #2
 80092c4:	d10c      	bne.n	80092e0 <LoRaMacHandleIrqEvents+0x50>
}
 80092c6:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 80092c8:	f7fe ffbe 	bl	8008248 <ProcessRadioTxDone>
 80092cc:	e7ef      	b.n	80092ae <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 80092ce:	f7ff fbbd 	bl	8008a4c <ProcessRadioRxDone>
 80092d2:	e7ef      	b.n	80092b4 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 80092d4:	f7ff ff1e 	bl	8009114 <ProcessRadioTxTimeout>
 80092d8:	e7ef      	b.n	80092ba <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 80092da:	f7ff ffcd 	bl	8009278 <ProcessRadioRxError>
 80092de:	e7ef      	b.n	80092c0 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 80092e0:	f7ff ffd0 	bl	8009284 <ProcessRadioRxTimeout>
}
 80092e4:	e7ef      	b.n	80092c6 <LoRaMacHandleIrqEvents+0x36>
 80092e6:	4770      	bx	lr
 80092e8:	20000644 	.word	0x20000644

080092ec <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 80092ec:	b909      	cbnz	r1, 80092f2 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 80092ee:	2000      	movs	r0, #0
}
 80092f0:	4770      	bx	lr
{
 80092f2:	b510      	push	{r4, lr}
 80092f4:	4604      	mov	r4, r0
 80092f6:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 80092f8:	f008 fc52 	bl	8011ba0 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 80092fc:	42a0      	cmp	r0, r4
 80092fe:	d801      	bhi.n	8009304 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 8009300:	2000      	movs	r0, #0
}
 8009302:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 8009304:	4b02      	ldr	r3, [pc, #8]	; (8009310 <LoRaMacHandleResponseTimeout+0x24>)
 8009306:	2200      	movs	r2, #0
 8009308:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800930c:	2001      	movs	r0, #1
 800930e:	e7f8      	b.n	8009302 <LoRaMacHandleResponseTimeout+0x16>
 8009310:	20008000 	.word	0x20008000

08009314 <LoRaMacHandleMlmeRequest>:
{
 8009314:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009316:	4b14      	ldr	r3, [pc, #80]	; (8009368 <LoRaMacHandleMlmeRequest+0x54>)
 8009318:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800931c:	f013 0f04 	tst.w	r3, #4
 8009320:	d100      	bne.n	8009324 <LoRaMacHandleMlmeRequest+0x10>
}
 8009322:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009324:	2001      	movs	r0, #1
 8009326:	f002 fbfd 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 800932a:	b178      	cbz	r0, 800934c <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800932c:	2001      	movs	r0, #1
 800932e:	f002 fbc3 	bl	800bab8 <LoRaMacConfirmQueueGetStatus>
 8009332:	b918      	cbnz	r0, 800933c <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8009334:	4b0c      	ldr	r3, [pc, #48]	; (8009368 <LoRaMacHandleMlmeRequest+0x54>)
 8009336:	2200      	movs	r2, #0
 8009338:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800933c:	4a0a      	ldr	r2, [pc, #40]	; (8009368 <LoRaMacHandleMlmeRequest+0x54>)
 800933e:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009342:	f023 0302 	bic.w	r3, r3, #2
 8009346:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800934a:	e7ea      	b.n	8009322 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800934c:	2006      	movs	r0, #6
 800934e:	f002 fbe9 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 8009352:	2800      	cmp	r0, #0
 8009354:	d0e5      	beq.n	8009322 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009356:	4a04      	ldr	r2, [pc, #16]	; (8009368 <LoRaMacHandleMlmeRequest+0x54>)
 8009358:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800935c:	f023 0302 	bic.w	r3, r3, #2
 8009360:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8009364:	e7dd      	b.n	8009322 <LoRaMacHandleMlmeRequest+0xe>
 8009366:	bf00      	nop
 8009368:	20000648 	.word	0x20000648

0800936c <SerializeTxFrame>:
{
 800936c:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800936e:	4b0f      	ldr	r3, [pc, #60]	; (80093ac <SerializeTxFrame+0x40>)
 8009370:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009374:	b11b      	cbz	r3, 800937e <SerializeTxFrame+0x12>
 8009376:	2b04      	cmp	r3, #4
 8009378:	d00a      	beq.n	8009390 <SerializeTxFrame+0x24>
 800937a:	2003      	movs	r0, #3
}
 800937c:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800937e:	480c      	ldr	r0, [pc, #48]	; (80093b0 <SerializeTxFrame+0x44>)
 8009380:	f003 f879 	bl	800c476 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009384:	b968      	cbnz	r0, 80093a2 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009386:	4b09      	ldr	r3, [pc, #36]	; (80093ac <SerializeTxFrame+0x40>)
 8009388:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800938c:	801a      	strh	r2, [r3, #0]
            break;
 800938e:	e7f5      	b.n	800937c <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8009390:	4807      	ldr	r0, [pc, #28]	; (80093b0 <SerializeTxFrame+0x44>)
 8009392:	f003 f8a6 	bl	800c4e2 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009396:	b930      	cbnz	r0, 80093a6 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009398:	4b04      	ldr	r3, [pc, #16]	; (80093ac <SerializeTxFrame+0x40>)
 800939a:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800939e:	801a      	strh	r2, [r3, #0]
            break;
 80093a0:	e7ec      	b.n	800937c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80093a2:	2011      	movs	r0, #17
 80093a4:	e7ea      	b.n	800937c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80093a6:	2011      	movs	r0, #17
 80093a8:	e7e8      	b.n	800937c <SerializeTxFrame+0x10>
 80093aa:	bf00      	nop
 80093ac:	20000648 	.word	0x20000648
 80093b0:	20000750 	.word	0x20000750

080093b4 <ComputeRxWindowParameters>:
{
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80093b8:	4c1e      	ldr	r4, [pc, #120]	; (8009434 <ComputeRxWindowParameters+0x80>)
 80093ba:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80093be:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 80093c2:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 80093c6:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 80093ca:	4630      	mov	r0, r6
 80093cc:	f003 fa39 	bl	800c842 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80093d0:	4d19      	ldr	r5, [pc, #100]	; (8009438 <ComputeRxWindowParameters+0x84>)
 80093d2:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80093da:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80093de:	b241      	sxtb	r1, r0
 80093e0:	4630      	mov	r0, r6
 80093e2:	f003 f97a 	bl	800c6da <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80093e6:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80093ee:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80093f2:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 80093f6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80093fa:	f003 f96e 	bl	800c6da <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80093fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009400:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 8009404:	440b      	add	r3, r1
 8009406:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800940a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800940c:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 8009410:	4413      	add	r3, r2
 8009412:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8009416:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800941a:	2b04      	cmp	r3, #4
 800941c:	d007      	beq.n	800942e <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800941e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009420:	4419      	add	r1, r3
 8009422:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009426:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009428:	440a      	add	r2, r1
 800942a:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800942e:	b002      	add	sp, #8
 8009430:	bd70      	pop	{r4, r5, r6, pc}
 8009432:	bf00      	nop
 8009434:	20008000 	.word	0x20008000
 8009438:	20000648 	.word	0x20000648

0800943c <VerifyTxFrame>:
{
 800943c:	b510      	push	{r4, lr}
 800943e:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009444:	4b0d      	ldr	r3, [pc, #52]	; (800947c <VerifyTxFrame+0x40>)
 8009446:	f893 4130 	ldrb.w	r4, [r3, #304]	; 0x130
 800944a:	b914      	cbnz	r4, 8009452 <VerifyTxFrame+0x16>
}
 800944c:	4620      	mov	r0, r4
 800944e:	b002      	add	sp, #8
 8009450:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009452:	a801      	add	r0, sp, #4
 8009454:	f002 fa2c 	bl	800b8b0 <LoRaMacCommandsGetSizeSerializedCmds>
 8009458:	4604      	mov	r4, r0
 800945a:	b968      	cbnz	r0, 8009478 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800945c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009460:	4b06      	ldr	r3, [pc, #24]	; (800947c <VerifyTxFrame+0x40>)
 8009462:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8009466:	4b06      	ldr	r3, [pc, #24]	; (8009480 <VerifyTxFrame+0x44>)
 8009468:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800946c:	f7fe feda 	bl	8008224 <ValidatePayloadLength>
 8009470:	2800      	cmp	r0, #0
 8009472:	d1eb      	bne.n	800944c <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8009474:	2408      	movs	r4, #8
 8009476:	e7e9      	b.n	800944c <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009478:	2413      	movs	r4, #19
 800947a:	e7e7      	b.n	800944c <VerifyTxFrame+0x10>
 800947c:	20008000 	.word	0x20008000
 8009480:	20000648 	.word	0x20000648

08009484 <SecureFrame>:
{
 8009484:	b530      	push	{r4, r5, lr}
 8009486:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 8009488:	2300      	movs	r3, #0
 800948a:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800948c:	4b18      	ldr	r3, [pc, #96]	; (80094f0 <SecureFrame+0x6c>)
 800948e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009492:	b133      	cbz	r3, 80094a2 <SecureFrame+0x1e>
 8009494:	4605      	mov	r5, r0
 8009496:	460c      	mov	r4, r1
 8009498:	2b04      	cmp	r3, #4
 800949a:	d00b      	beq.n	80094b4 <SecureFrame+0x30>
 800949c:	2003      	movs	r0, #3
}
 800949e:	b003      	add	sp, #12
 80094a0:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80094a2:	4814      	ldr	r0, [pc, #80]	; (80094f4 <SecureFrame+0x70>)
 80094a4:	f002 fda8 	bl	800bff8 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80094a8:	b9d8      	cbnz	r0, 80094e2 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80094aa:	4b11      	ldr	r3, [pc, #68]	; (80094f0 <SecureFrame+0x6c>)
 80094ac:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80094b0:	801a      	strh	r2, [r3, #0]
            break;
 80094b2:	e7f4      	b.n	800949e <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80094b4:	a801      	add	r0, sp, #4
 80094b6:	f002 fd53 	bl	800bf60 <LoRaMacCryptoGetFCntUp>
 80094ba:	b9a0      	cbnz	r0, 80094e6 <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80094bc:	4b0c      	ldr	r3, [pc, #48]	; (80094f0 <SecureFrame+0x6c>)
 80094be:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80094c2:	b113      	cbz	r3, 80094ca <SecureFrame+0x46>
                fCntUp -= 1;
 80094c4:	9b01      	ldr	r3, [sp, #4]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80094ca:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <SecureFrame+0x70>)
 80094cc:	4622      	mov	r2, r4
 80094ce:	4629      	mov	r1, r5
 80094d0:	9801      	ldr	r0, [sp, #4]
 80094d2:	f002 fdb7 	bl	800c044 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80094d6:	b940      	cbnz	r0, 80094ea <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80094d8:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <SecureFrame+0x6c>)
 80094da:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80094de:	801a      	strh	r2, [r3, #0]
            break;
 80094e0:	e7dd      	b.n	800949e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80094e2:	2011      	movs	r0, #17
 80094e4:	e7db      	b.n	800949e <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80094e6:	2012      	movs	r0, #18
 80094e8:	e7d9      	b.n	800949e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80094ea:	2011      	movs	r0, #17
 80094ec:	e7d7      	b.n	800949e <SecureFrame+0x1a>
 80094ee:	bf00      	nop
 80094f0:	20000648 	.word	0x20000648
 80094f4:	20000750 	.word	0x20000750

080094f8 <SendFrameOnChannel>:
{
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	4606      	mov	r6, r0
    int8_t txPower = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 8009504:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009508:	4d36      	ldr	r5, [pc, #216]	; (80095e4 <SendFrameOnChannel+0xec>)
 800950a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800950e:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009512:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 8009516:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800951a:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800951e:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009520:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8009524:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009526:	4c30      	ldr	r4, [pc, #192]	; (80095e8 <SendFrameOnChannel+0xf0>)
 8009528:	8823      	ldrh	r3, [r4, #0]
 800952a:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800952e:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
 8009532:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009536:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 800953a:	f10d 0207 	add.w	r2, sp, #7
 800953e:	a902      	add	r1, sp, #8
 8009540:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 8009544:	f003 f8ed 	bl	800c722 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800954e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8009552:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8009556:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800955a:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800955e:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009562:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 8009566:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800956a:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800956e:	f002 f864 	bl	800b63a <LoRaMacClassBIsBeaconModeActive>
 8009572:	bb60      	cbnz	r0, 80095ce <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009574:	4b1b      	ldr	r3, [pc, #108]	; (80095e4 <SendFrameOnChannel+0xec>)
 8009576:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800957a:	2b01      	cmp	r3, #1
 800957c:	d02f      	beq.n	80095de <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800957e:	f002 f85f 	bl	800b640 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8009582:	4b18      	ldr	r3, [pc, #96]	; (80095e4 <SendFrameOnChannel+0xec>)
 8009584:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8009588:	4b17      	ldr	r3, [pc, #92]	; (80095e8 <SendFrameOnChannel+0xf0>)
 800958a:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
 800958e:	b2c0      	uxtb	r0, r0
 8009590:	f7ff ff78 	bl	8009484 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 8009594:	4604      	mov	r4, r0
 8009596:	b9b8      	cbnz	r0, 80095c8 <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009598:	4813      	ldr	r0, [pc, #76]	; (80095e8 <SendFrameOnChannel+0xf0>)
 800959a:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800959e:	f043 0302 	orr.w	r3, r3, #2
 80095a2:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 80095a6:	f890 3418 	ldrb.w	r3, [r0, #1048]	; 0x418
 80095aa:	3301      	adds	r3, #1
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	f880 3418 	strb.w	r3, [r0, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80095b2:	f880 3445 	strb.w	r3, [r0, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80095bc:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <SendFrameOnChannel+0xf4>)
 80095be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c0:	f830 1b02 	ldrh.w	r1, [r0], #2
 80095c4:	b2c9      	uxtb	r1, r1
 80095c6:	4798      	blx	r3
}
 80095c8:	4620      	mov	r0, r4
 80095ca:	b006      	add	sp, #24
 80095cc:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80095ce:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 80095d2:	f002 f844 	bl	800b65e <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d0cc      	beq.n	8009574 <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80095da:	2410      	movs	r4, #16
 80095dc:	e7f4      	b.n	80095c8 <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 80095de:	f002 f840 	bl	800b662 <LoRaMacClassBStopRxSlots>
 80095e2:	e7cc      	b.n	800957e <SendFrameOnChannel+0x86>
 80095e4:	20008000 	.word	0x20008000
 80095e8:	20000648 	.word	0x20000648
 80095ec:	08012fbc 	.word	0x08012fbc

080095f0 <ScheduleTx>:
{
 80095f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f4:	b08c      	sub	sp, #48	; 0x30
 80095f6:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 80095f8:	f7ff fdb2 	bl	8009160 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 80095fc:	4604      	mov	r4, r0
 80095fe:	b118      	cbz	r0, 8009608 <ScheduleTx+0x18>
}
 8009600:	4620      	mov	r0, r4
 8009602:	b00c      	add	sp, #48	; 0x30
 8009604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 8009608:	f7fe fd00 	bl	800800c <CalculateBackOff>
    status = SerializeTxFrame( );
 800960c:	f7ff feae 	bl	800936c <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009610:	4604      	mov	r4, r0
 8009612:	2800      	cmp	r0, #0
 8009614:	d1f4      	bne.n	8009600 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8009616:	4e36      	ldr	r6, [pc, #216]	; (80096f0 <ScheduleTx+0x100>)
 8009618:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800961a:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800961c:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8009620:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8009624:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8009628:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800962c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009630:	4640      	mov	r0, r8
 8009632:	f008 fa1f 	bl	8011a74 <SysTimeGetMcuTime>
 8009636:	af02      	add	r7, sp, #8
 8009638:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 8009642:	e898 0006 	ldmia.w	r8, {r1, r2}
 8009646:	4638      	mov	r0, r7
 8009648:	f008 f9b1 	bl	80119ae <SysTimeSub>
 800964c:	ab07      	add	r3, sp, #28
 800964e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009652:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8009656:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009658:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800965a:	2300      	movs	r3, #0
 800965c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 8009660:	2301      	movs	r3, #1
 8009662:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8009666:	4b23      	ldr	r3, [pc, #140]	; (80096f4 <ScheduleTx+0x104>)
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800966e:	f896 3130 	ldrb.w	r3, [r6, #304]	; 0x130
 8009672:	b92b      	cbnz	r3, 8009680 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8009674:	2301      	movs	r3, #1
 8009676:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800967a:	2300      	movs	r3, #0
 800967c:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8009680:	4a1c      	ldr	r2, [pc, #112]	; (80096f4 <ScheduleTx+0x104>)
 8009682:	481b      	ldr	r0, [pc, #108]	; (80096f0 <ScheduleTx+0x100>)
 8009684:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	f202 4394 	addw	r3, r2, #1172	; 0x494
 800968e:	f202 421b 	addw	r2, r2, #1051	; 0x41b
 8009692:	a904      	add	r1, sp, #16
 8009694:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8009698:	f003 f8be 	bl	800c818 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800969c:	b1c0      	cbz	r0, 80096d0 <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800969e:	280b      	cmp	r0, #11
 80096a0:	d124      	bne.n	80096ec <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80096a2:	4a14      	ldr	r2, [pc, #80]	; (80096f4 <ScheduleTx+0x104>)
 80096a4:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
 80096a8:	b191      	cbz	r1, 80096d0 <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 80096aa:	b90d      	cbnz	r5, 80096b0 <ScheduleTx+0xc0>
                return status;
 80096ac:	4604      	mov	r4, r0
 80096ae:	e7a7      	b.n	8009600 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80096b0:	4615      	mov	r5, r2
 80096b2:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 80096b6:	f042 0220 	orr.w	r2, r2, #32
 80096ba:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80096be:	f505 755a 	add.w	r5, r5, #872	; 0x368
 80096c2:	4628      	mov	r0, r5
 80096c4:	f008 fb42 	bl	8011d4c <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 80096c8:	4628      	mov	r0, r5
 80096ca:	f008 faf9 	bl	8011cc0 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 80096ce:	e797      	b.n	8009600 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 80096d0:	f7ff fe70 	bl	80093b4 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 80096d4:	f7ff feb2 	bl	800943c <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80096d8:	4604      	mov	r4, r0
 80096da:	2800      	cmp	r0, #0
 80096dc:	d190      	bne.n	8009600 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 80096de:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <ScheduleTx+0x104>)
 80096e0:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 80096e4:	f7ff ff08 	bl	80094f8 <SendFrameOnChannel>
 80096e8:	4604      	mov	r4, r0
 80096ea:	e789      	b.n	8009600 <ScheduleTx+0x10>
            return status;
 80096ec:	4604      	mov	r4, r0
 80096ee:	e787      	b.n	8009600 <ScheduleTx+0x10>
 80096f0:	20008000 	.word	0x20008000
 80096f4:	20000648 	.word	0x20000648

080096f8 <OnTxDelayedTimerEvent>:
{
 80096f8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 80096fa:	4c16      	ldr	r4, [pc, #88]	; (8009754 <OnTxDelayedTimerEvent+0x5c>)
 80096fc:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009700:	f008 fa84 	bl	8011c0c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009704:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009708:	f023 0320 	bic.w	r3, r3, #32
 800970c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8009710:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 8009714:	4b10      	ldr	r3, [pc, #64]	; (8009758 <OnTxDelayedTimerEvent+0x60>)
 8009716:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800971a:	f7ff fde7 	bl	80092ec <LoRaMacHandleResponseTimeout>
 800971e:	b100      	cbz	r0, 8009722 <OnTxDelayedTimerEvent+0x2a>
}
 8009720:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8009722:	2001      	movs	r0, #1
 8009724:	f7ff ff64 	bl	80095f0 <ScheduleTx>
 8009728:	2800      	cmp	r0, #0
 800972a:	d0f9      	beq.n	8009720 <OnTxDelayedTimerEvent+0x28>
 800972c:	280b      	cmp	r0, #11
 800972e:	d0f7      	beq.n	8009720 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009730:	4b09      	ldr	r3, [pc, #36]	; (8009758 <OnTxDelayedTimerEvent+0x60>)
 8009732:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009736:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800973a:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800973e:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009742:	2009      	movs	r0, #9
 8009744:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009748:	f002 f9ce 	bl	800bae8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800974c:	f7fe fcf0 	bl	8008130 <StopRetransmission>
            break;
 8009750:	e7e6      	b.n	8009720 <OnTxDelayedTimerEvent+0x28>
 8009752:	bf00      	nop
 8009754:	20000648 	.word	0x20000648
 8009758:	20008000 	.word	0x20008000

0800975c <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800975c:	4b1c      	ldr	r3, [pc, #112]	; (80097d0 <LoRaMacHandleMcpsRequest+0x74>)
 800975e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8009762:	f013 0f01 	tst.w	r3, #1
 8009766:	d032      	beq.n	80097ce <LoRaMacHandleMcpsRequest+0x72>
{
 8009768:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800976a:	4b19      	ldr	r3, [pc, #100]	; (80097d0 <LoRaMacHandleMcpsRequest+0x74>)
 800976c:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8009770:	b12b      	cbz	r3, 800977e <LoRaMacHandleMcpsRequest+0x22>
 8009772:	2b03      	cmp	r3, #3
 8009774:	d003      	beq.n	800977e <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009776:	2b01      	cmp	r3, #1
 8009778:	d006      	beq.n	8009788 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800977a:	2000      	movs	r0, #0
 800977c:	e002      	b.n	8009784 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800977e:	f7fe fc9d 	bl	80080bc <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 8009782:	b940      	cbnz	r0, 8009796 <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 8009784:	b1b8      	cbz	r0, 80097b6 <LoRaMacHandleMcpsRequest+0x5a>
}
 8009786:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 8009788:	4b11      	ldr	r3, [pc, #68]	; (80097d0 <LoRaMacHandleMcpsRequest+0x74>)
 800978a:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800978e:	b183      	cbz	r3, 80097b2 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 8009790:	f7fe fcb0 	bl	80080f4 <CheckRetransConfirmedUplink>
 8009794:	e7f5      	b.n	8009782 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009796:	4c0e      	ldr	r4, [pc, #56]	; (80097d0 <LoRaMacHandleMcpsRequest+0x74>)
 8009798:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800979c:	f008 fa36 	bl	8011c0c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80097a0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80097a4:	f023 0320 	bic.w	r3, r3, #32
 80097a8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 80097ac:	f7fe fcc0 	bl	8008130 <StopRetransmission>
 80097b0:	e7e9      	b.n	8009786 <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 80097b2:	2001      	movs	r0, #1
 80097b4:	e7e6      	b.n	8009784 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80097b6:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <LoRaMacHandleMcpsRequest+0x74>)
 80097b8:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 80097bc:	f36f 1204 	bfc	r2, #4, #1
 80097c0:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 80097c4:	f883 0419 	strb.w	r0, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 80097c8:	f7ff ff96 	bl	80096f8 <OnTxDelayedTimerEvent>
}
 80097cc:	e7db      	b.n	8009786 <LoRaMacHandleMcpsRequest+0x2a>
 80097ce:	4770      	bx	lr
 80097d0:	20000648 	.word	0x20000648

080097d4 <LoRaMacHandleRequestEvents>:
{
 80097d4:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 80097d6:	4b22      	ldr	r3, [pc, #136]	; (8009860 <LoRaMacHandleRequestEvents+0x8c>)
 80097d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80097dc:	bb7b      	cbnz	r3, 800983e <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80097de:	4b20      	ldr	r3, [pc, #128]	; (8009860 <LoRaMacHandleRequestEvents+0x8c>)
 80097e0:	f893 4491 	ldrb.w	r4, [r3, #1169]	; 0x491
 80097e4:	f014 0501 	ands.w	r5, r4, #1
 80097e8:	d005      	beq.n	80097f6 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80097ea:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 80097ee:	f36f 0200 	bfc	r2, #0, #1
 80097f2:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80097f6:	4b1a      	ldr	r3, [pc, #104]	; (8009860 <LoRaMacHandleRequestEvents+0x8c>)
 80097f8:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80097fc:	f013 0f04 	tst.w	r3, #4
 8009800:	d006      	beq.n	8009810 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009802:	4b17      	ldr	r3, [pc, #92]	; (8009860 <LoRaMacHandleRequestEvents+0x8c>)
 8009804:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 8009808:	f36f 0282 	bfc	r2, #2, #1
 800980c:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009810:	2001      	movs	r0, #1
 8009812:	f7fe fbab 	bl	8007f6c <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 8009816:	b135      	cbz	r5, 8009826 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009818:	4811      	ldr	r0, [pc, #68]	; (8009860 <LoRaMacHandleRequestEvents+0x8c>)
 800981a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f500 6088 	add.w	r0, r0, #1088	; 0x440
 8009824:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8009826:	f014 0f04 	tst.w	r4, #4
 800982a:	d109      	bne.n	8009840 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800982c:	f001 ff09 	bl	800b642 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009830:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <LoRaMacHandleRequestEvents+0x8c>)
 8009832:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 8009836:	f36f 1204 	bfc	r2, #4, #1
 800983a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
}
 800983e:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009840:	4808      	ldr	r0, [pc, #32]	; (8009864 <LoRaMacHandleRequestEvents+0x90>)
 8009842:	f002 f97b 	bl	800bb3c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009846:	f002 f9b1 	bl	800bbac <LoRaMacConfirmQueueGetCnt>
 800984a:	2800      	cmp	r0, #0
 800984c:	d0ee      	beq.n	800982c <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800984e:	4a04      	ldr	r2, [pc, #16]	; (8009860 <LoRaMacHandleRequestEvents+0x8c>)
 8009850:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8009854:	f043 0304 	orr.w	r3, r3, #4
 8009858:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800985c:	e7e6      	b.n	800982c <LoRaMacHandleRequestEvents+0x58>
 800985e:	bf00      	nop
 8009860:	20000648 	.word	0x20000648
 8009864:	20000a9c 	.word	0x20000a9c

08009868 <OpenContinuousRxCWindow>:
{
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800986c:	4c16      	ldr	r4, [pc, #88]	; (80098c8 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800986e:	4d17      	ldr	r5, [pc, #92]	; (80098cc <OpenContinuousRxCWindow+0x64>)
 8009870:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 8009874:	9600      	str	r6, [sp, #0]
 8009876:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009878:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800987c:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 8009880:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009884:	f002 ff29 	bl	800c6da <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009888:	2302      	movs	r3, #2
 800988a:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800988e:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 8009892:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009896:	2301      	movs	r3, #1
 8009898:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800989c:	f205 4224 	addw	r2, r5, #1060	; 0x424
 80098a0:	4631      	mov	r1, r6
 80098a2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80098a6:	f002 ff2c 	bl	800c702 <RegionRxConfig>
 80098aa:	b158      	cbz	r0, 80098c4 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80098ac:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 80098b0:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 80098b4:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <OpenContinuousRxCWindow+0x68>)
 80098b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b8:	2000      	movs	r0, #0
 80098ba:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80098bc:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 80098c0:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 80098c4:	b002      	add	sp, #8
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	20008000 	.word	0x20008000
 80098cc:	20000648 	.word	0x20000648
 80098d0:	08012fbc 	.word	0x08012fbc

080098d4 <RxWindowSetup>:
{
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 80098d8:	f008 f998 	bl	8011c0c <UTIL_TIMER_Stop>
    Radio.Standby( );
 80098dc:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <RxWindowSetup+0x3c>)
 80098de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e0:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80098e2:	4a0c      	ldr	r2, [pc, #48]	; (8009914 <RxWindowSetup+0x40>)
 80098e4:	4621      	mov	r1, r4
 80098e6:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <RxWindowSetup+0x44>)
 80098e8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80098ec:	f002 ff09 	bl	800c702 <RegionRxConfig>
 80098f0:	b160      	cbz	r0, 800990c <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80098f2:	4d0a      	ldr	r5, [pc, #40]	; (800991c <RxWindowSetup+0x48>)
 80098f4:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 80098f8:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80098fc:	4b04      	ldr	r3, [pc, #16]	; (8009910 <RxWindowSetup+0x3c>)
 80098fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009900:	4a05      	ldr	r2, [pc, #20]	; (8009918 <RxWindowSetup+0x44>)
 8009902:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8009904:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8009906:	7ce3      	ldrb	r3, [r4, #19]
 8009908:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800990c:	bd38      	pop	{r3, r4, r5, pc}
 800990e:	bf00      	nop
 8009910:	08012fbc 	.word	0x08012fbc
 8009914:	20000a6c 	.word	0x20000a6c
 8009918:	20008000 	.word	0x20008000
 800991c:	20000648 	.word	0x20000648

08009920 <OnRxWindow2TimerEvent>:
{
 8009920:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009922:	4b13      	ldr	r3, [pc, #76]	; (8009970 <OnRxWindow2TimerEvent+0x50>)
 8009924:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8009928:	b903      	cbnz	r3, 800992c <OnRxWindow2TimerEvent+0xc>
}
 800992a:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800992c:	4810      	ldr	r0, [pc, #64]	; (8009970 <OnRxWindow2TimerEvent+0x50>)
 800992e:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 8009932:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009936:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <OnRxWindow2TimerEvent+0x54>)
 8009938:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800993a:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800993e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8009942:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009946:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800994a:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800994e:	2200      	movs	r2, #0
 8009950:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009954:	2201      	movs	r2, #1
 8009956:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800995a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800995e:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009962:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 8009966:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800996a:	f7ff ffb3 	bl	80098d4 <RxWindowSetup>
 800996e:	e7dc      	b.n	800992a <OnRxWindow2TimerEvent+0xa>
 8009970:	20000648 	.word	0x20000648
 8009974:	20008000 	.word	0x20008000

08009978 <OnRxWindow1TimerEvent>:
{
 8009978:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800997a:	4811      	ldr	r0, [pc, #68]	; (80099c0 <OnRxWindow1TimerEvent+0x48>)
 800997c:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 8009980:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8009984:	4b0f      	ldr	r3, [pc, #60]	; (80099c4 <OnRxWindow1TimerEvent+0x4c>)
 8009986:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 800998a:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800998e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8009992:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009996:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800999a:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800999e:	2200      	movs	r2, #0
 80099a0:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80099a4:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80099a8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80099ac:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80099b0:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 80099b4:	f500 7060 	add.w	r0, r0, #896	; 0x380
 80099b8:	f7ff ff8c 	bl	80098d4 <RxWindowSetup>
}
 80099bc:	bd08      	pop	{r3, pc}
 80099be:	bf00      	nop
 80099c0:	20000648 	.word	0x20000648
 80099c4:	20008000 	.word	0x20008000

080099c8 <LoRaMacHandleNvm>:
{
 80099c8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 80099ca:	4b31      	ldr	r3, [pc, #196]	; (8009a90 <LoRaMacHandleNvm+0xc8>)
 80099cc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80099d0:	b103      	cbz	r3, 80099d4 <LoRaMacHandleNvm+0xc>
}
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80099d6:	2124      	movs	r1, #36	; 0x24
 80099d8:	f005 ff06 	bl	800f7e8 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 80099dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099de:	4283      	cmp	r3, r0
 80099e0:	d053      	beq.n	8009a8a <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 80099e2:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80099e4:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80099e6:	211c      	movs	r1, #28
 80099e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80099ec:	f005 fefc 	bl	800f7e8 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 80099f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80099f2:	4283      	cmp	r3, r0
 80099f4:	d002      	beq.n	80099fc <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 80099f6:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80099f8:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80099fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009a00:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8009a04:	f005 fef0 	bl	800f7e8 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8009a08:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8009a0c:	4283      	cmp	r3, r0
 8009a0e:	d003      	beq.n	8009a18 <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 8009a10:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8009a14:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009a18:	21d4      	movs	r1, #212	; 0xd4
 8009a1a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 8009a1e:	f005 fee3 	bl	800f7e8 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009a22:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8009a26:	4283      	cmp	r3, r0
 8009a28:	d003      	beq.n	8009a32 <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 8009a2a:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009a2e:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009a32:	2110      	movs	r1, #16
 8009a34:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8009a38:	f005 fed6 	bl	800f7e8 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009a3c:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 8009a40:	4283      	cmp	r3, r0
 8009a42:	d003      	beq.n	8009a4c <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 8009a44:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8009a48:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8009a4c:	f44f 715e 	mov.w	r1, #888	; 0x378
 8009a50:	f504 700e 	add.w	r0, r4, #568	; 0x238
 8009a54:	f005 fec8 	bl	800f7e8 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8009a58:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 8009a5c:	4283      	cmp	r3, r0
 8009a5e:	d003      	beq.n	8009a68 <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 8009a60:	f8c4 05b0 	str.w	r0, [r4, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8009a64:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8009a68:	2114      	movs	r1, #20
 8009a6a:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 8009a6e:	f005 febb 	bl	800f7e8 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8009a72:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 8009a76:	4283      	cmp	r3, r0
 8009a78:	d003      	beq.n	8009a82 <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 8009a7a:	f8c4 05c8 	str.w	r0, [r4, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8009a7e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 8009a82:	4628      	mov	r0, r5
 8009a84:	f7fe fb96 	bl	80081b4 <CallNvmDataChangeCallback>
 8009a88:	e7a3      	b.n	80099d2 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8009a8a:	2500      	movs	r5, #0
 8009a8c:	e7ab      	b.n	80099e6 <LoRaMacHandleNvm+0x1e>
 8009a8e:	bf00      	nop
 8009a90:	20000648 	.word	0x20000648

08009a94 <RestoreNvmData>:
{
 8009a94:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8009a96:	4b3d      	ldr	r3, [pc, #244]	; (8009b8c <RestoreNvmData+0xf8>)
 8009a98:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d001      	beq.n	8009aa4 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 8009aa0:	2001      	movs	r0, #1
}
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8009aa4:	4c3a      	ldr	r4, [pc, #232]	; (8009b90 <RestoreNvmData+0xfc>)
 8009aa6:	2124      	movs	r1, #36	; 0x24
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f005 fe9d 	bl	800f7e8 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 8009aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ab0:	4283      	cmp	r3, r0
 8009ab2:	d001      	beq.n	8009ab8 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009ab4:	2017      	movs	r0, #23
 8009ab6:	e7f4      	b.n	8009aa2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8009ab8:	211c      	movs	r1, #28
 8009aba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009abe:	f005 fe93 	bl	800f7e8 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8009ac2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009ac4:	4283      	cmp	r3, r0
 8009ac6:	d001      	beq.n	8009acc <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009ac8:	2017      	movs	r0, #23
 8009aca:	e7ea      	b.n	8009aa2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8009acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009ad0:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8009ad4:	f005 fe88 	bl	800f7e8 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8009ad8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8009adc:	4283      	cmp	r3, r0
 8009ade:	d001      	beq.n	8009ae4 <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009ae0:	2017      	movs	r0, #23
 8009ae2:	e7de      	b.n	8009aa2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8009ae4:	21d4      	movs	r1, #212	; 0xd4
 8009ae6:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 8009aea:	f005 fe7d 	bl	800f7e8 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 8009aee:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8009af2:	4283      	cmp	r3, r0
 8009af4:	d001      	beq.n	8009afa <RestoreNvmData+0x66>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009af6:	2017      	movs	r0, #23
 8009af8:	e7d3      	b.n	8009aa2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8009afa:	2110      	movs	r1, #16
 8009afc:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8009b00:	f005 fe72 	bl	800f7e8 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8009b04:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 8009b08:	4283      	cmp	r3, r0
 8009b0a:	d001      	beq.n	8009b10 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009b0c:	2017      	movs	r0, #23
 8009b0e:	e7c8      	b.n	8009aa2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8009b10:	f44f 715e 	mov.w	r1, #888	; 0x378
 8009b14:	f504 700e 	add.w	r0, r4, #568	; 0x238
 8009b18:	f005 fe66 	bl	800f7e8 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8009b1c:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 8009b20:	4283      	cmp	r3, r0
 8009b22:	d001      	beq.n	8009b28 <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009b24:	2017      	movs	r0, #23
 8009b26:	e7bc      	b.n	8009aa2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8009b28:	2114      	movs	r1, #20
 8009b2a:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 8009b2e:	f005 fe5b 	bl	800f7e8 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 8009b32:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 8009b36:	4283      	cmp	r3, r0
 8009b38:	d001      	beq.n	8009b3e <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009b3a:	2017      	movs	r0, #23
 8009b3c:	e7b1      	b.n	8009aa2 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8009b3e:	4625      	mov	r5, r4
 8009b40:	4c14      	ldr	r4, [pc, #80]	; (8009b94 <RestoreNvmData+0x100>)
 8009b42:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8009b46:	4629      	mov	r1, r5
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f005 fe2c 	bl	800f7a6 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8009b4e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8009b52:	2100      	movs	r1, #0
 8009b54:	4628      	mov	r0, r5
 8009b56:	f005 fe3e 	bl	800f7d6 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <RestoreNvmData+0xf8>)
 8009b5c:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8009b60:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009b64:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009b66:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b6a:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 8009b6e:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009b78:	2202      	movs	r2, #2
 8009b7a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009b7e:	4b06      	ldr	r3, [pc, #24]	; (8009b98 <RestoreNvmData+0x104>)
 8009b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b82:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 8009b86:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8009b88:	2000      	movs	r0, #0
 8009b8a:	e78a      	b.n	8009aa2 <RestoreNvmData+0xe>
 8009b8c:	20000648 	.word	0x20000648
 8009b90:	200085cc 	.word	0x200085cc
 8009b94:	20008000 	.word	0x20008000
 8009b98:	08012fbc 	.word	0x08012fbc

08009b9c <OnRadioRxTimeout>:
{
 8009b9c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8009b9e:	4a07      	ldr	r2, [pc, #28]	; (8009bbc <OnRadioRxTimeout+0x20>)
 8009ba0:	7813      	ldrb	r3, [r2, #0]
 8009ba2:	f043 0302 	orr.w	r3, r3, #2
 8009ba6:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009ba8:	f7fe faec 	bl	8008184 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8009bac:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <OnRadioRxTimeout+0x24>)
 8009bae:	2201      	movs	r2, #1
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	2002      	movs	r0, #2
 8009bb4:	f007 fcd6 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 8009bb8:	bd08      	pop	{r3, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000644 	.word	0x20000644
 8009bc0:	080128a4 	.word	0x080128a4

08009bc4 <OnRadioTxTimeout>:
{
 8009bc4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009bc6:	4a07      	ldr	r2, [pc, #28]	; (8009be4 <OnRadioTxTimeout+0x20>)
 8009bc8:	7813      	ldrb	r3, [r2, #0]
 8009bca:	f043 0308 	orr.w	r3, r3, #8
 8009bce:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009bd0:	f7fe fad8 	bl	8008184 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8009bd4:	4b04      	ldr	r3, [pc, #16]	; (8009be8 <OnRadioTxTimeout+0x24>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	2100      	movs	r1, #0
 8009bda:	2002      	movs	r0, #2
 8009bdc:	f007 fcc2 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 8009be0:	bd08      	pop	{r3, pc}
 8009be2:	bf00      	nop
 8009be4:	20000644 	.word	0x20000644
 8009be8:	080128b4 	.word	0x080128b4

08009bec <OnRadioRxDone>:
{
 8009bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	460f      	mov	r7, r1
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009bf8:	f007 ffc8 	bl	8011b8c <UTIL_TIMER_GetCurrentTime>
 8009bfc:	4c0c      	ldr	r4, [pc, #48]	; (8009c30 <OnRadioRxDone+0x44>)
 8009bfe:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8009c00:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8009c04:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8009c06:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8009c08:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009c0a:	4b0a      	ldr	r3, [pc, #40]	; (8009c34 <OnRadioRxDone+0x48>)
 8009c0c:	781a      	ldrb	r2, [r3, #0]
 8009c0e:	f042 0210 	orr.w	r2, r2, #16
 8009c12:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8009c14:	b2d2      	uxtb	r2, r2
 8009c16:	f042 0201 	orr.w	r2, r2, #1
 8009c1a:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 8009c1c:	f7fe fab2 	bl	8008184 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8009c20:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <OnRadioRxDone+0x4c>)
 8009c22:	2201      	movs	r2, #1
 8009c24:	2100      	movs	r1, #0
 8009c26:	2002      	movs	r0, #2
 8009c28:	f007 fc9c 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 8009c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c30:	20000bf4 	.word	0x20000bf4
 8009c34:	20000644 	.word	0x20000644
 8009c38:	080128c4 	.word	0x080128c4

08009c3c <OnRadioTxDone>:
{
 8009c3c:	b510      	push	{r4, lr}
 8009c3e:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009c40:	f007 ffa4 	bl	8011b8c <UTIL_TIMER_GetCurrentTime>
 8009c44:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <OnRadioTxDone+0x3c>)
 8009c46:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8009c48:	466c      	mov	r4, sp
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f007 fef0 	bl	8011a30 <SysTimeGet>
 8009c50:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <OnRadioTxDone+0x40>)
 8009c52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009c56:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8009c5a:	4a09      	ldr	r2, [pc, #36]	; (8009c80 <OnRadioTxDone+0x44>)
 8009c5c:	7813      	ldrb	r3, [r2, #0]
 8009c5e:	f043 0320 	orr.w	r3, r3, #32
 8009c62:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009c64:	f7fe fa8e 	bl	8008184 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8009c68:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <OnRadioTxDone+0x48>)
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	2002      	movs	r0, #2
 8009c70:	f007 fc78 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 8009c74:	b002      	add	sp, #8
 8009c76:	bd10      	pop	{r4, pc}
 8009c78:	20000c04 	.word	0x20000c04
 8009c7c:	20000980 	.word	0x20000980
 8009c80:	20000644 	.word	0x20000644
 8009c84:	080128d4 	.word	0x080128d4

08009c88 <ResetMacParameters>:
{
 8009c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c8a:	b091      	sub	sp, #68	; 0x44
    if( isRejoin == false )
 8009c8c:	b918      	cbnz	r0, 8009c96 <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8009c8e:	4b61      	ldr	r3, [pc, #388]	; (8009e14 <ResetMacParameters+0x18c>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 8009c96:	4c5f      	ldr	r4, [pc, #380]	; (8009e14 <ResetMacParameters+0x18c>)
 8009c98:	2500      	movs	r5, #0
 8009c9a:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8009c9c:	4e5e      	ldr	r6, [pc, #376]	; (8009e18 <ResetMacParameters+0x190>)
 8009c9e:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 8009ca2:	f886 5419 	strb.w	r5, [r6, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8009ca6:	f8c6 5498 	str.w	r5, [r6, #1176]	; 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 8009caa:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8009cae:	2701      	movs	r7, #1
 8009cb0:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009cb4:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 8009cb8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009cbc:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 8009cc0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8009cc4:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 8009cc8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009ccc:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8009cd0:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 8009cd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cd8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009cdc:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8009ce0:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8009ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ce8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8009cec:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 8009cf0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8009cf4:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8009cf8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8009cfc:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8009d00:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009d04:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8009d08:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8009d0c:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 8009d10:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8009d14:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 8009d18:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 8009d1c:	f886 541a 	strb.w	r5, [r6, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8009d20:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8009d24:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8009d28:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8009d2c:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8009d30:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8009d34:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8009d38:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8009d3c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8009d40:	f884 5145 	strb.w	r5, [r4, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8009d44:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8009d48:	f884 5147 	strb.w	r5, [r4, #327]	; 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009d4c:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009d50:	f504 7309 	add.w	r3, r4, #548	; 0x224
 8009d54:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009d56:	f504 730e 	add.w	r3, r4, #568	; 0x238
 8009d5a:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 8009d5c:	4b2f      	ldr	r3, [pc, #188]	; (8009e1c <ResetMacParameters+0x194>)
 8009d5e:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009d60:	a901      	add	r1, sp, #4
 8009d62:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009d66:	f002 fc7d 	bl	800c664 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009d6a:	f886 541b 	strb.w	r5, [r6, #1051]	; 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009d6e:	f886 53d0 	strb.w	r5, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009d72:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009d74:	f8c6 33d4 	str.w	r3, [r6, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d78:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8009d7c:	f886 33e0 	strb.w	r3, [r6, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009d80:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 8009d84:	f886 33e1 	strb.w	r3, [r6, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009d88:	f886 53e2 	strb.w	r5, [r6, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009d8c:	f886 73e3 	strb.w	r7, [r6, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009d90:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 8009d94:	f886 33e4 	strb.w	r3, [r6, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009d98:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 8009d9c:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 8009da0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009da6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009daa:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009dae:	f886 73fa 	strb.w	r7, [r6, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009db2:	2302      	movs	r3, #2
 8009db4:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 8009db8:	950e      	str	r5, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8009dba:	950f      	str	r5, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 8009dbc:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 8009dc0:	b11b      	cbz	r3, 8009dca <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8009dca:	4b13      	ldr	r3, [pc, #76]	; (8009e18 <ResetMacParameters+0x190>)
 8009dcc:	f503 628d 	add.w	r2, r3, #1128	; 0x468
 8009dd0:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009dd2:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 8009dd6:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009dd8:	f203 4254 	addw	r2, r3, #1108	; 0x454
 8009ddc:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8009dde:	f203 4391 	addw	r3, r3, #1169	; 0x491
 8009de2:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009de4:	4a0b      	ldr	r2, [pc, #44]	; (8009e14 <ResetMacParameters+0x18c>)
 8009de6:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 8009dea:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8009dec:	f102 0348 	add.w	r3, r2, #72	; 0x48
 8009df0:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8009df2:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 8009df6:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8009df8:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 8009dfc:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8009dfe:	f502 7398 	add.w	r3, r2, #304	; 0x130
 8009e02:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8009e04:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 8009e08:	a90e      	add	r1, sp, #56	; 0x38
 8009e0a:	a805      	add	r0, sp, #20
 8009e0c:	f001 fc04 	bl	800b618 <LoRaMacClassBInit>
}
 8009e10:	b011      	add	sp, #68	; 0x44
 8009e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e14:	20008000 	.word	0x20008000
 8009e18:	20000648 	.word	0x20000648
 8009e1c:	20000b64 	.word	0x20000b64

08009e20 <SwitchClass>:
{
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8009e24:	4b46      	ldr	r3, [pc, #280]	; (8009f40 <SwitchClass+0x120>)
 8009e26:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 8009e2a:	2d01      	cmp	r5, #1
 8009e2c:	d071      	beq.n	8009f12 <SwitchClass+0xf2>
 8009e2e:	2d02      	cmp	r5, #2
 8009e30:	d077      	beq.n	8009f22 <SwitchClass+0x102>
 8009e32:	b10d      	cbz	r5, 8009e38 <SwitchClass+0x18>
 8009e34:	2003      	movs	r0, #3
}
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 8009e38:	bb58      	cbnz	r0, 8009e92 <SwitchClass+0x72>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009e3a:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8009e3e:	336c      	adds	r3, #108	; 0x6c
 8009e40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e44:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 8009e48:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 8009e4a:	2c01      	cmp	r4, #1
 8009e4c:	d023      	beq.n	8009e96 <SwitchClass+0x76>
            if( deviceClass == CLASS_C )
 8009e4e:	2c02      	cmp	r4, #2
 8009e50:	d1f1      	bne.n	8009e36 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009e52:	4b3b      	ldr	r3, [pc, #236]	; (8009f40 <SwitchClass+0x120>)
 8009e54:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009e58:	4e3a      	ldr	r6, [pc, #232]	; (8009f44 <SwitchClass+0x124>)
 8009e5a:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 8009e5e:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 8009e62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e68:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009e6c:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009e70:	2302      	movs	r3, #2
 8009e72:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009e76:	2300      	movs	r3, #0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dd15      	ble.n	8009ea8 <SwitchClass+0x88>
                MacCtx.NodeAckRequested = false;
 8009e7c:	4b31      	ldr	r3, [pc, #196]	; (8009f44 <SwitchClass+0x124>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                Radio.Sleep( );
 8009e84:	4b30      	ldr	r3, [pc, #192]	; (8009f48 <SwitchClass+0x128>)
 8009e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e88:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8009e8a:	f7ff fced 	bl	8009868 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009e8e:	4628      	mov	r0, r5
 8009e90:	e7d1      	b.n	8009e36 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009e92:	2003      	movs	r0, #3
 8009e94:	e7d9      	b.n	8009e4a <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8009e96:	4620      	mov	r0, r4
 8009e98:	f001 fbd4 	bl	800b644 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d1d6      	bne.n	8009e4e <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8009ea0:	4b27      	ldr	r3, [pc, #156]	; (8009f40 <SwitchClass+0x120>)
 8009ea2:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 8009ea6:	e7d2      	b.n	8009e4e <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8009ea8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009eac:	4924      	ldr	r1, [pc, #144]	; (8009f40 <SwitchClass+0x120>)
 8009eae:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8009eb2:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 8009eb6:	b13a      	cbz	r2, 8009ec8 <SwitchClass+0xa8>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8009eb8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009ebc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8009ec0:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8009ec4:	2a02      	cmp	r2, #2
 8009ec6:	d002      	beq.n	8009ece <SwitchClass+0xae>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009ec8:	3301      	adds	r3, #1
 8009eca:	b25b      	sxtb	r3, r3
 8009ecc:	e7d4      	b.n	8009e78 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8009ece:	460a      	mov	r2, r1
 8009ed0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009ed4:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8009ed8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 8009edc:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8009ede:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8009ee2:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009ee6:	4b17      	ldr	r3, [pc, #92]	; (8009f44 <SwitchClass+0x124>)
 8009ee8:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 8009eec:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009ef0:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ef4:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 8009ef8:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009efc:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8009f00:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009f04:	2203      	movs	r2, #3
 8009f06:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 8009f10:	e7b4      	b.n	8009e7c <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009f12:	f001 fb97 	bl	800b644 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d18d      	bne.n	8009e36 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009f1a:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <SwitchClass+0x120>)
 8009f1c:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 8009f20:	e789      	b.n	8009e36 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8009f22:	b958      	cbnz	r0, 8009f3c <SwitchClass+0x11c>
                MacCtx.RxSlot = RX_SLOT_NONE;
 8009f24:	4b07      	ldr	r3, [pc, #28]	; (8009f44 <SwitchClass+0x124>)
 8009f26:	2206      	movs	r2, #6
 8009f28:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009f2c:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <SwitchClass+0x120>)
 8009f2e:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 8009f32:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <SwitchClass+0x128>)
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009f38:	4620      	mov	r0, r4
 8009f3a:	e77c      	b.n	8009e36 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009f3c:	2003      	movs	r0, #3
 8009f3e:	e77a      	b.n	8009e36 <SwitchClass+0x16>
 8009f40:	20008000 	.word	0x20008000
 8009f44:	20000648 	.word	0x20000648
 8009f48:	08012fbc 	.word	0x08012fbc

08009f4c <SendReJoinReq>:
{
 8009f4c:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 8009f4e:	28ff      	cmp	r0, #255	; 0xff
 8009f50:	d003      	beq.n	8009f5a <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8009f52:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8009f54:	f7ff fb4c 	bl	80095f0 <ScheduleTx>
}
 8009f58:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	f7ff ff60 	bl	8009e20 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009f60:	4d0a      	ldr	r5, [pc, #40]	; (8009f8c <SendReJoinReq+0x40>)
 8009f62:	2400      	movs	r4, #0
 8009f64:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009f68:	1cab      	adds	r3, r5, #2
 8009f6a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009f6e:	23ff      	movs	r3, #255	; 0xff
 8009f70:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8009f74:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8009f78:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8009f7c:	f005 faf6 	bl	800f56c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8009f80:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8009f84:	f005 fad4 	bl	800f530 <SecureElementGetDevEui>
            allowDelayedTx = false;
 8009f88:	4620      	mov	r0, r4
            break;
 8009f8a:	e7e3      	b.n	8009f54 <SendReJoinReq+0x8>
 8009f8c:	20000648 	.word	0x20000648

08009f90 <PrepareFrame>:
{
 8009f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f94:	b083      	sub	sp, #12
 8009f96:	4605      	mov	r5, r0
 8009f98:	460e      	mov	r6, r1
 8009f9a:	4617      	mov	r7, r2
 8009f9c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8009fa0:	4959      	ldr	r1, [pc, #356]	; (800a108 <PrepareFrame+0x178>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8009fa6:	f881 241a 	strb.w	r2, [r1, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 8009faa:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8009fac:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8009fae:	4698      	mov	r8, r3
 8009fb0:	b1cb      	cbz	r3, 8009fe6 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009fb2:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800a108 <PrepareFrame+0x178>
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	4641      	mov	r1, r8
 8009fba:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8009fbe:	f005 fbf2 	bl	800f7a6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8009fc2:	b2e0      	uxtb	r0, r4
 8009fc4:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009fc8:	782b      	ldrb	r3, [r5, #0]
 8009fca:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8009fce:	782b      	ldrb	r3, [r5, #0]
 8009fd0:	095b      	lsrs	r3, r3, #5
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d009      	beq.n	8009fea <PrepareFrame+0x5a>
 8009fd6:	2b07      	cmp	r3, #7
 8009fd8:	d079      	beq.n	800a0ce <PrepareFrame+0x13e>
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d009      	beq.n	8009ff2 <PrepareFrame+0x62>
 8009fde:	2002      	movs	r0, #2
}
 8009fe0:	b003      	add	sp, #12
 8009fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8009fe6:	4614      	mov	r4, r2
 8009fe8:	e7e3      	b.n	8009fb2 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8009fea:	4b47      	ldr	r3, [pc, #284]	; (800a108 <PrepareFrame+0x178>)
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009ff2:	4b45      	ldr	r3, [pc, #276]	; (800a108 <PrepareFrame+0x178>)
 8009ff4:	2204      	movs	r2, #4
 8009ff6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009ffa:	1c9a      	adds	r2, r3, #2
 8009ffc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a000:	22ff      	movs	r2, #255	; 0xff
 800a002:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800a006:	782a      	ldrb	r2, [r5, #0]
 800a008:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800a00c:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800a010:	4a3e      	ldr	r2, [pc, #248]	; (800a10c <PrepareFrame+0x17c>)
 800a012:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800a016:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a01a:	7832      	ldrb	r2, [r6, #0]
 800a01c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800a020:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800a024:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a028:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a02c:	a801      	add	r0, sp, #4
 800a02e:	f001 ff97 	bl	800bf60 <LoRaMacCryptoGetFCntUp>
 800a032:	2800      	cmp	r0, #0
 800a034:	d15c      	bne.n	800a0f0 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800a036:	9a01      	ldr	r2, [sp, #4]
 800a038:	4b33      	ldr	r3, [pc, #204]	; (800a108 <PrepareFrame+0x178>)
 800a03a:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800a03e:	2100      	movs	r1, #0
 800a040:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800a044:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800a048:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a04c:	4668      	mov	r0, sp
 800a04e:	f001 fc2f 	bl	800b8b0 <LoRaMacCommandsGetSizeSerializedCmds>
 800a052:	2800      	cmp	r0, #0
 800a054:	d14e      	bne.n	800a0f4 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800a056:	9b00      	ldr	r3, [sp, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d0c1      	beq.n	8009fe0 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800a05c:	4b2b      	ldr	r3, [pc, #172]	; (800a10c <PrepareFrame+0x17c>)
 800a05e:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800a062:	f7fe f8bf 	bl	80081e4 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a066:	4b28      	ldr	r3, [pc, #160]	; (800a108 <PrepareFrame+0x178>)
 800a068:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800a06c:	b113      	cbz	r3, 800a074 <PrepareFrame+0xe4>
 800a06e:	9a00      	ldr	r2, [sp, #0]
 800a070:	2a0f      	cmp	r2, #15
 800a072:	d915      	bls.n	800a0a0 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a074:	b113      	cbz	r3, 800a07c <PrepareFrame+0xec>
 800a076:	9b00      	ldr	r3, [sp, #0]
 800a078:	2b0f      	cmp	r3, #15
 800a07a:	d821      	bhi.n	800a0c0 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a07c:	4a24      	ldr	r2, [pc, #144]	; (800a110 <PrepareFrame+0x180>)
 800a07e:	4669      	mov	r1, sp
 800a080:	f001 fc22 	bl	800b8c8 <LoRaMacCommandsSerializeCmds>
 800a084:	2800      	cmp	r0, #0
 800a086:	d13b      	bne.n	800a100 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a088:	4b1f      	ldr	r3, [pc, #124]	; (800a108 <PrepareFrame+0x178>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800a090:	f203 429c 	addw	r2, r3, #1180	; 0x49c
 800a094:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a098:	9a00      	ldr	r2, [sp, #0]
 800a09a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800a09e:	e79f      	b.n	8009fe0 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800a0a0:	4a1c      	ldr	r2, [pc, #112]	; (800a114 <PrepareFrame+0x184>)
 800a0a2:	4669      	mov	r1, sp
 800a0a4:	200f      	movs	r0, #15
 800a0a6:	f001 fc0f 	bl	800b8c8 <LoRaMacCommandsSerializeCmds>
 800a0aa:	bb28      	cbnz	r0, 800a0f8 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800a0ac:	7833      	ldrb	r3, [r6, #0]
 800a0ae:	9a00      	ldr	r2, [sp, #0]
 800a0b0:	f362 0303 	bfi	r3, r2, #0, #4
 800a0b4:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	4b13      	ldr	r3, [pc, #76]	; (800a108 <PrepareFrame+0x178>)
 800a0ba:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800a0be:	e78f      	b.n	8009fe0 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a0c0:	4a13      	ldr	r2, [pc, #76]	; (800a110 <PrepareFrame+0x180>)
 800a0c2:	4669      	mov	r1, sp
 800a0c4:	f001 fc00 	bl	800b8c8 <LoRaMacCommandsSerializeCmds>
 800a0c8:	b1c0      	cbz	r0, 800a0fc <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a0ca:	2013      	movs	r0, #19
 800a0cc:	e788      	b.n	8009fe0 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800a0ce:	f1b8 0f00 	cmp.w	r8, #0
 800a0d2:	d017      	beq.n	800a104 <PrepareFrame+0x174>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d083      	beq.n	8009fe0 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800a0d8:	4c0b      	ldr	r4, [pc, #44]	; (800a108 <PrepareFrame+0x178>)
 800a0da:	b282      	uxth	r2, r0
 800a0dc:	4641      	mov	r1, r8
 800a0de:	1ce0      	adds	r0, r4, #3
 800a0e0:	f005 fb61 	bl	800f7a6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800a0e4:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	e777      	b.n	8009fe0 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a0f0:	2012      	movs	r0, #18
 800a0f2:	e775      	b.n	8009fe0 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a0f4:	2013      	movs	r0, #19
 800a0f6:	e773      	b.n	8009fe0 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a0f8:	2013      	movs	r0, #19
 800a0fa:	e771      	b.n	8009fe0 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800a0fc:	200a      	movs	r0, #10
 800a0fe:	e76f      	b.n	8009fe0 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a100:	2013      	movs	r0, #19
 800a102:	e76d      	b.n	8009fe0 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800a104:	2000      	movs	r0, #0
 800a106:	e76b      	b.n	8009fe0 <PrepareFrame+0x50>
 800a108:	20000648 	.word	0x20000648
 800a10c:	20008000 	.word	0x20008000
 800a110:	20000ae4 	.word	0x20000ae4
 800a114:	20000760 	.word	0x20000760

0800a118 <Send>:
{
 800a118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a11c:	b08a      	sub	sp, #40	; 0x28
 800a11e:	4617      	mov	r7, r2
 800a120:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a122:	4c44      	ldr	r4, [pc, #272]	; (800a234 <Send+0x11c>)
 800a124:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800a128:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a12c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a12e:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a130:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800a134:	2b00      	cmp	r3, #0
 800a136:	d07a      	beq.n	800a22e <Send+0x116>
 800a138:	4605      	mov	r5, r0
 800a13a:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800a13c:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800a140:	b90b      	cbnz	r3, 800a146 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a142:	2100      	movs	r1, #0
 800a144:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a14c:	4839      	ldr	r0, [pc, #228]	; (800a234 <Send+0x11c>)
 800a14e:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 800a152:	f361 13c7 	bfi	r3, r1, #7, #1
 800a156:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a15a:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d052      	beq.n	800a208 <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800a162:	4b34      	ldr	r3, [pc, #208]	; (800a234 <Send+0x11c>)
 800a164:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a168:	b12b      	cbz	r3, 800a176 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800a16a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a16e:	f043 0320 	orr.w	r3, r3, #32
 800a172:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800a176:	2301      	movs	r3, #1
 800a178:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800a17c:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a180:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a182:	492c      	ldr	r1, [pc, #176]	; (800a234 <Send+0x11c>)
 800a184:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800a188:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a18c:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800a190:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a194:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a198:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a19c:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800a1a0:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a1a4:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800a1a8:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800a1b2:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800a1b6:	aa08      	add	r2, sp, #32
 800a1b8:	9200      	str	r2, [sp, #0]
 800a1ba:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800a1be:	3139      	adds	r1, #57	; 0x39
 800a1c0:	a803      	add	r0, sp, #12
 800a1c2:	f001 f9af 	bl	800b524 <LoRaMacAdrCalcNext>
 800a1c6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a1ca:	f360 1386 	bfi	r3, r0, #6, #1
 800a1ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800a1d2:	f8cd 8000 	str.w	r8, [sp]
 800a1d6:	463b      	mov	r3, r7
 800a1d8:	4632      	mov	r2, r6
 800a1da:	a909      	add	r1, sp, #36	; 0x24
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f7ff fed7 	bl	8009f90 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	b108      	cbz	r0, 800a1ea <Send+0xd2>
 800a1e6:	280a      	cmp	r0, #10
 800a1e8:	d104      	bne.n	800a1f4 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800a1ea:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800a1ee:	f7ff f9ff 	bl	80095f0 <ScheduleTx>
 800a1f2:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800a1f4:	b17c      	cbz	r4, 800a216 <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800a1f6:	4b0f      	ldr	r3, [pc, #60]	; (800a234 <Send+0x11c>)
 800a1f8:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800a1fc:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800a200:	4620      	mov	r0, r4
 800a202:	b00a      	add	sp, #40	; 0x28
 800a204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800a208:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a20c:	f043 0310 	orr.w	r3, r3, #16
 800a210:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800a214:	e7a5      	b.n	800a162 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800a216:	4b07      	ldr	r3, [pc, #28]	; (800a234 <Send+0x11c>)
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800a21e:	9a08      	ldr	r2, [sp, #32]
 800a220:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800a222:	f001 fb13 	bl	800b84c <LoRaMacCommandsRemoveNoneStickyCmds>
 800a226:	2800      	cmp	r0, #0
 800a228:	d0ea      	beq.n	800a200 <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a22a:	2413      	movs	r4, #19
 800a22c:	e7e8      	b.n	800a200 <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800a22e:	2407      	movs	r4, #7
 800a230:	e7e6      	b.n	800a200 <Send+0xe8>
 800a232:	bf00      	nop
 800a234:	20008000 	.word	0x20008000

0800a238 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <LoRaMacIsBusy+0x34>)
 800a23a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d00c      	beq.n	800a25c <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800a242:	4a0b      	ldr	r2, [pc, #44]	; (800a270 <LoRaMacIsBusy+0x38>)
 800a244:	7812      	ldrb	r2, [r2, #0]
 800a246:	f012 0f01 	tst.w	r2, #1
 800a24a:	d109      	bne.n	800a260 <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a24c:	b953      	cbnz	r3, 800a264 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800a24e:	4b07      	ldr	r3, [pc, #28]	; (800a26c <LoRaMacIsBusy+0x34>)
 800a250:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a254:	2b01      	cmp	r3, #1
 800a256:	d007      	beq.n	800a268 <LoRaMacIsBusy+0x30>
    return true;
 800a258:	2001      	movs	r0, #1
 800a25a:	4770      	bx	lr
        return false;
 800a25c:	2000      	movs	r0, #0
 800a25e:	4770      	bx	lr
        return true;
 800a260:	2001      	movs	r0, #1
 800a262:	4770      	bx	lr
    return true;
 800a264:	2001      	movs	r0, #1
 800a266:	4770      	bx	lr
        return false;
 800a268:	2000      	movs	r0, #0
}
 800a26a:	4770      	bx	lr
 800a26c:	20000648 	.word	0x20000648
 800a270:	20000644 	.word	0x20000644

0800a274 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800a274:	4b04      	ldr	r3, [pc, #16]	; (800a288 <LoRaMacIsStopped+0x14>)
 800a276:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d001      	beq.n	800a282 <LoRaMacIsStopped+0xe>
    return false;
 800a27e:	2000      	movs	r0, #0
 800a280:	4770      	bx	lr
        return true;
 800a282:	2001      	movs	r0, #1
}
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	20000648 	.word	0x20000648

0800a28c <LoRaMacProcess>:
{
 800a28c:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800a28e:	f7fe ffff 	bl	8009290 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a292:	f001 f9e8 	bl	800b666 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a296:	4b1f      	ldr	r3, [pc, #124]	; (800a314 <LoRaMacProcess+0x88>)
 800a298:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800a29c:	f013 0f10 	tst.w	r3, #16
 800a2a0:	d10d      	bne.n	800a2be <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800a2a2:	f7fd fe69 	bl	8007f78 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a2a6:	4b1b      	ldr	r3, [pc, #108]	; (800a314 <LoRaMacProcess+0x88>)
 800a2a8:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d022      	beq.n	800a2f6 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800a2b0:	4b18      	ldr	r3, [pc, #96]	; (800a314 <LoRaMacProcess+0x88>)
 800a2b2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800a2b6:	f013 0f20 	tst.w	r3, #32
 800a2ba:	d11f      	bne.n	800a2fc <LoRaMacProcess+0x70>
}
 800a2bc:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a2be:	2000      	movs	r0, #0
 800a2c0:	f7fd fe54 	bl	8007f6c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a2c4:	f7fd fe90 	bl	8007fe8 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800a2c8:	f7fd ff80 	bl	80081cc <IsRequestPending>
 800a2cc:	b110      	cbz	r0, 800a2d4 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a2ce:	f7fe f86f 	bl	80083b0 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800a2d2:	b918      	cbnz	r0, 800a2dc <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800a2d4:	f7ff f81e 	bl	8009314 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800a2d8:	f7ff fa40 	bl	800975c <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800a2dc:	f7ff fa7a 	bl	80097d4 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a2e0:	2001      	movs	r0, #1
 800a2e2:	f7fd fe43 	bl	8007f6c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a2e6:	4a0b      	ldr	r2, [pc, #44]	; (800a314 <LoRaMacProcess+0x88>)
 800a2e8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800a2ec:	f043 0320 	orr.w	r3, r3, #32
 800a2f0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800a2f4:	e7d5      	b.n	800a2a2 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800a2f6:	f7ff fab7 	bl	8009868 <OpenContinuousRxCWindow>
 800a2fa:	e7d9      	b.n	800a2b0 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800a2fc:	4b05      	ldr	r3, [pc, #20]	; (800a314 <LoRaMacProcess+0x88>)
 800a2fe:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800a302:	f36f 1245 	bfc	r2, #5, #1
 800a306:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800a30a:	4803      	ldr	r0, [pc, #12]	; (800a318 <LoRaMacProcess+0x8c>)
 800a30c:	f7ff fb5c 	bl	80099c8 <LoRaMacHandleNvm>
}
 800a310:	e7d4      	b.n	800a2bc <LoRaMacProcess+0x30>
 800a312:	bf00      	nop
 800a314:	20000648 	.word	0x20000648
 800a318:	20008000 	.word	0x20008000

0800a31c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a320:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800a322:	2800      	cmp	r0, #0
 800a324:	f000 81a3 	beq.w	800a66e <LoRaMacInitialization+0x352>
 800a328:	4688      	mov	r8, r1
 800a32a:	4691      	mov	r9, r2
 800a32c:	4607      	mov	r7, r0
 800a32e:	2900      	cmp	r1, #0
 800a330:	f000 819f 	beq.w	800a672 <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a334:	6803      	ldr	r3, [r0, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 819d 	beq.w	800a676 <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a33c:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 819b 	beq.w	800a67a <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a344:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 8199 	beq.w	800a67e <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800a34c:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 8197 	beq.w	800a682 <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a354:	4610      	mov	r0, r2
 800a356:	f002 f955 	bl	800c604 <RegionIsActive>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	f000 8193 	beq.w	800a686 <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800a360:	4638      	mov	r0, r7
 800a362:	f001 fb45 	bl	800b9f0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a366:	4ccb      	ldr	r4, [pc, #812]	; (800a694 <LoRaMacInitialization+0x378>)
 800a368:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800a36c:	2100      	movs	r1, #0
 800a36e:	4620      	mov	r0, r4
 800a370:	f005 fa31 	bl	800f7d6 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a374:	4ec8      	ldr	r6, [pc, #800]	; (800a698 <LoRaMacInitialization+0x37c>)
 800a376:	f240 521c 	movw	r2, #1308	; 0x51c
 800a37a:	2100      	movs	r1, #0
 800a37c:	4630      	mov	r0, r6
 800a37e:	f005 fa2a 	bl	800f7d6 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800a382:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a386:	2500      	movs	r5, #0
 800a388:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800a38c:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a390:	4bc2      	ldr	r3, [pc, #776]	; (800a69c <LoRaMacInitialization+0x380>)
 800a392:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a396:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a39a:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800a39e:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a3a0:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800a3a4:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800a3a6:	4bbe      	ldr	r3, [pc, #760]	; (800a6a0 <LoRaMacInitialization+0x384>)
 800a3a8:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a3aa:	a905      	add	r1, sp, #20
 800a3ac:	4648      	mov	r0, r9
 800a3ae:	f002 f959 	bl	800c664 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a3b2:	230f      	movs	r3, #15
 800a3b4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a3b8:	a90a      	add	r1, sp, #40	; 0x28
 800a3ba:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a3be:	f002 f92b 	bl	800c618 <RegionGetPhyParam>
 800a3c2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a3c4:	1b40      	subs	r0, r0, r5
 800a3c6:	bf18      	it	ne
 800a3c8:	2001      	movne	r0, #1
 800a3ca:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a3ce:	f04f 0a0a 	mov.w	sl, #10
 800a3d2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a3d6:	a90a      	add	r1, sp, #40	; 0x28
 800a3d8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a3dc:	f002 f91c 	bl	800c618 <RegionGetPhyParam>
 800a3e0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800a3e2:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a3e6:	f04f 0906 	mov.w	r9, #6
 800a3ea:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a3ee:	a90a      	add	r1, sp, #40	; 0x28
 800a3f0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a3f4:	f002 f910 	bl	800c618 <RegionGetPhyParam>
 800a3f8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800a3fa:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a3fe:	2310      	movs	r3, #16
 800a400:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a404:	a90a      	add	r1, sp, #40	; 0x28
 800a406:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a40a:	f002 f905 	bl	800c618 <RegionGetPhyParam>
 800a40e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a410:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a414:	2311      	movs	r3, #17
 800a416:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a41a:	a90a      	add	r1, sp, #40	; 0x28
 800a41c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a420:	f002 f8fa 	bl	800c618 <RegionGetPhyParam>
 800a424:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a426:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a42a:	2312      	movs	r3, #18
 800a42c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a430:	a90a      	add	r1, sp, #40	; 0x28
 800a432:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a436:	f002 f8ef 	bl	800c618 <RegionGetPhyParam>
 800a43a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a43c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a440:	2313      	movs	r3, #19
 800a442:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a446:	a90a      	add	r1, sp, #40	; 0x28
 800a448:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a44c:	f002 f8e4 	bl	800c618 <RegionGetPhyParam>
 800a450:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a452:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a456:	2314      	movs	r3, #20
 800a458:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a45c:	a90a      	add	r1, sp, #40	; 0x28
 800a45e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a462:	f002 f8d9 	bl	800c618 <RegionGetPhyParam>
 800a466:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a468:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a46c:	2316      	movs	r3, #22
 800a46e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a472:	a90a      	add	r1, sp, #40	; 0x28
 800a474:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a478:	f002 f8ce 	bl	800c618 <RegionGetPhyParam>
 800a47c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a47e:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a482:	2317      	movs	r3, #23
 800a484:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a488:	a90a      	add	r1, sp, #40	; 0x28
 800a48a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a48e:	f002 f8c3 	bl	800c618 <RegionGetPhyParam>
 800a492:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a494:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a498:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a49c:	2318      	movs	r3, #24
 800a49e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4a2:	a90a      	add	r1, sp, #40	; 0x28
 800a4a4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a4a8:	f002 f8b6 	bl	800c618 <RegionGetPhyParam>
 800a4ac:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a4ae:	b2c0      	uxtb	r0, r0
 800a4b0:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a4b4:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a4b8:	231d      	movs	r3, #29
 800a4ba:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4be:	a90a      	add	r1, sp, #40	; 0x28
 800a4c0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a4c4:	f002 f8a8 	bl	800c618 <RegionGetPhyParam>
 800a4c8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a4ca:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a4ce:	231e      	movs	r3, #30
 800a4d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4d4:	a90a      	add	r1, sp, #40	; 0x28
 800a4d6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a4da:	f002 f89d 	bl	800c618 <RegionGetPhyParam>
 800a4de:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a4e0:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a4e4:	231f      	movs	r3, #31
 800a4e6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4ea:	a90a      	add	r1, sp, #40	; 0x28
 800a4ec:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a4f0:	f002 f892 	bl	800c618 <RegionGetPhyParam>
 800a4f4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f8:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a4fc:	2320      	movs	r3, #32
 800a4fe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a502:	a90a      	add	r1, sp, #40	; 0x28
 800a504:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a508:	f002 f886 	bl	800c618 <RegionGetPhyParam>
 800a50c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a510:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a514:	230b      	movs	r3, #11
 800a516:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a51a:	a90a      	add	r1, sp, #40	; 0x28
 800a51c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a520:	f002 f87a 	bl	800c618 <RegionGetPhyParam>
 800a524:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800a526:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a52a:	230c      	movs	r3, #12
 800a52c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a530:	a90a      	add	r1, sp, #40	; 0x28
 800a532:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a536:	f002 f86f 	bl	800c618 <RegionGetPhyParam>
 800a53a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800a53c:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a540:	f04f 0b01 	mov.w	fp, #1
 800a544:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a548:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a54c:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a550:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a554:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a558:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a55c:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a55e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a562:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a564:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800a568:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a56a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800a56e:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a570:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800a574:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a576:	f884 b068 	strb.w	fp, [r4, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800a57a:	f884 b11f 	strb.w	fp, [r4, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800a57e:	f8c6 8348 	str.w	r8, [r6, #840]	; 0x348
    ResetMacParameters( false );
 800a582:	4628      	mov	r0, r5
 800a584:	f7ff fb80 	bl	8009c88 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800a588:	f884 b119 	strb.w	fp, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800a58c:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800a590:	f886 5491 	strb.w	r5, [r6, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800a594:	f8c6 b340 	str.w	fp, [r6, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a598:	62e5      	str	r5, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a59a:	6325      	str	r5, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a59c:	9500      	str	r5, [sp, #0]
 800a59e:	4b41      	ldr	r3, [pc, #260]	; (800a6a4 <LoRaMacInitialization+0x388>)
 800a5a0:	462a      	mov	r2, r5
 800a5a2:	f04f 31ff 	mov.w	r1, #4294967295
 800a5a6:	f506 705a 	add.w	r0, r6, #872	; 0x368
 800a5aa:	f007 fad1 	bl	8011b50 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a5ae:	9500      	str	r5, [sp, #0]
 800a5b0:	4b3d      	ldr	r3, [pc, #244]	; (800a6a8 <LoRaMacInitialization+0x38c>)
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	f04f 31ff 	mov.w	r1, #4294967295
 800a5b8:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800a5bc:	f007 fac8 	bl	8011b50 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a5c0:	9500      	str	r5, [sp, #0]
 800a5c2:	4b3a      	ldr	r3, [pc, #232]	; (800a6ac <LoRaMacInitialization+0x390>)
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	f04f 31ff 	mov.w	r1, #4294967295
 800a5ca:	f506 7066 	add.w	r0, r6, #920	; 0x398
 800a5ce:	f007 fabf 	bl	8011b50 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800a5d2:	9500      	str	r5, [sp, #0]
 800a5d4:	4b36      	ldr	r3, [pc, #216]	; (800a6b0 <LoRaMacInitialization+0x394>)
 800a5d6:	462a      	mov	r2, r5
 800a5d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a5dc:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800a5e0:	f007 fab6 	bl	8011b50 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f007 fa44 	bl	8011a74 <SysTimeGetMcuTime>
 800a5ec:	f504 7392 	add.w	r3, r4, #292	; 0x124
 800a5f0:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a5f4:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800a5f8:	4b2e      	ldr	r3, [pc, #184]	; (800a6b4 <LoRaMacInitialization+0x398>)
 800a5fa:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a5fc:	4b2e      	ldr	r3, [pc, #184]	; (800a6b8 <LoRaMacInitialization+0x39c>)
 800a5fe:	f8c6 334c 	str.w	r3, [r6, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a602:	4b2e      	ldr	r3, [pc, #184]	; (800a6bc <LoRaMacInitialization+0x3a0>)
 800a604:	f8c6 3354 	str.w	r3, [r6, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a608:	4b2d      	ldr	r3, [pc, #180]	; (800a6c0 <LoRaMacInitialization+0x3a4>)
 800a60a:	f8c6 335c 	str.w	r3, [r6, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a60e:	4b2d      	ldr	r3, [pc, #180]	; (800a6c4 <LoRaMacInitialization+0x3a8>)
 800a610:	f8c6 3350 	str.w	r3, [r6, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a614:	4b2c      	ldr	r3, [pc, #176]	; (800a6c8 <LoRaMacInitialization+0x3ac>)
 800a616:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a61a:	4b2c      	ldr	r3, [pc, #176]	; (800a6cc <LoRaMacInitialization+0x3b0>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f506 7053 	add.w	r0, r6, #844	; 0x34c
 800a622:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800a624:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800a628:	f004 fde8 	bl	800f1fc <SecureElementInit>
 800a62c:	bb80      	cbnz	r0, 800a690 <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a62e:	4620      	mov	r0, r4
 800a630:	f001 fc76 	bl	800bf20 <LoRaMacCryptoInit>
 800a634:	2800      	cmp	r0, #0
 800a636:	d14b      	bne.n	800a6d0 <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a638:	f001 f89c 	bl	800b774 <LoRaMacCommandsInit>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d149      	bne.n	800a6d4 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a640:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800a644:	f001 fcbe 	bl	800bfc4 <LoRaMacCryptoSetMulticastReference>
 800a648:	4604      	mov	r4, r0
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d144      	bne.n	800a6d8 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a64e:	4d1f      	ldr	r5, [pc, #124]	; (800a6cc <LoRaMacInitialization+0x3b0>)
 800a650:	696b      	ldr	r3, [r5, #20]
 800a652:	4798      	blx	r3
 800a654:	f005 f894 	bl	800f780 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a658:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a65a:	4a0e      	ldr	r2, [pc, #56]	; (800a694 <LoRaMacInitialization+0x378>)
 800a65c:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800a660:	4798      	blx	r3
    Radio.Sleep( );
 800a662:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a664:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a666:	4658      	mov	r0, fp
 800a668:	f7fd fc80 	bl	8007f6c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800a66c:	e00c      	b.n	800a688 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a66e:	2403      	movs	r4, #3
 800a670:	e00a      	b.n	800a688 <LoRaMacInitialization+0x36c>
 800a672:	2403      	movs	r4, #3
 800a674:	e008      	b.n	800a688 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a676:	2403      	movs	r4, #3
 800a678:	e006      	b.n	800a688 <LoRaMacInitialization+0x36c>
 800a67a:	2403      	movs	r4, #3
 800a67c:	e004      	b.n	800a688 <LoRaMacInitialization+0x36c>
 800a67e:	2403      	movs	r4, #3
 800a680:	e002      	b.n	800a688 <LoRaMacInitialization+0x36c>
 800a682:	2403      	movs	r4, #3
 800a684:	e000      	b.n	800a688 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a686:	2409      	movs	r4, #9
}
 800a688:	4620      	mov	r0, r4
 800a68a:	b00d      	add	sp, #52	; 0x34
 800a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a690:	2411      	movs	r4, #17
 800a692:	e7f9      	b.n	800a688 <LoRaMacInitialization+0x36c>
 800a694:	20008000 	.word	0x20008000
 800a698:	20000648 	.word	0x20000648
 800a69c:	01000400 	.word	0x01000400
 800a6a0:	20000b64 	.word	0x20000b64
 800a6a4:	080096f9 	.word	0x080096f9
 800a6a8:	08009979 	.word	0x08009979
 800a6ac:	08009921 	.word	0x08009921
 800a6b0:	0800834d 	.word	0x0800834d
 800a6b4:	20000644 	.word	0x20000644
 800a6b8:	08009c3d 	.word	0x08009c3d
 800a6bc:	08009bed 	.word	0x08009bed
 800a6c0:	0800819d 	.word	0x0800819d
 800a6c4:	08009bc5 	.word	0x08009bc5
 800a6c8:	08009b9d 	.word	0x08009b9d
 800a6cc:	08012fbc 	.word	0x08012fbc
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a6d0:	2411      	movs	r4, #17
 800a6d2:	e7d9      	b.n	800a688 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a6d4:	2413      	movs	r4, #19
 800a6d6:	e7d7      	b.n	800a688 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a6d8:	2411      	movs	r4, #17
 800a6da:	e7d5      	b.n	800a688 <LoRaMacInitialization+0x36c>

0800a6dc <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800a6dc:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800a6de:	2400      	movs	r4, #0
 800a6e0:	4b03      	ldr	r3, [pc, #12]	; (800a6f0 <LoRaMacStart+0x14>)
 800a6e2:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800a6e6:	f7fd fc2d 	bl	8007f44 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	bd10      	pop	{r4, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20000648 	.word	0x20000648

0800a6f4 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800a6f4:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800a6f6:	f7ff fd9f 	bl	800a238 <LoRaMacIsBusy>
 800a6fa:	b130      	cbz	r0, 800a70a <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800a6fc:	4b0b      	ldr	r3, [pc, #44]	; (800a72c <LoRaMacStop+0x38>)
 800a6fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a702:	2b01      	cmp	r3, #1
 800a704:	d010      	beq.n	800a728 <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800a706:	2001      	movs	r0, #1
}
 800a708:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a70a:	4b09      	ldr	r3, [pc, #36]	; (800a730 <LoRaMacStop+0x3c>)
 800a70c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a710:	2b02      	cmp	r3, #2
 800a712:	d005      	beq.n	800a720 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800a714:	4b05      	ldr	r3, [pc, #20]	; (800a72c <LoRaMacStop+0x38>)
 800a716:	2201      	movs	r2, #1
 800a718:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800a71c:	2000      	movs	r0, #0
 800a71e:	e7f3      	b.n	800a708 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800a720:	4b04      	ldr	r3, [pc, #16]	; (800a734 <LoRaMacStop+0x40>)
 800a722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a724:	4798      	blx	r3
 800a726:	e7f5      	b.n	800a714 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800a728:	2000      	movs	r0, #0
 800a72a:	e7ed      	b.n	800a708 <LoRaMacStop+0x14>
 800a72c:	20000648 	.word	0x20000648
 800a730:	20008000 	.word	0x20008000
 800a734:	08012fbc 	.word	0x08012fbc

0800a738 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800a738:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800a73a:	4c14      	ldr	r4, [pc, #80]	; (800a78c <LoRaMacHalt+0x54>)
 800a73c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a740:	f007 fa64 	bl	8011c0c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800a744:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800a748:	f007 fa60 	bl	8011c0c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a74c:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a750:	f007 fa5c 	bl	8011c0c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800a754:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800a758:	f007 fa58 	bl	8011c0c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800a75c:	f000 ff70 	bl	800b640 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800a760:	4b0b      	ldr	r3, [pc, #44]	; (800a790 <LoRaMacHalt+0x58>)
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a764:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800a766:	2500      	movs	r5, #0
 800a768:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800a76c:	4e09      	ldr	r6, [pc, #36]	; (800a794 <LoRaMacHalt+0x5c>)
 800a76e:	4630      	mov	r0, r6
 800a770:	f7ff f92a 	bl	80099c8 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800a774:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800a778:	4631      	mov	r1, r6
 800a77a:	4807      	ldr	r0, [pc, #28]	; (800a798 <LoRaMacHalt+0x60>)
 800a77c:	f005 f813 	bl	800f7a6 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800a780:	2301      	movs	r3, #1
 800a782:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800a786:	4628      	mov	r0, r5
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	bf00      	nop
 800a78c:	20000648 	.word	0x20000648
 800a790:	08012fbc 	.word	0x08012fbc
 800a794:	20008000 	.word	0x20008000
 800a798:	200085cc 	.word	0x200085cc

0800a79c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a79c:	b530      	push	{r4, r5, lr}
 800a79e:	b08b      	sub	sp, #44	; 0x2c
 800a7a0:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a7a2:	4b31      	ldr	r3, [pc, #196]	; (800a868 <LoRaMacQueryTxPossible+0xcc>)
 800a7a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a7a6:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a7a8:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 800a7ac:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a7b0:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800a7b4:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800a7b8:	4b2c      	ldr	r3, [pc, #176]	; (800a86c <LoRaMacQueryTxPossible+0xd0>)
 800a7ba:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a7be:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800a7c6:	2900      	cmp	r1, #0
 800a7c8:	d048      	beq.n	800a85c <LoRaMacQueryTxPossible+0xc0>
 800a7ca:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800a7cc:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a7d0:	4b25      	ldr	r3, [pc, #148]	; (800a868 <LoRaMacQueryTxPossible+0xcc>)
 800a7d2:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800a7d6:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a7da:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a7dc:	f8b3 1088 	ldrh.w	r1, [r3, #136]	; 0x88
 800a7e0:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a7e4:	f8b3 108a 	ldrh.w	r1, [r3, #138]	; 0x8a
 800a7e8:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a7ec:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800a7f0:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a7f4:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800a7f8:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a7fc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a800:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800a804:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800a808:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a80c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800a810:	ab04      	add	r3, sp, #16
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	f10d 030d 	add.w	r3, sp, #13
 800a818:	f10d 020e 	add.w	r2, sp, #14
 800a81c:	f10d 010f 	add.w	r1, sp, #15
 800a820:	a805      	add	r0, sp, #20
 800a822:	f000 fe7f 	bl	800b524 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a826:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800a82a:	f7fd fcdb 	bl	80081e4 <GetMaxAppPayloadWithoutFOptsLength>
 800a82e:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a830:	a802      	add	r0, sp, #8
 800a832:	f001 f83d 	bl	800b8b0 <LoRaMacCommandsGetSizeSerializedCmds>
 800a836:	b998      	cbnz	r0, 800a860 <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a838:	9b02      	ldr	r3, [sp, #8]
 800a83a:	2b0f      	cmp	r3, #15
 800a83c:	d80a      	bhi.n	800a854 <LoRaMacQueryTxPossible+0xb8>
 800a83e:	786a      	ldrb	r2, [r5, #1]
 800a840:	4293      	cmp	r3, r2
 800a842:	d807      	bhi.n	800a854 <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a848:	9b02      	ldr	r3, [sp, #8]
 800a84a:	441c      	add	r4, r3
 800a84c:	42a2      	cmp	r2, r4
 800a84e:	d309      	bcc.n	800a864 <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a850:	b00b      	add	sp, #44	; 0x2c
 800a852:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a858:	2008      	movs	r0, #8
 800a85a:	e7f9      	b.n	800a850 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a85c:	2003      	movs	r0, #3
 800a85e:	e7f7      	b.n	800a850 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a860:	2013      	movs	r0, #19
 800a862:	e7f5      	b.n	800a850 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a864:	2008      	movs	r0, #8
 800a866:	e7f3      	b.n	800a850 <LoRaMacQueryTxPossible+0xb4>
 800a868:	20008000 	.word	0x20008000
 800a86c:	20000648 	.word	0x20000648

0800a870 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a870:	2800      	cmp	r0, #0
 800a872:	f000 815f 	beq.w	800ab34 <LoRaMacMibGetRequestConfirm+0x2c4>
{
 800a876:	b510      	push	{r4, lr}
 800a878:	b084      	sub	sp, #16
 800a87a:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a87c:	7800      	ldrb	r0, [r0, #0]
 800a87e:	2841      	cmp	r0, #65	; 0x41
 800a880:	f200 8154 	bhi.w	800ab2c <LoRaMacMibGetRequestConfirm+0x2bc>
 800a884:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a888:	00470042 	.word	0x00470042
 800a88c:	0052004d 	.word	0x0052004d
 800a890:	005d0057 	.word	0x005d0057
 800a894:	01520063 	.word	0x01520063
 800a898:	01520152 	.word	0x01520152
 800a89c:	01520152 	.word	0x01520152
 800a8a0:	01520152 	.word	0x01520152
 800a8a4:	006b0152 	.word	0x006b0152
 800a8a8:	00770071 	.word	0x00770071
 800a8ac:	008c0084 	.word	0x008c0084
 800a8b0:	009c0094 	.word	0x009c0094
 800a8b4:	00a400b1 	.word	0x00a400b1
 800a8b8:	00c400be 	.word	0x00c400be
 800a8bc:	00ce00c9 	.word	0x00ce00c9
 800a8c0:	00d800d3 	.word	0x00d800d3
 800a8c4:	00ee00dd 	.word	0x00ee00dd
 800a8c8:	010000f4 	.word	0x010000f4
 800a8cc:	010600fa 	.word	0x010600fa
 800a8d0:	0111010b 	.word	0x0111010b
 800a8d4:	0117011f 	.word	0x0117011f
 800a8d8:	0152011b 	.word	0x0152011b
 800a8dc:	01520125 	.word	0x01520125
 800a8e0:	01520152 	.word	0x01520152
 800a8e4:	01520152 	.word	0x01520152
 800a8e8:	01520152 	.word	0x01520152
 800a8ec:	01520152 	.word	0x01520152
 800a8f0:	01520152 	.word	0x01520152
 800a8f4:	01520152 	.word	0x01520152
 800a8f8:	01520152 	.word	0x01520152
 800a8fc:	0134012e 	.word	0x0134012e
 800a900:	0140013a 	.word	0x0140013a
 800a904:	014c0146 	.word	0x014c0146
 800a908:	01580158 	.word	0x01580158
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a90c:	4b8c      	ldr	r3, [pc, #560]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a90e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a912:	7123      	strb	r3, [r4, #4]
            break;
 800a914:	e111      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a916:	4b8a      	ldr	r3, [pc, #552]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a918:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a91c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a91e:	2000      	movs	r0, #0
            break;
 800a920:	e10b      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800a922:	6860      	ldr	r0, [r4, #4]
 800a924:	f004 fe04 	bl	800f530 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a928:	2000      	movs	r0, #0
            break;
 800a92a:	e106      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800a92c:	6860      	ldr	r0, [r4, #4]
 800a92e:	f004 fe1d 	bl	800f56c <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a932:	2000      	movs	r0, #0
            break;
 800a934:	e101      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a936:	4b82      	ldr	r3, [pc, #520]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a938:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800a93c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a93e:	2000      	movs	r0, #0
            break;
 800a940:	e0fb      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a942:	4b7f      	ldr	r3, [pc, #508]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a948:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a94a:	2000      	movs	r0, #0
            break;
 800a94c:	e0f5      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800a94e:	1d21      	adds	r1, r4, #4
 800a950:	4b7b      	ldr	r3, [pc, #492]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a952:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800a956:	f004 fe25 	bl	800f5a4 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a95a:	2000      	movs	r0, #0
            break;
 800a95c:	e0ed      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a95e:	4b78      	ldr	r3, [pc, #480]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a960:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800a964:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a966:	2000      	movs	r0, #0
            break;
 800a968:	e0e7      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a96a:	4b75      	ldr	r3, [pc, #468]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a96c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a970:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a972:	2000      	movs	r0, #0
            break;
 800a974:	e0e1      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800a976:	231c      	movs	r3, #28
 800a978:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a97c:	a902      	add	r1, sp, #8
 800a97e:	4b70      	ldr	r3, [pc, #448]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a980:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a984:	f001 fe48 	bl	800c618 <RegionGetPhyParam>
 800a988:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800a98a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a98c:	2000      	movs	r0, #0
            break;
 800a98e:	e0d4      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a990:	3404      	adds	r4, #4
 800a992:	4b6c      	ldr	r3, [pc, #432]	; (800ab44 <LoRaMacMibGetRequestConfirm+0x2d4>)
 800a994:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a998:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a99c:	2000      	movs	r0, #0
            break;
 800a99e:	e0cc      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a9a0:	3404      	adds	r4, #4
 800a9a2:	4b69      	ldr	r3, [pc, #420]	; (800ab48 <LoRaMacMibGetRequestConfirm+0x2d8>)
 800a9a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a9a8:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9ac:	2000      	movs	r0, #0
            break;
 800a9ae:	e0c4      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800a9b0:	3404      	adds	r4, #4
 800a9b2:	4b66      	ldr	r3, [pc, #408]	; (800ab4c <LoRaMacMibGetRequestConfirm+0x2dc>)
 800a9b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a9b8:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9bc:	2000      	movs	r0, #0
            break;
 800a9be:	e0bc      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a9c0:	3404      	adds	r4, #4
 800a9c2:	4b63      	ldr	r3, [pc, #396]	; (800ab50 <LoRaMacMibGetRequestConfirm+0x2e0>)
 800a9c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a9c8:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9cc:	2000      	movs	r0, #0
            break;
 800a9ce:	e0b4      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a9d0:	231a      	movs	r3, #26
 800a9d2:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a9d6:	a902      	add	r1, sp, #8
 800a9d8:	4b59      	ldr	r3, [pc, #356]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a9da:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a9de:	f001 fe1b 	bl	800c618 <RegionGetPhyParam>
 800a9e2:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800a9e4:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9e6:	2000      	movs	r0, #0
            break;
 800a9e8:	e0a7      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a9ea:	2319      	movs	r3, #25
 800a9ec:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a9f0:	a902      	add	r1, sp, #8
 800a9f2:	4b53      	ldr	r3, [pc, #332]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800a9f4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a9f8:	f001 fe0e 	bl	800c618 <RegionGetPhyParam>
 800a9fc:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800a9fe:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa00:	2000      	movs	r0, #0
            break;
 800aa02:	e09a      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800aa04:	4b4e      	ldr	r3, [pc, #312]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa06:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800aa0a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa0c:	2000      	movs	r0, #0
            break;
 800aa0e:	e094      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800aa10:	4b4b      	ldr	r3, [pc, #300]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa14:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa16:	2000      	movs	r0, #0
            break;
 800aa18:	e08f      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800aa1a:	4b49      	ldr	r3, [pc, #292]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa20:	2000      	movs	r0, #0
            break;
 800aa22:	e08a      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800aa24:	4b46      	ldr	r3, [pc, #280]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa28:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa2a:	2000      	movs	r0, #0
            break;
 800aa2c:	e085      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800aa2e:	4b44      	ldr	r3, [pc, #272]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa32:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa34:	2000      	movs	r0, #0
            break;
 800aa36:	e080      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800aa38:	4b41      	ldr	r3, [pc, #260]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa3c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa3e:	2000      	movs	r0, #0
            break;
 800aa40:	e07b      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800aa42:	2302      	movs	r3, #2
 800aa44:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800aa48:	4b3d      	ldr	r3, [pc, #244]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa4a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800aa4e:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aa52:	a902      	add	r1, sp, #8
 800aa54:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800aa58:	f001 fdde 	bl	800c618 <RegionGetPhyParam>
 800aa5c:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800aa5e:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa60:	2000      	movs	r0, #0
            break;
 800aa62:	e06a      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800aa64:	4b36      	ldr	r3, [pc, #216]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa66:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800aa6a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa6c:	2000      	movs	r0, #0
            break;
 800aa6e:	e064      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800aa70:	4b33      	ldr	r3, [pc, #204]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa72:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800aa76:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa78:	2000      	movs	r0, #0
            break;
 800aa7a:	e05e      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800aa7c:	4b30      	ldr	r3, [pc, #192]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa7e:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800aa82:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa84:	2000      	movs	r0, #0
            break;
 800aa86:	e058      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800aa88:	4b2d      	ldr	r3, [pc, #180]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa8a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800aa8e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa90:	2000      	movs	r0, #0
            break;
 800aa92:	e052      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800aa94:	4b2a      	ldr	r3, [pc, #168]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa98:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa9a:	2000      	movs	r0, #0
            break;
 800aa9c:	e04d      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800aa9e:	4b28      	ldr	r3, [pc, #160]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aaa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aaa4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaa6:	2000      	movs	r0, #0
            break;
 800aaa8:	e047      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800aaaa:	4b25      	ldr	r3, [pc, #148]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aaac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aab0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aab2:	2000      	movs	r0, #0
            break;
 800aab4:	e041      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800aab6:	4b22      	ldr	r3, [pc, #136]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aab8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaba:	2000      	movs	r0, #0
            break;
 800aabc:	e03d      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800aabe:	4b25      	ldr	r3, [pc, #148]	; (800ab54 <LoRaMacMibGetRequestConfirm+0x2e4>)
 800aac0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aac2:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800aac4:	e039      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800aac6:	4b1e      	ldr	r3, [pc, #120]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aac8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800aacc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aace:	2000      	movs	r0, #0
            break;
 800aad0:	e033      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800aad2:	4b1b      	ldr	r3, [pc, #108]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aad4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800aad8:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800aada:	f001 fec5 	bl	800c868 <RegionGetVersion>
 800aade:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aae0:	2000      	movs	r0, #0
            break;
 800aae2:	e02a      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800aae4:	4b16      	ldr	r3, [pc, #88]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaea:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaec:	2000      	movs	r0, #0
            break;
 800aaee:	e024      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800aaf0:	4b13      	ldr	r3, [pc, #76]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aaf2:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800aaf6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaf8:	2000      	movs	r0, #0
            break;
 800aafa:	e01e      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800aafc:	4b10      	ldr	r3, [pc, #64]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aafe:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800ab02:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab04:	2000      	movs	r0, #0
            break;
 800ab06:	e018      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800ab08:	4b0d      	ldr	r3, [pc, #52]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab0a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800ab0e:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab10:	2000      	movs	r0, #0
            break;
 800ab12:	e012      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800ab14:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab16:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800ab1a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab1c:	2000      	movs	r0, #0
            break;
 800ab1e:	e00c      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800ab20:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab22:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800ab26:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab28:	2000      	movs	r0, #0
            break;
 800ab2a:	e006      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f000 fd8b 	bl	800b648 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800ab32:	e002      	b.n	800ab3a <LoRaMacMibGetRequestConfirm+0x2ca>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ab34:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800ab36:	4770      	bx	lr
    switch( mibGet->Type )
 800ab38:	2018      	movs	r0, #24
}
 800ab3a:	b004      	add	sp, #16
 800ab3c:	bd10      	pop	{r4, pc}
 800ab3e:	bf00      	nop
 800ab40:	20008000 	.word	0x20008000
 800ab44:	2000806c 	.word	0x2000806c
 800ab48:	200080b4 	.word	0x200080b4
 800ab4c:	20008074 	.word	0x20008074
 800ab50:	200080bc 	.word	0x200080bc
 800ab54:	200085cc 	.word	0x200085cc

0800ab58 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	f000 827f 	beq.w	800b05c <LoRaMacMibSetRequestConfirm+0x504>
{
 800ab5e:	b530      	push	{r4, r5, lr}
 800ab60:	b085      	sub	sp, #20
 800ab62:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ab64:	4b9b      	ldr	r3, [pc, #620]	; (800add4 <LoRaMacMibSetRequestConfirm+0x27c>)
 800ab66:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ab6a:	f013 0f02 	tst.w	r3, #2
 800ab6e:	f040 8277 	bne.w	800b060 <LoRaMacMibSetRequestConfirm+0x508>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800ab72:	7805      	ldrb	r5, [r0, #0]
 800ab74:	2d41      	cmp	r5, #65	; 0x41
 800ab76:	f200 826e 	bhi.w	800b056 <LoRaMacMibSetRequestConfirm+0x4fe>
 800ab7a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800ab7e:	0042      	.short	0x0042
 800ab80:	0058004f 	.word	0x0058004f
 800ab84:	0066005f 	.word	0x0066005f
 800ab88:	0072006c 	.word	0x0072006c
 800ab8c:	008b0080 	.word	0x008b0080
 800ab90:	00a10096 	.word	0x00a10096
 800ab94:	00b700ac 	.word	0x00b700ac
 800ab98:	00ce00c2 	.word	0x00ce00c2
 800ab9c:	00e500da 	.word	0x00e500da
 800aba0:	00eb026c 	.word	0x00eb026c
 800aba4:	01350111 	.word	0x01350111
 800aba8:	018d0163 	.word	0x018d0163
 800abac:	019d017d 	.word	0x019d017d
 800abb0:	01ad01a8 	.word	0x01ad01a8
 800abb4:	01b701b2 	.word	0x01b701b2
 800abb8:	026c01bc 	.word	0x026c01bc
 800abbc:	01d601c1 	.word	0x01d601c1
 800abc0:	01ef0204 	.word	0x01ef0204
 800abc4:	02200219 	.word	0x02200219
 800abc8:	022e0228 	.word	0x022e0228
 800abcc:	026c0234 	.word	0x026c0234
 800abd0:	026c0237 	.word	0x026c0237
 800abd4:	026c026c 	.word	0x026c026c
 800abd8:	026c026c 	.word	0x026c026c
 800abdc:	026c026c 	.word	0x026c026c
 800abe0:	026c026c 	.word	0x026c026c
 800abe4:	026c026c 	.word	0x026c026c
 800abe8:	026c026c 	.word	0x026c026c
 800abec:	026c026c 	.word	0x026c026c
 800abf0:	0248026c 	.word	0x0248026c
 800abf4:	0254024e 	.word	0x0254024e
 800abf8:	0260025a 	.word	0x0260025a
 800abfc:	02730266 	.word	0x02730266
 800ac00:	0273      	.short	0x0273
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ac02:	7900      	ldrb	r0, [r0, #4]
 800ac04:	f7ff f90c 	bl	8009e20 <SwitchClass>
            break;
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800ac08:	b930      	cbnz	r0, 800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ac0a:	4a72      	ldr	r2, [pc, #456]	; (800add4 <LoRaMacMibSetRequestConfirm+0x27c>)
 800ac0c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ac10:	f043 0320 	orr.w	r3, r3, #32
 800ac14:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800ac18:	b005      	add	sp, #20
 800ac1a:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800ac1c:	7903      	ldrb	r3, [r0, #4]
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	f000 8222 	beq.w	800b068 <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800ac24:	4a6c      	ldr	r2, [pc, #432]	; (800add8 <LoRaMacMibSetRequestConfirm+0x280>)
 800ac26:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	e7ed      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800ac2e:	6840      	ldr	r0, [r0, #4]
 800ac30:	f004 fc70 	bl	800f514 <SecureElementSetDevEui>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d0e8      	beq.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac38:	2003      	movs	r0, #3
 800ac3a:	e7ed      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800ac3c:	6840      	ldr	r0, [r0, #4]
 800ac3e:	f004 fc85 	bl	800f54c <SecureElementSetJoinEui>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d0e1      	beq.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac46:	4628      	mov	r0, r5
 800ac48:	e7e6      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800ac4a:	7902      	ldrb	r2, [r0, #4]
 800ac4c:	4b62      	ldr	r3, [pc, #392]	; (800add8 <LoRaMacMibSetRequestConfirm+0x280>)
 800ac4e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac52:	2000      	movs	r0, #0
 800ac54:	e7d9      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800ac56:	6842      	ldr	r2, [r0, #4]
 800ac58:	4b5f      	ldr	r3, [pc, #380]	; (800add8 <LoRaMacMibSetRequestConfirm+0x280>)
 800ac5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac5e:	2000      	movs	r0, #0
 800ac60:	e7d3      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800ac62:	6841      	ldr	r1, [r0, #4]
 800ac64:	4b5c      	ldr	r3, [pc, #368]	; (800add8 <LoRaMacMibSetRequestConfirm+0x280>)
 800ac66:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800ac6a:	f004 fc8d 	bl	800f588 <SecureElementSetDevAddr>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	f040 81fc 	bne.w	800b06c <LoRaMacMibSetRequestConfirm+0x514>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800ac74:	6862      	ldr	r2, [r4, #4]
 800ac76:	4b58      	ldr	r3, [pc, #352]	; (800add8 <LoRaMacMibSetRequestConfirm+0x280>)
 800ac78:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if( status == LORAMAC_STATUS_OK )
 800ac7c:	e7c5      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 800ac7e:	6841      	ldr	r1, [r0, #4]
 800ac80:	2900      	cmp	r1, #0
 800ac82:	f000 81f5 	beq.w	800b070 <LoRaMacMibSetRequestConfirm+0x518>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800ac86:	2000      	movs	r0, #0
 800ac88:	f001 faa6 	bl	800c1d8 <LoRaMacCryptoSetKey>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d0bc      	beq.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ac90:	2011      	movs	r0, #17
 800ac92:	e7c1      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkKey != NULL )
 800ac94:	6841      	ldr	r1, [r0, #4]
 800ac96:	2900      	cmp	r1, #0
 800ac98:	f000 81ec 	beq.w	800b074 <LoRaMacMibSetRequestConfirm+0x51c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800ac9c:	2001      	movs	r0, #1
 800ac9e:	f001 fa9b 	bl	800c1d8 <LoRaMacCryptoSetKey>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d0b0      	beq.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aca6:	2011      	movs	r0, #17
 800aca8:	e7b6      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkSKey != NULL )
 800acaa:	6841      	ldr	r1, [r0, #4]
 800acac:	2900      	cmp	r1, #0
 800acae:	f000 81e3 	beq.w	800b078 <LoRaMacMibSetRequestConfirm+0x520>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800acb2:	2008      	movs	r0, #8
 800acb4:	f001 fa90 	bl	800c1d8 <LoRaMacCryptoSetKey>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d0a5      	beq.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800acbc:	2011      	movs	r0, #17
 800acbe:	e7ab      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.AppSKey != NULL )
 800acc0:	6841      	ldr	r1, [r0, #4]
 800acc2:	2900      	cmp	r1, #0
 800acc4:	f000 81da 	beq.w	800b07c <LoRaMacMibSetRequestConfirm+0x524>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800acc8:	2009      	movs	r0, #9
 800acca:	f001 fa85 	bl	800c1d8 <LoRaMacCryptoSetKey>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d09a      	beq.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800acd2:	2011      	movs	r0, #17
 800acd4:	e7a0      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKEKey != NULL )
 800acd6:	6841      	ldr	r1, [r0, #4]
 800acd8:	2900      	cmp	r1, #0
 800acda:	f000 81d1 	beq.w	800b080 <LoRaMacMibSetRequestConfirm+0x528>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800acde:	200c      	movs	r0, #12
 800ace0:	f001 fa7a 	bl	800c1d8 <LoRaMacCryptoSetKey>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d08f      	beq.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ace8:	2011      	movs	r0, #17
 800acea:	e795      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKey0 != NULL )
 800acec:	6841      	ldr	r1, [r0, #4]
 800acee:	2900      	cmp	r1, #0
 800acf0:	f000 81c8 	beq.w	800b084 <LoRaMacMibSetRequestConfirm+0x52c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800acf4:	200d      	movs	r0, #13
 800acf6:	f001 fa6f 	bl	800c1d8 <LoRaMacCryptoSetKey>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d084      	beq.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800acfe:	2011      	movs	r0, #17
 800ad00:	e78a      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800ad02:	6841      	ldr	r1, [r0, #4]
 800ad04:	2900      	cmp	r1, #0
 800ad06:	f000 81bf 	beq.w	800b088 <LoRaMacMibSetRequestConfirm+0x530>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ad0a:	200e      	movs	r0, #14
 800ad0c:	f001 fa64 	bl	800c1d8 <LoRaMacCryptoSetKey>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	f43f af79 	beq.w	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad16:	2011      	movs	r0, #17
 800ad18:	e77e      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ad1a:	6841      	ldr	r1, [r0, #4]
 800ad1c:	2900      	cmp	r1, #0
 800ad1e:	f000 81b5 	beq.w	800b08c <LoRaMacMibSetRequestConfirm+0x534>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ad22:	200f      	movs	r0, #15
 800ad24:	f001 fa58 	bl	800c1d8 <LoRaMacCryptoSetKey>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	f43f af6d 	beq.w	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad2e:	2011      	movs	r0, #17
 800ad30:	e772      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ad32:	7900      	ldrb	r0, [r0, #4]
 800ad34:	4b28      	ldr	r3, [pc, #160]	; (800add8 <LoRaMacMibSetRequestConfirm+0x280>)
 800ad36:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ad3a:	4c28      	ldr	r4, [pc, #160]	; (800addc <LoRaMacMibSetRequestConfirm+0x284>)
 800ad3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad3e:	4798      	blx	r3
            Radio.Sleep( );
 800ad40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad42:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad44:	2000      	movs	r0, #0
 800ad46:	e760      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ad48:	7902      	ldrb	r2, [r0, #4]
 800ad4a:	4b23      	ldr	r3, [pc, #140]	; (800add8 <LoRaMacMibSetRequestConfirm+0x280>)
 800ad4c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad50:	2000      	movs	r0, #0
 800ad52:	e75a      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ad54:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ad58:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ad5c:	4b1e      	ldr	r3, [pc, #120]	; (800add8 <LoRaMacMibSetRequestConfirm+0x280>)
 800ad5e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800ad62:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800ad66:	2207      	movs	r2, #7
 800ad68:	a901      	add	r1, sp, #4
 800ad6a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ad6e:	f001 fc87 	bl	800c680 <RegionVerify>
 800ad72:	b908      	cbnz	r0, 800ad78 <LoRaMacMibSetRequestConfirm+0x220>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad74:	2003      	movs	r0, #3
 800ad76:	e747      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ad78:	6863      	ldr	r3, [r4, #4]
 800ad7a:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	a901      	add	r1, sp, #4
 800ad80:	4b15      	ldr	r3, [pc, #84]	; (800add8 <LoRaMacMibSetRequestConfirm+0x280>)
 800ad82:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ad86:	f001 fc7b 	bl	800c680 <RegionVerify>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	f000 8180 	beq.w	800b090 <LoRaMacMibSetRequestConfirm+0x538>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800ad90:	4b13      	ldr	r3, [pc, #76]	; (800ade0 <LoRaMacMibSetRequestConfirm+0x288>)
 800ad92:	3404      	adds	r4, #4
 800ad94:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad98:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	e733      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ada0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ada4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ada8:	4b0b      	ldr	r3, [pc, #44]	; (800add8 <LoRaMacMibSetRequestConfirm+0x280>)
 800adaa:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800adae:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800adb2:	2207      	movs	r2, #7
 800adb4:	a901      	add	r1, sp, #4
 800adb6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800adba:	f001 fc61 	bl	800c680 <RegionVerify>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f000 8168 	beq.w	800b094 <LoRaMacMibSetRequestConfirm+0x53c>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800adc4:	4b07      	ldr	r3, [pc, #28]	; (800ade4 <LoRaMacMibSetRequestConfirm+0x28c>)
 800adc6:	3404      	adds	r4, #4
 800adc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800adcc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800add0:	2000      	movs	r0, #0
 800add2:	e719      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
 800add4:	20000648 	.word	0x20000648
 800add8:	20008000 	.word	0x20008000
 800addc:	08012fbc 	.word	0x08012fbc
 800ade0:	2000806c 	.word	0x2000806c
 800ade4:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ade8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800adec:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800adf0:	4bb0      	ldr	r3, [pc, #704]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800adf2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800adf6:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800adfa:	2207      	movs	r2, #7
 800adfc:	a901      	add	r1, sp, #4
 800adfe:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ae02:	f001 fc3d 	bl	800c680 <RegionVerify>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	f000 8146 	beq.w	800b098 <LoRaMacMibSetRequestConfirm+0x540>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800ae0c:	4ba9      	ldr	r3, [pc, #676]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ae0e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800ae12:	3404      	adds	r4, #4
 800ae14:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ae18:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ae1c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d001      	beq.n	800ae28 <LoRaMacMibSetRequestConfirm+0x2d0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae24:	2000      	movs	r0, #0
 800ae26:	e6ef      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ae28:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800ae2c:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800ae30:	2800      	cmp	r0, #0
 800ae32:	f43f aee9 	beq.w	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                    Radio.Sleep( );
 800ae36:	4ba0      	ldr	r3, [pc, #640]	; (800b0b8 <LoRaMacMibSetRequestConfirm+0x560>)
 800ae38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3a:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800ae3c:	f7fe fd14 	bl	8009868 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae40:	2000      	movs	r0, #0
 800ae42:	e6e1      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ae44:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ae48:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ae4c:	4b99      	ldr	r3, [pc, #612]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ae4e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800ae52:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ae56:	2207      	movs	r2, #7
 800ae58:	a901      	add	r1, sp, #4
 800ae5a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ae5e:	f001 fc0f 	bl	800c680 <RegionVerify>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	f000 811a 	beq.w	800b09c <LoRaMacMibSetRequestConfirm+0x544>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800ae68:	4b94      	ldr	r3, [pc, #592]	; (800b0bc <LoRaMacMibSetRequestConfirm+0x564>)
 800ae6a:	3404      	adds	r4, #4
 800ae6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ae70:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae74:	2000      	movs	r0, #0
 800ae76:	e6c7      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800ae78:	6843      	ldr	r3, [r0, #4]
 800ae7a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ae82:	a902      	add	r1, sp, #8
 800ae84:	4b8b      	ldr	r3, [pc, #556]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ae86:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ae8a:	f001 fc17 	bl	800c6bc <RegionChanMaskSet>
 800ae8e:	b108      	cbz	r0, 800ae94 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae90:	2000      	movs	r0, #0
 800ae92:	e6b9      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae94:	2003      	movs	r0, #3
 800ae96:	e6bf      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ae98:	6843      	ldr	r3, [r0, #4]
 800ae9a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800aea2:	a902      	add	r1, sp, #8
 800aea4:	4b83      	ldr	r3, [pc, #524]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800aea6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800aeaa:	f001 fc07 	bl	800c6bc <RegionChanMaskSet>
 800aeae:	b108      	cbz	r0, 800aeb4 <LoRaMacMibSetRequestConfirm+0x35c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	e6a9      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aeb4:	2003      	movs	r0, #3
 800aeb6:	e6af      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800aeb8:	7902      	ldrb	r2, [r0, #4]
 800aeba:	1e53      	subs	r3, r2, #1
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b0e      	cmp	r3, #14
 800aec0:	f200 80ee 	bhi.w	800b0a0 <LoRaMacMibSetRequestConfirm+0x548>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800aec4:	4b7b      	ldr	r3, [pc, #492]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800aec6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aeca:	2000      	movs	r0, #0
 800aecc:	e69c      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800aece:	6842      	ldr	r2, [r0, #4]
 800aed0:	4b78      	ldr	r3, [pc, #480]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800aed2:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aed4:	2000      	movs	r0, #0
 800aed6:	e698      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800aed8:	6842      	ldr	r2, [r0, #4]
 800aeda:	4b76      	ldr	r3, [pc, #472]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800aedc:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aede:	2000      	movs	r0, #0
 800aee0:	e693      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800aee2:	6842      	ldr	r2, [r0, #4]
 800aee4:	4b73      	ldr	r3, [pc, #460]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800aee6:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aee8:	2000      	movs	r0, #0
 800aeea:	e68e      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800aeec:	6842      	ldr	r2, [r0, #4]
 800aeee:	4b71      	ldr	r3, [pc, #452]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800aef0:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aef2:	2000      	movs	r0, #0
 800aef4:	e689      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800aef6:	6842      	ldr	r2, [r0, #4]
 800aef8:	4b6e      	ldr	r3, [pc, #440]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800aefa:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aefc:	2000      	movs	r0, #0
 800aefe:	e684      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800af00:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800af04:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800af08:	2206      	movs	r2, #6
 800af0a:	a901      	add	r1, sp, #4
 800af0c:	4b69      	ldr	r3, [pc, #420]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800af0e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800af12:	f001 fbb5 	bl	800c680 <RegionVerify>
 800af16:	2800      	cmp	r0, #0
 800af18:	f000 80c4 	beq.w	800b0a4 <LoRaMacMibSetRequestConfirm+0x54c>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800af1c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800af20:	4b64      	ldr	r3, [pc, #400]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800af22:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af26:	2000      	movs	r0, #0
 800af28:	e66e      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800af2a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800af2e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800af32:	4b60      	ldr	r3, [pc, #384]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800af34:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800af38:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800af3c:	2205      	movs	r2, #5
 800af3e:	a901      	add	r1, sp, #4
 800af40:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800af44:	f001 fb9c 	bl	800c680 <RegionVerify>
 800af48:	2800      	cmp	r0, #0
 800af4a:	f000 80ad 	beq.w	800b0a8 <LoRaMacMibSetRequestConfirm+0x550>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800af4e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800af52:	4b58      	ldr	r3, [pc, #352]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800af54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af58:	2000      	movs	r0, #0
 800af5a:	e655      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800af5c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800af60:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800af64:	220a      	movs	r2, #10
 800af66:	a901      	add	r1, sp, #4
 800af68:	4b52      	ldr	r3, [pc, #328]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800af6a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800af6e:	f001 fb87 	bl	800c680 <RegionVerify>
 800af72:	2800      	cmp	r0, #0
 800af74:	f000 809a 	beq.w	800b0ac <LoRaMacMibSetRequestConfirm+0x554>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800af78:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800af7c:	4b4d      	ldr	r3, [pc, #308]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800af7e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af82:	2000      	movs	r0, #0
 800af84:	e640      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800af86:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800af8a:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800af8e:	2209      	movs	r2, #9
 800af90:	a901      	add	r1, sp, #4
 800af92:	4b48      	ldr	r3, [pc, #288]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800af94:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800af98:	f001 fb72 	bl	800c680 <RegionVerify>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f000 8087 	beq.w	800b0b0 <LoRaMacMibSetRequestConfirm+0x558>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800afa2:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800afa6:	4b43      	ldr	r3, [pc, #268]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800afa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afac:	2000      	movs	r0, #0
 800afae:	e62b      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800afb0:	6842      	ldr	r2, [r0, #4]
 800afb2:	4b40      	ldr	r3, [pc, #256]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800afb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800afb8:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afba:	2000      	movs	r0, #0
 800afbc:	e625      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800afbe:	7902      	ldrb	r2, [r0, #4]
 800afc0:	4b3c      	ldr	r3, [pc, #240]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800afc2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800afc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afca:	2000      	movs	r0, #0
 800afcc:	e61d      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800afce:	6842      	ldr	r2, [r0, #4]
 800afd0:	4b38      	ldr	r3, [pc, #224]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800afd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afd6:	2000      	movs	r0, #0
 800afd8:	e617      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800afda:	6842      	ldr	r2, [r0, #4]
 800afdc:	4b35      	ldr	r3, [pc, #212]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800afde:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afe2:	2000      	movs	r0, #0
 800afe4:	e611      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 800afe6:	f7fe fd55 	bl	8009a94 <RestoreNvmData>
            break;
 800afea:	e60d      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800afec:	7983      	ldrb	r3, [r0, #6]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d901      	bls.n	800aff6 <LoRaMacMibSetRequestConfirm+0x49e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aff2:	2003      	movs	r0, #3
 800aff4:	e610      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800aff6:	6842      	ldr	r2, [r0, #4]
 800aff8:	4b2e      	ldr	r3, [pc, #184]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800affa:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800affe:	6840      	ldr	r0, [r0, #4]
 800b000:	f000 ffa6 	bl	800bf50 <LoRaMacCryptoSetLrWanVersion>
 800b004:	2800      	cmp	r0, #0
 800b006:	f43f ae00 	beq.w	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b00a:	2011      	movs	r0, #17
 800b00c:	e604      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800b00e:	6842      	ldr	r2, [r0, #4]
 800b010:	4b28      	ldr	r3, [pc, #160]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800b012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b016:	2000      	movs	r0, #0
 800b018:	e5f7      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800b01a:	7902      	ldrb	r2, [r0, #4]
 800b01c:	4b25      	ldr	r3, [pc, #148]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800b01e:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b022:	2000      	movs	r0, #0
 800b024:	e5f1      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800b026:	8882      	ldrh	r2, [r0, #4]
 800b028:	4b22      	ldr	r3, [pc, #136]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800b02a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b02e:	2000      	movs	r0, #0
 800b030:	e5eb      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800b032:	8882      	ldrh	r2, [r0, #4]
 800b034:	4b1f      	ldr	r3, [pc, #124]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800b036:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b03a:	2000      	movs	r0, #0
 800b03c:	e5e5      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800b03e:	8882      	ldrh	r2, [r0, #4]
 800b040:	4b1c      	ldr	r3, [pc, #112]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800b042:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b046:	2000      	movs	r0, #0
 800b048:	e5df      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800b04a:	8882      	ldrh	r2, [r0, #4]
 800b04c:	4b19      	ldr	r3, [pc, #100]	; (800b0b4 <LoRaMacMibSetRequestConfirm+0x55c>)
 800b04e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b052:	2000      	movs	r0, #0
 800b054:	e5d9      	b.n	800ac0a <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800b056:	f000 faf9 	bl	800b64c <LoRaMacMibClassBSetRequestConfirm>
            break;
 800b05a:	e5d5      	b.n	800ac08 <LoRaMacMibSetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b05c:	2003      	movs	r0, #3
}
 800b05e:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800b060:	2001      	movs	r0, #1
 800b062:	e5d9      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
    switch( mibSet->Type )
 800b064:	2018      	movs	r0, #24
 800b066:	e5d7      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b068:	2003      	movs	r0, #3
 800b06a:	e5d5      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b06c:	2003      	movs	r0, #3
 800b06e:	e5d3      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b070:	2003      	movs	r0, #3
 800b072:	e5d1      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b074:	2003      	movs	r0, #3
 800b076:	e5cf      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b078:	2003      	movs	r0, #3
 800b07a:	e5cd      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b07c:	2003      	movs	r0, #3
 800b07e:	e5cb      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b080:	2003      	movs	r0, #3
 800b082:	e5c9      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b084:	2003      	movs	r0, #3
 800b086:	e5c7      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b088:	2003      	movs	r0, #3
 800b08a:	e5c5      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b08c:	2003      	movs	r0, #3
 800b08e:	e5c3      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b090:	2003      	movs	r0, #3
 800b092:	e5c1      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b094:	2003      	movs	r0, #3
 800b096:	e5bf      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b098:	2003      	movs	r0, #3
 800b09a:	e5bd      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b09c:	2003      	movs	r0, #3
 800b09e:	e5bb      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b0a0:	2003      	movs	r0, #3
 800b0a2:	e5b9      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b0a4:	2003      	movs	r0, #3
 800b0a6:	e5b7      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b0a8:	2003      	movs	r0, #3
 800b0aa:	e5b5      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b0ac:	2003      	movs	r0, #3
 800b0ae:	e5b3      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b0b0:	2003      	movs	r0, #3
 800b0b2:	e5b1      	b.n	800ac18 <LoRaMacMibSetRequestConfirm+0xc0>
 800b0b4:	20008000 	.word	0x20008000
 800b0b8:	08012fbc 	.word	0x08012fbc
 800b0bc:	200080bc 	.word	0x200080bc

0800b0c0 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800b0c0:	b570      	push	{r4, r5, r6, lr}
 800b0c2:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	f000 80f3 	beq.w	800b2b6 <LoRaMacMlmeRequest+0x1f6>
 800b0d0:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b0d2:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800b0d4:	f7ff f8b0 	bl	800a238 <LoRaMacIsBusy>
 800b0d8:	b118      	cbz	r0, 800b0e2 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800b0da:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800b0dc:	4620      	mov	r0, r4
 800b0de:	b006      	add	sp, #24
 800b0e0:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b0e2:	f000 fd69 	bl	800bbb8 <LoRaMacConfirmQueueIsFull>
 800b0e6:	b108      	cbz	r0, 800b0ec <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800b0e8:	2401      	movs	r4, #1
 800b0ea:	e7f7      	b.n	800b0dc <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b0ec:	f000 fd5e 	bl	800bbac <LoRaMacConfirmQueueGetCnt>
 800b0f0:	b308      	cbz	r0, 800b136 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b0f2:	4b72      	ldr	r3, [pc, #456]	; (800b2bc <LoRaMacMlmeRequest+0x1fc>)
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	f883 1455 	strb.w	r1, [r3, #1109]	; 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b0fa:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800b0fe:	f042 0204 	orr.w	r2, r2, #4
 800b102:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 800b106:	782b      	ldrb	r3, [r5, #0]
 800b108:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b10c:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800b110:	2200      	movs	r2, #0
 800b112:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800b116:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800b11a:	461c      	mov	r4, r3
 800b11c:	3b01      	subs	r3, #1
 800b11e:	2b0c      	cmp	r3, #12
 800b120:	f200 80af 	bhi.w	800b282 <LoRaMacMlmeRequest+0x1c2>
 800b124:	e8df f003 	tbb	[pc, r3]
 800b128:	adadad0d 	.word	0xadadad0d
 800b12c:	adad675d 	.word	0xadad675d
 800b130:	7f9ead70 	.word	0x7f9ead70
 800b134:	95          	.byte	0x95
 800b135:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b136:	2214      	movs	r2, #20
 800b138:	2100      	movs	r1, #0
 800b13a:	4861      	ldr	r0, [pc, #388]	; (800b2c0 <LoRaMacMlmeRequest+0x200>)
 800b13c:	f004 fb4b 	bl	800f7d6 <memset1>
 800b140:	e7d7      	b.n	800b0f2 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b142:	4b5e      	ldr	r3, [pc, #376]	; (800b2bc <LoRaMacMlmeRequest+0x1fc>)
 800b144:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b148:	f013 0f20 	tst.w	r3, #32
 800b14c:	d1c6      	bne.n	800b0dc <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800b14e:	792b      	ldrb	r3, [r5, #4]
 800b150:	2b02      	cmp	r3, #2
 800b152:	d003      	beq.n	800b15c <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800b154:	2b01      	cmp	r3, #1
 800b156:	d026      	beq.n	800b1a6 <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b158:	2402      	movs	r4, #2
 800b15a:	e093      	b.n	800b284 <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800b15c:	2000      	movs	r0, #0
 800b15e:	f7fe fd93 	bl	8009c88 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b162:	4c58      	ldr	r4, [pc, #352]	; (800b2c4 <LoRaMacMlmeRequest+0x204>)
 800b164:	2200      	movs	r2, #0
 800b166:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b16a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b16e:	f001 fb43 	bl	800c7f8 <RegionAlternateDr>
 800b172:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800b176:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800b17a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b17e:	2307      	movs	r3, #7
 800b180:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800b184:	20ff      	movs	r0, #255	; 0xff
 800b186:	f7fe fee1 	bl	8009f4c <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800b18a:	4604      	mov	r4, r0
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d079      	beq.n	800b284 <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b190:	4e4c      	ldr	r6, [pc, #304]	; (800b2c4 <LoRaMacMlmeRequest+0x204>)
 800b192:	2201      	movs	r2, #1
 800b194:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b198:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800b19c:	f001 fb2c 	bl	800c7f8 <RegionAlternateDr>
 800b1a0:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800b1a4:	e06e      	b.n	800b284 <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800b1a6:	4e47      	ldr	r6, [pc, #284]	; (800b2c4 <LoRaMacMlmeRequest+0x204>)
 800b1a8:	2400      	movs	r4, #0
 800b1aa:	f886 411d 	strb.w	r4, [r6, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b1b4:	4669      	mov	r1, sp
 800b1b6:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800b1ba:	f001 fa53 	bl	800c664 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800b1be:	792b      	ldrb	r3, [r5, #4]
 800b1c0:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b1c4:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800b1ce:	f7fc ffd9 	bl	8008184 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b1d2:	4a3a      	ldr	r2, [pc, #232]	; (800b2bc <LoRaMacMlmeRequest+0x1fc>)
 800b1d4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800b1d8:	f043 0310 	orr.w	r3, r3, #16
 800b1dc:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 800b1e0:	e050      	b.n	800b284 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	a904      	add	r1, sp, #16
 800b1e6:	2002      	movs	r0, #2
 800b1e8:	f000 fad4 	bl	800b794 <LoRaMacCommandsAddCmd>
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d048      	beq.n	800b284 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b1f2:	2413      	movs	r4, #19
 800b1f4:	e046      	b.n	800b284 <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800b1f6:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800b1fa:	b2d2      	uxtb	r2, r2
 800b1fc:	68a9      	ldr	r1, [r5, #8]
 800b1fe:	88a8      	ldrh	r0, [r5, #4]
 800b200:	f7fc ff16 	bl	8008030 <SetTxContinuousWave>
 800b204:	4604      	mov	r4, r0
            break;
 800b206:	e03d      	b.n	800b284 <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800b208:	4669      	mov	r1, sp
 800b20a:	200d      	movs	r0, #13
 800b20c:	f000 fb0e 	bl	800b82c <LoRaMacCommandsGetCmd>
 800b210:	4604      	mov	r4, r0
 800b212:	b3b8      	cbz	r0, 800b284 <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b214:	2200      	movs	r2, #0
 800b216:	a904      	add	r1, sp, #16
 800b218:	200d      	movs	r0, #13
 800b21a:	f000 fabb 	bl	800b794 <LoRaMacCommandsAddCmd>
 800b21e:	4604      	mov	r4, r0
 800b220:	b380      	cbz	r0, 800b284 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b222:	2413      	movs	r4, #19
            break;
 800b224:	e02e      	b.n	800b284 <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800b226:	4b27      	ldr	r3, [pc, #156]	; (800b2c4 <LoRaMacMlmeRequest+0x204>)
 800b228:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b22c:	b10b      	cbz	r3, 800b232 <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b22e:	2402      	movs	r4, #2
 800b230:	e028      	b.n	800b284 <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b232:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b234:	f004 0007 	and.w	r0, r4, #7
 800b238:	f000 fa01 	bl	800b63e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b23c:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b240:	2201      	movs	r2, #1
 800b242:	a904      	add	r1, sp, #16
 800b244:	2010      	movs	r0, #16
 800b246:	f000 faa5 	bl	800b794 <LoRaMacCommandsAddCmd>
 800b24a:	4604      	mov	r4, r0
 800b24c:	b1d0      	cbz	r0, 800b284 <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b24e:	2413      	movs	r4, #19
 800b250:	e018      	b.n	800b284 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b252:	2200      	movs	r2, #0
 800b254:	a904      	add	r1, sp, #16
 800b256:	2012      	movs	r0, #18
 800b258:	f000 fa9c 	bl	800b794 <LoRaMacCommandsAddCmd>
 800b25c:	4604      	mov	r4, r0
 800b25e:	b188      	cbz	r0, 800b284 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b260:	2413      	movs	r4, #19
 800b262:	e00f      	b.n	800b284 <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800b264:	2301      	movs	r3, #1
 800b266:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b26a:	f000 f9d9 	bl	800b620 <LoRaMacClassBIsAcquisitionInProgress>
 800b26e:	b108      	cbz	r0, 800b274 <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800b270:	2401      	movs	r4, #1
 800b272:	e007      	b.n	800b284 <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b274:	f000 f9d1 	bl	800b61a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b278:	2000      	movs	r0, #0
 800b27a:	f000 f9d3 	bl	800b624 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800b27e:	2400      	movs	r4, #0
 800b280:	e000      	b.n	800b284 <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800b282:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b284:	4b0d      	ldr	r3, [pc, #52]	; (800b2bc <LoRaMacMlmeRequest+0x1fc>)
 800b286:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800b28a:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800b28c:	b17c      	cbz	r4, 800b2ae <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b28e:	f000 fc8d 	bl	800bbac <LoRaMacConfirmQueueGetCnt>
 800b292:	2800      	cmp	r0, #0
 800b294:	f47f af22 	bne.w	800b0dc <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800b298:	4b08      	ldr	r3, [pc, #32]	; (800b2bc <LoRaMacMlmeRequest+0x1fc>)
 800b29a:	2100      	movs	r1, #0
 800b29c:	f883 141a 	strb.w	r1, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b2a0:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800b2a4:	f361 0282 	bfi	r2, r1, #2, #1
 800b2a8:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800b2ac:	e716      	b.n	800b0dc <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b2ae:	a805      	add	r0, sp, #20
 800b2b0:	f000 fbb2 	bl	800ba18 <LoRaMacConfirmQueueAdd>
 800b2b4:	e712      	b.n	800b0dc <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b2b6:	2403      	movs	r4, #3
 800b2b8:	e710      	b.n	800b0dc <LoRaMacMlmeRequest+0x1c>
 800b2ba:	bf00      	nop
 800b2bc:	20000648 	.word	0x20000648
 800b2c0:	20000a9c 	.word	0x20000a9c
 800b2c4:	20008000 	.word	0x20008000

0800b2c8 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2cc:	b091      	sub	sp, #68	; 0x44
 800b2ce:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	f000 80de 	beq.w	800b492 <LoRaMacMcpsRequest+0x1ca>
 800b2d6:	f04f 0a00 	mov.w	sl, #0
 800b2da:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b2dc:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800b2e0:	f7fe ffaa 	bl	800a238 <LoRaMacIsBusy>
 800b2e4:	4680      	mov	r8, r0
 800b2e6:	b118      	cbz	r0, 800b2f0 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800b2e8:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b2ea:	b011      	add	sp, #68	; 0x44
 800b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800b2f0:	ac06      	add	r4, sp, #24
 800b2f2:	462e      	mov	r6, r5
 800b2f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b2f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2f8:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800b2fc:	4651      	mov	r1, sl
 800b2fe:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b302:	4c66      	ldr	r4, [pc, #408]	; (800b49c <LoRaMacMcpsRequest+0x1d4>)
 800b304:	2214      	movs	r2, #20
 800b306:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 800b30a:	f004 fa64 	bl	800f7d6 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b314:	4b62      	ldr	r3, [pc, #392]	; (800b4a0 <LoRaMacMcpsRequest+0x1d8>)
 800b316:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d065      	beq.n	800b3ea <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800b31e:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800b322:	2f01      	cmp	r7, #1
 800b324:	f000 8086 	beq.w	800b434 <LoRaMacMcpsRequest+0x16c>
 800b328:	2f03      	cmp	r7, #3
 800b32a:	f000 8096 	beq.w	800b45a <LoRaMacMcpsRequest+0x192>
 800b32e:	2f00      	cmp	r7, #0
 800b330:	d06d      	beq.n	800b40e <LoRaMacMcpsRequest+0x146>
 800b332:	f04f 0b00 	mov.w	fp, #0
 800b336:	f8cd b014 	str.w	fp, [sp, #20]
 800b33a:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b33e:	2302      	movs	r3, #2
 800b340:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b344:	4e56      	ldr	r6, [pc, #344]	; (800b4a0 <LoRaMacMcpsRequest+0x1d8>)
 800b346:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 800b34a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b34e:	a90e      	add	r1, sp, #56	; 0x38
 800b350:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800b354:	f001 f960 	bl	800c618 <RegionGetPhyParam>
 800b358:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b35a:	b244      	sxtb	r4, r0
 800b35c:	45a3      	cmp	fp, r4
 800b35e:	bfb8      	it	lt
 800b360:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800b362:	f896 911a 	ldrb.w	r9, [r6, #282]	; 0x11a
 800b366:	f896 211d 	ldrb.w	r2, [r6, #285]	; 0x11d
 800b36a:	f896 1130 	ldrb.w	r1, [r6, #304]	; 0x130
 800b36e:	4648      	mov	r0, r9
 800b370:	f7fc fe30 	bl	8007fd4 <CheckForMinimumAbpDatarate>
 800b374:	4603      	mov	r3, r0
 800b376:	b900      	cbnz	r0, 800b37a <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b378:	465c      	mov	r4, fp
    if( readyToSend == true )
 800b37a:	f1b8 0f00 	cmp.w	r8, #0
 800b37e:	f000 8082 	beq.w	800b486 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800b382:	f1b9 0f00 	cmp.w	r9, #0
 800b386:	d000      	beq.n	800b38a <LoRaMacMcpsRequest+0xc2>
 800b388:	b19b      	cbz	r3, 800b3b2 <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800b38a:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b38e:	4b44      	ldr	r3, [pc, #272]	; (800b4a0 <LoRaMacMcpsRequest+0x1d8>)
 800b390:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800b394:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b398:	2205      	movs	r2, #5
 800b39a:	a90b      	add	r1, sp, #44	; 0x2c
 800b39c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b3a0:	f001 f96e 	bl	800c680 <RegionVerify>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d076      	beq.n	800b496 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b3a8:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800b3ac:	4b3c      	ldr	r3, [pc, #240]	; (800b4a0 <LoRaMacMcpsRequest+0x1d8>)
 800b3ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800b3b2:	4b3a      	ldr	r3, [pc, #232]	; (800b49c <LoRaMacMcpsRequest+0x1d4>)
 800b3b4:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800b3b8:	4b39      	ldr	r3, [pc, #228]	; (800b4a0 <LoRaMacMcpsRequest+0x1d8>)
 800b3ba:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800b3be:	f7fd ff95 	bl	80092ec <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800b3c2:	9b03      	ldr	r3, [sp, #12]
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	4653      	mov	r3, sl
 800b3c8:	9a05      	ldr	r2, [sp, #20]
 800b3ca:	9904      	ldr	r1, [sp, #16]
 800b3cc:	a80c      	add	r0, sp, #48	; 0x30
 800b3ce:	f7fe fea3 	bl	800a118 <Send>
        if( status == LORAMAC_STATUS_OK )
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d152      	bne.n	800b47c <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800b3d6:	4b31      	ldr	r3, [pc, #196]	; (800b49c <LoRaMacMcpsRequest+0x1d4>)
 800b3d8:	f883 7440 	strb.w	r7, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b3dc:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800b3e0:	f042 0201 	orr.w	r2, r2, #1
 800b3e4:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800b3e8:	e04e      	b.n	800b488 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b3ea:	4b2d      	ldr	r3, [pc, #180]	; (800b4a0 <LoRaMacMcpsRequest+0x1d8>)
 800b3ec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d194      	bne.n	800b31e <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b3f4:	4b2a      	ldr	r3, [pc, #168]	; (800b4a0 <LoRaMacMcpsRequest+0x1d8>)
 800b3f6:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d18f      	bne.n	800b31e <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800b3fe:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b402:	2b00      	cmp	r3, #0
 800b404:	d18b      	bne.n	800b31e <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800b406:	2301      	movs	r3, #1
 800b408:	f88d 3018 	strb.w	r3, [sp, #24]
 800b40c:	e787      	b.n	800b31e <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b40e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b412:	2202      	movs	r2, #2
 800b414:	f362 1347 	bfi	r3, r2, #5, #3
 800b418:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800b41c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b420:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800b422:	9b08      	ldr	r3, [sp, #32]
 800b424:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800b426:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800b42a:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b42e:	f04f 0801 	mov.w	r8, #1
            break;
 800b432:	e784      	b.n	800b33e <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b434:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b438:	2204      	movs	r2, #4
 800b43a:	f362 1347 	bfi	r3, r2, #5, #3
 800b43e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800b442:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b446:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800b448:	9b08      	ldr	r3, [sp, #32]
 800b44a:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800b44c:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800b450:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b454:	f04f 0801 	mov.w	r8, #1
            break;
 800b458:	e771      	b.n	800b33e <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b45a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b45e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b462:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800b466:	9b07      	ldr	r3, [sp, #28]
 800b468:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800b46a:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800b46e:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800b472:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	9304      	str	r3, [sp, #16]
            break;
 800b47a:	e760      	b.n	800b33e <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800b47c:	4b07      	ldr	r3, [pc, #28]	; (800b49c <LoRaMacMcpsRequest+0x1d4>)
 800b47e:	2200      	movs	r2, #0
 800b480:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 800b484:	e000      	b.n	800b488 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b486:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b488:	4b04      	ldr	r3, [pc, #16]	; (800b49c <LoRaMacMcpsRequest+0x1d4>)
 800b48a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800b48e:	612b      	str	r3, [r5, #16]
    return status;
 800b490:	e72b      	b.n	800b2ea <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b492:	2003      	movs	r0, #3
 800b494:	e729      	b.n	800b2ea <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b496:	2003      	movs	r0, #3
 800b498:	e727      	b.n	800b2ea <LoRaMacMcpsRequest+0x22>
 800b49a:	bf00      	nop
 800b49c:	20000648 	.word	0x20000648
 800b4a0:	20008000 	.word	0x20008000

0800b4a4 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b4a4:	b510      	push	{r4, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b4aa:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b4ae:	220f      	movs	r2, #15
 800b4b0:	a901      	add	r1, sp, #4
 800b4b2:	4b09      	ldr	r3, [pc, #36]	; (800b4d8 <LoRaMacTestSetDutyCycleOn+0x34>)
 800b4b4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b4b8:	f001 f8e2 	bl	800c680 <RegionVerify>
 800b4bc:	b148      	cbz	r0, 800b4d2 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b4be:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <LoRaMacTestSetDutyCycleOn+0x34>)
 800b4c0:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b4c4:	4a05      	ldr	r2, [pc, #20]	; (800b4dc <LoRaMacTestSetDutyCycleOn+0x38>)
 800b4c6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800b4ca:	f043 0320 	orr.w	r3, r3, #32
 800b4ce:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800b4d2:	b002      	add	sp, #8
 800b4d4:	bd10      	pop	{r4, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20008000 	.word	0x20008000
 800b4dc:	20000648 	.word	0x20000648

0800b4e0 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800b4e0:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800b4e2:	f7ff f907 	bl	800a6f4 <LoRaMacStop>
 800b4e6:	b110      	cbz	r0, 800b4ee <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800b4e8:	2401      	movs	r4, #1
    }
}
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	bd38      	pop	{r3, r4, r5, pc}
 800b4ee:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800b4f0:	4d0a      	ldr	r5, [pc, #40]	; (800b51c <LoRaMacDeInitialization+0x3c>)
 800b4f2:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800b4f6:	f006 fb89 	bl	8011c0c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800b4fa:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800b4fe:	f006 fb85 	bl	8011c0c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b502:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800b506:	f006 fb81 	bl	8011c0c <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800b50a:	f000 f899 	bl	800b640 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800b50e:	2000      	movs	r0, #0
 800b510:	f7fe fbba 	bl	8009c88 <ResetMacParameters>
        Radio.Sleep( );
 800b514:	4b02      	ldr	r3, [pc, #8]	; (800b520 <LoRaMacDeInitialization+0x40>)
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800b51a:	e7e6      	b.n	800b4ea <LoRaMacDeInitialization+0xa>
 800b51c:	20000648 	.word	0x20000648
 800b520:	08012fbc 	.word	0x08012fbc

0800b524 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800b524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b528:	b08b      	sub	sp, #44	; 0x2c
 800b52a:	460f      	mov	r7, r1
 800b52c:	4616      	mov	r6, r2
 800b52e:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800b530:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800b534:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800b538:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800b53c:	6842      	ldr	r2, [r0, #4]
 800b53e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b540:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800b542:	f890 8001 	ldrb.w	r8, [r0, #1]
 800b546:	f1b8 0f00 	cmp.w	r8, #0
 800b54a:	d109      	bne.n	800b560 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800b54c:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800b550:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800b554:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800b558:	4640      	mov	r0, r8
 800b55a:	b00b      	add	sp, #44	; 0x2c
 800b55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b560:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b562:	2302      	movs	r3, #2
 800b564:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b568:	7bc3      	ldrb	r3, [r0, #15]
 800b56a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b56e:	a908      	add	r1, sp, #32
 800b570:	7c00      	ldrb	r0, [r0, #16]
 800b572:	f001 f851 	bl	800c618 <RegionGetPhyParam>
 800b576:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800b578:	b243      	sxtb	r3, r0
 800b57a:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800b57c:	454b      	cmp	r3, r9
 800b57e:	bfb8      	it	lt
 800b580:	464b      	movlt	r3, r9
 800b582:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800b584:	6862      	ldr	r2, [r4, #4]
 800b586:	8923      	ldrh	r3, [r4, #8]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d201      	bcs.n	800b590 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800b58c:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b590:	8961      	ldrh	r1, [r4, #10]
 800b592:	440b      	add	r3, r1
 800b594:	429a      	cmp	r2, r3
 800b596:	d224      	bcs.n	800b5e2 <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800b598:	6863      	ldr	r3, [r4, #4]
 800b59a:	8921      	ldrh	r1, [r4, #8]
 800b59c:	8962      	ldrh	r2, [r4, #10]
 800b59e:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800b5a2:	4283      	cmp	r3, r0
 800b5a4:	d332      	bcc.n	800b60c <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800b5a6:	1a5b      	subs	r3, r3, r1
 800b5a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5ac:	fb02 3311 	mls	r3, r2, r1, r3
 800b5b0:	bb7b      	cbnz	r3, 800b612 <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800b5b2:	9b01      	ldr	r3, [sp, #4]
 800b5b4:	4599      	cmp	r9, r3
 800b5b6:	dc03      	bgt.n	800b5c0 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800b5b8:	7823      	ldrb	r3, [r4, #0]
 800b5ba:	b9eb      	cbnz	r3, 800b5f8 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800b5bc:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b5c0:	2321      	movs	r3, #33	; 0x21
 800b5c2:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800b5c6:	9b00      	ldr	r3, [sp, #0]
 800b5c8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b5cc:	7be3      	ldrb	r3, [r4, #15]
 800b5ce:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b5d2:	a908      	add	r1, sp, #32
 800b5d4:	7c20      	ldrb	r0, [r4, #16]
 800b5d6:	f001 f81f 	bl	800c618 <RegionGetPhyParam>
 800b5da:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800b5dc:	fa4f f980 	sxtb.w	r9, r0
 800b5e0:	e7b4      	b.n	800b54c <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800b5e2:	230a      	movs	r3, #10
 800b5e4:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b5e8:	a908      	add	r1, sp, #32
 800b5ea:	7c20      	ldrb	r0, [r4, #16]
 800b5ec:	f001 f814 	bl	800c618 <RegionGetPhyParam>
 800b5f0:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800b5f2:	fa4f fa80 	sxtb.w	sl, r0
 800b5f6:	e7cf      	b.n	800b598 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800b5fe:	a903      	add	r1, sp, #12
 800b600:	7c20      	ldrb	r0, [r4, #16]
 800b602:	f001 f82f 	bl	800c664 <RegionInitDefaults>
                    nbTrans = 1;
 800b606:	f04f 0b01 	mov.w	fp, #1
 800b60a:	e7d9      	b.n	800b5c0 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800b60c:	f8dd 9000 	ldr.w	r9, [sp]
 800b610:	e79c      	b.n	800b54c <LoRaMacAdrCalcNext+0x28>
 800b612:	f8dd 9000 	ldr.w	r9, [sp]
 800b616:	e799      	b.n	800b54c <LoRaMacAdrCalcNext+0x28>

0800b618 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b618:	4770      	bx	lr

0800b61a <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b61a:	4770      	bx	lr

0800b61c <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b61c:	4770      	bx	lr

0800b61e <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b61e:	4770      	bx	lr

0800b620 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b620:	2000      	movs	r0, #0
 800b622:	4770      	bx	lr

0800b624 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b624:	4770      	bx	lr

0800b626 <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b626:	4770      	bx	lr

0800b628 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b628:	4770      	bx	lr

0800b62a <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b62a:	2000      	movs	r0, #0
 800b62c:	4770      	bx	lr

0800b62e <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b62e:	2000      	movs	r0, #0
 800b630:	4770      	bx	lr

0800b632 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b632:	2000      	movs	r0, #0
 800b634:	4770      	bx	lr

0800b636 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b636:	2000      	movs	r0, #0
 800b638:	4770      	bx	lr

0800b63a <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b63a:	2000      	movs	r0, #0
 800b63c:	4770      	bx	lr

0800b63e <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b63e:	4770      	bx	lr

0800b640 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b640:	4770      	bx	lr

0800b642 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b642:	4770      	bx	lr

0800b644 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b644:	2002      	movs	r0, #2
 800b646:	4770      	bx	lr

0800b648 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b648:	2002      	movs	r0, #2
 800b64a:	4770      	bx	lr

0800b64c <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b64c:	2002      	movs	r0, #2
 800b64e:	4770      	bx	lr

0800b650 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b650:	4770      	bx	lr

0800b652 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b652:	2000      	movs	r0, #0
 800b654:	4770      	bx	lr

0800b656 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b656:	4770      	bx	lr

0800b658 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b658:	4770      	bx	lr

0800b65a <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b65a:	2000      	movs	r0, #0
 800b65c:	4770      	bx	lr

0800b65e <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b65e:	2000      	movs	r0, #0
 800b660:	4770      	bx	lr

0800b662 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b662:	4770      	bx	lr

0800b664 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b664:	4770      	bx	lr

0800b666 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b666:	4770      	bx	lr

0800b668 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b668:	2300      	movs	r3, #0
 800b66a:	2b0f      	cmp	r3, #15
 800b66c:	d804      	bhi.n	800b678 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800b66e:	5cc2      	ldrb	r2, [r0, r3]
 800b670:	b922      	cbnz	r2, 800b67c <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b672:	3301      	adds	r3, #1
 800b674:	b29b      	uxth	r3, r3
 800b676:	e7f8      	b.n	800b66a <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800b678:	2001      	movs	r0, #1
 800b67a:	4770      	bx	lr
            return false;
 800b67c:	2000      	movs	r0, #0
}
 800b67e:	4770      	bx	lr

0800b680 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800b680:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800b682:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800b684:	0125      	lsls	r5, r4, #4
 800b686:	f105 0308 	add.w	r3, r5, #8
 800b68a:	4d06      	ldr	r5, [pc, #24]	; (800b6a4 <MallocNewMacCommandSlot+0x24>)
 800b68c:	441d      	add	r5, r3
 800b68e:	4628      	mov	r0, r5
 800b690:	f7ff ffea 	bl	800b668 <IsSlotFree>
 800b694:	b920      	cbnz	r0, 800b6a0 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800b696:	3401      	adds	r4, #1
 800b698:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800b69a:	2c20      	cmp	r4, #32
 800b69c:	d1f2      	bne.n	800b684 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800b69e:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	20000c08 	.word	0x20000c08

0800b6a8 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800b6a8:	b120      	cbz	r0, 800b6b4 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800b6ae:	6042      	str	r2, [r0, #4]

    return true;
 800b6b0:	2001      	movs	r0, #1
 800b6b2:	4770      	bx	lr
        return false;
 800b6b4:	2000      	movs	r0, #0
}
 800b6b6:	4770      	bx	lr

0800b6b8 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	b160      	cbz	r0, 800b6d6 <LinkedListAdd+0x1e>
 800b6bc:	b169      	cbz	r1, 800b6da <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800b6be:	6802      	ldr	r2, [r0, #0]
 800b6c0:	b13a      	cbz	r2, 800b6d2 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	b102      	cbz	r2, 800b6c8 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800b6c6:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800b6cc:	6059      	str	r1, [r3, #4]

    return true;
 800b6ce:	2001      	movs	r0, #1
 800b6d0:	4770      	bx	lr
        list->First = element;
 800b6d2:	6001      	str	r1, [r0, #0]
 800b6d4:	e7f5      	b.n	800b6c2 <LinkedListAdd+0xa>
        return false;
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	4770      	bx	lr
 800b6da:	2000      	movs	r0, #0
}
 800b6dc:	4770      	bx	lr

0800b6de <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b6de:	b160      	cbz	r0, 800b6fa <LinkedListGetPrevious+0x1c>
 800b6e0:	b161      	cbz	r1, 800b6fc <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800b6e2:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800b6e4:	4281      	cmp	r1, r0
 800b6e6:	d102      	bne.n	800b6ee <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800b6e8:	2000      	movs	r0, #0
    }

    return curElement;
}
 800b6ea:	4770      	bx	lr
            curElement = curElement->Next;
 800b6ec:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d0fb      	beq.n	800b6ea <LinkedListGetPrevious+0xc>
 800b6f2:	6803      	ldr	r3, [r0, #0]
 800b6f4:	428b      	cmp	r3, r1
 800b6f6:	d1f9      	bne.n	800b6ec <LinkedListGetPrevious+0xe>
 800b6f8:	4770      	bx	lr
 800b6fa:	4770      	bx	lr
        return NULL;
 800b6fc:	4608      	mov	r0, r1
 800b6fe:	4770      	bx	lr

0800b700 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b700:	b1b8      	cbz	r0, 800b732 <LinkedListRemove+0x32>
{
 800b702:	b538      	push	{r3, r4, r5, lr}
 800b704:	460c      	mov	r4, r1
 800b706:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800b708:	b1a9      	cbz	r1, 800b736 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800b70a:	f7ff ffe8 	bl	800b6de <LinkedListGetPrevious>

    if( list->First == element )
 800b70e:	682b      	ldr	r3, [r5, #0]
 800b710:	42a3      	cmp	r3, r4
 800b712:	d009      	beq.n	800b728 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800b714:	686b      	ldr	r3, [r5, #4]
 800b716:	42a3      	cmp	r3, r4
 800b718:	d009      	beq.n	800b72e <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800b71a:	b108      	cbz	r0, 800b720 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800b720:	2300      	movs	r3, #0
 800b722:	6023      	str	r3, [r4, #0]

    return true;
 800b724:	2001      	movs	r0, #1
}
 800b726:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	e7f2      	b.n	800b714 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800b72e:	6068      	str	r0, [r5, #4]
 800b730:	e7f3      	b.n	800b71a <LinkedListRemove+0x1a>
        return false;
 800b732:	2000      	movs	r0, #0
}
 800b734:	4770      	bx	lr
        return false;
 800b736:	2000      	movs	r0, #0
 800b738:	e7f5      	b.n	800b726 <LinkedListRemove+0x26>
	...

0800b73c <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800b73c:	2811      	cmp	r0, #17
 800b73e:	d808      	bhi.n	800b752 <IsSticky+0x16>
 800b740:	2301      	movs	r3, #1
 800b742:	fa03 f000 	lsl.w	r0, r3, r0
 800b746:	4b04      	ldr	r3, [pc, #16]	; (800b758 <IsSticky+0x1c>)
 800b748:	4218      	tst	r0, r3
 800b74a:	bf14      	ite	ne
 800b74c:	2001      	movne	r0, #1
 800b74e:	2000      	moveq	r0, #0
 800b750:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800b752:	2000      	movs	r0, #0
    }
}
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	00020720 	.word	0x00020720

0800b75c <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800b75c:	2000      	movs	r0, #0
 800b75e:	4770      	bx	lr

0800b760 <FreeMacCommandSlot>:
    if( slot == NULL )
 800b760:	b130      	cbz	r0, 800b770 <FreeMacCommandSlot+0x10>
{
 800b762:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b764:	2210      	movs	r2, #16
 800b766:	2100      	movs	r1, #0
 800b768:	f004 f835 	bl	800f7d6 <memset1>
    return true;
 800b76c:	2001      	movs	r0, #1
}
 800b76e:	bd08      	pop	{r3, pc}
        return false;
 800b770:	2000      	movs	r0, #0
}
 800b772:	4770      	bx	lr

0800b774 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800b774:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800b776:	4c06      	ldr	r4, [pc, #24]	; (800b790 <LoRaMacCommandsInit+0x1c>)
 800b778:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800b77c:	2100      	movs	r1, #0
 800b77e:	4620      	mov	r0, r4
 800b780:	f004 f829 	bl	800f7d6 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800b784:	4620      	mov	r0, r4
 800b786:	f7ff ff8f 	bl	800b6a8 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b78a:	2000      	movs	r0, #0
 800b78c:	bd10      	pop	{r4, pc}
 800b78e:	bf00      	nop
 800b790:	20000c08 	.word	0x20000c08

0800b794 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800b794:	b321      	cbz	r1, 800b7e0 <LoRaMacCommandsAddCmd+0x4c>
{
 800b796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b798:	4605      	mov	r5, r0
 800b79a:	4614      	mov	r4, r2
 800b79c:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800b79e:	f7ff ff6f 	bl	800b680 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	b1f0      	cbz	r0, 800b7e4 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800b7a6:	4601      	mov	r1, r0
 800b7a8:	4810      	ldr	r0, [pc, #64]	; (800b7ec <LoRaMacCommandsAddCmd+0x58>)
 800b7aa:	f7ff ff85 	bl	800b6b8 <LinkedListAdd>
 800b7ae:	b1d8      	cbz	r0, 800b7e8 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800b7b0:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800b7b2:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b7b4:	b2a2      	uxth	r2, r4
 800b7b6:	4639      	mov	r1, r7
 800b7b8:	1d70      	adds	r0, r6, #5
 800b7ba:	f003 fff4 	bl	800f7a6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f7ff ffbc 	bl	800b73c <IsSticky>
 800b7c4:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	f7ff ffc8 	bl	800b75c <IsConfirmationRequired>
 800b7cc:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b7ce:	4b07      	ldr	r3, [pc, #28]	; (800b7ec <LoRaMacCommandsAddCmd+0x58>)
 800b7d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b7d4:	4414      	add	r4, r2
 800b7d6:	3401      	adds	r4, #1
 800b7d8:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800b7dc:	2000      	movs	r0, #0
}
 800b7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b7e0:	2001      	movs	r0, #1
}
 800b7e2:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b7e4:	2002      	movs	r0, #2
 800b7e6:	e7fa      	b.n	800b7de <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800b7e8:	2005      	movs	r0, #5
 800b7ea:	e7f8      	b.n	800b7de <LoRaMacCommandsAddCmd+0x4a>
 800b7ec:	20000c08 	.word	0x20000c08

0800b7f0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800b7f0:	b1a0      	cbz	r0, 800b81c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800b7f2:	b510      	push	{r4, lr}
 800b7f4:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800b7f6:	4601      	mov	r1, r0
 800b7f8:	480b      	ldr	r0, [pc, #44]	; (800b828 <LoRaMacCommandsRemoveCmd+0x38>)
 800b7fa:	f7ff ff81 	bl	800b700 <LinkedListRemove>
 800b7fe:	b178      	cbz	r0, 800b820 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b800:	68a1      	ldr	r1, [r4, #8]
 800b802:	4a09      	ldr	r2, [pc, #36]	; (800b828 <LoRaMacCommandsRemoveCmd+0x38>)
 800b804:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800b808:	1a5b      	subs	r3, r3, r1
 800b80a:	3b01      	subs	r3, #1
 800b80c:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800b810:	4620      	mov	r0, r4
 800b812:	f7ff ffa5 	bl	800b760 <FreeMacCommandSlot>
 800b816:	b128      	cbz	r0, 800b824 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b818:	2000      	movs	r0, #0
}
 800b81a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b81c:	2001      	movs	r0, #1
}
 800b81e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b820:	2003      	movs	r0, #3
 800b822:	e7fa      	b.n	800b81a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800b824:	2005      	movs	r0, #5
 800b826:	e7f8      	b.n	800b81a <LoRaMacCommandsRemoveCmd+0x2a>
 800b828:	20000c08 	.word	0x20000c08

0800b82c <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b82c:	4b06      	ldr	r3, [pc, #24]	; (800b848 <LoRaMacCommandsGetCmd+0x1c>)
 800b82e:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800b830:	e000      	b.n	800b834 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800b832:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800b834:	b113      	cbz	r3, 800b83c <LoRaMacCommandsGetCmd+0x10>
 800b836:	791a      	ldrb	r2, [r3, #4]
 800b838:	4282      	cmp	r2, r0
 800b83a:	d1fa      	bne.n	800b832 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800b83c:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800b83e:	b10b      	cbz	r3, 800b844 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800b840:	2000      	movs	r0, #0
 800b842:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b844:	2003      	movs	r0, #3
}
 800b846:	4770      	bx	lr
 800b848:	20000c08 	.word	0x20000c08

0800b84c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b84c:	4b0a      	ldr	r3, [pc, #40]	; (800b878 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800b84e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b850:	b120      	cbz	r0, 800b85c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800b852:	7b03      	ldrb	r3, [r0, #12]
 800b854:	b11b      	cbz	r3, 800b85e <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800b856:	6800      	ldr	r0, [r0, #0]
 800b858:	e7fa      	b.n	800b850 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b85a:	bd10      	pop	{r4, pc}
 800b85c:	4770      	bx	lr
{
 800b85e:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800b860:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800b862:	f7ff ffc5 	bl	800b7f0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800b866:	4620      	mov	r0, r4
    while( curElement != NULL )
 800b868:	2800      	cmp	r0, #0
 800b86a:	d0f6      	beq.n	800b85a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800b86c:	7b03      	ldrb	r3, [r0, #12]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d0f6      	beq.n	800b860 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800b872:	6800      	ldr	r0, [r0, #0]
 800b874:	e7f8      	b.n	800b868 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800b876:	bf00      	nop
 800b878:	20000c08 	.word	0x20000c08

0800b87c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800b87c:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b87e:	4b0b      	ldr	r3, [pc, #44]	; (800b8ac <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800b880:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b882:	e000      	b.n	800b886 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800b884:	4634      	mov	r4, r6
    while( curElement != NULL )
 800b886:	b17c      	cbz	r4, 800b8a8 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800b888:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800b88a:	7925      	ldrb	r5, [r4, #4]
 800b88c:	4628      	mov	r0, r5
 800b88e:	f7ff ff55 	bl	800b73c <IsSticky>
 800b892:	2800      	cmp	r0, #0
 800b894:	d0f6      	beq.n	800b884 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800b896:	4628      	mov	r0, r5
 800b898:	f7ff ff60 	bl	800b75c <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d1f1      	bne.n	800b884 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f7ff ffa5 	bl	800b7f0 <LoRaMacCommandsRemoveCmd>
 800b8a6:	e7ed      	b.n	800b884 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	bd70      	pop	{r4, r5, r6, pc}
 800b8ac:	20000c08 	.word	0x20000c08

0800b8b0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800b8b0:	b128      	cbz	r0, 800b8be <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800b8b2:	4a04      	ldr	r2, [pc, #16]	; (800b8c4 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b8b4:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800b8b8:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b8be:	2001      	movs	r0, #1
}
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	20000c08 	.word	0x20000c08

0800b8c8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800b8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800b8cc:	4b16      	ldr	r3, [pc, #88]	; (800b928 <LoRaMacCommandsSerializeCmds+0x60>)
 800b8ce:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b8d0:	b32a      	cbz	r2, 800b91e <LoRaMacCommandsSerializeCmds+0x56>
 800b8d2:	4607      	mov	r7, r0
 800b8d4:	4688      	mov	r8, r1
 800b8d6:	4616      	mov	r6, r2
 800b8d8:	b319      	cbz	r1, 800b922 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800b8da:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800b8dc:	b194      	cbz	r4, 800b904 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800b8de:	1a7a      	subs	r2, r7, r1
 800b8e0:	68a3      	ldr	r3, [r4, #8]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d30d      	bcc.n	800b904 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800b8e8:	1c4d      	adds	r5, r1, #1
 800b8ea:	b2ed      	uxtb	r5, r5
 800b8ec:	7923      	ldrb	r3, [r4, #4]
 800b8ee:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b8f0:	8922      	ldrh	r2, [r4, #8]
 800b8f2:	1d61      	adds	r1, r4, #5
 800b8f4:	1970      	adds	r0, r6, r5
 800b8f6:	f003 ff56 	bl	800f7a6 <memcpy1>
            itr += curElement->PayloadSize;
 800b8fa:	68a3      	ldr	r3, [r4, #8]
 800b8fc:	441d      	add	r5, r3
 800b8fe:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800b900:	6824      	ldr	r4, [r4, #0]
 800b902:	e7eb      	b.n	800b8dc <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800b904:	b12c      	cbz	r4, 800b912 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800b906:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800b908:	4620      	mov	r0, r4
 800b90a:	f7ff ff71 	bl	800b7f0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800b90e:	462c      	mov	r4, r5
 800b910:	e7f8      	b.n	800b904 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800b912:	4640      	mov	r0, r8
 800b914:	f7ff ffcc 	bl	800b8b0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800b918:	2000      	movs	r0, #0
}
 800b91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b91e:	2001      	movs	r0, #1
 800b920:	e7fb      	b.n	800b91a <LoRaMacCommandsSerializeCmds+0x52>
 800b922:	2001      	movs	r0, #1
 800b924:	e7f9      	b.n	800b91a <LoRaMacCommandsSerializeCmds+0x52>
 800b926:	bf00      	nop
 800b928:	20000c08 	.word	0x20000c08

0800b92c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b92c:	1e83      	subs	r3, r0, #2
 800b92e:	2b11      	cmp	r3, #17
 800b930:	d80a      	bhi.n	800b948 <LoRaMacCommandsGetCmdSize+0x1c>
 800b932:	e8df f003 	tbb	[pc, r3]
 800b936:	0b23      	.short	0x0b23
 800b938:	110f240d 	.word	0x110f240d
 800b93c:	09171513 	.word	0x09171513
 800b940:	09091909 	.word	0x09091909
 800b944:	211f1d1b 	.word	0x211f1d1b
 800b948:	2000      	movs	r0, #0
 800b94a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800b94c:	2005      	movs	r0, #5
            break;
 800b94e:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800b950:	2002      	movs	r0, #2
            break;
 800b952:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800b954:	2001      	movs	r0, #1
            break;
 800b956:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800b958:	2006      	movs	r0, #6
            break;
 800b95a:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800b95c:	2002      	movs	r0, #2
            break;
 800b95e:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800b960:	2002      	movs	r0, #2
            break;
 800b962:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800b964:	2005      	movs	r0, #5
            break;
 800b966:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800b968:	2006      	movs	r0, #6
            break;
 800b96a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800b96c:	2001      	movs	r0, #1
            break;
 800b96e:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800b970:	2005      	movs	r0, #5
            break;
 800b972:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800b974:	2004      	movs	r0, #4
            break;
 800b976:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800b978:	2004      	movs	r0, #4
            break;
 800b97a:	4770      	bx	lr
            cidSize = 3;
 800b97c:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b97e:	4770      	bx	lr

0800b980 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b980:	4b03      	ldr	r3, [pc, #12]	; (800b990 <IncreaseBufferPointer+0x10>)
 800b982:	4298      	cmp	r0, r3
 800b984:	d001      	beq.n	800b98a <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800b986:	3004      	adds	r0, #4
 800b988:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b98a:	4802      	ldr	r0, [pc, #8]	; (800b994 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	20000e30 	.word	0x20000e30
 800b994:	20000e20 	.word	0x20000e20

0800b998 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800b998:	b108      	cbz	r0, 800b99e <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800b99a:	2000      	movs	r0, #0
 800b99c:	4770      	bx	lr
        return true;
 800b99e:	2001      	movs	r0, #1
}
 800b9a0:	4770      	bx	lr

0800b9a2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b9a2:	2804      	cmp	r0, #4
 800b9a4:	d801      	bhi.n	800b9aa <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	4770      	bx	lr
        return true;
 800b9aa:	2001      	movs	r0, #1
}
 800b9ac:	4770      	bx	lr
	...

0800b9b0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b9b6:	4b0d      	ldr	r3, [pc, #52]	; (800b9ec <GetElement+0x3c>)
 800b9b8:	f893 7020 	ldrb.w	r7, [r3, #32]
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f7ff ffeb 	bl	800b998 <IsListEmpty>
 800b9c2:	b970      	cbnz	r0, 800b9e2 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b9c4:	2500      	movs	r5, #0
 800b9c6:	42af      	cmp	r7, r5
 800b9c8:	d909      	bls.n	800b9de <GetElement+0x2e>
    {
        if( element->Request == request )
 800b9ca:	7823      	ldrb	r3, [r4, #0]
 800b9cc:	42b3      	cmp	r3, r6
 800b9ce:	d00a      	beq.n	800b9e6 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f7ff ffd5 	bl	800b980 <IncreaseBufferPointer>
 800b9d6:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b9d8:	3501      	adds	r5, #1
 800b9da:	b2ed      	uxtb	r5, r5
 800b9dc:	e7f3      	b.n	800b9c6 <GetElement+0x16>
    }

    return NULL;
 800b9de:	2000      	movs	r0, #0
}
 800b9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	e7fc      	b.n	800b9e0 <GetElement+0x30>
            return element;
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	e7fa      	b.n	800b9e0 <GetElement+0x30>
 800b9ea:	bf00      	nop
 800b9ec:	20000e14 	.word	0x20000e14

0800b9f0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800b9f0:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b9f2:	4c08      	ldr	r4, [pc, #32]	; (800ba14 <LoRaMacConfirmQueueInit+0x24>)
 800b9f4:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b9fc:	f104 000c 	add.w	r0, r4, #12
 800ba00:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ba02:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800ba04:	2214      	movs	r2, #20
 800ba06:	21ff      	movs	r1, #255	; 0xff
 800ba08:	f003 fee5 	bl	800f7d6 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800ba12:	bd10      	pop	{r4, pc}
 800ba14:	20000e14 	.word	0x20000e14

0800ba18 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ba1c:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <LoRaMacConfirmQueueAdd+0x44>)
 800ba1e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800ba22:	f7ff ffbe 	bl	800b9a2 <IsListFull>
 800ba26:	b9b8      	cbnz	r0, 800ba58 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800ba28:	4c0c      	ldr	r4, [pc, #48]	; (800ba5c <LoRaMacConfirmQueueAdd+0x44>)
 800ba2a:	68a3      	ldr	r3, [r4, #8]
 800ba2c:	782a      	ldrb	r2, [r5, #0]
 800ba2e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800ba30:	68a3      	ldr	r3, [r4, #8]
 800ba32:	786a      	ldrb	r2, [r5, #1]
 800ba34:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800ba36:	68a3      	ldr	r3, [r4, #8]
 800ba38:	78ea      	ldrb	r2, [r5, #3]
 800ba3a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800ba3c:	68a3      	ldr	r3, [r4, #8]
 800ba3e:	78aa      	ldrb	r2, [r5, #2]
 800ba40:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800ba42:	f894 3020 	ldrb.w	r3, [r4, #32]
 800ba46:	3301      	adds	r3, #1
 800ba48:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800ba4c:	68a0      	ldr	r0, [r4, #8]
 800ba4e:	f7ff ff97 	bl	800b980 <IncreaseBufferPointer>
 800ba52:	60a0      	str	r0, [r4, #8]

    return true;
 800ba54:	2001      	movs	r0, #1
}
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800ba58:	2000      	movs	r0, #0
 800ba5a:	e7fc      	b.n	800ba56 <LoRaMacConfirmQueueAdd+0x3e>
 800ba5c:	20000e14 	.word	0x20000e14

0800ba60 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800ba60:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ba62:	4b09      	ldr	r3, [pc, #36]	; (800ba88 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800ba64:	f893 4020 	ldrb.w	r4, [r3, #32]
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f7ff ff95 	bl	800b998 <IsListEmpty>
 800ba6e:	b948      	cbnz	r0, 800ba84 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800ba70:	4d05      	ldr	r5, [pc, #20]	; (800ba88 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800ba72:	3c01      	subs	r4, #1
 800ba74:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800ba78:	6868      	ldr	r0, [r5, #4]
 800ba7a:	f7ff ff81 	bl	800b980 <IncreaseBufferPointer>
 800ba7e:	6068      	str	r0, [r5, #4]

    return true;
 800ba80:	2001      	movs	r0, #1
}
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800ba84:	2000      	movs	r0, #0
 800ba86:	e7fc      	b.n	800ba82 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800ba88:	20000e14 	.word	0x20000e14

0800ba8c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	4605      	mov	r5, r0
 800ba90:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ba92:	4b08      	ldr	r3, [pc, #32]	; (800bab4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800ba94:	f893 0020 	ldrb.w	r0, [r3, #32]
 800ba98:	f7ff ff7e 	bl	800b998 <IsListEmpty>
 800ba9c:	b948      	cbnz	r0, 800bab2 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800ba9e:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800baa0:	689a      	ldr	r2, [r3, #8]
 800baa2:	6859      	ldr	r1, [r3, #4]
 800baa4:	4620      	mov	r0, r4
 800baa6:	f7ff ff83 	bl	800b9b0 <GetElement>
        if( element != NULL )
 800baaa:	b110      	cbz	r0, 800bab2 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800baac:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800baae:	2201      	movs	r2, #1
 800bab0:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	20000e14 	.word	0x20000e14

0800bab8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800bab8:	b510      	push	{r4, lr}
 800baba:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800babc:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800babe:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bac2:	f7ff ff69 	bl	800b998 <IsListEmpty>
 800bac6:	b940      	cbnz	r0, 800bada <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bac8:	4b06      	ldr	r3, [pc, #24]	; (800bae4 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800baca:	689a      	ldr	r2, [r3, #8]
 800bacc:	6859      	ldr	r1, [r3, #4]
 800bace:	4620      	mov	r0, r4
 800bad0:	f7ff ff6e 	bl	800b9b0 <GetElement>
        if( element != NULL )
 800bad4:	b118      	cbz	r0, 800bade <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800bad6:	7840      	ldrb	r0, [r0, #1]
 800bad8:	e000      	b.n	800badc <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bada:	2001      	movs	r0, #1
}
 800badc:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bade:	2001      	movs	r0, #1
 800bae0:	e7fc      	b.n	800badc <LoRaMacConfirmQueueGetStatus+0x24>
 800bae2:	bf00      	nop
 800bae4:	20000e14 	.word	0x20000e14

0800bae8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800baec:	4b0c      	ldr	r3, [pc, #48]	; (800bb20 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800baee:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800baf0:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800baf4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800baf8:	f7ff ff4e 	bl	800b998 <IsListEmpty>
 800bafc:	b150      	cbz	r0, 800bb14 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800bb00:	2301      	movs	r3, #1
 800bb02:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800bb04:	4620      	mov	r0, r4
 800bb06:	f7ff ff3b 	bl	800b980 <IncreaseBufferPointer>
 800bb0a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800bb0c:	4b04      	ldr	r3, [pc, #16]	; (800bb20 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	4283      	cmp	r3, r0
 800bb12:	d0f4      	beq.n	800bafe <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800bb14:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800bb16:	78e3      	ldrb	r3, [r4, #3]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d1f3      	bne.n	800bb04 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800bb1c:	e7f0      	b.n	800bb00 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800bb1e:	bf00      	nop
 800bb20:	20000e14 	.word	0x20000e14

0800bb24 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800bb24:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800bb26:	4b04      	ldr	r3, [pc, #16]	; (800bb38 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800bb28:	689a      	ldr	r2, [r3, #8]
 800bb2a:	6859      	ldr	r1, [r3, #4]
 800bb2c:	f7ff ff40 	bl	800b9b0 <GetElement>
 800bb30:	b100      	cbz	r0, 800bb34 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800bb32:	2001      	movs	r0, #1
    }
    return false;
}
 800bb34:	bd08      	pop	{r3, pc}
 800bb36:	bf00      	nop
 800bb38:	20000e14 	.word	0x20000e14

0800bb3c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800bb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800bb42:	4b19      	ldr	r3, [pc, #100]	; (800bba8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800bb44:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800bb48:	2204      	movs	r2, #4
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	eb0d 0002 	add.w	r0, sp, r2
 800bb50:	f003 fe41 	bl	800f7d6 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800bb54:	2400      	movs	r4, #0
 800bb56:	e00d      	b.n	800bb74 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800bb58:	781a      	ldrb	r2, [r3, #0]
 800bb5a:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800bb5e:	785a      	ldrb	r2, [r3, #1]
 800bb60:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800bb64:	78db      	ldrb	r3, [r3, #3]
 800bb66:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800bb6a:	f7ff ff79 	bl	800ba60 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800bb6e:	b1a5      	cbz	r5, 800bb9a <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800bb70:	3401      	adds	r4, #1
 800bb72:	b2e4      	uxtb	r4, r4
 800bb74:	42bc      	cmp	r4, r7
 800bb76:	d214      	bcs.n	800bba2 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800bb78:	4b0b      	ldr	r3, [pc, #44]	; (800bba8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	7812      	ldrb	r2, [r2, #0]
 800bb7e:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800bb80:	685a      	ldr	r2, [r3, #4]
 800bb82:	7852      	ldrb	r2, [r2, #1]
 800bb84:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800bb8a:	2d00      	cmp	r5, #0
 800bb8c:	d0e4      	beq.n	800bb58 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800bb8e:	4b06      	ldr	r3, [pc, #24]	; (800bba8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	4630      	mov	r0, r6
 800bb96:	4798      	blx	r3
 800bb98:	e7e7      	b.n	800bb6a <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800bb9a:	a801      	add	r0, sp, #4
 800bb9c:	f7ff ff3c 	bl	800ba18 <LoRaMacConfirmQueueAdd>
 800bba0:	e7e6      	b.n	800bb70 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800bba2:	b003      	add	sp, #12
 800bba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bba6:	bf00      	nop
 800bba8:	20000e14 	.word	0x20000e14

0800bbac <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800bbac:	4b01      	ldr	r3, [pc, #4]	; (800bbb4 <LoRaMacConfirmQueueGetCnt+0x8>)
 800bbae:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bbb2:	4770      	bx	lr
 800bbb4:	20000e14 	.word	0x20000e14

0800bbb8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800bbb8:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800bbba:	4b03      	ldr	r3, [pc, #12]	; (800bbc8 <LoRaMacConfirmQueueIsFull+0x10>)
 800bbbc:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bbc0:	f7ff feef 	bl	800b9a2 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800bbc4:	bd08      	pop	{r3, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000e14 	.word	0x20000e14

0800bbcc <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800bbcc:	b410      	push	{r4}
 800bbce:	9c01      	ldr	r4, [sp, #4]
 800bbd0:	9902      	ldr	r1, [sp, #8]
 800bbd2:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800bbd4:	b1da      	cbz	r2, 800bc0e <PrepareB0+0x42>
 800bbd6:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800bbd8:	2049      	movs	r0, #73	; 0x49
 800bbda:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800bbdc:	2000      	movs	r0, #0
 800bbde:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800bbe0:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800bbe2:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800bbe4:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800bbe6:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800bbe8:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800bbea:	0a23      	lsrs	r3, r4, #8
 800bbec:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bbee:	0c23      	lsrs	r3, r4, #16
 800bbf0:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bbf2:	0e24      	lsrs	r4, r4, #24
 800bbf4:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800bbf6:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800bbf8:	0a0b      	lsrs	r3, r1, #8
 800bbfa:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bbfc:	0c0b      	lsrs	r3, r1, #16
 800bbfe:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bc00:	0e09      	lsrs	r1, r1, #24
 800bc02:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800bc04:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800bc06:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bc0a:	bc10      	pop	{r4}
 800bc0c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc0e:	2009      	movs	r0, #9
 800bc10:	e7fb      	b.n	800bc0a <PrepareB0+0x3e>
	...

0800bc14 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800bc14:	2300      	movs	r3, #0
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d80e      	bhi.n	800bc38 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800bc1a:	469c      	mov	ip, r3
 800bc1c:	4a07      	ldr	r2, [pc, #28]	; (800bc3c <GetKeyAddrItem+0x28>)
 800bc1e:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800bc22:	4282      	cmp	r2, r0
 800bc24:	d002      	beq.n	800bc2c <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800bc26:	3301      	adds	r3, #1
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	e7f4      	b.n	800bc16 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800bc2c:	4b03      	ldr	r3, [pc, #12]	; (800bc3c <GetKeyAddrItem+0x28>)
 800bc2e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800bc32:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800bc34:	2000      	movs	r0, #0
 800bc36:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800bc38:	200b      	movs	r0, #11
}
 800bc3a:	4770      	bx	lr
 800bc3c:	200000f0 	.word	0x200000f0

0800bc40 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800bc40:	b1f1      	cbz	r1, 800bc80 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800bc42:	3801      	subs	r0, #1
 800bc44:	2803      	cmp	r0, #3
 800bc46:	d81d      	bhi.n	800bc84 <GetLastFcntDown+0x44>
 800bc48:	e8df f000 	tbb	[pc, r0]
 800bc4c:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800bc50:	4a0d      	ldr	r2, [pc, #52]	; (800bc88 <GetLastFcntDown+0x48>)
 800bc52:	6812      	ldr	r2, [r2, #0]
 800bc54:	6912      	ldr	r2, [r2, #16]
 800bc56:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800bc58:	2000      	movs	r0, #0
            break;
 800bc5a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800bc5c:	4a0a      	ldr	r2, [pc, #40]	; (800bc88 <GetLastFcntDown+0x48>)
 800bc5e:	6812      	ldr	r2, [r2, #0]
 800bc60:	6952      	ldr	r2, [r2, #20]
 800bc62:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800bc64:	2000      	movs	r0, #0
            break;
 800bc66:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800bc68:	4a07      	ldr	r2, [pc, #28]	; (800bc88 <GetLastFcntDown+0x48>)
 800bc6a:	6812      	ldr	r2, [r2, #0]
 800bc6c:	6992      	ldr	r2, [r2, #24]
 800bc6e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800bc70:	2000      	movs	r0, #0
            break;
 800bc72:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800bc74:	4a04      	ldr	r2, [pc, #16]	; (800bc88 <GetLastFcntDown+0x48>)
 800bc76:	6812      	ldr	r2, [r2, #0]
 800bc78:	69d2      	ldr	r2, [r2, #28]
 800bc7a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800bc7c:	2000      	movs	r0, #0
            break;
 800bc7e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc80:	2009      	movs	r0, #9
 800bc82:	4770      	bx	lr
    switch( fCntID )
 800bc84:	2005      	movs	r0, #5
}
 800bc86:	4770      	bx	lr
 800bc88:	20000e38 	.word	0x20000e38

0800bc8c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800bc96:	a901      	add	r1, sp, #4
 800bc98:	f7ff ffd2 	bl	800bc40 <GetLastFcntDown>
 800bc9c:	b948      	cbnz	r0, 800bcb2 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800bc9e:	9b01      	ldr	r3, [sp, #4]
 800bca0:	42a3      	cmp	r3, r4
 800bca2:	d309      	bcc.n	800bcb8 <CheckFCntDown+0x2c>
 800bca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca8:	d001      	beq.n	800bcae <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800bcaa:	2000      	movs	r0, #0
 800bcac:	e002      	b.n	800bcb4 <CheckFCntDown+0x28>
        return true;
 800bcae:	2001      	movs	r0, #1
 800bcb0:	e000      	b.n	800bcb4 <CheckFCntDown+0x28>
        return false;
 800bcb2:	2000      	movs	r0, #0
    }
}
 800bcb4:	b002      	add	sp, #8
 800bcb6:	bd10      	pop	{r4, pc}
        return true;
 800bcb8:	2001      	movs	r0, #1
 800bcba:	e7fb      	b.n	800bcb4 <CheckFCntDown+0x28>

0800bcbc <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800bcbc:	3801      	subs	r0, #1
 800bcbe:	2803      	cmp	r0, #3
 800bcc0:	d815      	bhi.n	800bcee <UpdateFCntDown+0x32>
 800bcc2:	e8df f000 	tbb	[pc, r0]
 800bcc6:	0702      	.short	0x0702
 800bcc8:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800bcca:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <UpdateFCntDown+0x34>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800bcd0:	6219      	str	r1, [r3, #32]
            break;
 800bcd2:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800bcd4:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <UpdateFCntDown+0x34>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800bcda:	6219      	str	r1, [r3, #32]
            break;
 800bcdc:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800bcde:	4b04      	ldr	r3, [pc, #16]	; (800bcf0 <UpdateFCntDown+0x34>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800bce4:	6219      	str	r1, [r3, #32]
            break;
 800bce6:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800bce8:	4b01      	ldr	r3, [pc, #4]	; (800bcf0 <UpdateFCntDown+0x34>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800bcee:	4770      	bx	lr
 800bcf0:	20000e38 	.word	0x20000e38

0800bcf4 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800bcf4:	4b0a      	ldr	r3, [pc, #40]	; (800bd20 <ResetFCnts+0x2c>)
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800bcfc:	f04f 31ff 	mov.w	r1, #4294967295
 800bd00:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800bd02:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800bd04:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800bd06:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dd00      	ble.n	800bd0e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800bd0c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800bd0e:	1d99      	adds	r1, r3, #6
 800bd10:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	e7f4      	b.n	800bd08 <ResetFCnts+0x14>
 800bd1e:	bf00      	nop
 800bd20:	20000e38 	.word	0x20000e38

0800bd24 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800bd24:	4b03      	ldr	r3, [pc, #12]	; (800bd34 <IsJoinNonce10xOk+0x10>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800bd2a:	4283      	cmp	r3, r0
 800bd2c:	bf2c      	ite	cs
 800bd2e:	2000      	movcs	r0, #0
 800bd30:	2001      	movcc	r0, #1
 800bd32:	4770      	bx	lr
 800bd34:	20000e38 	.word	0x20000e38

0800bd38 <ComputeCmacB0>:
{
 800bd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3c:	b088      	sub	sp, #32
 800bd3e:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800bd40:	b1f0      	cbz	r0, 800bd80 <ComputeCmacB0+0x48>
 800bd42:	460c      	mov	r4, r1
 800bd44:	4615      	mov	r5, r2
 800bd46:	461a      	mov	r2, r3
 800bd48:	4680      	mov	r8, r0
 800bd4a:	b1de      	cbz	r6, 800bd84 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bd4c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bd50:	d81a      	bhi.n	800bd88 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800bd52:	af04      	add	r7, sp, #16
 800bd54:	9702      	str	r7, [sp, #8]
 800bd56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800bd62:	4629      	mov	r1, r5
 800bd64:	4620      	mov	r0, r4
 800bd66:	f7ff ff31 	bl	800bbcc <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800bd6a:	9600      	str	r6, [sp, #0]
 800bd6c:	462b      	mov	r3, r5
 800bd6e:	4622      	mov	r2, r4
 800bd70:	4641      	mov	r1, r8
 800bd72:	4638      	mov	r0, r7
 800bd74:	f003 fad2 	bl	800f31c <SecureElementComputeAesCmac>
 800bd78:	b940      	cbnz	r0, 800bd8c <ComputeCmacB0+0x54>
}
 800bd7a:	b008      	add	sp, #32
 800bd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd80:	2009      	movs	r0, #9
 800bd82:	e7fa      	b.n	800bd7a <ComputeCmacB0+0x42>
 800bd84:	2009      	movs	r0, #9
 800bd86:	e7f8      	b.n	800bd7a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bd88:	200d      	movs	r0, #13
 800bd8a:	e7f6      	b.n	800bd7a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bd8c:	200e      	movs	r0, #14
 800bd8e:	e7f4      	b.n	800bd7a <ComputeCmacB0+0x42>

0800bd90 <DeriveSessionKey10x>:
{
 800bd90:	b510      	push	{r4, lr}
 800bd92:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800bd94:	2400      	movs	r4, #0
 800bd96:	9400      	str	r4, [sp, #0]
 800bd98:	9401      	str	r4, [sp, #4]
 800bd9a:	9402      	str	r4, [sp, #8]
 800bd9c:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800bd9e:	2808      	cmp	r0, #8
 800bda0:	d003      	beq.n	800bdaa <DeriveSessionKey10x+0x1a>
 800bda2:	2809      	cmp	r0, #9
 800bda4:	d025      	beq.n	800bdf2 <DeriveSessionKey10x+0x62>
 800bda6:	200a      	movs	r0, #10
 800bda8:	e021      	b.n	800bdee <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800bdaa:	2401      	movs	r4, #1
 800bdac:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800bdb0:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800bdb4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800bdb8:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800bdbc:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800bdc0:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800bdc4:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800bdc8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bdcc:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800bdd0:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800bdd4:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800bdd8:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800bddc:	0a1b      	lsrs	r3, r3, #8
 800bdde:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800bde2:	4602      	mov	r2, r0
 800bde4:	2101      	movs	r1, #1
 800bde6:	4668      	mov	r0, sp
 800bde8:	f003 fb36 	bl	800f458 <SecureElementDeriveAndStoreKey>
 800bdec:	b928      	cbnz	r0, 800bdfa <DeriveSessionKey10x+0x6a>
}
 800bdee:	b004      	add	sp, #16
 800bdf0:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800bdf2:	2402      	movs	r4, #2
 800bdf4:	f88d 4000 	strb.w	r4, [sp]
            break;
 800bdf8:	e7da      	b.n	800bdb0 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bdfa:	200e      	movs	r0, #14
 800bdfc:	e7f7      	b.n	800bdee <DeriveSessionKey10x+0x5e>

0800bdfe <PayloadEncrypt>:
{
 800bdfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be02:	b088      	sub	sp, #32
 800be04:	4690      	mov	r8, r2
 800be06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800be08:	2800      	cmp	r0, #0
 800be0a:	d052      	beq.n	800beb2 <PayloadEncrypt+0xb4>
 800be0c:	460d      	mov	r5, r1
 800be0e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800be10:	2600      	movs	r6, #0
 800be12:	9604      	str	r6, [sp, #16]
 800be14:	9605      	str	r6, [sp, #20]
 800be16:	9606      	str	r6, [sp, #24]
 800be18:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800be1a:	9600      	str	r6, [sp, #0]
 800be1c:	9601      	str	r6, [sp, #4]
 800be1e:	9602      	str	r6, [sp, #8]
 800be20:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800be22:	2701      	movs	r7, #1
 800be24:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800be28:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800be2c:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800be30:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800be34:	0a19      	lsrs	r1, r3, #8
 800be36:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800be3a:	0c19      	lsrs	r1, r3, #16
 800be3c:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800be40:	0e1b      	lsrs	r3, r3, #24
 800be42:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800be46:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800be4a:	0a13      	lsrs	r3, r2, #8
 800be4c:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800be50:	0c13      	lsrs	r3, r2, #16
 800be52:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800be56:	0e12      	lsrs	r2, r2, #24
 800be58:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800be5c:	e014      	b.n	800be88 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800be5e:	18f2      	adds	r2, r6, r3
 800be60:	5ca0      	ldrb	r0, [r4, r2]
 800be62:	f103 0120 	add.w	r1, r3, #32
 800be66:	4469      	add	r1, sp
 800be68:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800be6c:	4048      	eors	r0, r1
 800be6e:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800be70:	3301      	adds	r3, #1
 800be72:	b2db      	uxtb	r3, r3
 800be74:	462a      	mov	r2, r5
 800be76:	2d10      	cmp	r5, #16
 800be78:	bfa8      	it	ge
 800be7a:	2210      	movge	r2, #16
 800be7c:	4293      	cmp	r3, r2
 800be7e:	dbee      	blt.n	800be5e <PayloadEncrypt+0x60>
        size -= 16;
 800be80:	3d10      	subs	r5, #16
 800be82:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800be84:	3610      	adds	r6, #16
 800be86:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800be88:	2d00      	cmp	r5, #0
 800be8a:	dd0e      	ble.n	800beaa <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800be8c:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800be90:	3701      	adds	r7, #1
 800be92:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800be94:	ab04      	add	r3, sp, #16
 800be96:	4642      	mov	r2, r8
 800be98:	2110      	movs	r1, #16
 800be9a:	4668      	mov	r0, sp
 800be9c:	f003 fa63 	bl	800f366 <SecureElementAesEncrypt>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d0e6      	beq.n	800be74 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bea6:	200e      	movs	r0, #14
 800bea8:	e000      	b.n	800beac <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800beaa:	2000      	movs	r0, #0
}
 800beac:	b008      	add	sp, #32
 800beae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800beb2:	2009      	movs	r0, #9
 800beb4:	e7fa      	b.n	800beac <PayloadEncrypt+0xae>

0800beb6 <VerifyCmacB0>:
    if( msg == 0 )
 800beb6:	b368      	cbz	r0, 800bf14 <VerifyCmacB0+0x5e>
{
 800beb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bebc:	b0c8      	sub	sp, #288	; 0x120
 800bebe:	460c      	mov	r4, r1
 800bec0:	4615      	mov	r5, r2
 800bec2:	461e      	mov	r6, r3
 800bec4:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bec6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800beca:	d825      	bhi.n	800bf18 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800becc:	af04      	add	r7, sp, #16
 800bece:	f44f 7288 	mov.w	r2, #272	; 0x110
 800bed2:	2100      	movs	r1, #0
 800bed4:	4638      	mov	r0, r7
 800bed6:	f003 fc7e 	bl	800f7d6 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800beda:	9702      	str	r7, [sp, #8]
 800bedc:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800bede:	9301      	str	r3, [sp, #4]
 800bee0:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800bee8:	4632      	mov	r2, r6
 800beea:	4629      	mov	r1, r5
 800beec:	4620      	mov	r0, r4
 800beee:	f7ff fe6d 	bl	800bbcc <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bef2:	4622      	mov	r2, r4
 800bef4:	4641      	mov	r1, r8
 800bef6:	a808      	add	r0, sp, #32
 800bef8:	f003 fc55 	bl	800f7a6 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800befc:	462b      	mov	r3, r5
 800befe:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800bf00:	f104 0110 	add.w	r1, r4, #16
 800bf04:	4638      	mov	r0, r7
 800bf06:	f003 fa18 	bl	800f33a <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800bf0a:	b130      	cbz	r0, 800bf1a <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800bf0c:	2801      	cmp	r0, #1
 800bf0e:	d004      	beq.n	800bf1a <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bf10:	200e      	movs	r0, #14
 800bf12:	e002      	b.n	800bf1a <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bf14:	2009      	movs	r0, #9
}
 800bf16:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bf18:	200d      	movs	r0, #13
}
 800bf1a:	b048      	add	sp, #288	; 0x120
 800bf1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf20 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800bf20:	b188      	cbz	r0, 800bf46 <LoRaMacCryptoInit+0x26>
{
 800bf22:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800bf24:	4c09      	ldr	r4, [pc, #36]	; (800bf4c <LoRaMacCryptoInit+0x2c>)
 800bf26:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800bf28:	2228      	movs	r2, #40	; 0x28
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	f003 fc53 	bl	800f7d6 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800bf30:	6823      	ldr	r3, [r4, #0]
 800bf32:	2201      	movs	r2, #1
 800bf34:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800bf36:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800bf38:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800bf3a:	2400      	movs	r4, #0
 800bf3c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800bf3e:	f7ff fed9 	bl	800bcf4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800bf42:	4620      	mov	r0, r4
}
 800bf44:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800bf46:	2008      	movs	r0, #8
}
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	20000e38 	.word	0x20000e38

0800bf50 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800bf50:	4b02      	ldr	r3, [pc, #8]	; (800bf5c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800bf56:	2000      	movs	r0, #0
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	20000e38 	.word	0x20000e38

0800bf60 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800bf60:	b130      	cbz	r0, 800bf70 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800bf62:	4b04      	ldr	r3, [pc, #16]	; (800bf74 <LoRaMacCryptoGetFCntUp+0x14>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bf70:	2009      	movs	r0, #9
}
 800bf72:	4770      	bx	lr
 800bf74:	20000e38 	.word	0x20000e38

0800bf78 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800bf78:	b530      	push	{r4, r5, lr}
 800bf7a:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800bf80:	b1f2      	cbz	r2, 800bfc0 <LoRaMacCryptoGetFCntDown+0x48>
 800bf82:	460c      	mov	r4, r1
 800bf84:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800bf86:	a901      	add	r1, sp, #4
 800bf88:	f7ff fe5a 	bl	800bc40 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800bf8c:	b948      	cbnz	r0, 800bfa2 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800bf8e:	9b01      	ldr	r3, [sp, #4]
 800bf90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf94:	d007      	beq.n	800bfa6 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800bf9a:	2a00      	cmp	r2, #0
 800bf9c:	dd05      	ble.n	800bfaa <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800bf9e:	4413      	add	r3, r2
 800bfa0:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bfa2:	b003      	add	sp, #12
 800bfa4:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800bfa6:	602c      	str	r4, [r5, #0]
 800bfa8:	e7fb      	b.n	800bfa2 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800bfaa:	b132      	cbz	r2, 800bfba <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800bfac:	0c1b      	lsrs	r3, r3, #16
 800bfae:	041b      	lsls	r3, r3, #16
 800bfb0:	4423      	add	r3, r4
 800bfb2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bfb6:	602b      	str	r3, [r5, #0]
 800bfb8:	e7f3      	b.n	800bfa2 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800bfba:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800bfbc:	2007      	movs	r0, #7
 800bfbe:	e7f0      	b.n	800bfa2 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfc0:	2009      	movs	r0, #9
 800bfc2:	e7ee      	b.n	800bfa2 <LoRaMacCryptoGetFCntDown+0x2a>

0800bfc4 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800bfc4:	4601      	mov	r1, r0
 800bfc6:	b908      	cbnz	r0, 800bfcc <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfc8:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bfca:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bfcc:	2300      	movs	r3, #0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	dd01      	ble.n	800bfd6 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800bfd2:	2000      	movs	r0, #0
 800bfd4:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800bfd6:	4a07      	ldr	r2, [pc, #28]	; (800bff4 <LoRaMacCryptoSetMulticastReference+0x30>)
 800bfd8:	6812      	ldr	r2, [r2, #0]
 800bfda:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800bfde:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800bfe2:	f103 0c06 	add.w	ip, r3, #6
 800bfe6:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800bfea:	3204      	adds	r2, #4
 800bfec:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bfee:	3301      	adds	r3, #1
 800bff0:	e7ed      	b.n	800bfce <LoRaMacCryptoSetMulticastReference+0xa>
 800bff2:	bf00      	nop
 800bff4:	20000e38 	.word	0x20000e38

0800bff8 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800bff8:	b1d8      	cbz	r0, 800c032 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800bffa:	b510      	push	{r4, lr}
 800bffc:	b082      	sub	sp, #8
 800bffe:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800c000:	4b0f      	ldr	r3, [pc, #60]	; (800c040 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	8893      	ldrh	r3, [r2, #4]
 800c006:	3301      	adds	r3, #1
 800c008:	b29b      	uxth	r3, r3
 800c00a:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800c00c:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c00e:	f000 fa32 	bl	800c476 <LoRaMacSerializerJoinRequest>
 800c012:	b980      	cbnz	r0, 800c036 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800c014:	4623      	mov	r3, r4
 800c016:	f853 1b18 	ldr.w	r1, [r3], #24
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	2301      	movs	r3, #1
 800c01e:	2213      	movs	r2, #19
 800c020:	f003 f97c 	bl	800f31c <SecureElementComputeAesCmac>
 800c024:	b950      	cbnz	r0, 800c03c <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c026:	4620      	mov	r0, r4
 800c028:	f000 fa25 	bl	800c476 <LoRaMacSerializerJoinRequest>
 800c02c:	b120      	cbz	r0, 800c038 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c02e:	2010      	movs	r0, #16
 800c030:	e002      	b.n	800c038 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c032:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c034:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c036:	2010      	movs	r0, #16
}
 800c038:	b002      	add	sp, #8
 800c03a:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c03c:	200e      	movs	r0, #14
 800c03e:	e7fb      	b.n	800c038 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800c040:	20000e38 	.word	0x20000e38

0800c044 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800c044:	2b00      	cmp	r3, #0
 800c046:	d036      	beq.n	800c0b6 <LoRaMacCryptoSecureMessage+0x72>
{
 800c048:	b530      	push	{r4, r5, lr}
 800c04a:	b085      	sub	sp, #20
 800c04c:	4604      	mov	r4, r0
 800c04e:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800c050:	4b1d      	ldr	r3, [pc, #116]	; (800c0c8 <LoRaMacCryptoSecureMessage+0x84>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	4283      	cmp	r3, r0
 800c058:	d82f      	bhi.n	800c0ba <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800c05a:	f895 2020 	ldrb.w	r2, [r5, #32]
 800c05e:	b342      	cbz	r2, 800c0b2 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800c060:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800c062:	42a3      	cmp	r3, r4
 800c064:	d209      	bcs.n	800c07a <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800c066:	9401      	str	r4, [sp, #4]
 800c068:	2300      	movs	r3, #0
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	68ab      	ldr	r3, [r5, #8]
 800c06e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800c072:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c074:	f7ff fec3 	bl	800bdfe <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c078:	bb10      	cbnz	r0, 800c0c0 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c07a:	4628      	mov	r0, r5
 800c07c:	f000 fa31 	bl	800c4e2 <LoRaMacSerializerData>
 800c080:	b9e8      	cbnz	r0, 800c0be <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c082:	7929      	ldrb	r1, [r5, #4]
 800c084:	3904      	subs	r1, #4
 800c086:	462b      	mov	r3, r5
 800c088:	f853 0b2c 	ldr.w	r0, [r3], #44
 800c08c:	9303      	str	r3, [sp, #12]
 800c08e:	9402      	str	r4, [sp, #8]
 800c090:	68ab      	ldr	r3, [r5, #8]
 800c092:	9301      	str	r3, [sp, #4]
 800c094:	2300      	movs	r3, #0
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	2208      	movs	r2, #8
 800c09a:	b289      	uxth	r1, r1
 800c09c:	f7ff fe4c 	bl	800bd38 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c0a0:	b970      	cbnz	r0, 800c0c0 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f000 fa1d 	bl	800c4e2 <LoRaMacSerializerData>
 800c0a8:	b960      	cbnz	r0, 800c0c4 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800c0aa:	4b07      	ldr	r3, [pc, #28]	; (800c0c8 <LoRaMacCryptoSecureMessage+0x84>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800c0b0:	e006      	b.n	800c0c0 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800c0b2:	2208      	movs	r2, #8
 800c0b4:	e7d5      	b.n	800c062 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c0b6:	2009      	movs	r0, #9
}
 800c0b8:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c0ba:	2006      	movs	r0, #6
 800c0bc:	e000      	b.n	800c0c0 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c0be:	2010      	movs	r0, #16
}
 800c0c0:	b005      	add	sp, #20
 800c0c2:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c0c4:	2010      	movs	r0, #16
 800c0c6:	e7fb      	b.n	800c0c0 <LoRaMacCryptoSecureMessage+0x7c>
 800c0c8:	20000e38 	.word	0x20000e38

0800c0cc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800c0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0d0:	b087      	sub	sp, #28
 800c0d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800c0d4:	2e00      	cmp	r6, #0
 800c0d6:	d049      	beq.n	800c16c <LoRaMacCryptoUnsecureMessage+0xa0>
 800c0d8:	4605      	mov	r5, r0
 800c0da:	4688      	mov	r8, r1
 800c0dc:	4617      	mov	r7, r2
 800c0de:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	f7ff fdd2 	bl	800bc8c <CheckFCntDown>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d041      	beq.n	800c170 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	f000 f963 	bl	800c3b8 <LoRaMacParserData>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d141      	bne.n	800c17a <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800c0f6:	a905      	add	r1, sp, #20
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f7ff fd8b 	bl	800bc14 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c0fe:	4605      	mov	r5, r0
 800c100:	2800      	cmp	r0, #0
 800c102:	d136      	bne.n	800c172 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800c104:	9b05      	ldr	r3, [sp, #20]
 800c106:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800c10a:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800c10c:	68b3      	ldr	r3, [r6, #8]
 800c10e:	4543      	cmp	r3, r8
 800c110:	d135      	bne.n	800c17e <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800c112:	7b33      	ldrb	r3, [r6, #12]
 800c114:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800c118:	491a      	ldr	r1, [pc, #104]	; (800c184 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800c11a:	6809      	ldr	r1, [r1, #0]
 800c11c:	7889      	ldrb	r1, [r1, #2]
 800c11e:	b901      	cbnz	r1, 800c122 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800c120:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800c122:	7931      	ldrb	r1, [r6, #4]
 800c124:	3904      	subs	r1, #4
 800c126:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800c128:	9003      	str	r0, [sp, #12]
 800c12a:	9402      	str	r4, [sp, #8]
 800c12c:	f8cd 8004 	str.w	r8, [sp, #4]
 800c130:	2001      	movs	r0, #1
 800c132:	9000      	str	r0, [sp, #0]
 800c134:	b289      	uxth	r1, r1
 800c136:	6830      	ldr	r0, [r6, #0]
 800c138:	f7ff febd 	bl	800beb6 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c13c:	4605      	mov	r5, r0
 800c13e:	b9c0      	cbnz	r0, 800c172 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800c140:	f896 3020 	ldrb.w	r3, [r6, #32]
 800c144:	b90b      	cbnz	r3, 800c14a <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800c146:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800c14a:	9401      	str	r4, [sp, #4]
 800c14c:	2301      	movs	r3, #1
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	4643      	mov	r3, r8
 800c152:	464a      	mov	r2, r9
 800c154:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800c158:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800c15a:	f7ff fe50 	bl	800bdfe <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c15e:	4605      	mov	r5, r0
 800c160:	b938      	cbnz	r0, 800c172 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800c162:	4621      	mov	r1, r4
 800c164:	4638      	mov	r0, r7
 800c166:	f7ff fda9 	bl	800bcbc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800c16a:	e002      	b.n	800c172 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c16c:	2509      	movs	r5, #9
 800c16e:	e000      	b.n	800c172 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c170:	2506      	movs	r5, #6
}
 800c172:	4628      	mov	r0, r5
 800c174:	b007      	add	sp, #28
 800c176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c17a:	250f      	movs	r5, #15
 800c17c:	e7f9      	b.n	800c172 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800c17e:	2502      	movs	r5, #2
 800c180:	e7f7      	b.n	800c172 <LoRaMacCryptoUnsecureMessage+0xa6>
 800c182:	bf00      	nop
 800c184:	20000e38 	.word	0x20000e38

0800c188 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800c188:	b500      	push	{lr}
 800c18a:	b085      	sub	sp, #20
 800c18c:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800c18e:	2300      	movs	r3, #0
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	9302      	str	r3, [sp, #8]
 800c196:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800c198:	290b      	cmp	r1, #11
 800c19a:	d007      	beq.n	800c1ac <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 800c19c:	290c      	cmp	r1, #12
 800c19e:	d013      	beq.n	800c1c8 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 800c1a0:	290a      	cmp	r1, #10
 800c1a2:	d00c      	beq.n	800c1be <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 800c1a4:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c1a6:	b005      	add	sp, #20
 800c1a8:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 800c1ac:	2801      	cmp	r0, #1
 800c1ae:	d001      	beq.n	800c1b4 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	e00a      	b.n	800c1ca <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 800c1b4:	2320      	movs	r3, #32
 800c1b6:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	e005      	b.n	800c1ca <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 800c1be:	2330      	movs	r3, #48	; 0x30
 800c1c0:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c1c4:	2100      	movs	r1, #0
            break;
 800c1c6:	e000      	b.n	800c1ca <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 800c1c8:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c1ca:	4668      	mov	r0, sp
 800c1cc:	f003 f944 	bl	800f458 <SecureElementDeriveAndStoreKey>
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d0e8      	beq.n	800c1a6 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c1d4:	200e      	movs	r0, #14
 800c1d6:	e7e6      	b.n	800c1a6 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0800c1d8 <LoRaMacCryptoSetKey>:
{
 800c1d8:	b510      	push	{r4, lr}
 800c1da:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800c1dc:	f003 f8fa 	bl	800f3d4 <SecureElementSetKey>
 800c1e0:	b998      	cbnz	r0, 800c20a <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800c1e2:	b104      	cbz	r4, 800c1e6 <LoRaMacCryptoSetKey+0xe>
}
 800c1e4:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c1e6:	4b0c      	ldr	r3, [pc, #48]	; (800c218 <LoRaMacCryptoSetKey+0x40>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	210b      	movs	r1, #11
 800c1ec:	7898      	ldrb	r0, [r3, #2]
 800c1ee:	f7ff ffcb 	bl	800c188 <LoRaMacCryptoDeriveLifeTimeKey>
 800c1f2:	b960      	cbnz	r0, 800c20e <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c1f4:	210c      	movs	r1, #12
 800c1f6:	f7ff ffc7 	bl	800c188 <LoRaMacCryptoDeriveLifeTimeKey>
 800c1fa:	b950      	cbnz	r0, 800c212 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c1fc:	210a      	movs	r1, #10
 800c1fe:	f7ff ffc3 	bl	800c188 <LoRaMacCryptoDeriveLifeTimeKey>
 800c202:	2800      	cmp	r0, #0
 800c204:	d0ee      	beq.n	800c1e4 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c206:	200e      	movs	r0, #14
 800c208:	e7ec      	b.n	800c1e4 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c20a:	200e      	movs	r0, #14
 800c20c:	e7ea      	b.n	800c1e4 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c20e:	200e      	movs	r0, #14
 800c210:	e7e8      	b.n	800c1e4 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c212:	200e      	movs	r0, #14
 800c214:	e7e6      	b.n	800c1e4 <LoRaMacCryptoSetKey+0xc>
 800c216:	bf00      	nop
 800c218:	20000e38 	.word	0x20000e38

0800c21c <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	d06c      	beq.n	800c2fa <LoRaMacCryptoHandleJoinAccept+0xde>
{
 800c220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c222:	b08f      	sub	sp, #60	; 0x3c
 800c224:	4607      	mov	r7, r0
 800c226:	460d      	mov	r5, r1
 800c228:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c22a:	2900      	cmp	r1, #0
 800c22c:	d067      	beq.n	800c2fe <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800c22e:	2600      	movs	r6, #0
 800c230:	9605      	str	r6, [sp, #20]
 800c232:	221d      	movs	r2, #29
 800c234:	4631      	mov	r1, r6
 800c236:	a806      	add	r0, sp, #24
 800c238:	f005 ff6c 	bl	8012114 <memset>
    uint8_t versionMinor         = 0;
 800c23c:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800c240:	4b33      	ldr	r3, [pc, #204]	; (800c310 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800c246:	f10d 0313 	add.w	r3, sp, #19
 800c24a:	9302      	str	r3, [sp, #8]
 800c24c:	ab05      	add	r3, sp, #20
 800c24e:	9301      	str	r3, [sp, #4]
 800c250:	7923      	ldrb	r3, [r4, #4]
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	4632      	mov	r2, r6
 800c258:	4629      	mov	r1, r5
 800c25a:	4638      	mov	r0, r7
 800c25c:	f003 f91c 	bl	800f498 <SecureElementProcessJoinAccept>
 800c260:	2800      	cmp	r0, #0
 800c262:	d14e      	bne.n	800c302 <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800c264:	7922      	ldrb	r2, [r4, #4]
 800c266:	a905      	add	r1, sp, #20
 800c268:	6820      	ldr	r0, [r4, #0]
 800c26a:	f003 fa9c 	bl	800f7a6 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c26e:	4620      	mov	r0, r4
 800c270:	f000 f850 	bl	800c314 <LoRaMacParserJoinAccept>
 800c274:	2800      	cmp	r0, #0
 800c276:	d147      	bne.n	800c308 <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800c278:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800c27a:	79e3      	ldrb	r3, [r4, #7]
 800c27c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800c280:	7a23      	ldrb	r3, [r4, #8]
 800c282:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800c286:	4628      	mov	r0, r5
 800c288:	f7ff fd4c 	bl	800bd24 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d03d      	beq.n	800c30c <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800c290:	4b1f      	ldr	r3, [pc, #124]	; (800c310 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800c296:	210b      	movs	r1, #11
 800c298:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800c29c:	f7ff ff74 	bl	800c188 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c2a0:	bb80      	cbnz	r0, 800c304 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800c2a2:	210c      	movs	r1, #12
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	f7ff ff6f 	bl	800c188 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c2aa:	bb58      	cbnz	r0, 800c304 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800c2ac:	210a      	movs	r1, #10
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	f7ff ff6a 	bl	800c188 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c2b4:	bb30      	cbnz	r0, 800c304 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 800c2b6:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800c2b8:	7aa2      	ldrb	r2, [r4, #10]
 800c2ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800c2be:	7ae4      	ldrb	r4, [r4, #11]
 800c2c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800c2c4:	4633      	mov	r3, r6
 800c2c6:	4622      	mov	r2, r4
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	2009      	movs	r0, #9
 800c2cc:	f7ff fd60 	bl	800bd90 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c2d0:	b9c0      	cbnz	r0, 800c304 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800c2d2:	4633      	mov	r3, r6
 800c2d4:	4622      	mov	r2, r4
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	2008      	movs	r0, #8
 800c2da:	f7ff fd59 	bl	800bd90 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c2de:	b988      	cbnz	r0, 800c304 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800c2e0:	4b0b      	ldr	r3, [pc, #44]	; (800c310 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800c2e8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f2:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c2f4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c2f6:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800c2f8:	e004      	b.n	800c304 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c2fa:	2009      	movs	r0, #9
}
 800c2fc:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c2fe:	2009      	movs	r0, #9
 800c300:	e000      	b.n	800c304 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c302:	200e      	movs	r0, #14
}
 800c304:	b00f      	add	sp, #60	; 0x3c
 800c306:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c308:	200f      	movs	r0, #15
 800c30a:	e7fb      	b.n	800c304 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800c30c:	2003      	movs	r0, #3
 800c30e:	e7f9      	b.n	800c304 <LoRaMacCryptoHandleJoinAccept+0xe8>
 800c310:	20000e38 	.word	0x20000e38

0800c314 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c314:	2800      	cmp	r0, #0
 800c316:	d049      	beq.n	800c3ac <LoRaMacParserJoinAccept+0x98>
{
 800c318:	b510      	push	{r4, lr}
 800c31a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c31c:	6801      	ldr	r1, [r0, #0]
 800c31e:	2900      	cmp	r1, #0
 800c320:	d046      	beq.n	800c3b0 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c322:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c326:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c328:	2203      	movs	r2, #3
 800c32a:	3006      	adds	r0, #6
 800c32c:	f003 fa3b 	bl	800f7a6 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800c330:	4620      	mov	r0, r4
 800c332:	f850 1b09 	ldr.w	r1, [r0], #9
 800c336:	2203      	movs	r2, #3
 800c338:	3104      	adds	r1, #4
 800c33a:	f003 fa34 	bl	800f7a6 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c33e:	6821      	ldr	r1, [r4, #0]
 800c340:	79cb      	ldrb	r3, [r1, #7]
 800c342:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c344:	7a0a      	ldrb	r2, [r1, #8]
 800c346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c34a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c34c:	7a4a      	ldrb	r2, [r1, #9]
 800c34e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c352:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c354:	7a8a      	ldrb	r2, [r1, #10]
 800c356:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c35a:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800c35c:	7acb      	ldrb	r3, [r1, #11]
 800c35e:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c360:	7b0b      	ldrb	r3, [r1, #12]
 800c362:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800c364:	7923      	ldrb	r3, [r4, #4]
 800c366:	2b21      	cmp	r3, #33	; 0x21
 800c368:	d018      	beq.n	800c39c <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800c36a:	2b11      	cmp	r3, #17
 800c36c:	dc22      	bgt.n	800c3b4 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c36e:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c370:	6821      	ldr	r1, [r4, #0]
 800c372:	f102 0c01 	add.w	ip, r2, #1
 800c376:	5c8b      	ldrb	r3, [r1, r2]
 800c378:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c37a:	1c90      	adds	r0, r2, #2
 800c37c:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800c380:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800c384:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c386:	3203      	adds	r2, #3
 800c388:	5c08      	ldrb	r0, [r1, r0]
 800c38a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c38e:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c390:	5c8a      	ldrb	r2, [r1, r2]
 800c392:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c396:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800c398:	2000      	movs	r0, #0
}
 800c39a:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800c39c:	2210      	movs	r2, #16
 800c39e:	310d      	adds	r1, #13
 800c3a0:	f104 0012 	add.w	r0, r4, #18
 800c3a4:	f003 f9ff 	bl	800f7a6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800c3a8:	221d      	movs	r2, #29
 800c3aa:	e7e1      	b.n	800c370 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800c3ac:	2002      	movs	r0, #2
}
 800c3ae:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c3b0:	2002      	movs	r0, #2
 800c3b2:	e7f2      	b.n	800c39a <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800c3b4:	2001      	movs	r0, #1
 800c3b6:	e7f0      	b.n	800c39a <LoRaMacParserJoinAccept+0x86>

0800c3b8 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d058      	beq.n	800c46e <LoRaMacParserData+0xb6>
{
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c3c0:	6801      	ldr	r1, [r0, #0]
 800c3c2:	2900      	cmp	r1, #0
 800c3c4:	d055      	beq.n	800c472 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c3c6:	780b      	ldrb	r3, [r1, #0]
 800c3c8:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c3ca:	784b      	ldrb	r3, [r1, #1]
 800c3cc:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c3ce:	788a      	ldrb	r2, [r1, #2]
 800c3d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c3d4:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c3d6:	78ca      	ldrb	r2, [r1, #3]
 800c3d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3dc:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c3de:	790a      	ldrb	r2, [r1, #4]
 800c3e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c3e4:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c3e6:	794b      	ldrb	r3, [r1, #5]
 800c3e8:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c3ea:	798b      	ldrb	r3, [r1, #6]
 800c3ec:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c3ee:	79ca      	ldrb	r2, [r1, #7]
 800c3f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c3f4:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c3f6:	7b02      	ldrb	r2, [r0, #12]
 800c3f8:	f002 020f 	and.w	r2, r2, #15
 800c3fc:	3108      	adds	r1, #8
 800c3fe:	3010      	adds	r0, #16
 800c400:	f003 f9d1 	bl	800f7a6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c404:	7b23      	ldrb	r3, [r4, #12]
 800c406:	f003 030f 	and.w	r3, r3, #15
 800c40a:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800c40e:	2200      	movs	r2, #0
 800c410:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800c414:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c418:	7922      	ldrb	r2, [r4, #4]
 800c41a:	1a11      	subs	r1, r2, r0
 800c41c:	2904      	cmp	r1, #4
 800c41e:	dc16      	bgt.n	800c44e <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c420:	6822      	ldr	r2, [r4, #0]
 800c422:	7923      	ldrb	r3, [r4, #4]
 800c424:	441a      	add	r2, r3
 800c426:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800c42a:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c42c:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800c430:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c434:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c436:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800c43a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c43e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c440:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800c444:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c448:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800c44a:	2000      	movs	r0, #0
}
 800c44c:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c44e:	6821      	ldr	r1, [r4, #0]
 800c450:	3309      	adds	r3, #9
 800c452:	5c08      	ldrb	r0, [r1, r0]
 800c454:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c458:	1ad2      	subs	r2, r2, r3
 800c45a:	b2d2      	uxtb	r2, r2
 800c45c:	3a04      	subs	r2, #4
 800c45e:	b2d2      	uxtb	r2, r2
 800c460:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c464:	4419      	add	r1, r3
 800c466:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c468:	f003 f99d 	bl	800f7a6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800c46c:	e7d8      	b.n	800c420 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800c46e:	2002      	movs	r0, #2
}
 800c470:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c472:	2002      	movs	r0, #2
 800c474:	e7ea      	b.n	800c44c <LoRaMacParserData+0x94>

0800c476 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c476:	b370      	cbz	r0, 800c4d6 <LoRaMacSerializerJoinRequest+0x60>
{
 800c478:	b510      	push	{r4, lr}
 800c47a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c47c:	6803      	ldr	r3, [r0, #0]
 800c47e:	b363      	cbz	r3, 800c4da <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c480:	7902      	ldrb	r2, [r0, #4]
 800c482:	2a16      	cmp	r2, #22
 800c484:	d92b      	bls.n	800c4de <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c486:	7942      	ldrb	r2, [r0, #5]
 800c488:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c48a:	4601      	mov	r1, r0
 800c48c:	f851 0b06 	ldr.w	r0, [r1], #6
 800c490:	2208      	movs	r2, #8
 800c492:	3001      	adds	r0, #1
 800c494:	f003 f992 	bl	800f7bc <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c498:	4621      	mov	r1, r4
 800c49a:	f851 0b0e 	ldr.w	r0, [r1], #14
 800c49e:	2208      	movs	r2, #8
 800c4a0:	3009      	adds	r0, #9
 800c4a2:	f003 f98b 	bl	800f7bc <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c4a6:	8ae2      	ldrh	r2, [r4, #22]
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c4ac:	8ae3      	ldrh	r3, [r4, #22]
 800c4ae:	6822      	ldr	r2, [r4, #0]
 800c4b0:	0a1b      	lsrs	r3, r3, #8
 800c4b2:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c4b4:	69a2      	ldr	r2, [r4, #24]
 800c4b6:	6823      	ldr	r3, [r4, #0]
 800c4b8:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c4ba:	69a3      	ldr	r3, [r4, #24]
 800c4bc:	0a1b      	lsrs	r3, r3, #8
 800c4be:	6822      	ldr	r2, [r4, #0]
 800c4c0:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c4c2:	8b62      	ldrh	r2, [r4, #26]
 800c4c4:	6823      	ldr	r3, [r4, #0]
 800c4c6:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c4c8:	7ee2      	ldrb	r2, [r4, #27]
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800c4ce:	2317      	movs	r3, #23
 800c4d0:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c4d2:	2000      	movs	r0, #0
}
 800c4d4:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c4d6:	2001      	movs	r0, #1
}
 800c4d8:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c4da:	2001      	movs	r0, #1
 800c4dc:	e7fa      	b.n	800c4d4 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c4de:	2002      	movs	r0, #2
 800c4e0:	e7f8      	b.n	800c4d4 <LoRaMacSerializerJoinRequest+0x5e>

0800c4e2 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d066      	beq.n	800c5b4 <LoRaMacSerializerData+0xd2>
{
 800c4e6:	b538      	push	{r3, r4, r5, lr}
 800c4e8:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c4ea:	6801      	ldr	r1, [r0, #0]
 800c4ec:	2900      	cmp	r1, #0
 800c4ee:	d063      	beq.n	800c5b8 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c4f0:	7b02      	ldrb	r2, [r0, #12]
 800c4f2:	f002 020f 	and.w	r2, r2, #15
 800c4f6:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c4fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c4fe:	b10b      	cbz	r3, 800c504 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800c500:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800c504:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c506:	3304      	adds	r3, #4
 800c508:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800c50a:	7922      	ldrb	r2, [r4, #4]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d355      	bcc.n	800c5bc <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c510:	7963      	ldrb	r3, [r4, #5]
 800c512:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c514:	68a2      	ldr	r2, [r4, #8]
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c51a:	68a3      	ldr	r3, [r4, #8]
 800c51c:	0a1b      	lsrs	r3, r3, #8
 800c51e:	6822      	ldr	r2, [r4, #0]
 800c520:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c522:	8962      	ldrh	r2, [r4, #10]
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c528:	7ae2      	ldrb	r2, [r4, #11]
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	7b22      	ldrb	r2, [r4, #12]
 800c532:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c534:	89e2      	ldrh	r2, [r4, #14]
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c53a:	89e3      	ldrh	r3, [r4, #14]
 800c53c:	6822      	ldr	r2, [r4, #0]
 800c53e:	0a1b      	lsrs	r3, r3, #8
 800c540:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c542:	4621      	mov	r1, r4
 800c544:	f851 0b10 	ldr.w	r0, [r1], #16
 800c548:	7b22      	ldrb	r2, [r4, #12]
 800c54a:	f002 020f 	and.w	r2, r2, #15
 800c54e:	3008      	adds	r0, #8
 800c550:	f003 f929 	bl	800f7a6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c554:	7b23      	ldrb	r3, [r4, #12]
 800c556:	f003 030f 	and.w	r3, r3, #15
 800c55a:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c55e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c562:	b12a      	cbz	r2, 800c570 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c564:	6822      	ldr	r2, [r4, #0]
 800c566:	f894 1020 	ldrb.w	r1, [r4, #32]
 800c56a:	5551      	strb	r1, [r2, r5]
 800c56c:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c570:	6820      	ldr	r0, [r4, #0]
 800c572:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c576:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c578:	4428      	add	r0, r5
 800c57a:	f003 f914 	bl	800f7a6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c57e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c582:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c584:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c586:	6821      	ldr	r1, [r4, #0]
 800c588:	1c5a      	adds	r2, r3, #1
 800c58a:	b292      	uxth	r2, r2
 800c58c:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c58e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c590:	0a08      	lsrs	r0, r1, #8
 800c592:	6825      	ldr	r5, [r4, #0]
 800c594:	1c99      	adds	r1, r3, #2
 800c596:	b289      	uxth	r1, r1
 800c598:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c59a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800c59c:	6820      	ldr	r0, [r4, #0]
 800c59e:	1cda      	adds	r2, r3, #3
 800c5a0:	b292      	uxth	r2, r2
 800c5a2:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c5a4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800c5a8:	6821      	ldr	r1, [r4, #0]
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800c5ae:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c5b0:	2000      	movs	r0, #0
}
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c5b4:	2001      	movs	r0, #1
}
 800c5b6:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	e7fa      	b.n	800c5b2 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c5bc:	2002      	movs	r0, #2
 800c5be:	e7f8      	b.n	800c5b2 <LoRaMacSerializerData+0xd0>

0800c5c0 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800c5c0:	4b02      	ldr	r3, [pc, #8]	; (800c5cc <NvmDataMgmtEvent+0xc>)
 800c5c2:	881a      	ldrh	r2, [r3, #0]
 800c5c4:	4310      	orrs	r0, r2
 800c5c6:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	20000e3c 	.word	0x20000e3c

0800c5d0 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800c5d0:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800c5d2:	4b06      	ldr	r3, [pc, #24]	; (800c5ec <NvmDataMgmtStoreBegin+0x1c>)
 800c5d4:	881b      	ldrh	r3, [r3, #0]
 800c5d6:	b11b      	cbz	r3, 800c5e0 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800c5d8:	f7fe f88c 	bl	800a6f4 <LoRaMacStop>
 800c5dc:	b918      	cbnz	r0, 800c5e6 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c5de:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800c5e0:	f06f 0001 	mvn.w	r0, #1
 800c5e4:	e7fb      	b.n	800c5de <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800c5e6:	f06f 0002 	mvn.w	r0, #2
 800c5ea:	e7f8      	b.n	800c5de <NvmDataMgmtStoreBegin+0xe>
 800c5ec:	20000e3c 	.word	0x20000e3c

0800c5f0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800c5f0:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c5f2:	2400      	movs	r4, #0
 800c5f4:	4b02      	ldr	r3, [pc, #8]	; (800c600 <NvmDataMgmtStoreEnd+0x10>)
 800c5f6:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800c5f8:	f7fe f870 	bl	800a6dc <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	bd10      	pop	{r4, pc}
 800c600:	20000e3c 	.word	0x20000e3c

0800c604 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c604:	2805      	cmp	r0, #5
 800c606:	d005      	beq.n	800c614 <RegionIsActive+0x10>
 800c608:	2808      	cmp	r0, #8
 800c60a:	d001      	beq.n	800c610 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800c60c:	2000      	movs	r0, #0
        }
    }
}
 800c60e:	4770      	bx	lr
    switch( region )
 800c610:	2001      	movs	r0, #1
 800c612:	4770      	bx	lr
 800c614:	2001      	movs	r0, #1
 800c616:	4770      	bx	lr

0800c618 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c618:	b500      	push	{lr}
 800c61a:	b083      	sub	sp, #12
 800c61c:	4603      	mov	r3, r0
 800c61e:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800c620:	2200      	movs	r2, #0
 800c622:	9200      	str	r2, [sp, #0]
    switch( region )
 800c624:	2b05      	cmp	r3, #5
 800c626:	d004      	beq.n	800c632 <RegionGetPhyParam+0x1a>
 800c628:	2b08      	cmp	r3, #8
 800c62a:	d009      	beq.n	800c640 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800c62c:	9b00      	ldr	r3, [sp, #0]
 800c62e:	9301      	str	r3, [sp, #4]
 800c630:	e002      	b.n	800c638 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800c632:	f000 fdeb 	bl	800d20c <RegionEU868GetPhyParam>
 800c636:	9001      	str	r0, [sp, #4]
        }
    }
}
 800c638:	9801      	ldr	r0, [sp, #4]
 800c63a:	b003      	add	sp, #12
 800c63c:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800c640:	f001 fbda 	bl	800ddf8 <RegionUS915GetPhyParam>
 800c644:	9001      	str	r0, [sp, #4]
 800c646:	e7f7      	b.n	800c638 <RegionGetPhyParam+0x20>

0800c648 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800c648:	b508      	push	{r3, lr}
 800c64a:	4603      	mov	r3, r0
 800c64c:	4608      	mov	r0, r1
    switch( region )
 800c64e:	2b05      	cmp	r3, #5
 800c650:	d002      	beq.n	800c658 <RegionSetBandTxDone+0x10>
 800c652:	2b08      	cmp	r3, #8
 800c654:	d003      	beq.n	800c65e <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800c656:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800c658:	f000 fe94 	bl	800d384 <RegionEU868SetBandTxDone>
 800c65c:	e7fb      	b.n	800c656 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800c65e:	f001 fca1 	bl	800dfa4 <RegionUS915SetBandTxDone>
 800c662:	e7f8      	b.n	800c656 <RegionSetBandTxDone+0xe>

0800c664 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800c664:	b508      	push	{r3, lr}
 800c666:	4603      	mov	r3, r0
 800c668:	4608      	mov	r0, r1
    switch( region )
 800c66a:	2b05      	cmp	r3, #5
 800c66c:	d002      	beq.n	800c674 <RegionInitDefaults+0x10>
 800c66e:	2b08      	cmp	r3, #8
 800c670:	d003      	beq.n	800c67a <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800c672:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800c674:	f000 fea4 	bl	800d3c0 <RegionEU868InitDefaults>
 800c678:	e7fb      	b.n	800c672 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800c67a:	f001 fcb1 	bl	800dfe0 <RegionUS915InitDefaults>
}
 800c67e:	e7f8      	b.n	800c672 <RegionInitDefaults+0xe>

0800c680 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c680:	b508      	push	{r3, lr}
 800c682:	4603      	mov	r3, r0
 800c684:	4608      	mov	r0, r1
 800c686:	4611      	mov	r1, r2
    switch( region )
 800c688:	2b05      	cmp	r3, #5
 800c68a:	d003      	beq.n	800c694 <RegionVerify+0x14>
 800c68c:	2b08      	cmp	r3, #8
 800c68e:	d004      	beq.n	800c69a <RegionVerify+0x1a>
 800c690:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c692:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800c694:	f000 ff00 	bl	800d498 <RegionEU868Verify>
 800c698:	e7fb      	b.n	800c692 <RegionVerify+0x12>
        US915_VERIFY( );
 800c69a:	f001 fd45 	bl	800e128 <RegionUS915Verify>
 800c69e:	e7f8      	b.n	800c692 <RegionVerify+0x12>

0800c6a0 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800c6a0:	b508      	push	{r3, lr}
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	4608      	mov	r0, r1
    switch( region )
 800c6a6:	2b05      	cmp	r3, #5
 800c6a8:	d002      	beq.n	800c6b0 <RegionApplyCFList+0x10>
 800c6aa:	2b08      	cmp	r3, #8
 800c6ac:	d003      	beq.n	800c6b6 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800c6ae:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800c6b0:	f001 fac4 	bl	800dc3c <RegionEU868ApplyCFList>
 800c6b4:	e7fb      	b.n	800c6ae <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800c6b6:	f001 fd71 	bl	800e19c <RegionUS915ApplyCFList>
}
 800c6ba:	e7f8      	b.n	800c6ae <RegionApplyCFList+0xe>

0800c6bc <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800c6bc:	b508      	push	{r3, lr}
 800c6be:	4603      	mov	r3, r0
 800c6c0:	4608      	mov	r0, r1
    switch( region )
 800c6c2:	2b05      	cmp	r3, #5
 800c6c4:	d003      	beq.n	800c6ce <RegionChanMaskSet+0x12>
 800c6c6:	2b08      	cmp	r3, #8
 800c6c8:	d004      	beq.n	800c6d4 <RegionChanMaskSet+0x18>
 800c6ca:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c6cc:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800c6ce:	f000 ff29 	bl	800d524 <RegionEU868ChanMaskSet>
 800c6d2:	e7fb      	b.n	800c6cc <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800c6d4:	f001 fda0 	bl	800e218 <RegionUS915ChanMaskSet>
 800c6d8:	e7f8      	b.n	800c6cc <RegionChanMaskSet+0x10>

0800c6da <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c6da:	b508      	push	{r3, lr}
 800c6dc:	4684      	mov	ip, r0
 800c6de:	4608      	mov	r0, r1
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	461a      	mov	r2, r3
    switch( region )
 800c6e4:	f1bc 0f05 	cmp.w	ip, #5
 800c6e8:	d003      	beq.n	800c6f2 <RegionComputeRxWindowParameters+0x18>
 800c6ea:	f1bc 0f08 	cmp.w	ip, #8
 800c6ee:	d004      	beq.n	800c6fa <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800c6f0:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c6f2:	9b02      	ldr	r3, [sp, #8]
 800c6f4:	f000 ff34 	bl	800d560 <RegionEU868ComputeRxWindowParameters>
 800c6f8:	e7fa      	b.n	800c6f0 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c6fa:	9b02      	ldr	r3, [sp, #8]
 800c6fc:	f001 fdce 	bl	800e29c <RegionUS915ComputeRxWindowParameters>
}
 800c700:	e7f6      	b.n	800c6f0 <RegionComputeRxWindowParameters+0x16>

0800c702 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c702:	b508      	push	{r3, lr}
 800c704:	4603      	mov	r3, r0
 800c706:	4608      	mov	r0, r1
 800c708:	4611      	mov	r1, r2
    switch( region )
 800c70a:	2b05      	cmp	r3, #5
 800c70c:	d003      	beq.n	800c716 <RegionRxConfig+0x14>
 800c70e:	2b08      	cmp	r3, #8
 800c710:	d004      	beq.n	800c71c <RegionRxConfig+0x1a>
 800c712:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c714:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800c716:	f000 ff59 	bl	800d5cc <RegionEU868RxConfig>
 800c71a:	e7fb      	b.n	800c714 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800c71c:	f001 fdec 	bl	800e2f8 <RegionUS915RxConfig>
 800c720:	e7f8      	b.n	800c714 <RegionRxConfig+0x12>

0800c722 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c722:	b508      	push	{r3, lr}
 800c724:	4684      	mov	ip, r0
 800c726:	4608      	mov	r0, r1
 800c728:	4611      	mov	r1, r2
 800c72a:	461a      	mov	r2, r3
    switch( region )
 800c72c:	f1bc 0f05 	cmp.w	ip, #5
 800c730:	d004      	beq.n	800c73c <RegionTxConfig+0x1a>
 800c732:	f1bc 0f08 	cmp.w	ip, #8
 800c736:	d004      	beq.n	800c742 <RegionTxConfig+0x20>
 800c738:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c73a:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800c73c:	f000 ffca 	bl	800d6d4 <RegionEU868TxConfig>
 800c740:	e7fb      	b.n	800c73a <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800c742:	f001 fe33 	bl	800e3ac <RegionUS915TxConfig>
 800c746:	e7f8      	b.n	800c73a <RegionTxConfig+0x18>

0800c748 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c748:	b500      	push	{lr}
 800c74a:	b083      	sub	sp, #12
 800c74c:	4684      	mov	ip, r0
 800c74e:	4608      	mov	r0, r1
 800c750:	4611      	mov	r1, r2
 800c752:	461a      	mov	r2, r3
    switch( region )
 800c754:	f1bc 0f05 	cmp.w	ip, #5
 800c758:	d006      	beq.n	800c768 <RegionLinkAdrReq+0x20>
 800c75a:	f1bc 0f08 	cmp.w	ip, #8
 800c75e:	d009      	beq.n	800c774 <RegionLinkAdrReq+0x2c>
 800c760:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c762:	b003      	add	sp, #12
 800c764:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800c768:	9b05      	ldr	r3, [sp, #20]
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	9b04      	ldr	r3, [sp, #16]
 800c76e:	f001 f849 	bl	800d804 <RegionEU868LinkAdrReq>
 800c772:	e7f6      	b.n	800c762 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800c774:	9b05      	ldr	r3, [sp, #20]
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	9b04      	ldr	r3, [sp, #16]
 800c77a:	f001 fe91 	bl	800e4a0 <RegionUS915LinkAdrReq>
 800c77e:	e7f0      	b.n	800c762 <RegionLinkAdrReq+0x1a>

0800c780 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c780:	b508      	push	{r3, lr}
 800c782:	4603      	mov	r3, r0
 800c784:	4608      	mov	r0, r1
    switch( region )
 800c786:	2b05      	cmp	r3, #5
 800c788:	d003      	beq.n	800c792 <RegionRxParamSetupReq+0x12>
 800c78a:	2b08      	cmp	r3, #8
 800c78c:	d004      	beq.n	800c798 <RegionRxParamSetupReq+0x18>
 800c78e:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c790:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800c792:	f001 f8fb 	bl	800d98c <RegionEU868RxParamSetupReq>
 800c796:	e7fb      	b.n	800c790 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800c798:	f001 ffc4 	bl	800e724 <RegionUS915RxParamSetupReq>
 800c79c:	e7f8      	b.n	800c790 <RegionRxParamSetupReq+0x10>

0800c79e <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800c79e:	b508      	push	{r3, lr}
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	4608      	mov	r0, r1
    switch( region )
 800c7a4:	2b05      	cmp	r3, #5
 800c7a6:	d003      	beq.n	800c7b0 <RegionNewChannelReq+0x12>
 800c7a8:	2b08      	cmp	r3, #8
 800c7aa:	d004      	beq.n	800c7b6 <RegionNewChannelReq+0x18>
 800c7ac:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c7ae:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800c7b0:	f001 fa85 	bl	800dcbe <RegionEU868NewChannelReq>
 800c7b4:	e7fb      	b.n	800c7ae <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800c7b6:	f001 ffe0 	bl	800e77a <RegionUS915NewChannelReq>
 800c7ba:	e7f8      	b.n	800c7ae <RegionNewChannelReq+0x10>

0800c7bc <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800c7bc:	b508      	push	{r3, lr}
 800c7be:	4603      	mov	r3, r0
 800c7c0:	4608      	mov	r0, r1
    switch( region )
 800c7c2:	2b05      	cmp	r3, #5
 800c7c4:	d003      	beq.n	800c7ce <RegionTxParamSetupReq+0x12>
 800c7c6:	2b08      	cmp	r3, #8
 800c7c8:	d004      	beq.n	800c7d4 <RegionTxParamSetupReq+0x18>
 800c7ca:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c7cc:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800c7ce:	f001 f901 	bl	800d9d4 <RegionEU868TxParamSetupReq>
 800c7d2:	e7fb      	b.n	800c7cc <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800c7d4:	f001 ffd4 	bl	800e780 <RegionUS915TxParamSetupReq>
 800c7d8:	e7f8      	b.n	800c7cc <RegionTxParamSetupReq+0x10>

0800c7da <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800c7da:	b508      	push	{r3, lr}
 800c7dc:	4603      	mov	r3, r0
 800c7de:	4608      	mov	r0, r1
    switch( region )
 800c7e0:	2b05      	cmp	r3, #5
 800c7e2:	d003      	beq.n	800c7ec <RegionDlChannelReq+0x12>
 800c7e4:	2b08      	cmp	r3, #8
 800c7e6:	d004      	beq.n	800c7f2 <RegionDlChannelReq+0x18>
 800c7e8:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c7ea:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800c7ec:	f001 f8f6 	bl	800d9dc <RegionEU868DlChannelReq>
 800c7f0:	e7fb      	b.n	800c7ea <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800c7f2:	f001 ffc8 	bl	800e786 <RegionUS915DlChannelReq>
 800c7f6:	e7f8      	b.n	800c7ea <RegionDlChannelReq+0x10>

0800c7f8 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800c7f8:	b508      	push	{r3, lr}
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	4611      	mov	r1, r2
    switch( region )
 800c800:	2b05      	cmp	r3, #5
 800c802:	d003      	beq.n	800c80c <RegionAlternateDr+0x14>
 800c804:	2b08      	cmp	r3, #8
 800c806:	d004      	beq.n	800c812 <RegionAlternateDr+0x1a>
 800c808:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c80a:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800c80c:	f001 f912 	bl	800da34 <RegionEU868AlternateDr>
 800c810:	e7fb      	b.n	800c80a <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800c812:	f001 ffbb 	bl	800e78c <RegionUS915AlternateDr>
 800c816:	e7f8      	b.n	800c80a <RegionAlternateDr+0x12>

0800c818 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c818:	b508      	push	{r3, lr}
 800c81a:	4684      	mov	ip, r0
 800c81c:	4608      	mov	r0, r1
 800c81e:	4611      	mov	r1, r2
 800c820:	461a      	mov	r2, r3
    switch( region )
 800c822:	f1bc 0f05 	cmp.w	ip, #5
 800c826:	d004      	beq.n	800c832 <RegionNextChannel+0x1a>
 800c828:	f1bc 0f08 	cmp.w	ip, #8
 800c82c:	d005      	beq.n	800c83a <RegionNextChannel+0x22>
 800c82e:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800c830:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800c832:	9b02      	ldr	r3, [sp, #8]
 800c834:	f001 f900 	bl	800da38 <RegionEU868NextChannel>
 800c838:	e7fa      	b.n	800c830 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800c83a:	9b02      	ldr	r3, [sp, #8]
 800c83c:	f001 ffc8 	bl	800e7d0 <RegionUS915NextChannel>
 800c840:	e7f6      	b.n	800c830 <RegionNextChannel+0x18>

0800c842 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c842:	b508      	push	{r3, lr}
 800c844:	4684      	mov	ip, r0
 800c846:	4608      	mov	r0, r1
 800c848:	4611      	mov	r1, r2
 800c84a:	461a      	mov	r2, r3
    switch( region )
 800c84c:	f1bc 0f05 	cmp.w	ip, #5
 800c850:	d004      	beq.n	800c85c <RegionApplyDrOffset+0x1a>
 800c852:	f1bc 0f08 	cmp.w	ip, #8
 800c856:	d004      	beq.n	800c862 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c858:	b2c8      	uxtb	r0, r1
 800c85a:	e001      	b.n	800c860 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800c85c:	f001 fa5a 	bl	800dd14 <RegionEU868ApplyDrOffset>
        }
    }
}
 800c860:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800c862:	f002 f863 	bl	800e92c <RegionUS915ApplyDrOffset>
 800c866:	e7fb      	b.n	800c860 <RegionApplyDrOffset+0x1e>

0800c868 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c868:	4800      	ldr	r0, [pc, #0]	; (800c86c <RegionGetVersion+0x4>)
 800c86a:	4770      	bx	lr
 800c86c:	02010001 	.word	0x02010001

0800c870 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800c870:	468c      	mov	ip, r1
 800c872:	b1a9      	cbz	r1, 800c8a0 <FindAvailable125kHzChannels+0x30>
 800c874:	b1b2      	cbz	r2, 800c8a4 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800c87a:	e001      	b.n	800c880 <FindAvailable125kHzChannels+0x10>
 800c87c:	3301      	adds	r3, #1
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	2b07      	cmp	r3, #7
 800c882:	d80b      	bhi.n	800c89c <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800c884:	fa40 f103 	asr.w	r1, r0, r3
 800c888:	f011 0f01 	tst.w	r1, #1
 800c88c:	d0f6      	beq.n	800c87c <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800c88e:	7811      	ldrb	r1, [r2, #0]
 800c890:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800c894:	7811      	ldrb	r1, [r2, #0]
 800c896:	3101      	adds	r1, #1
 800c898:	7011      	strb	r1, [r2, #0]
 800c89a:	e7ef      	b.n	800c87c <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800c89c:	2000      	movs	r0, #0
 800c89e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c8a0:	2003      	movs	r0, #3
 800c8a2:	4770      	bx	lr
 800c8a4:	2003      	movs	r0, #3
}
 800c8a6:	4770      	bx	lr

0800c8a8 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800c8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8aa:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	9302      	str	r3, [sp, #8]
 800c8b0:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800c8b2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d03e      	beq.n	800c938 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800c8ba:	460d      	mov	r5, r1
 800c8bc:	4617      	mov	r7, r2
 800c8be:	4606      	mov	r6, r0
 800c8c0:	2900      	cmp	r1, #0
 800c8c2:	d03b      	beq.n	800c93c <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800c8c4:	2a00      	cmp	r2, #0
 800c8c6:	d03b      	beq.n	800c940 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800c8c8:	780c      	ldrb	r4, [r1, #0]
 800c8ca:	e017      	b.n	800c8fc <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800c8cc:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800c8d0:	0a00      	lsrs	r0, r0, #8
 800c8d2:	e019      	b.n	800c908 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800c8d4:	3901      	subs	r1, #1
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	f002 ff58 	bl	800f78c <randr>
 800c8dc:	f100 0310 	add.w	r3, r0, #16
 800c8e0:	eb0d 0003 	add.w	r0, sp, r3
 800c8e4:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800c8e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c8ec:	703b      	strb	r3, [r7, #0]
 800c8ee:	e016      	b.n	800c91e <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800c8f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c8f4:	b9cb      	cbnz	r3, 800c92a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800c8f6:	782a      	ldrb	r2, [r5, #0]
 800c8f8:	42a2      	cmp	r2, r4
 800c8fa:	d016      	beq.n	800c92a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800c8fc:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800c8fe:	f014 0f01 	tst.w	r4, #1
 800c902:	d1e3      	bne.n	800c8cc <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800c904:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800c908:	f10d 0207 	add.w	r2, sp, #7
 800c90c:	a902      	add	r1, sp, #8
 800c90e:	f7ff ffaf 	bl	800c870 <FindAvailable125kHzChannels>
 800c912:	2803      	cmp	r0, #3
 800c914:	d00b      	beq.n	800c92e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800c916:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c91a:	2900      	cmp	r1, #0
 800c91c:	d1da      	bne.n	800c8d4 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800c91e:	3401      	adds	r4, #1
 800c920:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800c922:	2c07      	cmp	r4, #7
 800c924:	d9e4      	bls.n	800c8f0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800c926:	2400      	movs	r4, #0
 800c928:	e7e2      	b.n	800c8f0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800c92a:	b913      	cbnz	r3, 800c932 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800c92c:	2003      	movs	r0, #3
}
 800c92e:	b005      	add	sp, #20
 800c930:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800c932:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800c934:	2000      	movs	r0, #0
 800c936:	e7fa      	b.n	800c92e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c938:	2003      	movs	r0, #3
 800c93a:	e7f8      	b.n	800c92e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800c93c:	2003      	movs	r0, #3
 800c93e:	e7f6      	b.n	800c92e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800c940:	2003      	movs	r0, #3
 800c942:	e7f4      	b.n	800c92e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800c944 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800c944:	fb02 1000 	mla	r0, r2, r0, r1
 800c948:	4770      	bx	lr

0800c94a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c94a:	b082      	sub	sp, #8
 800c94c:	f10d 0c08 	add.w	ip, sp, #8
 800c950:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800c954:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800c956:	b971      	cbnz	r1, 800c976 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c958:	4613      	mov	r3, r2
 800c95a:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800c95e:	d306      	bcc.n	800c96e <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800c960:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800c964:	4293      	cmp	r3, r2
 800c966:	d80a      	bhi.n	800c97e <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800c968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c96c:	e000      	b.n	800c970 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800c96e:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c970:	4298      	cmp	r0, r3
 800c972:	bf38      	it	cc
 800c974:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800c976:	b900      	cbnz	r0, 800c97a <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800c978:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800c97a:	b002      	add	sp, #8
 800c97c:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800c97e:	f242 7310 	movw	r3, #10000	; 0x2710
 800c982:	e7f5      	b.n	800c970 <GetDutyCycle+0x26>

0800c984 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800c984:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800c986:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800c988:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800c98a:	e001      	b.n	800c990 <CountChannels+0xc>
 800c98c:	3301      	adds	r3, #1
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	428b      	cmp	r3, r1
 800c992:	d207      	bcs.n	800c9a4 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800c994:	2201      	movs	r2, #1
 800c996:	409a      	lsls	r2, r3
 800c998:	ea32 020c 	bics.w	r2, r2, ip
 800c99c:	d1f6      	bne.n	800c98c <CountChannels+0x8>
        {
            nbActiveBits++;
 800c99e:	3001      	adds	r0, #1
 800c9a0:	b2c0      	uxtb	r0, r0
 800c9a2:	e7f3      	b.n	800c98c <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800c9a4:	4770      	bx	lr
	...

0800c9a8 <SetMaxTimeCredits>:
{
 800c9a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9ac:	b089      	sub	sp, #36	; 0x24
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	460e      	mov	r6, r1
 800c9b2:	ad02      	add	r5, sp, #8
 800c9b4:	e885 000c 	stmia.w	r5, {r2, r3}
 800c9b8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800c9bc:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800c9c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c9c4:	f005 f86c 	bl	8011aa0 <SysTimeToMs>
 800c9c8:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	9304      	str	r3, [sp, #16]
 800c9ce:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c9d0:	e895 000c 	ldmia.w	r5, {r2, r3}
 800c9d4:	4631      	mov	r1, r6
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f7ff ffb7 	bl	800c94a <GetDutyCycle>
 800c9dc:	4605      	mov	r5, r0
    if( joined == false )
 800c9de:	2e00      	cmp	r6, #0
 800c9e0:	d14c      	bne.n	800ca7c <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c9e2:	2864      	cmp	r0, #100	; 0x64
 800c9e4:	d025      	beq.n	800ca32 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c9e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c9ea:	d025      	beq.n	800ca38 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800c9ec:	4e27      	ldr	r6, [pc, #156]	; (800ca8c <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800c9ee:	68a1      	ldr	r1, [r4, #8]
 800c9f0:	a806      	add	r0, sp, #24
 800c9f2:	f005 f875 	bl	8011ae0 <SysTimeFromMs>
 800c9f6:	9b07      	ldr	r3, [sp, #28]
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	9b06      	ldr	r3, [sp, #24]
 800c9fc:	aa02      	add	r2, sp, #8
 800c9fe:	ca06      	ldmia	r2, {r1, r2}
 800ca00:	a804      	add	r0, sp, #16
 800ca02:	f004 ffd4 	bl	80119ae <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800ca06:	f1b8 0f00 	cmp.w	r8, #0
 800ca0a:	d102      	bne.n	800ca12 <SetMaxTimeCredits+0x6a>
 800ca0c:	f1b9 0f00 	cmp.w	r9, #0
 800ca10:	d002      	beq.n	800ca18 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800ca12:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800ca14:	42b3      	cmp	r3, r6
 800ca16:	d012      	beq.n	800ca3e <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800ca18:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ca1a:	9b02      	ldr	r3, [sp, #8]
 800ca1c:	4a1c      	ldr	r2, [pc, #112]	; (800ca90 <SetMaxTimeCredits+0xe8>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d812      	bhi.n	800ca48 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800ca22:	6863      	ldr	r3, [r4, #4]
 800ca24:	b903      	cbnz	r3, 800ca28 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800ca26:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800ca28:	6126      	str	r6, [r4, #16]
}
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	b009      	add	sp, #36	; 0x24
 800ca2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800ca32:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800ca34:	4e17      	ldr	r6, [pc, #92]	; (800ca94 <SetMaxTimeCredits+0xec>)
 800ca36:	e7da      	b.n	800c9ee <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800ca38:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800ca3a:	4e17      	ldr	r6, [pc, #92]	; (800ca98 <SetMaxTimeCredits+0xf0>)
 800ca3c:	e7d7      	b.n	800c9ee <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800ca3e:	9a04      	ldr	r2, [sp, #16]
 800ca40:	4b16      	ldr	r3, [pc, #88]	; (800ca9c <SetMaxTimeCredits+0xf4>)
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d9ed      	bls.n	800ca22 <SetMaxTimeCredits+0x7a>
 800ca46:	e7e7      	b.n	800ca18 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800ca48:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800ca4c:	3b30      	subs	r3, #48	; 0x30
 800ca4e:	4a14      	ldr	r2, [pc, #80]	; (800caa0 <SetMaxTimeCredits+0xf8>)
 800ca50:	fba2 2303 	umull	r2, r3, r2, r3
 800ca54:	0c1b      	lsrs	r3, r3, #16
 800ca56:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800ca58:	4a12      	ldr	r2, [pc, #72]	; (800caa4 <SetMaxTimeCredits+0xfc>)
 800ca5a:	fb02 f303 	mul.w	r3, r2, r3
 800ca5e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800ca60:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800ca64:	3330      	adds	r3, #48	; 0x30
 800ca66:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800ca6e:	ab04      	add	r3, sp, #16
 800ca70:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ca74:	f005 f814 	bl	8011aa0 <SysTimeToMs>
 800ca78:	60a0      	str	r0, [r4, #8]
 800ca7a:	e7d2      	b.n	800ca22 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800ca7c:	f1b8 0f00 	cmp.w	r8, #0
 800ca80:	d102      	bne.n	800ca88 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800ca82:	4e04      	ldr	r6, [pc, #16]	; (800ca94 <SetMaxTimeCredits+0xec>)
 800ca84:	60e6      	str	r6, [r4, #12]
 800ca86:	e7cc      	b.n	800ca22 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800ca88:	4e02      	ldr	r6, [pc, #8]	; (800ca94 <SetMaxTimeCredits+0xec>)
 800ca8a:	e7ca      	b.n	800ca22 <SetMaxTimeCredits+0x7a>
 800ca8c:	02932e00 	.word	0x02932e00
 800ca90:	0001ec2f 	.word	0x0001ec2f
 800ca94:	001b7740 	.word	0x001b7740
 800ca98:	0112a880 	.word	0x0112a880
 800ca9c:	0001517f 	.word	0x0001517f
 800caa0:	c22e4507 	.word	0xc22e4507
 800caa4:	00015180 	.word	0x00015180

0800caa8 <UpdateTimeCredits>:
{
 800caa8:	b570      	push	{r4, r5, r6, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	4604      	mov	r4, r0
 800caae:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	9200      	str	r2, [sp, #0]
 800cab4:	ab06      	add	r3, sp, #24
 800cab6:	cb0c      	ldmia	r3, {r2, r3}
 800cab8:	f7ff ff76 	bl	800c9a8 <SetMaxTimeCredits>
 800cabc:	4605      	mov	r5, r0
    if( joined == true )
 800cabe:	b94e      	cbnz	r6, 800cad4 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800cac0:	68e2      	ldr	r2, [r4, #12]
 800cac2:	6923      	ldr	r3, [r4, #16]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d900      	bls.n	800caca <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800cac8:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800caca:	9b08      	ldr	r3, [sp, #32]
 800cacc:	6063      	str	r3, [r4, #4]
}
 800cace:	4628      	mov	r0, r5
 800cad0:	b002      	add	sp, #8
 800cad2:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800cad4:	6860      	ldr	r0, [r4, #4]
 800cad6:	f005 f863 	bl	8011ba0 <UTIL_TIMER_GetElapsedTime>
 800cada:	68e3      	ldr	r3, [r4, #12]
 800cadc:	4403      	add	r3, r0
 800cade:	60e3      	str	r3, [r4, #12]
 800cae0:	e7ee      	b.n	800cac0 <UpdateTimeCredits+0x18>

0800cae2 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800cae2:	4288      	cmp	r0, r1
 800cae4:	db03      	blt.n	800caee <RegionCommonValueInRange+0xc>
 800cae6:	4290      	cmp	r0, r2
 800cae8:	dd03      	ble.n	800caf2 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800caea:	2000      	movs	r0, #0
 800caec:	4770      	bx	lr
 800caee:	2000      	movs	r0, #0
 800caf0:	4770      	bx	lr
        return 1;
 800caf2:	2001      	movs	r0, #1
}
 800caf4:	4770      	bx	lr

0800caf6 <RegionCommonChanVerifyDr>:
{
 800caf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cafa:	4682      	mov	sl, r0
 800cafc:	460e      	mov	r6, r1
 800cafe:	4690      	mov	r8, r2
 800cb00:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800cb04:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4640      	mov	r0, r8
 800cb0c:	f7ff ffe9 	bl	800cae2 <RegionCommonValueInRange>
 800cb10:	b338      	cbz	r0, 800cb62 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800cb12:	2500      	movs	r5, #0
 800cb14:	462f      	mov	r7, r5
 800cb16:	e01e      	b.n	800cb56 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800cb18:	3401      	adds	r4, #1
 800cb1a:	b2e4      	uxtb	r4, r4
 800cb1c:	2c0f      	cmp	r4, #15
 800cb1e:	d816      	bhi.n	800cb4e <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800cb20:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800cb24:	4123      	asrs	r3, r4
 800cb26:	f013 0f01 	tst.w	r3, #1
 800cb2a:	d0f5      	beq.n	800cb18 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cb2c:	193b      	adds	r3, r7, r4
 800cb2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cb32:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800cb36:	7a19      	ldrb	r1, [r3, #8]
 800cb38:	090a      	lsrs	r2, r1, #4
 800cb3a:	f001 010f 	and.w	r1, r1, #15
 800cb3e:	4640      	mov	r0, r8
 800cb40:	f7ff ffcf 	bl	800cae2 <RegionCommonValueInRange>
 800cb44:	2801      	cmp	r0, #1
 800cb46:	d1e7      	bne.n	800cb18 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800cb48:	2001      	movs	r0, #1
}
 800cb4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800cb4e:	3710      	adds	r7, #16
 800cb50:	b2ff      	uxtb	r7, r7
 800cb52:	3501      	adds	r5, #1
 800cb54:	b2ed      	uxtb	r5, r5
 800cb56:	4557      	cmp	r7, sl
 800cb58:	d201      	bcs.n	800cb5e <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800cb5a:	2400      	movs	r4, #0
 800cb5c:	e7de      	b.n	800cb1c <RegionCommonChanVerifyDr+0x26>
    return false;
 800cb5e:	2000      	movs	r0, #0
 800cb60:	e7f3      	b.n	800cb4a <RegionCommonChanVerifyDr+0x54>
        return false;
 800cb62:	2000      	movs	r0, #0
 800cb64:	e7f1      	b.n	800cb4a <RegionCommonChanVerifyDr+0x54>

0800cb66 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800cb66:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800cb6a:	0913      	lsrs	r3, r2, #4
 800cb6c:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800cb70:	d30e      	bcc.n	800cb90 <RegionCommonChanDisable+0x2a>
 800cb72:	4291      	cmp	r1, r2
 800cb74:	d20e      	bcs.n	800cb94 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800cb76:	f001 010f 	and.w	r1, r1, #15
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	fa03 f101 	lsl.w	r1, r3, r1
 800cb80:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800cb84:	ea22 0101 	bic.w	r1, r2, r1
 800cb88:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	4770      	bx	lr
        return false;
 800cb90:	2000      	movs	r0, #0
 800cb92:	4770      	bx	lr
 800cb94:	2000      	movs	r0, #0
}
 800cb96:	4770      	bx	lr

0800cb98 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800cb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800cb9a:	b188      	cbz	r0, 800cbc0 <RegionCommonCountChannels+0x28>
 800cb9c:	460c      	mov	r4, r1
 800cb9e:	4616      	mov	r6, r2
 800cba0:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800cba2:	2500      	movs	r5, #0
 800cba4:	e008      	b.n	800cbb8 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cba6:	2110      	movs	r1, #16
 800cba8:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800cbac:	f7ff feea 	bl	800c984 <CountChannels>
 800cbb0:	4405      	add	r5, r0
 800cbb2:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cbb4:	3401      	adds	r4, #1
 800cbb6:	b2e4      	uxtb	r4, r4
 800cbb8:	42b4      	cmp	r4, r6
 800cbba:	d3f4      	bcc.n	800cba6 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800cbc0:	2500      	movs	r5, #0
 800cbc2:	e7fb      	b.n	800cbbc <RegionCommonCountChannels+0x24>

0800cbc4 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800cbc4:	4684      	mov	ip, r0
 800cbc6:	b158      	cbz	r0, 800cbe0 <RegionCommonChanMaskCopy+0x1c>
 800cbc8:	b109      	cbz	r1, 800cbce <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800cbca:	2300      	movs	r3, #0
 800cbcc:	e006      	b.n	800cbdc <RegionCommonChanMaskCopy+0x18>
 800cbce:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800cbd0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800cbd4:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800cbd8:	3301      	adds	r3, #1
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d3f7      	bcc.n	800cbd0 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800cbe0:	4770      	bx	lr

0800cbe2 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	460d      	mov	r5, r1
 800cbea:	4611      	mov	r1, r2
 800cbec:	aa04      	add	r2, sp, #16
 800cbee:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800cbf2:	ca0c      	ldmia	r2, {r2, r3}
 800cbf4:	f7ff fea9 	bl	800c94a <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800cbf8:	68e3      	ldr	r3, [r4, #12]
 800cbfa:	fb05 f000 	mul.w	r0, r5, r0
 800cbfe:	4283      	cmp	r3, r0
 800cc00:	d905      	bls.n	800cc0e <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800cc02:	1a18      	subs	r0, r3, r0
 800cc04:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800cc06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc0a:	b002      	add	sp, #8
 800cc0c:	4770      	bx	lr
        band->TimeCredits = 0;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	60e3      	str	r3, [r4, #12]
}
 800cc12:	e7f8      	b.n	800cc06 <RegionCommonSetBandTxDone+0x24>

0800cc14 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800cc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc18:	b089      	sub	sp, #36	; 0x24
 800cc1a:	4607      	mov	r7, r0
 800cc1c:	468b      	mov	fp, r1
 800cc1e:	4691      	mov	r9, r2
 800cc20:	4698      	mov	r8, r3
 800cc22:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800cc26:	f004 ffb1 	bl	8011b8c <UTIL_TIMER_GetCurrentTime>
 800cc2a:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800cc2c:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800cc2e:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800cc30:	f04f 33ff 	mov.w	r3, #4294967295
 800cc34:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800cc36:	e005      	b.n	800cc44 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800cc3c:	441e      	add	r6, r3
 800cc3e:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800cc40:	3401      	adds	r4, #1
 800cc42:	b2e4      	uxtb	r4, r4
 800cc44:	454c      	cmp	r4, r9
 800cc46:	d25d      	bcs.n	800cd04 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800cc48:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800cc4c:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800cc50:	9b04      	ldr	r3, [sp, #16]
 800cc52:	9302      	str	r3, [sp, #8]
 800cc54:	ab13      	add	r3, sp, #76	; 0x4c
 800cc56:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc5a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cc5e:	4653      	mov	r3, sl
 800cc60:	4642      	mov	r2, r8
 800cc62:	4639      	mov	r1, r7
 800cc64:	4628      	mov	r0, r5
 800cc66:	f7ff ff1f 	bl	800caa8 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800cc6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc6c:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800cc70:	68ea      	ldr	r2, [r5, #12]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d2e0      	bcs.n	800cc38 <RegionCommonUpdateBandTimeOff+0x24>
 800cc76:	f1b8 0f00 	cmp.w	r8, #0
 800cc7a:	d101      	bne.n	800cc80 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800cc7c:	2f00      	cmp	r7, #0
 800cc7e:	d1db      	bne.n	800cc38 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800cc80:	2100      	movs	r1, #0
 800cc82:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800cc84:	6929      	ldr	r1, [r5, #16]
 800cc86:	4299      	cmp	r1, r3
 800cc88:	d307      	bcc.n	800cc9a <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800cc8a:	1a9b      	subs	r3, r3, r2
 800cc8c:	9a05      	ldr	r2, [sp, #20]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	bf28      	it	cs
 800cc92:	461a      	movcs	r2, r3
 800cc94:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800cc96:	3601      	adds	r6, #1
 800cc98:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800cc9a:	2f00      	cmp	r7, #0
 800cc9c:	d1d0      	bne.n	800cc40 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800cc9e:	2300      	movs	r3, #0
 800cca0:	9306      	str	r3, [sp, #24]
 800cca2:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800cca6:	2864      	cmp	r0, #100	; 0x64
 800cca8:	d024      	beq.n	800ccf4 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800ccaa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ccae:	d025      	beq.n	800ccfc <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800ccb0:	4b19      	ldr	r3, [pc, #100]	; (800cd18 <RegionCommonUpdateBandTimeOff+0x104>)
 800ccb2:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ccb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ccb6:	4a18      	ldr	r2, [pc, #96]	; (800cd18 <RegionCommonUpdateBandTimeOff+0x104>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d90c      	bls.n	800ccd6 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800ccbc:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800ccc0:	3b30      	subs	r3, #48	; 0x30
 800ccc2:	4a16      	ldr	r2, [pc, #88]	; (800cd1c <RegionCommonUpdateBandTimeOff+0x108>)
 800ccc4:	fba2 2303 	umull	r2, r3, r2, r3
 800ccc8:	0c1b      	lsrs	r3, r3, #16
 800ccca:	4a15      	ldr	r2, [pc, #84]	; (800cd20 <RegionCommonUpdateBandTimeOff+0x10c>)
 800cccc:	fb03 2202 	mla	r2, r3, r2, r2
 800ccd0:	9b06      	ldr	r3, [sp, #24]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800ccd6:	ad06      	add	r5, sp, #24
 800ccd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ccde:	e895 0006 	ldmia.w	r5, {r1, r2}
 800cce2:	4628      	mov	r0, r5
 800cce4:	f004 fe63 	bl	80119ae <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800cce8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ccec:	f004 fed8 	bl	8011aa0 <SysTimeToMs>
 800ccf0:	9005      	str	r0, [sp, #20]
 800ccf2:	e7a5      	b.n	800cc40 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800ccf4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ccf8:	9306      	str	r3, [sp, #24]
 800ccfa:	e7db      	b.n	800ccb4 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800ccfc:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800cd00:	9306      	str	r3, [sp, #24]
 800cd02:	e7d7      	b.n	800ccb4 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800cd04:	b11e      	cbz	r6, 800cd0e <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800cd06:	9805      	ldr	r0, [sp, #20]
 800cd08:	b009      	add	sp, #36	; 0x24
 800cd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800cd0e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd12:	9305      	str	r3, [sp, #20]
 800cd14:	e7f7      	b.n	800cd06 <RegionCommonUpdateBandTimeOff+0xf2>
 800cd16:	bf00      	nop
 800cd18:	0001ec30 	.word	0x0001ec30
 800cd1c:	c22e4507 	.word	0xc22e4507
 800cd20:	00015180 	.word	0x00015180

0800cd24 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800cd24:	7803      	ldrb	r3, [r0, #0]
 800cd26:	2b03      	cmp	r3, #3
 800cd28:	d001      	beq.n	800cd2e <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800cd2a:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800cd2c:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800cd2e:	7842      	ldrb	r2, [r0, #1]
 800cd30:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cd34:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800cd36:	f003 030f 	and.w	r3, r3, #15
 800cd3a:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800cd3c:	0913      	lsrs	r3, r2, #4
 800cd3e:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800cd40:	7883      	ldrb	r3, [r0, #2]
 800cd42:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800cd44:	78c2      	ldrb	r2, [r0, #3]
 800cd46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cd4a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800cd4c:	7903      	ldrb	r3, [r0, #4]
 800cd4e:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800cd50:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800cd54:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800cd56:	f003 030f 	and.w	r3, r3, #15
 800cd5a:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800cd5c:	2005      	movs	r0, #5
 800cd5e:	4770      	bx	lr

0800cd60 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800cd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd64:	b085      	sub	sp, #20
 800cd66:	4604      	mov	r4, r0
 800cd68:	4688      	mov	r8, r1
 800cd6a:	4617      	mov	r7, r2
 800cd6c:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800cd6e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800cd70:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800cd74:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800cd78:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800cd7c:	7943      	ldrb	r3, [r0, #5]
 800cd7e:	b92b      	cbnz	r3, 800cd8c <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800cd80:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800cd84:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800cd88:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800cd8c:	b355      	cbz	r5, 800cde4 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800cd8e:	f1ba 0f0f 	cmp.w	sl, #15
 800cd92:	d114      	bne.n	800cdbe <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800cd94:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800cd98:	f1b9 0f0f 	cmp.w	r9, #15
 800cd9c:	d020      	beq.n	800cde0 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800cd9e:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800cda2:	9303      	str	r3, [sp, #12]
 800cda4:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800cda8:	461c      	mov	r4, r3
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4648      	mov	r0, r9
 800cdae:	f7ff fe98 	bl	800cae2 <RegionCommonValueInRange>
 800cdb2:	b9b8      	cbnz	r0, 800cde4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800cdb4:	454c      	cmp	r4, r9
 800cdb6:	dc21      	bgt.n	800cdfc <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800cdb8:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800cdbc:	e012      	b.n	800cde4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800cdbe:	69a3      	ldr	r3, [r4, #24]
 800cdc0:	9301      	str	r3, [sp, #4]
 800cdc2:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800cdcc:	4652      	mov	r2, sl
 800cdce:	6921      	ldr	r1, [r4, #16]
 800cdd0:	7b20      	ldrb	r0, [r4, #12]
 800cdd2:	f7ff fe90 	bl	800caf6 <RegionCommonChanVerifyDr>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d1de      	bne.n	800cd98 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800cdda:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800cdde:	e7db      	b.n	800cd98 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800cde0:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800cde4:	2d07      	cmp	r5, #7
 800cde6:	d00c      	beq.n	800ce02 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800cde8:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800cdec:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800cdf0:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	b005      	add	sp, #20
 800cdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800cdfc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ce00:	e7f0      	b.n	800cde4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800ce02:	f1bb 0f00 	cmp.w	fp, #0
 800ce06:	d1ef      	bne.n	800cde8 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800ce08:	f04f 0b01 	mov.w	fp, #1
 800ce0c:	e7ec      	b.n	800cde8 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800ce10 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800ce10:	4b02      	ldr	r3, [pc, #8]	; (800ce1c <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800ce12:	fa03 f000 	lsl.w	r0, r3, r0
}
 800ce16:	fbb0 f0f1 	udiv	r0, r0, r1
 800ce1a:	4770      	bx	lr
 800ce1c:	000f4240 	.word	0x000f4240

0800ce20 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800ce20:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800ce24:	fbb3 f0f0 	udiv	r0, r3, r0
 800ce28:	4770      	bx	lr
	...

0800ce2c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800ce2c:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ce2e:	f1a1 0c04 	sub.w	ip, r1, #4
 800ce32:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800ce36:	fb0e f202 	mul.w	r2, lr, r2
 800ce3a:	fb00 220c 	mla	r2, r0, ip, r2
 800ce3e:	0052      	lsls	r2, r2, #1
 800ce40:	d021      	beq.n	800ce86 <RegionCommonComputeRxWindowParameters+0x5a>
 800ce42:	4402      	add	r2, r0
 800ce44:	3a01      	subs	r2, #1
 800ce46:	fbb2 f2f0 	udiv	r2, r2, r0
 800ce4a:	4291      	cmp	r1, r2
 800ce4c:	bf38      	it	cc
 800ce4e:	4611      	movcc	r1, r2
 800ce50:	9a01      	ldr	r2, [sp, #4]
 800ce52:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ce54:	0082      	lsls	r2, r0, #2
 800ce56:	fb00 f101 	mul.w	r1, r0, r1
 800ce5a:	b1b9      	cbz	r1, 800ce8c <RegionCommonComputeRxWindowParameters+0x60>
 800ce5c:	3101      	adds	r1, #1
 800ce5e:	0849      	lsrs	r1, r1, #1
 800ce60:	1a51      	subs	r1, r2, r1
 800ce62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ce66:	fb02 1313 	mls	r3, r2, r3, r1
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	dd10      	ble.n	800ce90 <RegionCommonComputeRxWindowParameters+0x64>
 800ce6e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800ce72:	4a0b      	ldr	r2, [pc, #44]	; (800cea0 <RegionCommonComputeRxWindowParameters+0x74>)
 800ce74:	fb82 1203 	smull	r1, r2, r2, r3
 800ce78:	17db      	asrs	r3, r3, #31
 800ce7a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800ce7e:	9a02      	ldr	r2, [sp, #8]
 800ce80:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800ce82:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ce86:	fbb2 f2f0 	udiv	r2, r2, r0
 800ce8a:	e7de      	b.n	800ce4a <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ce8c:	0849      	lsrs	r1, r1, #1
 800ce8e:	e7e7      	b.n	800ce60 <RegionCommonComputeRxWindowParameters+0x34>
 800ce90:	4a03      	ldr	r2, [pc, #12]	; (800cea0 <RegionCommonComputeRxWindowParameters+0x74>)
 800ce92:	fb82 1203 	smull	r1, r2, r2, r3
 800ce96:	17db      	asrs	r3, r3, #31
 800ce98:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800ce9c:	e7ef      	b.n	800ce7e <RegionCommonComputeRxWindowParameters+0x52>
 800ce9e:	bf00      	nop
 800cea0:	10624dd3 	.word	0x10624dd3

0800cea4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	460d      	mov	r5, r1
 800cea8:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800ceaa:	0040      	lsls	r0, r0, #1
 800ceac:	f7f3 fc8e 	bl	80007cc <__aeabi_ui2f>
 800ceb0:	4601      	mov	r1, r0
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	f7f3 fbd8 	bl	8000668 <__aeabi_fsub>
 800ceb8:	4621      	mov	r1, r4
 800ceba:	f7f3 fbd5 	bl	8000668 <__aeabi_fsub>
 800cebe:	f7f3 fac7 	bl	8000450 <__aeabi_f2d>
 800cec2:	f005 f931 	bl	8012128 <floor>
 800cec6:	f7f3 fba3 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800ceca:	b240      	sxtb	r0, r0
 800cecc:	bd38      	pop	{r3, r4, r5, pc}

0800cece <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800cece:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced2:	b083      	sub	sp, #12
 800ced4:	4605      	mov	r5, r0
 800ced6:	468b      	mov	fp, r1
 800ced8:	9200      	str	r2, [sp, #0]
 800ceda:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cedc:	2600      	movs	r6, #0
 800cede:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800cee0:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800cee2:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cee4:	e04a      	b.n	800cf7c <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800cee6:	7a3a      	ldrb	r2, [r7, #8]
 800cee8:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800ceec:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800cef0:	b252      	sxtb	r2, r2
 800cef2:	b249      	sxtb	r1, r1
 800cef4:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800cef8:	f7ff fdf3 	bl	800cae2 <RegionCommonValueInRange>
 800cefc:	b178      	cbz	r0, 800cf1e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800cefe:	68ea      	ldr	r2, [r5, #12]
 800cf00:	7a7b      	ldrb	r3, [r7, #9]
 800cf02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cf06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cf0a:	7d1b      	ldrb	r3, [r3, #20]
 800cf0c:	b35b      	cbz	r3, 800cf66 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800cf0e:	f109 0301 	add.w	r3, r9, #1
 800cf12:	eb08 0204 	add.w	r2, r8, r4
 800cf16:	f80b 2009 	strb.w	r2, [fp, r9]
 800cf1a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800cf1e:	3401      	adds	r4, #1
 800cf20:	b2e4      	uxtb	r4, r4
 800cf22:	2c0f      	cmp	r4, #15
 800cf24:	d824      	bhi.n	800cf70 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800cf26:	686b      	ldr	r3, [r5, #4]
 800cf28:	0072      	lsls	r2, r6, #1
 800cf2a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800cf2e:	4123      	asrs	r3, r4
 800cf30:	f013 0f01 	tst.w	r3, #1
 800cf34:	d0f3      	beq.n	800cf1e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800cf36:	68a8      	ldr	r0, [r5, #8]
 800cf38:	eb08 0304 	add.w	r3, r8, r4
 800cf3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cf40:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800cf44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d0e8      	beq.n	800cf1e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800cf4c:	782b      	ldrb	r3, [r5, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1c9      	bne.n	800cee6 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800cf52:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d0c6      	beq.n	800cee6 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800cf58:	5a9b      	ldrh	r3, [r3, r2]
 800cf5a:	fa43 f104 	asr.w	r1, r3, r4
 800cf5e:	f011 0f01 	tst.w	r1, #1
 800cf62:	d1c0      	bne.n	800cee6 <RegionCommonCountNbOfEnabledChannels+0x18>
 800cf64:	e7db      	b.n	800cf1e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800cf66:	f10a 0a01 	add.w	sl, sl, #1
 800cf6a:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800cf6e:	e7d6      	b.n	800cf1e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cf70:	f108 0810 	add.w	r8, r8, #16
 800cf74:	fa5f f888 	uxtb.w	r8, r8
 800cf78:	3601      	adds	r6, #1
 800cf7a:	b2f6      	uxtb	r6, r6
 800cf7c:	fa1f f388 	uxth.w	r3, r8
 800cf80:	8a2a      	ldrh	r2, [r5, #16]
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d201      	bcs.n	800cf8a <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800cf86:	2400      	movs	r4, #0
 800cf88:	e7cb      	b.n	800cf22 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800cf8a:	9b00      	ldr	r3, [sp, #0]
 800cf8c:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800cf90:	9b01      	ldr	r3, [sp, #4]
 800cf92:	f883 a000 	strb.w	sl, [r3]
}
 800cf96:	b003      	add	sp, #12
 800cf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf9c <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800cf9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfa0:	b085      	sub	sp, #20
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	460f      	mov	r7, r1
 800cfa6:	4616      	mov	r6, r2
 800cfa8:	461d      	mov	r5, r3
 800cfaa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800cfae:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800cfb2:	6840      	ldr	r0, [r0, #4]
 800cfb4:	f004 fdf4 	bl	8011ba0 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800cfb8:	6823      	ldr	r3, [r4, #0]
 800cfba:	1a1b      	subs	r3, r3, r0
 800cfbc:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800cfca:	6863      	ldr	r3, [r4, #4]
 800cfcc:	b113      	cbz	r3, 800cfd4 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800cfce:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800cfd0:	4283      	cmp	r3, r0
 800cfd2:	d81e      	bhi.n	800d012 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800cfd8:	69e3      	ldr	r3, [r4, #28]
 800cfda:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800cfde:	781f      	ldrb	r7, [r3, #0]
 800cfe0:	69a3      	ldr	r3, [r4, #24]
 800cfe2:	9303      	str	r3, [sp, #12]
 800cfe4:	ab01      	add	r3, sp, #4
 800cfe6:	f104 020c 	add.w	r2, r4, #12
 800cfea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfee:	e883 0003 	stmia.w	r3, {r0, r1}
 800cff2:	7d23      	ldrb	r3, [r4, #20]
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	7a23      	ldrb	r3, [r4, #8]
 800cff8:	7a62      	ldrb	r2, [r4, #9]
 800cffa:	4661      	mov	r1, ip
 800cffc:	4638      	mov	r0, r7
 800cffe:	f7ff fe09 	bl	800cc14 <RegionCommonUpdateBandTimeOff>
 800d002:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d006:	4643      	mov	r3, r8
 800d008:	462a      	mov	r2, r5
 800d00a:	4631      	mov	r1, r6
 800d00c:	69e0      	ldr	r0, [r4, #28]
 800d00e:	f7ff ff5e 	bl	800cece <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800d012:	782b      	ldrb	r3, [r5, #0]
 800d014:	b923      	cbnz	r3, 800d020 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800d016:	f898 3000 	ldrb.w	r3, [r8]
 800d01a:	b13b      	cbz	r3, 800d02c <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800d01c:	200b      	movs	r0, #11
 800d01e:	e002      	b.n	800d026 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800d020:	2000      	movs	r0, #0
 800d022:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800d026:	b005      	add	sp, #20
 800d028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d02c:	200c      	movs	r0, #12
 800d02e:	e7fa      	b.n	800d026 <RegionCommonIdentifyChannels+0x8a>

0800d030 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800d030:	b570      	push	{r4, r5, r6, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800d036:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800d03a:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800d03e:	42a6      	cmp	r6, r4
 800d040:	d011      	beq.n	800d066 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800d042:	3c01      	subs	r4, #1
 800d044:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800d046:	42a6      	cmp	r6, r4
 800d048:	d00e      	beq.n	800d068 <RegionCommonGetNextLowerTxDr+0x38>
 800d04a:	68ab      	ldr	r3, [r5, #8]
 800d04c:	9301      	str	r3, [sp, #4]
 800d04e:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	4633      	mov	r3, r6
 800d056:	4622      	mov	r2, r4
 800d058:	6869      	ldr	r1, [r5, #4]
 800d05a:	78e8      	ldrb	r0, [r5, #3]
 800d05c:	f7ff fd4b 	bl	800caf6 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800d060:	2800      	cmp	r0, #0
 800d062:	d0ee      	beq.n	800d042 <RegionCommonGetNextLowerTxDr+0x12>
 800d064:	e000      	b.n	800d068 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800d066:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800d068:	4620      	mov	r0, r4
 800d06a:	b002      	add	sp, #8
 800d06c:	bd70      	pop	{r4, r5, r6, pc}

0800d06e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800d06e:	4288      	cmp	r0, r1
 800d070:	bfb8      	it	lt
 800d072:	4608      	movlt	r0, r1
 800d074:	4770      	bx	lr
	...

0800d078 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800d078:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800d07c:	4a05      	ldr	r2, [pc, #20]	; (800d094 <RegionCommonGetBandwidth+0x1c>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d004      	beq.n	800d08c <RegionCommonGetBandwidth+0x14>
 800d082:	4a05      	ldr	r2, [pc, #20]	; (800d098 <RegionCommonGetBandwidth+0x20>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d103      	bne.n	800d090 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800d088:	2002      	movs	r0, #2
 800d08a:	4770      	bx	lr
            return 1;
 800d08c:	2001      	movs	r0, #1
 800d08e:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800d090:	2000      	movs	r0, #0
    }
}
 800d092:	4770      	bx	lr
 800d094:	0003d090 	.word	0x0003d090
 800d098:	0007a120 	.word	0x0007a120

0800d09c <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800d09c:	b500      	push	{lr}
 800d09e:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800d0a0:	2805      	cmp	r0, #5
 800d0a2:	d80e      	bhi.n	800d0c2 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800d0a4:	9202      	str	r2, [sp, #8]
 800d0a6:	9101      	str	r1, [sp, #4]
 800d0a8:	4b0a      	ldr	r3, [pc, #40]	; (800d0d4 <RegionCommonRxConfigPrint+0x38>)
 800d0aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	4b09      	ldr	r3, [pc, #36]	; (800d0d8 <RegionCommonRxConfigPrint+0x3c>)
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	2002      	movs	r0, #2
 800d0b8:	f004 fa54 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800d0bc:	b005      	add	sp, #20
 800d0be:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d0c2:	9201      	str	r2, [sp, #4]
 800d0c4:	9100      	str	r1, [sp, #0]
 800d0c6:	4b05      	ldr	r3, [pc, #20]	; (800d0dc <RegionCommonRxConfigPrint+0x40>)
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	2002      	movs	r0, #2
 800d0ce:	f004 fa49 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 800d0d2:	e7f3      	b.n	800d0bc <RegionCommonRxConfigPrint+0x20>
 800d0d4:	0801295c 	.word	0x0801295c
 800d0d8:	080128f4 	.word	0x080128f4
 800d0dc:	08012914 	.word	0x08012914

0800d0e0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800d0e0:	b500      	push	{lr}
 800d0e2:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d0e4:	9101      	str	r1, [sp, #4]
 800d0e6:	9000      	str	r0, [sp, #0]
 800d0e8:	4b04      	ldr	r3, [pc, #16]	; (800d0fc <RegionCommonTxConfigPrint+0x1c>)
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	2002      	movs	r0, #2
 800d0f0:	f004 fa38 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 800d0f4:	b003      	add	sp, #12
 800d0f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d0fa:	bf00      	nop
 800d0fc:	08012930 	.word	0x08012930

0800d100 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4604      	mov	r4, r0
 800d104:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800d106:	4b1b      	ldr	r3, [pc, #108]	; (800d174 <VerifyRfFreq+0x74>)
 800d108:	6a1b      	ldr	r3, [r3, #32]
 800d10a:	4798      	blx	r3
 800d10c:	b130      	cbz	r0, 800d11c <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800d10e:	4b1a      	ldr	r3, [pc, #104]	; (800d178 <VerifyRfFreq+0x78>)
 800d110:	4423      	add	r3, r4
 800d112:	4a1a      	ldr	r2, [pc, #104]	; (800d17c <VerifyRfFreq+0x7c>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d802      	bhi.n	800d11e <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800d118:	2302      	movs	r3, #2
 800d11a:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800d11c:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800d11e:	4b18      	ldr	r3, [pc, #96]	; (800d180 <VerifyRfFreq+0x80>)
 800d120:	4423      	add	r3, r4
 800d122:	4a18      	ldr	r2, [pc, #96]	; (800d184 <VerifyRfFreq+0x84>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d802      	bhi.n	800d12e <VerifyRfFreq+0x2e>
        *band = 0;
 800d128:	2300      	movs	r3, #0
 800d12a:	702b      	strb	r3, [r5, #0]
 800d12c:	e7f6      	b.n	800d11c <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800d12e:	4b16      	ldr	r3, [pc, #88]	; (800d188 <VerifyRfFreq+0x88>)
 800d130:	4423      	add	r3, r4
 800d132:	4a16      	ldr	r2, [pc, #88]	; (800d18c <VerifyRfFreq+0x8c>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d802      	bhi.n	800d13e <VerifyRfFreq+0x3e>
        *band = 1;
 800d138:	2301      	movs	r3, #1
 800d13a:	702b      	strb	r3, [r5, #0]
 800d13c:	e7ee      	b.n	800d11c <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800d13e:	4b14      	ldr	r3, [pc, #80]	; (800d190 <VerifyRfFreq+0x90>)
 800d140:	4423      	add	r3, r4
 800d142:	4a14      	ldr	r2, [pc, #80]	; (800d194 <VerifyRfFreq+0x94>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d802      	bhi.n	800d14e <VerifyRfFreq+0x4e>
        *band = 5;
 800d148:	2305      	movs	r3, #5
 800d14a:	702b      	strb	r3, [r5, #0]
 800d14c:	e7e6      	b.n	800d11c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800d14e:	4b12      	ldr	r3, [pc, #72]	; (800d198 <VerifyRfFreq+0x98>)
 800d150:	4423      	add	r3, r4
 800d152:	4a12      	ldr	r2, [pc, #72]	; (800d19c <VerifyRfFreq+0x9c>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d802      	bhi.n	800d15e <VerifyRfFreq+0x5e>
        *band = 3;
 800d158:	2303      	movs	r3, #3
 800d15a:	702b      	strb	r3, [r5, #0]
 800d15c:	e7de      	b.n	800d11c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800d15e:	4b10      	ldr	r3, [pc, #64]	; (800d1a0 <VerifyRfFreq+0xa0>)
 800d160:	4423      	add	r3, r4
 800d162:	4a10      	ldr	r2, [pc, #64]	; (800d1a4 <VerifyRfFreq+0xa4>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d802      	bhi.n	800d16e <VerifyRfFreq+0x6e>
        *band = 4;
 800d168:	2304      	movs	r3, #4
 800d16a:	702b      	strb	r3, [r5, #0]
 800d16c:	e7d6      	b.n	800d11c <VerifyRfFreq+0x1c>
        return false;
 800d16e:	2000      	movs	r0, #0
 800d170:	e7d4      	b.n	800d11c <VerifyRfFreq+0x1c>
 800d172:	bf00      	nop
 800d174:	08012fbc 	.word	0x08012fbc
 800d178:	cc8faa40 	.word	0xcc8faa40
 800d17c:	001e847f 	.word	0x001e847f
 800d180:	cc7125c0 	.word	0xcc7125c0
 800d184:	002dc6c0 	.word	0x002dc6c0
 800d188:	cc435eff 	.word	0xcc435eff
 800d18c:	000927bf 	.word	0x000927bf
 800d190:	cc38b0a0 	.word	0xcc38b0a0
 800d194:	0007a120 	.word	0x0007a120
 800d198:	cc2e0240 	.word	0xcc2e0240
 800d19c:	0003d090 	.word	0x0003d090
 800d1a0:	cc296e60 	.word	0xcc296e60
 800d1a4:	000493e0 	.word	0x000493e0

0800d1a8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800d1a8:	b570      	push	{r4, r5, r6, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800d1b0:	4b13      	ldr	r3, [pc, #76]	; (800d200 <GetTimeOnAir+0x58>)
 800d1b2:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800d1b4:	4913      	ldr	r1, [pc, #76]	; (800d204 <GetTimeOnAir+0x5c>)
 800d1b6:	f7ff ff5f 	bl	800d078 <RegionCommonGetBandwidth>
 800d1ba:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800d1bc:	2d07      	cmp	r5, #7
 800d1be:	d00e      	beq.n	800d1de <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800d1c0:	4b11      	ldr	r3, [pc, #68]	; (800d208 <GetTimeOnAir+0x60>)
 800d1c2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d1c4:	2001      	movs	r0, #1
 800d1c6:	9003      	str	r0, [sp, #12]
 800d1c8:	b2e4      	uxtb	r4, r4
 800d1ca:	9402      	str	r4, [sp, #8]
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	9301      	str	r3, [sp, #4]
 800d1d0:	2308      	movs	r3, #8
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	4632      	mov	r2, r6
 800d1d8:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800d1da:	b004      	add	sp, #16
 800d1dc:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800d1de:	4b0a      	ldr	r3, [pc, #40]	; (800d208 <GetTimeOnAir+0x60>)
 800d1e0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	9303      	str	r3, [sp, #12]
 800d1e6:	b2e4      	uxtb	r4, r4
 800d1e8:	9402      	str	r4, [sp, #8]
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	9001      	str	r0, [sp, #4]
 800d1ee:	2305      	movs	r3, #5
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d1f8:	fb06 f202 	mul.w	r2, r6, r2
 800d1fc:	47a8      	blx	r5
 800d1fe:	e7ec      	b.n	800d1da <GetTimeOnAir+0x32>
 800d200:	08012994 	.word	0x08012994
 800d204:	08012974 	.word	0x08012974
 800d208:	08012fbc 	.word	0x08012fbc

0800d20c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800d20c:	b500      	push	{lr}
 800d20e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800d210:	2300      	movs	r3, #0
 800d212:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800d214:	7803      	ldrb	r3, [r0, #0]
 800d216:	3b0b      	subs	r3, #11
 800d218:	2b2d      	cmp	r3, #45	; 0x2d
 800d21a:	d82f      	bhi.n	800d27c <RegionEU868GetPhyParam+0x70>
 800d21c:	e8df f003 	tbb	[pc, r3]
 800d220:	3f393633 	.word	0x3f393633
 800d224:	504c4845 	.word	0x504c4845
 800d228:	2e5c5854 	.word	0x2e5c5854
 800d22c:	6e682e65 	.word	0x6e682e65
 800d230:	2e2e7774 	.word	0x2e2e7774
 800d234:	2e177f7b 	.word	0x2e177f7b
 800d238:	2e2e2e2e 	.word	0x2e2e2e2e
 800d23c:	2e2e2e2e 	.word	0x2e2e2e2e
 800d240:	2e2e2e2e 	.word	0x2e2e2e2e
 800d244:	2e8c8582 	.word	0x2e8c8582
 800d248:	2e928f2e 	.word	0x2e928f2e
 800d24c:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800d24e:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d252:	f88d 3004 	strb.w	r3, [sp, #4]
 800d256:	2307      	movs	r3, #7
 800d258:	f88d 3005 	strb.w	r3, [sp, #5]
 800d25c:	2300      	movs	r3, #0
 800d25e:	f88d 3006 	strb.w	r3, [sp, #6]
 800d262:	2310      	movs	r3, #16
 800d264:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800d268:	4b3e      	ldr	r3, [pc, #248]	; (800d364 <RegionEU868GetPhyParam+0x158>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d270:	9202      	str	r2, [sp, #8]
 800d272:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800d274:	a801      	add	r0, sp, #4
 800d276:	f7ff fedb 	bl	800d030 <RegionCommonGetNextLowerTxDr>
 800d27a:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800d27c:	9804      	ldr	r0, [sp, #16]
 800d27e:	9005      	str	r0, [sp, #20]
}
 800d280:	b007      	add	sp, #28
 800d282:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800d286:	2340      	movs	r3, #64	; 0x40
 800d288:	9304      	str	r3, [sp, #16]
            break;
 800d28a:	e7f7      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800d28c:	2320      	movs	r3, #32
 800d28e:	9304      	str	r3, [sp, #16]
            break;
 800d290:	e7f4      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800d292:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d296:	4a34      	ldr	r2, [pc, #208]	; (800d368 <RegionEU868GetPhyParam+0x15c>)
 800d298:	5cd3      	ldrb	r3, [r2, r3]
 800d29a:	9304      	str	r3, [sp, #16]
            break;
 800d29c:	e7ee      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800d29e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d2a2:	4a32      	ldr	r2, [pc, #200]	; (800d36c <RegionEU868GetPhyParam+0x160>)
 800d2a4:	5cd3      	ldrb	r3, [r2, r3]
 800d2a6:	9304      	str	r3, [sp, #16]
            break;
 800d2a8:	e7e8      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	9304      	str	r3, [sp, #16]
            break;
 800d2ae:	e7e5      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800d2b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d2b4:	9304      	str	r3, [sp, #16]
            break;
 800d2b6:	e7e1      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800d2b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d2bc:	9304      	str	r3, [sp, #16]
            break;
 800d2be:	e7dd      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800d2c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d2c4:	9304      	str	r3, [sp, #16]
            break;
 800d2c6:	e7d9      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800d2c8:	f241 3388 	movw	r3, #5000	; 0x1388
 800d2cc:	9304      	str	r3, [sp, #16]
            break;
 800d2ce:	e7d5      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800d2d0:	f241 7370 	movw	r3, #6000	; 0x1770
 800d2d4:	9304      	str	r3, [sp, #16]
            break;
 800d2d6:	e7d1      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800d2d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d2dc:	4824      	ldr	r0, [pc, #144]	; (800d370 <RegionEU868GetPhyParam+0x164>)
 800d2de:	f002 fa55 	bl	800f78c <randr>
 800d2e2:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800d2e6:	9004      	str	r0, [sp, #16]
            break;
 800d2e8:	e7c8      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800d2ea:	4b22      	ldr	r3, [pc, #136]	; (800d374 <RegionEU868GetPhyParam+0x168>)
 800d2ec:	9304      	str	r3, [sp, #16]
            break;
 800d2ee:	e7c5      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d2f0:	4b1c      	ldr	r3, [pc, #112]	; (800d364 <RegionEU868GetPhyParam+0x158>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800d2f8:	9304      	str	r3, [sp, #16]
            break;
 800d2fa:	e7bf      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800d2fc:	4b19      	ldr	r3, [pc, #100]	; (800d364 <RegionEU868GetPhyParam+0x158>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800d304:	9304      	str	r3, [sp, #16]
            break;
 800d306:	e7b9      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800d308:	2310      	movs	r3, #16
 800d30a:	9304      	str	r3, [sp, #16]
            break;
 800d30c:	e7b6      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800d30e:	4b15      	ldr	r3, [pc, #84]	; (800d364 <RegionEU868GetPhyParam+0x158>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	9304      	str	r3, [sp, #16]
            break;
 800d314:	e7b2      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800d316:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800d31a:	9304      	str	r3, [sp, #16]
            break;
 800d31c:	e7ae      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800d31e:	4b16      	ldr	r3, [pc, #88]	; (800d378 <RegionEU868GetPhyParam+0x16c>)
 800d320:	9304      	str	r3, [sp, #16]
            break;
 800d322:	e7ab      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800d324:	4b13      	ldr	r3, [pc, #76]	; (800d374 <RegionEU868GetPhyParam+0x168>)
 800d326:	9304      	str	r3, [sp, #16]
            break;
 800d328:	e7a8      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800d32a:	2311      	movs	r3, #17
 800d32c:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800d330:	2301      	movs	r3, #1
 800d332:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800d336:	e7a1      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800d338:	2303      	movs	r3, #3
 800d33a:	9304      	str	r3, [sp, #16]
            break;
 800d33c:	e79e      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800d33e:	4b0d      	ldr	r3, [pc, #52]	; (800d374 <RegionEU868GetPhyParam+0x168>)
 800d340:	9304      	str	r3, [sp, #16]
            break;
 800d342:	e79b      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800d344:	2303      	movs	r3, #3
 800d346:	9304      	str	r3, [sp, #16]
            break;
 800d348:	e798      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800d34a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d34e:	4a0b      	ldr	r2, [pc, #44]	; (800d37c <RegionEU868GetPhyParam+0x170>)
 800d350:	5cd3      	ldrb	r3, [r2, r3]
 800d352:	9304      	str	r3, [sp, #16]
            break;
 800d354:	e792      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800d356:	490a      	ldr	r1, [pc, #40]	; (800d380 <RegionEU868GetPhyParam+0x174>)
 800d358:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800d35c:	f7ff fe8c 	bl	800d078 <RegionCommonGetBandwidth>
 800d360:	9004      	str	r0, [sp, #16]
            break;
 800d362:	e78b      	b.n	800d27c <RegionEU868GetPhyParam+0x70>
 800d364:	20000e44 	.word	0x20000e44
 800d368:	0801299c 	.word	0x0801299c
 800d36c:	080129a4 	.word	0x080129a4
 800d370:	fffffc18 	.word	0xfffffc18
 800d374:	33d3e608 	.word	0x33d3e608
 800d378:	4009999a 	.word	0x4009999a
 800d37c:	08012994 	.word	0x08012994
 800d380:	08012974 	.word	0x08012974

0800d384 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800d384:	b510      	push	{r4, lr}
 800d386:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800d388:	4b0b      	ldr	r3, [pc, #44]	; (800d3b8 <RegionEU868SetBandTxDone+0x34>)
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	7803      	ldrb	r3, [r0, #0]
 800d38e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d392:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d396:	7a5b      	ldrb	r3, [r3, #9]
 800d398:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800d39c:	4b07      	ldr	r3, [pc, #28]	; (800d3bc <RegionEU868SetBandTxDone+0x38>)
 800d39e:	681c      	ldr	r4, [r3, #0]
 800d3a0:	6903      	ldr	r3, [r0, #16]
 800d3a2:	9300      	str	r3, [sp, #0]
 800d3a4:	68c3      	ldr	r3, [r0, #12]
 800d3a6:	7842      	ldrb	r2, [r0, #1]
 800d3a8:	6881      	ldr	r1, [r0, #8]
 800d3aa:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800d3ae:	f7ff fc18 	bl	800cbe2 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800d3b2:	b002      	add	sp, #8
 800d3b4:	bd10      	pop	{r4, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20000e44 	.word	0x20000e44
 800d3bc:	20000e40 	.word	0x20000e40

0800d3c0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800d3c0:	b530      	push	{r4, r5, lr}
 800d3c2:	b0a5      	sub	sp, #148	; 0x94
 800d3c4:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800d3c6:	2290      	movs	r2, #144	; 0x90
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	4668      	mov	r0, sp
 800d3cc:	f004 fea2 	bl	8012114 <memset>
 800d3d0:	2364      	movs	r3, #100	; 0x64
 800d3d2:	f8ad 3000 	strh.w	r3, [sp]
 800d3d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d3da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3de:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800d3e2:	210a      	movs	r1, #10
 800d3e4:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800d3e8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800d3ec:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800d3f0:	7b23      	ldrb	r3, [r4, #12]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d032      	beq.n	800d45c <RegionEU868InitDefaults+0x9c>
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d03e      	beq.n	800d478 <RegionEU868InitDefaults+0xb8>
 800d3fa:	b10b      	cbz	r3, 800d400 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800d3fc:	b025      	add	sp, #148	; 0x94
 800d3fe:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800d400:	6823      	ldr	r3, [r4, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d0fa      	beq.n	800d3fc <RegionEU868InitDefaults+0x3c>
 800d406:	6863      	ldr	r3, [r4, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d0f7      	beq.n	800d3fc <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800d40c:	4d1f      	ldr	r5, [pc, #124]	; (800d48c <RegionEU868InitDefaults+0xcc>)
 800d40e:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800d410:	68a0      	ldr	r0, [r4, #8]
 800d412:	4b1f      	ldr	r3, [pc, #124]	; (800d490 <RegionEU868InitDefaults+0xd0>)
 800d414:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800d416:	2290      	movs	r2, #144	; 0x90
 800d418:	4669      	mov	r1, sp
 800d41a:	f002 f9c4 	bl	800f7a6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800d41e:	682c      	ldr	r4, [r5, #0]
 800d420:	4b1c      	ldr	r3, [pc, #112]	; (800d494 <RegionEU868InitDefaults+0xd4>)
 800d422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d426:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800d42a:	f104 0c0c 	add.w	ip, r4, #12
 800d42e:	f103 020c 	add.w	r2, r3, #12
 800d432:	ca07      	ldmia	r2, {r0, r1, r2}
 800d434:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800d438:	f104 0c18 	add.w	ip, r4, #24
 800d43c:	3318      	adds	r3, #24
 800d43e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d442:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800d446:	2307      	movs	r3, #7
 800d448:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d44c:	2201      	movs	r2, #1
 800d44e:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800d452:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800d456:	f7ff fbb5 	bl	800cbc4 <RegionCommonChanMaskCopy>
            break;
 800d45a:	e7cf      	b.n	800d3fc <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800d45c:	4b0b      	ldr	r3, [pc, #44]	; (800d48c <RegionEU868InitDefaults+0xcc>)
 800d45e:	6818      	ldr	r0, [r3, #0]
 800d460:	2300      	movs	r3, #0
 800d462:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800d464:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800d466:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d468:	2201      	movs	r2, #1
 800d46a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800d46e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d472:	f7ff fba7 	bl	800cbc4 <RegionCommonChanMaskCopy>
            break;
 800d476:	e7c1      	b.n	800d3fc <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800d478:	4b04      	ldr	r3, [pc, #16]	; (800d48c <RegionEU868InitDefaults+0xcc>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800d480:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800d484:	430a      	orrs	r2, r1
 800d486:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800d48a:	e7b7      	b.n	800d3fc <RegionEU868InitDefaults+0x3c>
 800d48c:	20000e44 	.word	0x20000e44
 800d490:	20000e40 	.word	0x20000e40
 800d494:	08012288 	.word	0x08012288

0800d498 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d498:	b500      	push	{lr}
 800d49a:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800d49c:	290f      	cmp	r1, #15
 800d49e:	d83c      	bhi.n	800d51a <RegionEU868Verify+0x82>
 800d4a0:	e8df f001 	tbb	[pc, r1]
 800d4a4:	3b3b3b0a 	.word	0x3b3b3b0a
 800d4a8:	271d133b 	.word	0x271d133b
 800d4ac:	3b31313b 	.word	0x3b31313b
 800d4b0:	083b3b3b 	.word	0x083b3b3b
 800d4b4:	2001      	movs	r0, #1
 800d4b6:	e031      	b.n	800d51c <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800d4be:	f10d 0107 	add.w	r1, sp, #7
 800d4c2:	6800      	ldr	r0, [r0, #0]
 800d4c4:	f7ff fe1c 	bl	800d100 <VerifyRfFreq>
 800d4c8:	e028      	b.n	800d51c <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800d4ca:	2207      	movs	r2, #7
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	f990 0000 	ldrsb.w	r0, [r0]
 800d4d2:	f7ff fb06 	bl	800cae2 <RegionCommonValueInRange>
 800d4d6:	3800      	subs	r0, #0
 800d4d8:	bf18      	it	ne
 800d4da:	2001      	movne	r0, #1
 800d4dc:	e01e      	b.n	800d51c <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800d4de:	2205      	movs	r2, #5
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	f990 0000 	ldrsb.w	r0, [r0]
 800d4e6:	f7ff fafc 	bl	800cae2 <RegionCommonValueInRange>
 800d4ea:	3800      	subs	r0, #0
 800d4ec:	bf18      	it	ne
 800d4ee:	2001      	movne	r0, #1
 800d4f0:	e014      	b.n	800d51c <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800d4f2:	2207      	movs	r2, #7
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	f990 0000 	ldrsb.w	r0, [r0]
 800d4fa:	f7ff faf2 	bl	800cae2 <RegionCommonValueInRange>
 800d4fe:	3800      	subs	r0, #0
 800d500:	bf18      	it	ne
 800d502:	2001      	movne	r0, #1
 800d504:	e00a      	b.n	800d51c <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800d506:	2207      	movs	r2, #7
 800d508:	2100      	movs	r1, #0
 800d50a:	f990 0000 	ldrsb.w	r0, [r0]
 800d50e:	f7ff fae8 	bl	800cae2 <RegionCommonValueInRange>
 800d512:	3800      	subs	r0, #0
 800d514:	bf18      	it	ne
 800d516:	2001      	movne	r0, #1
 800d518:	e000      	b.n	800d51c <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800d51a:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800d51c:	b003      	add	sp, #12
 800d51e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d524 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d524:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800d526:	7903      	ldrb	r3, [r0, #4]
 800d528:	b11b      	cbz	r3, 800d532 <RegionEU868ChanMaskSet+0xe>
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d00b      	beq.n	800d546 <RegionEU868ChanMaskSet+0x22>
 800d52e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d530:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d532:	4b0a      	ldr	r3, [pc, #40]	; (800d55c <RegionEU868ChanMaskSet+0x38>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2201      	movs	r2, #1
 800d538:	6801      	ldr	r1, [r0, #0]
 800d53a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800d53e:	f7ff fb41 	bl	800cbc4 <RegionCommonChanMaskCopy>
    return true;
 800d542:	2001      	movs	r0, #1
            break;
 800d544:	e7f4      	b.n	800d530 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d546:	4b05      	ldr	r3, [pc, #20]	; (800d55c <RegionEU868ChanMaskSet+0x38>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2201      	movs	r2, #1
 800d54c:	6801      	ldr	r1, [r0, #0]
 800d54e:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800d552:	f7ff fb37 	bl	800cbc4 <RegionCommonChanMaskCopy>
    return true;
 800d556:	2001      	movs	r0, #1
            break;
 800d558:	e7ea      	b.n	800d530 <RegionEU868ChanMaskSet+0xc>
 800d55a:	bf00      	nop
 800d55c:	20000e44 	.word	0x20000e44

0800d560 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d562:	b083      	sub	sp, #12
 800d564:	460e      	mov	r6, r1
 800d566:	4617      	mov	r7, r2
 800d568:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d56a:	2807      	cmp	r0, #7
 800d56c:	bfa8      	it	ge
 800d56e:	2007      	movge	r0, #7
 800d570:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800d572:	4913      	ldr	r1, [pc, #76]	; (800d5c0 <RegionEU868ComputeRxWindowParameters+0x60>)
 800d574:	f7ff fd80 	bl	800d078 <RegionCommonGetBandwidth>
 800d578:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800d57a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d57e:	2b07      	cmp	r3, #7
 800d580:	d017      	beq.n	800d5b2 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d582:	4a0f      	ldr	r2, [pc, #60]	; (800d5c0 <RegionEU868ComputeRxWindowParameters+0x60>)
 800d584:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d588:	4a0e      	ldr	r2, [pc, #56]	; (800d5c4 <RegionEU868ComputeRxWindowParameters+0x64>)
 800d58a:	5cd0      	ldrb	r0, [r2, r3]
 800d58c:	f7ff fc40 	bl	800ce10 <RegionCommonComputeSymbolTimeLoRa>
 800d590:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d592:	4b0d      	ldr	r3, [pc, #52]	; (800d5c8 <RegionEU868ComputeRxWindowParameters+0x68>)
 800d594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d596:	4798      	blx	r3
 800d598:	4603      	mov	r3, r0
 800d59a:	f104 020c 	add.w	r2, r4, #12
 800d59e:	9201      	str	r2, [sp, #4]
 800d5a0:	3408      	adds	r4, #8
 800d5a2:	9400      	str	r4, [sp, #0]
 800d5a4:	463a      	mov	r2, r7
 800d5a6:	4631      	mov	r1, r6
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	f7ff fc3f 	bl	800ce2c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800d5ae:	b003      	add	sp, #12
 800d5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800d5b2:	4a04      	ldr	r2, [pc, #16]	; (800d5c4 <RegionEU868ComputeRxWindowParameters+0x64>)
 800d5b4:	5cd0      	ldrb	r0, [r2, r3]
 800d5b6:	f7ff fc33 	bl	800ce20 <RegionCommonComputeSymbolTimeFsk>
 800d5ba:	4605      	mov	r5, r0
 800d5bc:	e7e9      	b.n	800d592 <RegionEU868ComputeRxWindowParameters+0x32>
 800d5be:	bf00      	nop
 800d5c0:	08012974 	.word	0x08012974
 800d5c4:	08012994 	.word	0x08012994
 800d5c8:	08012fbc 	.word	0x08012fbc

0800d5cc <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d0:	b08a      	sub	sp, #40	; 0x28
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800d5d6:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d5da:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d5de:	4b37      	ldr	r3, [pc, #220]	; (800d6bc <RegionEU868RxConfig+0xf0>)
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	4798      	blx	r3
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d167      	bne.n	800d6b8 <RegionEU868RxConfig+0xec>
 800d5e8:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d5ea:	7ce3      	ldrb	r3, [r4, #19]
 800d5ec:	b983      	cbnz	r3, 800d610 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d5ee:	4b34      	ldr	r3, [pc, #208]	; (800d6c0 <RegionEU868RxConfig+0xf4>)
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	7823      	ldrb	r3, [r4, #0]
 800d5f4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d5f8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d5fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d600:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d604:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800d608:	f1b8 0f00 	cmp.w	r8, #0
 800d60c:	d100      	bne.n	800d610 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d60e:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800d610:	4b2c      	ldr	r3, [pc, #176]	; (800d6c4 <RegionEU868RxConfig+0xf8>)
 800d612:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800d616:	4b29      	ldr	r3, [pc, #164]	; (800d6bc <RegionEU868RxConfig+0xf0>)
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	4640      	mov	r0, r8
 800d61c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800d61e:	2d07      	cmp	r5, #7
 800d620:	d02b      	beq.n	800d67a <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d622:	4b26      	ldr	r3, [pc, #152]	; (800d6bc <RegionEU868RxConfig+0xf0>)
 800d624:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d628:	7ca3      	ldrb	r3, [r4, #18]
 800d62a:	9309      	str	r3, [sp, #36]	; 0x24
 800d62c:	2601      	movs	r6, #1
 800d62e:	9608      	str	r6, [sp, #32]
 800d630:	2300      	movs	r3, #0
 800d632:	9307      	str	r3, [sp, #28]
 800d634:	9306      	str	r3, [sp, #24]
 800d636:	9305      	str	r3, [sp, #20]
 800d638:	9304      	str	r3, [sp, #16]
 800d63a:	9303      	str	r3, [sp, #12]
 800d63c:	8922      	ldrh	r2, [r4, #8]
 800d63e:	9202      	str	r2, [sp, #8]
 800d640:	2208      	movs	r2, #8
 800d642:	9201      	str	r2, [sp, #4]
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	4633      	mov	r3, r6
 800d648:	464a      	mov	r2, r9
 800d64a:	78a1      	ldrb	r1, [r4, #2]
 800d64c:	4630      	mov	r0, r6
 800d64e:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800d650:	7c63      	ldrb	r3, [r4, #17]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d02d      	beq.n	800d6b2 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800d656:	4b1c      	ldr	r3, [pc, #112]	; (800d6c8 <RegionEU868RxConfig+0xfc>)
 800d658:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800d65a:	4b18      	ldr	r3, [pc, #96]	; (800d6bc <RegionEU868RxConfig+0xf0>)
 800d65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d65e:	310d      	adds	r1, #13
 800d660:	b2c9      	uxtb	r1, r1
 800d662:	4630      	mov	r0, r6
 800d664:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d666:	462a      	mov	r2, r5
 800d668:	4641      	mov	r1, r8
 800d66a:	7ce0      	ldrb	r0, [r4, #19]
 800d66c:	f7ff fd16 	bl	800d09c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800d670:	703d      	strb	r5, [r7, #0]
    return true;
 800d672:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800d674:	b00a      	add	sp, #40	; 0x28
 800d676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d67a:	4b10      	ldr	r3, [pc, #64]	; (800d6bc <RegionEU868RxConfig+0xf0>)
 800d67c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d680:	7ca3      	ldrb	r3, [r4, #18]
 800d682:	9309      	str	r3, [sp, #36]	; 0x24
 800d684:	2000      	movs	r0, #0
 800d686:	9008      	str	r0, [sp, #32]
 800d688:	9007      	str	r0, [sp, #28]
 800d68a:	9006      	str	r0, [sp, #24]
 800d68c:	2301      	movs	r3, #1
 800d68e:	9305      	str	r3, [sp, #20]
 800d690:	9004      	str	r0, [sp, #16]
 800d692:	9003      	str	r0, [sp, #12]
 800d694:	8923      	ldrh	r3, [r4, #8]
 800d696:	9302      	str	r3, [sp, #8]
 800d698:	2305      	movs	r3, #5
 800d69a:	9301      	str	r3, [sp, #4]
 800d69c:	4b0b      	ldr	r3, [pc, #44]	; (800d6cc <RegionEU868RxConfig+0x100>)
 800d69e:	9300      	str	r3, [sp, #0]
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6a6:	fb02 f209 	mul.w	r2, r2, r9
 800d6aa:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d6ae:	47d0      	blx	sl
 800d6b0:	e7ce      	b.n	800d650 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800d6b2:	4b07      	ldr	r3, [pc, #28]	; (800d6d0 <RegionEU868RxConfig+0x104>)
 800d6b4:	5d59      	ldrb	r1, [r3, r5]
 800d6b6:	e7d0      	b.n	800d65a <RegionEU868RxConfig+0x8e>
        return false;
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	e7db      	b.n	800d674 <RegionEU868RxConfig+0xa8>
 800d6bc:	08012fbc 	.word	0x08012fbc
 800d6c0:	20000e44 	.word	0x20000e44
 800d6c4:	08012994 	.word	0x08012994
 800d6c8:	080129a4 	.word	0x080129a4
 800d6cc:	00014585 	.word	0x00014585
 800d6d0:	0801299c 	.word	0x0801299c

0800d6d4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d8:	b08d      	sub	sp, #52	; 0x34
 800d6da:	4604      	mov	r4, r0
 800d6dc:	460f      	mov	r7, r1
 800d6de:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d6e0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d6e4:	4a42      	ldr	r2, [pc, #264]	; (800d7f0 <RegionEU868TxConfig+0x11c>)
 800d6e6:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d6ea:	4d42      	ldr	r5, [pc, #264]	; (800d7f4 <RegionEU868TxConfig+0x120>)
 800d6ec:	682a      	ldr	r2, [r5, #0]
 800d6ee:	7803      	ldrb	r3, [r0, #0]
 800d6f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d6f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6f8:	7a5b      	ldrb	r3, [r3, #9]
 800d6fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d6fe:	4a3e      	ldr	r2, [pc, #248]	; (800d7f8 <RegionEU868TxConfig+0x124>)
 800d700:	6812      	ldr	r2, [r2, #0]
 800d702:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d706:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d70a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d70e:	f7ff fcae 	bl	800d06e <RegionCommonLimitTxPower>
 800d712:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800d714:	4939      	ldr	r1, [pc, #228]	; (800d7fc <RegionEU868TxConfig+0x128>)
 800d716:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d71a:	f7ff fcad 	bl	800d078 <RegionCommonGetBandwidth>
 800d71e:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d720:	68a2      	ldr	r2, [r4, #8]
 800d722:	6861      	ldr	r1, [r4, #4]
 800d724:	4630      	mov	r0, r6
 800d726:	f7ff fbbd 	bl	800cea4 <RegionCommonComputeTxPower>
 800d72a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d72c:	4b34      	ldr	r3, [pc, #208]	; (800d800 <RegionEU868TxConfig+0x12c>)
 800d72e:	68da      	ldr	r2, [r3, #12]
 800d730:	6829      	ldr	r1, [r5, #0]
 800d732:	7823      	ldrb	r3, [r4, #0]
 800d734:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d738:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d73c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800d73e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d742:	2b07      	cmp	r3, #7
 800d744:	d031      	beq.n	800d7aa <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d746:	4b2e      	ldr	r3, [pc, #184]	; (800d800 <RegionEU868TxConfig+0x12c>)
 800d748:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800d74c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d750:	9308      	str	r3, [sp, #32]
 800d752:	2200      	movs	r2, #0
 800d754:	9207      	str	r2, [sp, #28]
 800d756:	9206      	str	r2, [sp, #24]
 800d758:	9205      	str	r2, [sp, #20]
 800d75a:	2501      	movs	r5, #1
 800d75c:	9504      	str	r5, [sp, #16]
 800d75e:	9203      	str	r2, [sp, #12]
 800d760:	2308      	movs	r3, #8
 800d762:	9302      	str	r3, [sp, #8]
 800d764:	9501      	str	r5, [sp, #4]
 800d766:	f8cd a000 	str.w	sl, [sp]
 800d76a:	464b      	mov	r3, r9
 800d76c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d76e:	4628      	mov	r0, r5
 800d770:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d772:	4b20      	ldr	r3, [pc, #128]	; (800d7f4 <RegionEU868TxConfig+0x120>)
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	7823      	ldrb	r3, [r4, #0]
 800d778:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d77c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800d780:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d784:	f7ff fcac 	bl	800d0e0 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d788:	89a1      	ldrh	r1, [r4, #12]
 800d78a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d78e:	f7ff fd0b 	bl	800d1a8 <GetTimeOnAir>
 800d792:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800d796:	4b1a      	ldr	r3, [pc, #104]	; (800d800 <RegionEU868TxConfig+0x12c>)
 800d798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d79a:	7b21      	ldrb	r1, [r4, #12]
 800d79c:	4628      	mov	r0, r5
 800d79e:	4798      	blx	r3

    *txPower = txPowerLimited;
 800d7a0:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d7a2:	2001      	movs	r0, #1
 800d7a4:	b00d      	add	sp, #52	; 0x34
 800d7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d7aa:	4b15      	ldr	r3, [pc, #84]	; (800d800 <RegionEU868TxConfig+0x12c>)
 800d7ac:	69dd      	ldr	r5, [r3, #28]
 800d7ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d7b2:	fb03 f30a 	mul.w	r3, r3, sl
 800d7b6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800d7ba:	9208      	str	r2, [sp, #32]
 800d7bc:	f04f 0b00 	mov.w	fp, #0
 800d7c0:	f8cd b01c 	str.w	fp, [sp, #28]
 800d7c4:	f8cd b018 	str.w	fp, [sp, #24]
 800d7c8:	f8cd b014 	str.w	fp, [sp, #20]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	9204      	str	r2, [sp, #16]
 800d7d0:	f8cd b00c 	str.w	fp, [sp, #12]
 800d7d4:	2205      	movs	r2, #5
 800d7d6:	9202      	str	r2, [sp, #8]
 800d7d8:	f8cd b004 	str.w	fp, [sp, #4]
 800d7dc:	9300      	str	r3, [sp, #0]
 800d7de:	464b      	mov	r3, r9
 800d7e0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800d7e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d7e6:	4658      	mov	r0, fp
 800d7e8:	47a8      	blx	r5
        modem = MODEM_FSK;
 800d7ea:	465d      	mov	r5, fp
 800d7ec:	e7c1      	b.n	800d772 <RegionEU868TxConfig+0x9e>
 800d7ee:	bf00      	nop
 800d7f0:	08012994 	.word	0x08012994
 800d7f4:	20000e44 	.word	0x20000e44
 800d7f8:	20000e40 	.word	0x20000e40
 800d7fc:	08012974 	.word	0x08012974
 800d800:	08012fbc 	.word	0x08012fbc

0800d804 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d808:	b08f      	sub	sp, #60	; 0x3c
 800d80a:	4605      	mov	r5, r0
 800d80c:	4689      	mov	r9, r1
 800d80e:	4690      	mov	r8, r2
 800d810:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d812:	2400      	movs	r4, #0
 800d814:	940c      	str	r4, [sp, #48]	; 0x30
 800d816:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800d81a:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800d81e:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d820:	e030      	b.n	800d884 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d822:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800d826:	2607      	movs	r6, #7
 800d828:	e012      	b.n	800d850 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800d82a:	4a57      	ldr	r2, [pc, #348]	; (800d988 <RegionEU868LinkAdrReq+0x184>)
 800d82c:	6812      	ldr	r2, [r2, #0]
 800d82e:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d832:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d836:	b13a      	cbz	r2, 800d848 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800d838:	2201      	movs	r2, #1
 800d83a:	fa02 f20c 	lsl.w	r2, r2, ip
 800d83e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800d842:	430a      	orrs	r2, r1
 800d844:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d848:	f10c 0c01 	add.w	ip, ip, #1
 800d84c:	fa5f fc8c 	uxtb.w	ip, ip
 800d850:	f1bc 0f0f 	cmp.w	ip, #15
 800d854:	d816      	bhi.n	800d884 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800d856:	2b06      	cmp	r3, #6
 800d858:	d0e7      	beq.n	800d82a <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d85a:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800d85e:	fa4e fe0c 	asr.w	lr, lr, ip
 800d862:	f01e 0f01 	tst.w	lr, #1
 800d866:	d0ef      	beq.n	800d848 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800d868:	4a47      	ldr	r2, [pc, #284]	; (800d988 <RegionEU868LinkAdrReq+0x184>)
 800d86a:	6812      	ldr	r2, [r2, #0]
 800d86c:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d870:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d874:	2a00      	cmp	r2, #0
 800d876:	d1e7      	bne.n	800d848 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800d878:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800d87c:	e7e4      	b.n	800d848 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800d87e:	2606      	movs	r6, #6
 800d880:	e000      	b.n	800d884 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800d882:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d884:	7a2b      	ldrb	r3, [r5, #8]
 800d886:	42a3      	cmp	r3, r4
 800d888:	d918      	bls.n	800d8bc <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d88a:	6868      	ldr	r0, [r5, #4]
 800d88c:	a90c      	add	r1, sp, #48	; 0x30
 800d88e:	4420      	add	r0, r4
 800d890:	f7ff fa48 	bl	800cd24 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d894:	b190      	cbz	r0, 800d8bc <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800d896:	4404      	add	r4, r0
 800d898:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800d89a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d89e:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d8a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d8a6:	b90b      	cbnz	r3, 800d8ac <RegionEU868LinkAdrReq+0xa8>
 800d8a8:	2a00      	cmp	r2, #0
 800d8aa:	d0e8      	beq.n	800d87e <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d8ac:	1e5a      	subs	r2, r3, #1
 800d8ae:	b2d2      	uxtb	r2, r2
 800d8b0:	2a04      	cmp	r2, #4
 800d8b2:	d9e6      	bls.n	800d882 <RegionEU868LinkAdrReq+0x7e>
 800d8b4:	2b06      	cmp	r3, #6
 800d8b6:	d9b4      	bls.n	800d822 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800d8b8:	2606      	movs	r6, #6
 800d8ba:	e7e3      	b.n	800d884 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d8bc:	2302      	movs	r3, #2
 800d8be:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800d8c2:	7a6b      	ldrb	r3, [r5, #9]
 800d8c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800d8c8:	a80a      	add	r0, sp, #40	; 0x28
 800d8ca:	f7ff fc9f 	bl	800d20c <RegionEU868GetPhyParam>
 800d8ce:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800d8d0:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d8d4:	7aab      	ldrb	r3, [r5, #10]
 800d8d6:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d8da:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800d8de:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d8e2:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800d8e6:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d8ea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d8ee:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d8f2:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800d8f6:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d8fa:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800d8fe:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d902:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800d906:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800d90a:	2310      	movs	r3, #16
 800d90c:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800d910:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800d914:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d916:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800d91a:	2307      	movs	r3, #7
 800d91c:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d920:	4a19      	ldr	r2, [pc, #100]	; (800d988 <RegionEU868LinkAdrReq+0x184>)
 800d922:	6812      	ldr	r2, [r2, #0]
 800d924:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800d926:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800d92a:	2300      	movs	r3, #0
 800d92c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d934:	ab0c      	add	r3, sp, #48	; 0x30
 800d936:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800d93a:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800d93e:	a801      	add	r0, sp, #4
 800d940:	f7ff fa0e 	bl	800cd60 <RegionCommonLinkAdrReqVerifyParams>
 800d944:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d946:	2807      	cmp	r0, #7
 800d948:	d010      	beq.n	800d96c <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d94a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800d94e:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800d952:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800d956:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800d95a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d95e:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800d960:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d962:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800d964:	4628      	mov	r0, r5
 800d966:	b00f      	add	sp, #60	; 0x3c
 800d968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800d96c:	4e06      	ldr	r6, [pc, #24]	; (800d988 <RegionEU868LinkAdrReq+0x184>)
 800d96e:	6830      	ldr	r0, [r6, #0]
 800d970:	220c      	movs	r2, #12
 800d972:	2100      	movs	r1, #0
 800d974:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d978:	f001 ff2d 	bl	800f7d6 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800d97c:	6833      	ldr	r3, [r6, #0]
 800d97e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800d982:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800d986:	e7e0      	b.n	800d94a <RegionEU868LinkAdrReq+0x146>
 800d988:	20000e44 	.word	0x20000e44

0800d98c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d98c:	b530      	push	{r4, r5, lr}
 800d98e:	b083      	sub	sp, #12
 800d990:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d992:	2300      	movs	r3, #0
 800d994:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800d998:	f10d 0107 	add.w	r1, sp, #7
 800d99c:	6840      	ldr	r0, [r0, #4]
 800d99e:	f7ff fbaf 	bl	800d100 <VerifyRfFreq>
 800d9a2:	b1a8      	cbz	r0, 800d9d0 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800d9a4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800d9a6:	2207      	movs	r2, #7
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	f994 0000 	ldrsb.w	r0, [r4]
 800d9ae:	f7ff f898 	bl	800cae2 <RegionCommonValueInRange>
 800d9b2:	b908      	cbnz	r0, 800d9b8 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800d9b4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800d9b8:	2205      	movs	r2, #5
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d9c0:	f7ff f88f 	bl	800cae2 <RegionCommonValueInRange>
 800d9c4:	b908      	cbnz	r0, 800d9ca <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d9c6:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	b003      	add	sp, #12
 800d9ce:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800d9d0:	2506      	movs	r5, #6
 800d9d2:	e7e8      	b.n	800d9a6 <RegionEU868RxParamSetupReq+0x1a>

0800d9d4 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800d9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d8:	4770      	bx	lr
	...

0800d9dc <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800d9dc:	b510      	push	{r4, lr}
 800d9de:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800d9e6:	7803      	ldrb	r3, [r0, #0]
 800d9e8:	2b0f      	cmp	r3, #15
 800d9ea:	d902      	bls.n	800d9f2 <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 800d9ec:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800d9ee:	b002      	add	sp, #8
 800d9f0:	bd10      	pop	{r4, pc}
 800d9f2:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800d9f4:	f10d 0107 	add.w	r1, sp, #7
 800d9f8:	6840      	ldr	r0, [r0, #4]
 800d9fa:	f7ff fb81 	bl	800d100 <VerifyRfFreq>
 800d9fe:	b170      	cbz	r0, 800da1e <RegionEU868DlChannelReq+0x42>
    uint8_t status = 0x03;
 800da00:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800da02:	4b0b      	ldr	r3, [pc, #44]	; (800da30 <RegionEU868DlChannelReq+0x54>)
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	7823      	ldrb	r3, [r4, #0]
 800da08:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800da0c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800da10:	b909      	cbnz	r1, 800da16 <RegionEU868DlChannelReq+0x3a>
        status &= 0xFD;
 800da12:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 800da16:	2803      	cmp	r0, #3
 800da18:	d003      	beq.n	800da22 <RegionEU868DlChannelReq+0x46>
    return status;
 800da1a:	b240      	sxtb	r0, r0
 800da1c:	e7e7      	b.n	800d9ee <RegionEU868DlChannelReq+0x12>
        status &= 0xFE;
 800da1e:	2002      	movs	r0, #2
 800da20:	e7ef      	b.n	800da02 <RegionEU868DlChannelReq+0x26>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800da22:	6861      	ldr	r1, [r4, #4]
 800da24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800da28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da2c:	6059      	str	r1, [r3, #4]
 800da2e:	e7f4      	b.n	800da1a <RegionEU868DlChannelReq+0x3e>
 800da30:	20000e44 	.word	0x20000e44

0800da34 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800da34:	4770      	bx	lr
	...

0800da38 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800da38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da3a:	b097      	sub	sp, #92	; 0x5c
 800da3c:	4604      	mov	r4, r0
 800da3e:	460f      	mov	r7, r1
 800da40:	4616      	mov	r6, r2
 800da42:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800da44:	2100      	movs	r1, #0
 800da46:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800da4a:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800da4e:	9111      	str	r1, [sp, #68]	; 0x44
 800da50:	9112      	str	r1, [sp, #72]	; 0x48
 800da52:	9113      	str	r1, [sp, #76]	; 0x4c
 800da54:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800da56:	2307      	movs	r3, #7
 800da58:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800da5c:	4b34      	ldr	r3, [pc, #208]	; (800db30 <RegionEU868NextChannel+0xf8>)
 800da5e:	6818      	ldr	r0, [r3, #0]
 800da60:	2201      	movs	r2, #1
 800da62:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800da66:	f7ff f897 	bl	800cb98 <RegionCommonCountChannels>
 800da6a:	b938      	cbnz	r0, 800da7c <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800da6c:	4b30      	ldr	r3, [pc, #192]	; (800db30 <RegionEU868NextChannel+0xf8>)
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800da74:	f043 0307 	orr.w	r3, r3, #7
 800da78:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800da7c:	7a63      	ldrb	r3, [r4, #9]
 800da7e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800da82:	7a23      	ldrb	r3, [r4, #8]
 800da84:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800da88:	4b29      	ldr	r3, [pc, #164]	; (800db30 <RegionEU868NextChannel+0xf8>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800da90:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800da92:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800da94:	4b27      	ldr	r3, [pc, #156]	; (800db34 <RegionEU868NextChannel+0xfc>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800da9a:	2310      	movs	r3, #16
 800da9c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800daa0:	f10d 030a 	add.w	r3, sp, #10
 800daa4:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800daaa:	6863      	ldr	r3, [r4, #4]
 800daac:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800daae:	7aa3      	ldrb	r3, [r4, #10]
 800dab0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800dab4:	2306      	movs	r3, #6
 800dab6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800daba:	ab0c      	add	r3, sp, #48	; 0x30
 800dabc:	f104 020c 	add.w	r2, r4, #12
 800dac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dac4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800dac8:	7d23      	ldrb	r3, [r4, #20]
 800daca:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800dace:	8ae1      	ldrh	r1, [r4, #22]
 800dad0:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800dad4:	f7ff fb68 	bl	800d1a8 <GetTimeOnAir>
 800dad8:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800dada:	ab03      	add	r3, sp, #12
 800dadc:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800dade:	9601      	str	r6, [sp, #4]
 800dae0:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800daea:	aa11      	add	r2, sp, #68	; 0x44
 800daec:	4629      	mov	r1, r5
 800daee:	a809      	add	r0, sp, #36	; 0x24
 800daf0:	f7ff fa54 	bl	800cf9c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800daf4:	4604      	mov	r4, r0
 800daf6:	b120      	cbz	r0, 800db02 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800daf8:	280c      	cmp	r0, #12
 800dafa:	d00f      	beq.n	800db1c <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800dafc:	4620      	mov	r0, r4
 800dafe:	b017      	add	sp, #92	; 0x5c
 800db00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800db02:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800db06:	3901      	subs	r1, #1
 800db08:	f001 fe40 	bl	800f78c <randr>
 800db0c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800db10:	eb0d 0003 	add.w	r0, sp, r3
 800db14:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800db18:	703b      	strb	r3, [r7, #0]
 800db1a:	e7ef      	b.n	800dafc <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800db1c:	4b04      	ldr	r3, [pc, #16]	; (800db30 <RegionEU868NextChannel+0xf8>)
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800db24:	f043 0307 	orr.w	r3, r3, #7
 800db28:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800db2c:	e7e6      	b.n	800dafc <RegionEU868NextChannel+0xc4>
 800db2e:	bf00      	nop
 800db30:	20000e44 	.word	0x20000e44
 800db34:	20000e40 	.word	0x20000e40

0800db38 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800db38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db3a:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800db3c:	2300      	movs	r3, #0
 800db3e:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800db42:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800db44:	2d02      	cmp	r5, #2
 800db46:	d94f      	bls.n	800dbe8 <RegionEU868ChannelAdd+0xb0>
 800db48:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800db4a:	2d0f      	cmp	r5, #15
 800db4c:	d84e      	bhi.n	800dbec <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800db4e:	6803      	ldr	r3, [r0, #0]
 800db50:	7a18      	ldrb	r0, [r3, #8]
 800db52:	f340 0003 	sbfx	r0, r0, #0, #4
 800db56:	2207      	movs	r2, #7
 800db58:	2100      	movs	r1, #0
 800db5a:	b240      	sxtb	r0, r0
 800db5c:	f7fe ffc1 	bl	800cae2 <RegionCommonValueInRange>
 800db60:	2800      	cmp	r0, #0
 800db62:	d03d      	beq.n	800dbe0 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800db64:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800db66:	6823      	ldr	r3, [r4, #0]
 800db68:	7a18      	ldrb	r0, [r3, #8]
 800db6a:	f340 1003 	sbfx	r0, r0, #4, #4
 800db6e:	2207      	movs	r2, #7
 800db70:	2100      	movs	r1, #0
 800db72:	b240      	sxtb	r0, r0
 800db74:	f7fe ffb5 	bl	800cae2 <RegionCommonValueInRange>
 800db78:	b900      	cbnz	r0, 800db7c <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800db7a:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800db7c:	6820      	ldr	r0, [r4, #0]
 800db7e:	7a03      	ldrb	r3, [r0, #8]
 800db80:	f343 0203 	sbfx	r2, r3, #0, #4
 800db84:	b252      	sxtb	r2, r2
 800db86:	f343 1303 	sbfx	r3, r3, #4, #4
 800db8a:	b25b      	sxtb	r3, r3
 800db8c:	429a      	cmp	r2, r3
 800db8e:	dd00      	ble.n	800db92 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800db90:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800db92:	f10d 0107 	add.w	r1, sp, #7
 800db96:	6800      	ldr	r0, [r0, #0]
 800db98:	f7ff fab2 	bl	800d100 <VerifyRfFreq>
 800db9c:	b310      	cbz	r0, 800dbe4 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800db9e:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800dba0:	b106      	cbz	r6, 800dba4 <RegionEU868ChannelAdd+0x6c>
 800dba2:	bb33      	cbnz	r3, 800dbf2 <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800dba4:	bb3e      	cbnz	r6, 800dbf6 <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800dba6:	bb43      	cbnz	r3, 800dbfa <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800dba8:	4f15      	ldr	r7, [pc, #84]	; (800dc00 <RegionEU868ChannelAdd+0xc8>)
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	006e      	lsls	r6, r5, #1
 800dbae:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800dbb2:	220c      	movs	r2, #12
 800dbb4:	6821      	ldr	r1, [r4, #0]
 800dbb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dbba:	f001 fdf4 	bl	800f7a6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	442e      	add	r6, r5
 800dbc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dbc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dbca:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800dbcc:	2301      	movs	r3, #1
 800dbce:	fa03 f505 	lsl.w	r5, r3, r5
 800dbd2:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800dbd6:	431d      	orrs	r5, r3
 800dbd8:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800dbdc:	2000      	movs	r0, #0
 800dbde:	e006      	b.n	800dbee <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800dbe0:	2601      	movs	r6, #1
 800dbe2:	e7c0      	b.n	800db66 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e7db      	b.n	800dba0 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800dbe8:	2006      	movs	r0, #6
 800dbea:	e000      	b.n	800dbee <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dbec:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800dbee:	b003      	add	sp, #12
 800dbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800dbf2:	2006      	movs	r0, #6
 800dbf4:	e7fb      	b.n	800dbee <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800dbf6:	2005      	movs	r0, #5
 800dbf8:	e7f9      	b.n	800dbee <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800dbfa:	2004      	movs	r0, #4
 800dbfc:	e7f7      	b.n	800dbee <RegionEU868ChannelAdd+0xb6>
 800dbfe:	bf00      	nop
 800dc00:	20000e44 	.word	0x20000e44

0800dc04 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800dc04:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800dc06:	2902      	cmp	r1, #2
 800dc08:	d801      	bhi.n	800dc0e <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800dc0a:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800dc0c:	4770      	bx	lr
{
 800dc0e:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800dc10:	4b09      	ldr	r3, [pc, #36]	; (800dc38 <RegionEU868ChannelsRemove+0x34>)
 800dc12:	6818      	ldr	r0, [r3, #0]
 800dc14:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800dc18:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800dc1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800dc20:	2200      	movs	r2, #0
 800dc22:	f840 200c 	str.w	r2, [r0, ip]
 800dc26:	605a      	str	r2, [r3, #4]
 800dc28:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800dc2a:	2210      	movs	r2, #16
 800dc2c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800dc30:	f7fe ff99 	bl	800cb66 <RegionCommonChanDisable>
}
 800dc34:	bd08      	pop	{r3, pc}
 800dc36:	bf00      	nop
 800dc38:	20000e44 	.word	0x20000e44

0800dc3c <RegionEU868ApplyCFList>:
{
 800dc3c:	b570      	push	{r4, r5, r6, lr}
 800dc3e:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800dc40:	2350      	movs	r3, #80	; 0x50
 800dc42:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800dc46:	7a03      	ldrb	r3, [r0, #8]
 800dc48:	2b10      	cmp	r3, #16
 800dc4a:	d136      	bne.n	800dcba <RegionEU868ApplyCFList+0x7e>
 800dc4c:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800dc4e:	6843      	ldr	r3, [r0, #4]
 800dc50:	7bdd      	ldrb	r5, [r3, #15]
 800dc52:	2d00      	cmp	r5, #0
 800dc54:	d131      	bne.n	800dcba <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800dc56:	2403      	movs	r4, #3
 800dc58:	e01b      	b.n	800dc92 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800dc5a:	6872      	ldr	r2, [r6, #4]
 800dc5c:	5d53      	ldrb	r3, [r2, r5]
 800dc5e:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800dc60:	442a      	add	r2, r5
 800dc62:	7851      	ldrb	r1, [r2, #1]
 800dc64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800dc68:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800dc6a:	7892      	ldrb	r2, [r2, #2]
 800dc6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc70:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800dc72:	2264      	movs	r2, #100	; 0x64
 800dc74:	fb02 f303 	mul.w	r3, r2, r3
 800dc78:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	9304      	str	r3, [sp, #16]
 800dc7e:	e011      	b.n	800dca4 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800dc80:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800dc84:	4668      	mov	r0, sp
 800dc86:	f7ff ffbd 	bl	800dc04 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800dc8a:	3503      	adds	r5, #3
 800dc8c:	b2ed      	uxtb	r5, r5
 800dc8e:	3401      	adds	r4, #1
 800dc90:	b2e4      	uxtb	r4, r4
 800dc92:	2c0f      	cmp	r4, #15
 800dc94:	d811      	bhi.n	800dcba <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800dc96:	2c07      	cmp	r4, #7
 800dc98:	d9df      	bls.n	800dc5a <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800dc9e:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800dca2:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800dca4:	9b03      	ldr	r3, [sp, #12]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d0ea      	beq.n	800dc80 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800dcaa:	ab03      	add	r3, sp, #12
 800dcac:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800dcae:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800dcb2:	a801      	add	r0, sp, #4
 800dcb4:	f7ff ff40 	bl	800db38 <RegionEU868ChannelAdd>
 800dcb8:	e7e7      	b.n	800dc8a <RegionEU868ApplyCFList+0x4e>
}
 800dcba:	b006      	add	sp, #24
 800dcbc:	bd70      	pop	{r4, r5, r6, pc}

0800dcbe <RegionEU868NewChannelReq>:
{
 800dcbe:	b500      	push	{lr}
 800dcc0:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800dcc2:	6803      	ldr	r3, [r0, #0]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	b952      	cbnz	r2, 800dcde <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800dcc8:	7903      	ldrb	r3, [r0, #4]
 800dcca:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800dcce:	a801      	add	r0, sp, #4
 800dcd0:	f7ff ff98 	bl	800dc04 <RegionEU868ChannelsRemove>
 800dcd4:	b1d0      	cbz	r0, 800dd0c <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800dcd6:	2003      	movs	r0, #3
}
 800dcd8:	b005      	add	sp, #20
 800dcda:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800dcde:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800dce0:	7903      	ldrb	r3, [r0, #4]
 800dce2:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800dce6:	a802      	add	r0, sp, #8
 800dce8:	f7ff ff26 	bl	800db38 <RegionEU868ChannelAdd>
 800dcec:	2806      	cmp	r0, #6
 800dcee:	d80b      	bhi.n	800dd08 <RegionEU868NewChannelReq+0x4a>
 800dcf0:	e8df f000 	tbb	[pc, r0]
 800dcf4:	0a0a0a04 	.word	0x0a0a0a04
 800dcf8:	060e      	.short	0x060e
 800dcfa:	08          	.byte	0x08
 800dcfb:	00          	.byte	0x00
 800dcfc:	2003      	movs	r0, #3
 800dcfe:	e7eb      	b.n	800dcd8 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800dd00:	2001      	movs	r0, #1
                break;
 800dd02:	e7e9      	b.n	800dcd8 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800dd04:	2000      	movs	r0, #0
                break;
 800dd06:	e7e7      	b.n	800dcd8 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800dd08:	2000      	movs	r0, #0
                break;
 800dd0a:	e7e5      	b.n	800dcd8 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	e7e3      	b.n	800dcd8 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800dd10:	2002      	movs	r0, #2
 800dd12:	e7e1      	b.n	800dcd8 <RegionEU868NewChannelReq+0x1a>

0800dd14 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800dd14:	1a88      	subs	r0, r1, r2
 800dd16:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	db01      	blt.n	800dd20 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800dd1c:	b2c0      	uxtb	r0, r0
 800dd1e:	4770      	bx	lr
        datarate = DR_0;
 800dd20:	2000      	movs	r0, #0
 800dd22:	e7fb      	b.n	800dd1c <RegionEU868ApplyDrOffset+0x8>

0800dd24 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800dd24:	b510      	push	{r4, lr}
 800dd26:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800dd28:	4b10      	ldr	r3, [pc, #64]	; (800dd6c <VerifyRfFreq+0x48>)
 800dd2a:	6a1b      	ldr	r3, [r3, #32]
 800dd2c:	4798      	blx	r3
 800dd2e:	b1c8      	cbz	r0, 800dd64 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800dd30:	4b0f      	ldr	r3, [pc, #60]	; (800dd70 <VerifyRfFreq+0x4c>)
 800dd32:	4423      	add	r3, r4
 800dd34:	4a0f      	ldr	r2, [pc, #60]	; (800dd74 <VerifyRfFreq+0x50>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d813      	bhi.n	800dd62 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800dd3a:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800dd3e:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800dd42:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800dd46:	fba2 1203 	umull	r1, r2, r2, r3
 800dd4a:	0c92      	lsrs	r2, r2, #18
 800dd4c:	490a      	ldr	r1, [pc, #40]	; (800dd78 <VerifyRfFreq+0x54>)
 800dd4e:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800dd52:	b942      	cbnz	r2, 800dd66 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800dd54:	4b09      	ldr	r3, [pc, #36]	; (800dd7c <VerifyRfFreq+0x58>)
 800dd56:	4423      	add	r3, r4
 800dd58:	4a09      	ldr	r2, [pc, #36]	; (800dd80 <VerifyRfFreq+0x5c>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d902      	bls.n	800dd64 <VerifyRfFreq+0x40>
    {
        return false;
 800dd5e:	2000      	movs	r0, #0
 800dd60:	e000      	b.n	800dd64 <VerifyRfFreq+0x40>
        return false;
 800dd62:	2000      	movs	r0, #0
    }
    return true;
}
 800dd64:	bd10      	pop	{r4, pc}
        return false;
 800dd66:	2000      	movs	r0, #0
 800dd68:	e7fc      	b.n	800dd64 <VerifyRfFreq+0x40>
 800dd6a:	bf00      	nop
 800dd6c:	08012fbc 	.word	0x08012fbc
 800dd70:	c8f78f60 	.word	0xc8f78f60
 800dd74:	00401640 	.word	0x00401640
 800dd78:	000927c0 	.word	0x000927c0
 800dd7c:	ca37fea0 	.word	0xca37fea0
 800dd80:	01808580 	.word	0x01808580

0800dd84 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800dd8a:	4b0a      	ldr	r3, [pc, #40]	; (800ddb4 <GetTimeOnAir+0x30>)
 800dd8c:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800dd8e:	490a      	ldr	r1, [pc, #40]	; (800ddb8 <GetTimeOnAir+0x34>)
 800dd90:	f7ff f972 	bl	800d078 <RegionCommonGetBandwidth>
 800dd94:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800dd96:	4b09      	ldr	r3, [pc, #36]	; (800ddbc <GetTimeOnAir+0x38>)
 800dd98:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800dd9a:	2001      	movs	r0, #1
 800dd9c:	9003      	str	r0, [sp, #12]
 800dd9e:	b2e4      	uxtb	r4, r4
 800dda0:	9402      	str	r4, [sp, #8]
 800dda2:	2200      	movs	r2, #0
 800dda4:	9201      	str	r2, [sp, #4]
 800dda6:	2208      	movs	r2, #8
 800dda8:	9200      	str	r2, [sp, #0]
 800ddaa:	4603      	mov	r3, r0
 800ddac:	4632      	mov	r2, r6
 800ddae:	47a8      	blx	r5
}
 800ddb0:	b004      	add	sp, #16
 800ddb2:	bd70      	pop	{r4, r5, r6, pc}
 800ddb4:	08012a00 	.word	0x08012a00
 800ddb8:	080129ac 	.word	0x080129ac
 800ddbc:	08012fbc 	.word	0x08012fbc

0800ddc0 <LimitTxPower>:
{
 800ddc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	4615      	mov	r5, r2
 800ddc6:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800ddc8:	f7ff f951 	bl	800d06e <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800ddcc:	2d04      	cmp	r5, #4
 800ddce:	d105      	bne.n	800dddc <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800ddd0:	4634      	mov	r4, r6
 800ddd2:	2e02      	cmp	r6, #2
 800ddd4:	bfb8      	it	lt
 800ddd6:	2402      	movlt	r4, #2
}
 800ddd8:	4620      	mov	r0, r4
 800ddda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dddc:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800ddde:	2204      	movs	r2, #4
 800dde0:	2100      	movs	r1, #0
 800dde2:	4638      	mov	r0, r7
 800dde4:	f7fe fed8 	bl	800cb98 <RegionCommonCountChannels>
 800dde8:	2831      	cmp	r0, #49	; 0x31
 800ddea:	d8f5      	bhi.n	800ddd8 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800ddec:	4634      	mov	r4, r6
 800ddee:	2e05      	cmp	r6, #5
 800ddf0:	bfb8      	it	lt
 800ddf2:	2405      	movlt	r4, #5
 800ddf4:	e7f0      	b.n	800ddd8 <LimitTxPower+0x18>
	...

0800ddf8 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800ddf8:	b500      	push	{lr}
 800ddfa:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800de00:	7803      	ldrb	r3, [r0, #0]
 800de02:	3b01      	subs	r3, #1
 800de04:	2b37      	cmp	r3, #55	; 0x37
 800de06:	d81f      	bhi.n	800de48 <RegionUS915GetPhyParam+0x50>
 800de08:	e8df f003 	tbb	[pc, r3]
 800de0c:	1e1e1e1c 	.word	0x1e1e1e1c
 800de10:	1e1e1e1e 	.word	0x1e1e1e1e
 800de14:	3e3b1e1e 	.word	0x3e3b1e1e
 800de18:	4d1e4741 	.word	0x4d1e4741
 800de1c:	5d595551 	.word	0x5d595551
 800de20:	6d6a1e61 	.word	0x6d6a1e61
 800de24:	7f7c7670 	.word	0x7f7c7670
 800de28:	86831e1e 	.word	0x86831e1e
 800de2c:	1e1e1e23 	.word	0x1e1e1e23
 800de30:	1e1e1e1e 	.word	0x1e1e1e1e
 800de34:	1e1e1e1e 	.word	0x1e1e1e1e
 800de38:	90891e1e 	.word	0x90891e1e
 800de3c:	a01e9d9a 	.word	0xa01e9d9a
 800de40:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800de44:	2308      	movs	r3, #8
 800de46:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800de48:	9804      	ldr	r0, [sp, #16]
 800de4a:	9005      	str	r0, [sp, #20]
}
 800de4c:	b007      	add	sp, #28
 800de4e:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800de52:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800de56:	f88d 3004 	strb.w	r3, [sp, #4]
 800de5a:	2304      	movs	r3, #4
 800de5c:	f88d 3005 	strb.w	r3, [sp, #5]
 800de60:	2300      	movs	r3, #0
 800de62:	f88d 3006 	strb.w	r3, [sp, #6]
 800de66:	2348      	movs	r3, #72	; 0x48
 800de68:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800de6c:	4b44      	ldr	r3, [pc, #272]	; (800df80 <RegionUS915GetPhyParam+0x188>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800de74:	9202      	str	r2, [sp, #8]
 800de76:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800de78:	a801      	add	r0, sp, #4
 800de7a:	f7ff f8d9 	bl	800d030 <RegionCommonGetNextLowerTxDr>
 800de7e:	9004      	str	r0, [sp, #16]
            break;
 800de80:	e7e2      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800de82:	2340      	movs	r3, #64	; 0x40
 800de84:	9304      	str	r3, [sp, #16]
            break;
 800de86:	e7df      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800de88:	2320      	movs	r3, #32
 800de8a:	9304      	str	r3, [sp, #16]
            break;
 800de8c:	e7dc      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800de8e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800de92:	4a3c      	ldr	r2, [pc, #240]	; (800df84 <RegionUS915GetPhyParam+0x18c>)
 800de94:	5cd3      	ldrb	r3, [r2, r3]
 800de96:	9304      	str	r3, [sp, #16]
            break;
 800de98:	e7d6      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800de9a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800de9e:	4a3a      	ldr	r2, [pc, #232]	; (800df88 <RegionUS915GetPhyParam+0x190>)
 800dea0:	5cd3      	ldrb	r3, [r2, r3]
 800dea2:	9304      	str	r3, [sp, #16]
            break;
 800dea4:	e7d0      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800dea6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800deaa:	9304      	str	r3, [sp, #16]
            break;
 800deac:	e7cc      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800deae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800deb2:	9304      	str	r3, [sp, #16]
            break;
 800deb4:	e7c8      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800deb6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800deba:	9304      	str	r3, [sp, #16]
            break;
 800debc:	e7c4      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800debe:	f241 3388 	movw	r3, #5000	; 0x1388
 800dec2:	9304      	str	r3, [sp, #16]
            break;
 800dec4:	e7c0      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800dec6:	f241 7370 	movw	r3, #6000	; 0x1770
 800deca:	9304      	str	r3, [sp, #16]
            break;
 800decc:	e7bc      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800dece:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ded2:	482e      	ldr	r0, [pc, #184]	; (800df8c <RegionUS915GetPhyParam+0x194>)
 800ded4:	f001 fc5a 	bl	800f78c <randr>
 800ded8:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800dedc:	9004      	str	r0, [sp, #16]
            break;
 800dede:	e7b3      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800dee0:	4b2b      	ldr	r3, [pc, #172]	; (800df90 <RegionUS915GetPhyParam+0x198>)
 800dee2:	9304      	str	r3, [sp, #16]
            break;
 800dee4:	e7b0      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800dee6:	2308      	movs	r3, #8
 800dee8:	9304      	str	r3, [sp, #16]
            break;
 800deea:	e7ad      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800deec:	4b24      	ldr	r3, [pc, #144]	; (800df80 <RegionUS915GetPhyParam+0x188>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800def4:	9304      	str	r3, [sp, #16]
            break;
 800def6:	e7a7      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800def8:	4b21      	ldr	r3, [pc, #132]	; (800df80 <RegionUS915GetPhyParam+0x188>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800df00:	9304      	str	r3, [sp, #16]
            break;
 800df02:	e7a1      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800df04:	2348      	movs	r3, #72	; 0x48
 800df06:	9304      	str	r3, [sp, #16]
            break;
 800df08:	e79e      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800df0a:	4b1d      	ldr	r3, [pc, #116]	; (800df80 <RegionUS915GetPhyParam+0x188>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	9304      	str	r3, [sp, #16]
            break;
 800df10:	e79a      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800df12:	4b20      	ldr	r3, [pc, #128]	; (800df94 <RegionUS915GetPhyParam+0x19c>)
 800df14:	9304      	str	r3, [sp, #16]
            break;
 800df16:	e797      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800df18:	2300      	movs	r3, #0
 800df1a:	9304      	str	r3, [sp, #16]
            break;
 800df1c:	e794      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800df1e:	4a1e      	ldr	r2, [pc, #120]	; (800df98 <RegionUS915GetPhyParam+0x1a0>)
 800df20:	491b      	ldr	r1, [pc, #108]	; (800df90 <RegionUS915GetPhyParam+0x198>)
 800df22:	7900      	ldrb	r0, [r0, #4]
 800df24:	f7fe fd0e 	bl	800c944 <RegionBaseUSCalcDownlinkFrequency>
 800df28:	9004      	str	r0, [sp, #16]
            break;
 800df2a:	e78d      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800df2c:	2317      	movs	r3, #23
 800df2e:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800df32:	2304      	movs	r3, #4
 800df34:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800df38:	2303      	movs	r3, #3
 800df3a:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800df3e:	e783      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800df40:	2308      	movs	r3, #8
 800df42:	9304      	str	r3, [sp, #16]
            break;
 800df44:	e780      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800df46:	2308      	movs	r3, #8
 800df48:	9304      	str	r3, [sp, #16]
            break;
 800df4a:	e77d      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800df4c:	4a12      	ldr	r2, [pc, #72]	; (800df98 <RegionUS915GetPhyParam+0x1a0>)
 800df4e:	4910      	ldr	r1, [pc, #64]	; (800df90 <RegionUS915GetPhyParam+0x198>)
 800df50:	7900      	ldrb	r0, [r0, #4]
 800df52:	f7fe fcf7 	bl	800c944 <RegionBaseUSCalcDownlinkFrequency>
 800df56:	9004      	str	r0, [sp, #16]
            break;
 800df58:	e776      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800df5a:	2308      	movs	r3, #8
 800df5c:	9304      	str	r3, [sp, #16]
            break;
 800df5e:	e773      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800df60:	2308      	movs	r3, #8
 800df62:	9304      	str	r3, [sp, #16]
            break;
 800df64:	e770      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800df66:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800df6a:	4a0c      	ldr	r2, [pc, #48]	; (800df9c <RegionUS915GetPhyParam+0x1a4>)
 800df6c:	5cd3      	ldrb	r3, [r2, r3]
 800df6e:	9304      	str	r3, [sp, #16]
            break;
 800df70:	e76a      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800df72:	490b      	ldr	r1, [pc, #44]	; (800dfa0 <RegionUS915GetPhyParam+0x1a8>)
 800df74:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800df78:	f7ff f87e 	bl	800d078 <RegionCommonGetBandwidth>
 800df7c:	9004      	str	r0, [sp, #16]
            break;
 800df7e:	e763      	b.n	800de48 <RegionUS915GetPhyParam+0x50>
 800df80:	20000e50 	.word	0x20000e50
 800df84:	08012a20 	.word	0x08012a20
 800df88:	08012a10 	.word	0x08012a10
 800df8c:	fffffc18 	.word	0xfffffc18
 800df90:	370870a0 	.word	0x370870a0
 800df94:	4200999a 	.word	0x4200999a
 800df98:	000927c0 	.word	0x000927c0
 800df9c:	08012a00 	.word	0x08012a00
 800dfa0:	080129ac 	.word	0x080129ac

0800dfa4 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800dfa4:	b510      	push	{r4, lr}
 800dfa6:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800dfa8:	4b0b      	ldr	r3, [pc, #44]	; (800dfd8 <RegionUS915SetBandTxDone+0x34>)
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	7803      	ldrb	r3, [r0, #0]
 800dfae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dfb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dfb6:	7a5b      	ldrb	r3, [r3, #9]
 800dfb8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800dfbc:	4b07      	ldr	r3, [pc, #28]	; (800dfdc <RegionUS915SetBandTxDone+0x38>)
 800dfbe:	681c      	ldr	r4, [r3, #0]
 800dfc0:	6903      	ldr	r3, [r0, #16]
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	68c3      	ldr	r3, [r0, #12]
 800dfc6:	7842      	ldrb	r2, [r0, #1]
 800dfc8:	6881      	ldr	r1, [r0, #8]
 800dfca:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800dfce:	f7fe fe08 	bl	800cbe2 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800dfd2:	b002      	add	sp, #8
 800dfd4:	bd10      	pop	{r4, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20000e50 	.word	0x20000e50
 800dfdc:	20000e48 	.word	0x20000e48

0800dfe0 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800dfe0:	b510      	push	{r4, lr}
 800dfe2:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	f8ad 3000 	strh.w	r3, [sp]
 800dfea:	2300      	movs	r3, #0
 800dfec:	f88d 3002 	strb.w	r3, [sp, #2]
 800dff0:	9301      	str	r3, [sp, #4]
 800dff2:	9302      	str	r3, [sp, #8]
 800dff4:	9303      	str	r3, [sp, #12]
 800dff6:	9304      	str	r3, [sp, #16]
 800dff8:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800dffc:	7b04      	ldrb	r4, [r0, #12]
 800dffe:	b174      	cbz	r4, 800e01e <RegionUS915InitDefaults+0x3e>
 800e000:	3c01      	subs	r4, #1
 800e002:	b2e4      	uxtb	r4, r4
 800e004:	2c01      	cmp	r4, #1
 800e006:	d87e      	bhi.n	800e106 <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e008:	4b40      	ldr	r3, [pc, #256]	; (800e10c <RegionUS915InitDefaults+0x12c>)
 800e00a:	6818      	ldr	r0, [r3, #0]
 800e00c:	2206      	movs	r2, #6
 800e00e:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800e012:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e016:	f7fe fdd5 	bl	800cbc4 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 800e01a:	2300      	movs	r3, #0
 800e01c:	e071      	b.n	800e102 <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800e01e:	6803      	ldr	r3, [r0, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d070      	beq.n	800e106 <RegionUS915InitDefaults+0x126>
 800e024:	6842      	ldr	r2, [r0, #4]
 800e026:	2a00      	cmp	r2, #0
 800e028:	d06d      	beq.n	800e106 <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800e02a:	4939      	ldr	r1, [pc, #228]	; (800e110 <RegionUS915InitDefaults+0x130>)
 800e02c:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800e02e:	4937      	ldr	r1, [pc, #220]	; (800e10c <RegionUS915InitDefaults+0x12c>)
 800e030:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800e032:	6880      	ldr	r0, [r0, #8]
 800e034:	4a37      	ldr	r2, [pc, #220]	; (800e114 <RegionUS915InitDefaults+0x134>)
 800e036:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800e038:	2200      	movs	r2, #0
 800e03a:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800e03c:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800e03e:	2218      	movs	r2, #24
 800e040:	4669      	mov	r1, sp
 800e042:	f001 fbb0 	bl	800f7a6 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800e046:	e011      	b.n	800e06c <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800e048:	4b30      	ldr	r3, [pc, #192]	; (800e10c <RegionUS915InitDefaults+0x12c>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4932      	ldr	r1, [pc, #200]	; (800e118 <RegionUS915InitDefaults+0x138>)
 800e04e:	4a33      	ldr	r2, [pc, #204]	; (800e11c <RegionUS915InitDefaults+0x13c>)
 800e050:	fb01 2204 	mla	r2, r1, r4, r2
 800e054:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800e058:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800e05c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800e060:	2230      	movs	r2, #48	; 0x30
 800e062:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800e064:	2200      	movs	r2, #0
 800e066:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800e068:	3401      	adds	r4, #1
 800e06a:	b2e4      	uxtb	r4, r4
 800e06c:	2c3f      	cmp	r4, #63	; 0x3f
 800e06e:	d9eb      	bls.n	800e048 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800e070:	2340      	movs	r3, #64	; 0x40
 800e072:	2b47      	cmp	r3, #71	; 0x47
 800e074:	d814      	bhi.n	800e0a0 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800e076:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800e07a:	4a24      	ldr	r2, [pc, #144]	; (800e10c <RegionUS915InitDefaults+0x12c>)
 800e07c:	6812      	ldr	r2, [r2, #0]
 800e07e:	4c28      	ldr	r4, [pc, #160]	; (800e120 <RegionUS915InitDefaults+0x140>)
 800e080:	4928      	ldr	r1, [pc, #160]	; (800e124 <RegionUS915InitDefaults+0x144>)
 800e082:	fb04 1100 	mla	r1, r4, r0, r1
 800e086:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800e08a:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800e08e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800e092:	2144      	movs	r1, #68	; 0x44
 800e094:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800e096:	2100      	movs	r1, #0
 800e098:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800e09a:	3301      	adds	r3, #1
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	e7e8      	b.n	800e072 <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800e0a0:	4c1a      	ldr	r4, [pc, #104]	; (800e10c <RegionUS915InitDefaults+0x12c>)
 800e0a2:	6820      	ldr	r0, [r4, #0]
 800e0a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e0a8:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800e0ac:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800e0b0:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800e0b4:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800e0b8:	23ff      	movs	r3, #255	; 0xff
 800e0ba:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e0c4:	2206      	movs	r2, #6
 800e0c6:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800e0ca:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e0ce:	f7fe fd79 	bl	800cbc4 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800e0d2:	6821      	ldr	r1, [r4, #0]
 800e0d4:	2206      	movs	r2, #6
 800e0d6:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800e0da:	4b0d      	ldr	r3, [pc, #52]	; (800e110 <RegionUS915InitDefaults+0x130>)
 800e0dc:	6818      	ldr	r0, [r3, #0]
 800e0de:	f7fe fd71 	bl	800cbc4 <RegionCommonChanMaskCopy>
            break;
 800e0e2:	e010      	b.n	800e106 <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800e0e4:	4a0a      	ldr	r2, [pc, #40]	; (800e110 <RegionUS915InitDefaults+0x130>)
 800e0e6:	6811      	ldr	r1, [r2, #0]
 800e0e8:	4a08      	ldr	r2, [pc, #32]	; (800e10c <RegionUS915InitDefaults+0x12c>)
 800e0ea:	6812      	ldr	r2, [r2, #0]
 800e0ec:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800e0f0:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800e0f4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e0f8:	4002      	ands	r2, r0
 800e0fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800e0fe:	3301      	adds	r3, #1
 800e100:	b2db      	uxtb	r3, r3
 800e102:	2b05      	cmp	r3, #5
 800e104:	d9ee      	bls.n	800e0e4 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800e106:	b006      	add	sp, #24
 800e108:	bd10      	pop	{r4, pc}
 800e10a:	bf00      	nop
 800e10c:	20000e50 	.word	0x20000e50
 800e110:	20000e4c 	.word	0x20000e4c
 800e114:	20000e48 	.word	0x20000e48
 800e118:	00030d40 	.word	0x00030d40
 800e11c:	35c80160 	.word	0x35c80160
 800e120:	00186a00 	.word	0x00186a00
 800e124:	35d2afc0 	.word	0x35d2afc0

0800e128 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800e128:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800e12a:	290a      	cmp	r1, #10
 800e12c:	d833      	bhi.n	800e196 <RegionUS915Verify+0x6e>
 800e12e:	e8df f001 	tbb	[pc, r1]
 800e132:	3206      	.short	0x3206
 800e134:	0a323232 	.word	0x0a323232
 800e138:	28321e14 	.word	0x28321e14
 800e13c:	28          	.byte	0x28
 800e13d:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800e13e:	6800      	ldr	r0, [r0, #0]
 800e140:	f7ff fdf0 	bl	800dd24 <VerifyRfFreq>
 800e144:	e028      	b.n	800e198 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800e146:	2204      	movs	r2, #4
 800e148:	2100      	movs	r1, #0
 800e14a:	f990 0000 	ldrsb.w	r0, [r0]
 800e14e:	f7fe fcc8 	bl	800cae2 <RegionCommonValueInRange>
 800e152:	3800      	subs	r0, #0
 800e154:	bf18      	it	ne
 800e156:	2001      	movne	r0, #1
 800e158:	e01e      	b.n	800e198 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800e15a:	2205      	movs	r2, #5
 800e15c:	2100      	movs	r1, #0
 800e15e:	f990 0000 	ldrsb.w	r0, [r0]
 800e162:	f7fe fcbe 	bl	800cae2 <RegionCommonValueInRange>
 800e166:	3800      	subs	r0, #0
 800e168:	bf18      	it	ne
 800e16a:	2001      	movne	r0, #1
 800e16c:	e014      	b.n	800e198 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800e16e:	220d      	movs	r2, #13
 800e170:	2108      	movs	r1, #8
 800e172:	f990 0000 	ldrsb.w	r0, [r0]
 800e176:	f7fe fcb4 	bl	800cae2 <RegionCommonValueInRange>
 800e17a:	3800      	subs	r0, #0
 800e17c:	bf18      	it	ne
 800e17e:	2001      	movne	r0, #1
 800e180:	e00a      	b.n	800e198 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800e182:	220e      	movs	r2, #14
 800e184:	2100      	movs	r1, #0
 800e186:	f990 0000 	ldrsb.w	r0, [r0]
 800e18a:	f7fe fcaa 	bl	800cae2 <RegionCommonValueInRange>
 800e18e:	3800      	subs	r0, #0
 800e190:	bf18      	it	ne
 800e192:	2001      	movne	r0, #1
 800e194:	e000      	b.n	800e198 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800e196:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800e198:	bd08      	pop	{r3, pc}
	...

0800e19c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800e19c:	7a03      	ldrb	r3, [r0, #8]
 800e19e:	2b10      	cmp	r3, #16
 800e1a0:	d134      	bne.n	800e20c <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800e1a2:	6843      	ldr	r3, [r0, #4]
 800e1a4:	7bdb      	ldrb	r3, [r3, #15]
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d130      	bne.n	800e20c <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	2a04      	cmp	r2, #4
 800e1b0:	d82b      	bhi.n	800e20a <RegionUS915ApplyCFList+0x6e>
{
 800e1b2:	b530      	push	{r4, r5, lr}
 800e1b4:	e010      	b.n	800e1d8 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800e1b6:	4916      	ldr	r1, [pc, #88]	; (800e210 <RegionUS915ApplyCFList+0x74>)
 800e1b8:	680d      	ldr	r5, [r1, #0]
 800e1ba:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 800e1be:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 800e1c2:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 800e1c6:	4021      	ands	r1, r4
 800e1c8:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	3202      	adds	r2, #2
 800e1d2:	b2d2      	uxtb	r2, r2
 800e1d4:	2b04      	cmp	r3, #4
 800e1d6:	d817      	bhi.n	800e208 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800e1d8:	6841      	ldr	r1, [r0, #4]
 800e1da:	4c0e      	ldr	r4, [pc, #56]	; (800e214 <RegionUS915ApplyCFList+0x78>)
 800e1dc:	6824      	ldr	r4, [r4, #0]
 800e1de:	469c      	mov	ip, r3
 800e1e0:	5c89      	ldrb	r1, [r1, r2]
 800e1e2:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800e1e6:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800e1ea:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800e1ee:	4496      	add	lr, r2
 800e1f0:	f89e e001 	ldrb.w	lr, [lr, #1]
 800e1f4:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800e1f8:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800e1fc:	2b04      	cmp	r3, #4
 800e1fe:	d1da      	bne.n	800e1b6 <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800e200:	b2c9      	uxtb	r1, r1
 800e202:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800e206:	e7d6      	b.n	800e1b6 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800e208:	bd30      	pop	{r4, r5, pc}
 800e20a:	4770      	bx	lr
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	20000e4c 	.word	0x20000e4c
 800e214:	20000e50 	.word	0x20000e50

0800e218 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800e218:	b570      	push	{r4, r5, r6, lr}
 800e21a:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800e21c:	2204      	movs	r2, #4
 800e21e:	2100      	movs	r1, #0
 800e220:	6800      	ldr	r0, [r0, #0]
 800e222:	f7fe fcb9 	bl	800cb98 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800e226:	2801      	cmp	r0, #1
 800e228:	d031      	beq.n	800e28e <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800e22a:	792c      	ldrb	r4, [r5, #4]
 800e22c:	b11c      	cbz	r4, 800e236 <RegionUS915ChanMaskSet+0x1e>
 800e22e:	2c01      	cmp	r4, #1
 800e230:	d023      	beq.n	800e27a <RegionUS915ChanMaskSet+0x62>
 800e232:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800e234:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e236:	4e17      	ldr	r6, [pc, #92]	; (800e294 <RegionUS915ChanMaskSet+0x7c>)
 800e238:	6830      	ldr	r0, [r6, #0]
 800e23a:	2206      	movs	r2, #6
 800e23c:	6829      	ldr	r1, [r5, #0]
 800e23e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e242:	f7fe fcbf 	bl	800cbc4 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800e246:	6830      	ldr	r0, [r6, #0]
 800e248:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 800e24c:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800e250:	2300      	movs	r3, #0
 800e252:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800e256:	e00c      	b.n	800e272 <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800e258:	4b0f      	ldr	r3, [pc, #60]	; (800e298 <RegionUS915ChanMaskSet+0x80>)
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800e260:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800e264:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 800e268:	400b      	ands	r3, r1
 800e26a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800e26e:	3401      	adds	r4, #1
 800e270:	b2e4      	uxtb	r4, r4
 800e272:	2c05      	cmp	r4, #5
 800e274:	d9f0      	bls.n	800e258 <RegionUS915ChanMaskSet+0x40>
    return true;
 800e276:	2001      	movs	r0, #1
 800e278:	e7dc      	b.n	800e234 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e27a:	4b06      	ldr	r3, [pc, #24]	; (800e294 <RegionUS915ChanMaskSet+0x7c>)
 800e27c:	6818      	ldr	r0, [r3, #0]
 800e27e:	2206      	movs	r2, #6
 800e280:	6829      	ldr	r1, [r5, #0]
 800e282:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800e286:	f7fe fc9d 	bl	800cbc4 <RegionCommonChanMaskCopy>
    return true;
 800e28a:	2001      	movs	r0, #1
            break;
 800e28c:	e7d2      	b.n	800e234 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800e28e:	2000      	movs	r0, #0
 800e290:	e7d0      	b.n	800e234 <RegionUS915ChanMaskSet+0x1c>
 800e292:	bf00      	nop
 800e294:	20000e50 	.word	0x20000e50
 800e298:	20000e4c 	.word	0x20000e4c

0800e29c <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	460e      	mov	r6, r1
 800e2a2:	4617      	mov	r7, r2
 800e2a4:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800e2a6:	280d      	cmp	r0, #13
 800e2a8:	bfa8      	it	ge
 800e2aa:	200d      	movge	r0, #13
 800e2ac:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800e2ae:	4d0f      	ldr	r5, [pc, #60]	; (800e2ec <RegionUS915ComputeRxWindowParameters+0x50>)
 800e2b0:	4629      	mov	r1, r5
 800e2b2:	f7fe fee1 	bl	800d078 <RegionCommonGetBandwidth>
 800e2b6:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800e2b8:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e2bc:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800e2c0:	4a0b      	ldr	r2, [pc, #44]	; (800e2f0 <RegionUS915ComputeRxWindowParameters+0x54>)
 800e2c2:	5cd0      	ldrb	r0, [r2, r3]
 800e2c4:	f7fe fda4 	bl	800ce10 <RegionCommonComputeSymbolTimeLoRa>
 800e2c8:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e2ca:	4b0a      	ldr	r3, [pc, #40]	; (800e2f4 <RegionUS915ComputeRxWindowParameters+0x58>)
 800e2cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2ce:	4798      	blx	r3
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	f104 020c 	add.w	r2, r4, #12
 800e2d6:	9201      	str	r2, [sp, #4]
 800e2d8:	3408      	adds	r4, #8
 800e2da:	9400      	str	r4, [sp, #0]
 800e2dc:	463a      	mov	r2, r7
 800e2de:	4631      	mov	r1, r6
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	f7fe fda3 	bl	800ce2c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800e2e6:	b003      	add	sp, #12
 800e2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	080129ac 	.word	0x080129ac
 800e2f0:	08012a00 	.word	0x08012a00
 800e2f4:	08012fbc 	.word	0x08012fbc

0800e2f8 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e2f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2fc:	b08b      	sub	sp, #44	; 0x2c
 800e2fe:	4604      	mov	r4, r0
 800e300:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800e302:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e306:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800e308:	4b22      	ldr	r3, [pc, #136]	; (800e394 <RegionUS915RxConfig+0x9c>)
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	4798      	blx	r3
 800e30e:	2800      	cmp	r0, #0
 800e310:	d13d      	bne.n	800e38e <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e312:	7ce3      	ldrb	r3, [r4, #19]
 800e314:	b933      	cbnz	r3, 800e324 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800e316:	7827      	ldrb	r7, [r4, #0]
 800e318:	f007 0307 	and.w	r3, r7, #7
 800e31c:	4a1e      	ldr	r2, [pc, #120]	; (800e398 <RegionUS915RxConfig+0xa0>)
 800e31e:	4f1f      	ldr	r7, [pc, #124]	; (800e39c <RegionUS915RxConfig+0xa4>)
 800e320:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800e324:	4b1e      	ldr	r3, [pc, #120]	; (800e3a0 <RegionUS915RxConfig+0xa8>)
 800e326:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800e32a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800e394 <RegionUS915RxConfig+0x9c>
 800e32e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e332:	4638      	mov	r0, r7
 800e334:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e336:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800e33a:	7ca3      	ldrb	r3, [r4, #18]
 800e33c:	9309      	str	r3, [sp, #36]	; 0x24
 800e33e:	2001      	movs	r0, #1
 800e340:	9008      	str	r0, [sp, #32]
 800e342:	2200      	movs	r2, #0
 800e344:	9207      	str	r2, [sp, #28]
 800e346:	9206      	str	r2, [sp, #24]
 800e348:	9205      	str	r2, [sp, #20]
 800e34a:	9204      	str	r2, [sp, #16]
 800e34c:	9203      	str	r2, [sp, #12]
 800e34e:	8923      	ldrh	r3, [r4, #8]
 800e350:	9302      	str	r3, [sp, #8]
 800e352:	2308      	movs	r3, #8
 800e354:	9301      	str	r3, [sp, #4]
 800e356:	9200      	str	r2, [sp, #0]
 800e358:	4603      	mov	r3, r0
 800e35a:	464a      	mov	r2, r9
 800e35c:	78a1      	ldrb	r1, [r4, #2]
 800e35e:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 800e360:	7c63      	ldrb	r3, [r4, #17]
 800e362:	b18b      	cbz	r3, 800e388 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800e364:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <RegionUS915RxConfig+0xac>)
 800e366:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e368:	4b0a      	ldr	r3, [pc, #40]	; (800e394 <RegionUS915RxConfig+0x9c>)
 800e36a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e36c:	310d      	adds	r1, #13
 800e36e:	b2c9      	uxtb	r1, r1
 800e370:	2001      	movs	r0, #1
 800e372:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e374:	4632      	mov	r2, r6
 800e376:	4639      	mov	r1, r7
 800e378:	7ce0      	ldrb	r0, [r4, #19]
 800e37a:	f7fe fe8f 	bl	800d09c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800e37e:	702e      	strb	r6, [r5, #0]
    return true;
 800e380:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800e382:	b00b      	add	sp, #44	; 0x2c
 800e384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800e388:	4b07      	ldr	r3, [pc, #28]	; (800e3a8 <RegionUS915RxConfig+0xb0>)
 800e38a:	5d99      	ldrb	r1, [r3, r6]
 800e38c:	e7ec      	b.n	800e368 <RegionUS915RxConfig+0x70>
        return false;
 800e38e:	2000      	movs	r0, #0
 800e390:	e7f7      	b.n	800e382 <RegionUS915RxConfig+0x8a>
 800e392:	bf00      	nop
 800e394:	08012fbc 	.word	0x08012fbc
 800e398:	000927c0 	.word	0x000927c0
 800e39c:	370870a0 	.word	0x370870a0
 800e3a0:	08012a00 	.word	0x08012a00
 800e3a4:	08012a10 	.word	0x08012a10
 800e3a8:	08012a20 	.word	0x08012a20

0800e3ac <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b0:	b08d      	sub	sp, #52	; 0x34
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	468b      	mov	fp, r1
 800e3b6:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800e3b8:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800e3bc:	4b32      	ldr	r3, [pc, #200]	; (800e488 <RegionUS915TxConfig+0xdc>)
 800e3be:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800e3c2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800e48c <RegionUS915TxConfig+0xe0>
 800e3c6:	f8d9 3000 	ldr.w	r3, [r9]
 800e3ca:	7801      	ldrb	r1, [r0, #0]
 800e3cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e3d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e3d4:	7a49      	ldrb	r1, [r1, #9]
 800e3d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e3da:	482d      	ldr	r0, [pc, #180]	; (800e490 <RegionUS915TxConfig+0xe4>)
 800e3dc:	6800      	ldr	r0, [r0, #0]
 800e3de:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e3e2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e3e6:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800e3ea:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800e3ee:	f7ff fce7 	bl	800ddc0 <LimitTxPower>
 800e3f2:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800e3f4:	4927      	ldr	r1, [pc, #156]	; (800e494 <RegionUS915TxConfig+0xe8>)
 800e3f6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e3fa:	f7fe fe3d 	bl	800d078 <RegionCommonGetBandwidth>
 800e3fe:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800e400:	2200      	movs	r2, #0
 800e402:	4925      	ldr	r1, [pc, #148]	; (800e498 <RegionUS915TxConfig+0xec>)
 800e404:	4630      	mov	r0, r6
 800e406:	f7fe fd4d 	bl	800cea4 <RegionCommonComputeTxPower>
 800e40a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e40c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800e49c <RegionUS915TxConfig+0xf0>
 800e410:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800e414:	f8d9 1000 	ldr.w	r1, [r9]
 800e418:	7823      	ldrb	r3, [r4, #0]
 800e41a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e41e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e422:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e424:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e428:	9308      	str	r3, [sp, #32]
 800e42a:	2200      	movs	r2, #0
 800e42c:	9207      	str	r2, [sp, #28]
 800e42e:	9206      	str	r2, [sp, #24]
 800e430:	9205      	str	r2, [sp, #20]
 800e432:	2501      	movs	r5, #1
 800e434:	9504      	str	r5, [sp, #16]
 800e436:	9203      	str	r2, [sp, #12]
 800e438:	2308      	movs	r3, #8
 800e43a:	9302      	str	r3, [sp, #8]
 800e43c:	9501      	str	r5, [sp, #4]
 800e43e:	f8cd a000 	str.w	sl, [sp]
 800e442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e444:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e446:	4628      	mov	r0, r5
 800e448:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800e44c:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e44e:	f8d9 2000 	ldr.w	r2, [r9]
 800e452:	7823      	ldrb	r3, [r4, #0]
 800e454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e458:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e45c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e460:	f7fe fe3e 	bl	800d0e0 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800e464:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800e468:	7b21      	ldrb	r1, [r4, #12]
 800e46a:	4628      	mov	r0, r5
 800e46c:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e46e:	89a1      	ldrh	r1, [r4, #12]
 800e470:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e474:	f7ff fc86 	bl	800dd84 <GetTimeOnAir>
 800e478:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800e47a:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800e47e:	4628      	mov	r0, r5
 800e480:	b00d      	add	sp, #52	; 0x34
 800e482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e486:	bf00      	nop
 800e488:	08012a00 	.word	0x08012a00
 800e48c:	20000e50 	.word	0x20000e50
 800e490:	20000e48 	.word	0x20000e48
 800e494:	080129ac 	.word	0x080129ac
 800e498:	41f00000 	.word	0x41f00000
 800e49c:	08012fbc 	.word	0x08012fbc

0800e4a0 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e4a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4a4:	b091      	sub	sp, #68	; 0x44
 800e4a6:	4605      	mov	r5, r0
 800e4a8:	4688      	mov	r8, r1
 800e4aa:	4617      	mov	r7, r2
 800e4ac:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e4ae:	2400      	movs	r4, #0
 800e4b0:	940e      	str	r4, [sp, #56]	; 0x38
 800e4b2:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800e4b6:	940b      	str	r4, [sp, #44]	; 0x2c
 800e4b8:	940c      	str	r4, [sp, #48]	; 0x30
 800e4ba:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800e4bc:	4b97      	ldr	r3, [pc, #604]	; (800e71c <RegionUS915LinkAdrReq+0x27c>)
 800e4be:	6819      	ldr	r1, [r3, #0]
 800e4c0:	2206      	movs	r2, #6
 800e4c2:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800e4c6:	a80b      	add	r0, sp, #44	; 0x2c
 800e4c8:	f7fe fb7c 	bl	800cbc4 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e4cc:	e00d      	b.n	800e4ea <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800e4ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e4d2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800e4d6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800e4da:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800e4de:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800e4e2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800e4e6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e4ea:	7a2b      	ldrb	r3, [r5, #8]
 800e4ec:	42a3      	cmp	r3, r4
 800e4ee:	f240 8081 	bls.w	800e5f4 <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e4f2:	6868      	ldr	r0, [r5, #4]
 800e4f4:	a90e      	add	r1, sp, #56	; 0x38
 800e4f6:	4420      	add	r0, r4
 800e4f8:	f7fe fc14 	bl	800cd24 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d079      	beq.n	800e5f4 <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 800e500:	4404      	add	r4, r0
 800e502:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800e504:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800e508:	f1bc 0f06 	cmp.w	ip, #6
 800e50c:	d0df      	beq.n	800e4ce <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800e50e:	f1bc 0f07 	cmp.w	ip, #7
 800e512:	d00a      	beq.n	800e52a <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800e514:	f1bc 0f05 	cmp.w	ip, #5
 800e518:	d068      	beq.n	800e5ec <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800e51a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e51e:	aa10      	add	r2, sp, #64	; 0x40
 800e520:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800e524:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800e528:	e7df      	b.n	800e4ea <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800e52a:	2300      	movs	r3, #0
 800e52c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800e530:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800e534:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800e538:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800e53c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800e540:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800e544:	e7d1      	b.n	800e4ea <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800e546:	aa10      	add	r2, sp, #64	; 0x40
 800e548:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e54c:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e550:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800e554:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800e558:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e55c:	4313      	orrs	r3, r2
 800e55e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800e562:	3101      	adds	r1, #1
 800e564:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800e566:	f10c 0c01 	add.w	ip, ip, #1
 800e56a:	fa5f fc8c 	uxtb.w	ip, ip
 800e56e:	f1bc 0f07 	cmp.w	ip, #7
 800e572:	d8ba      	bhi.n	800e4ea <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800e574:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800e578:	2301      	movs	r3, #1
 800e57a:	fa03 f30c 	lsl.w	r3, r3, ip
 800e57e:	421a      	tst	r2, r3
 800e580:	d011      	beq.n	800e5a6 <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 800e582:	f01c 0f01 	tst.w	ip, #1
 800e586:	d1de      	bne.n	800e546 <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800e588:	aa10      	add	r2, sp, #64	; 0x40
 800e58a:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e58e:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e592:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800e596:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800e59a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800e5a4:	e7df      	b.n	800e566 <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 800e5a6:	f01c 0f01 	tst.w	ip, #1
 800e5aa:	d10f      	bne.n	800e5cc <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800e5ac:	aa10      	add	r2, sp, #64	; 0x40
 800e5ae:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e5b2:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e5b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800e5ba:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800e5be:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e5c2:	ea22 0303 	bic.w	r3, r2, r3
 800e5c6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800e5ca:	e7cc      	b.n	800e566 <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800e5cc:	aa10      	add	r2, sp, #64	; 0x40
 800e5ce:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800e5d2:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800e5d6:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800e5da:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e5de:	ea22 0303 	bic.w	r3, r2, r3
 800e5e2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800e5e6:	3101      	adds	r1, #1
 800e5e8:	b2c9      	uxtb	r1, r1
 800e5ea:	e7bc      	b.n	800e566 <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 800e5ec:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800e5f0:	4661      	mov	r1, ip
 800e5f2:	e7bc      	b.n	800e56e <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800e5f4:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e5f8:	2b03      	cmp	r3, #3
 800e5fa:	dd58      	ble.n	800e6ae <RegionUS915LinkAdrReq+0x20e>
 800e5fc:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e600:	2302      	movs	r3, #2
 800e602:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800e606:	7a6b      	ldrb	r3, [r5, #9]
 800e608:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800e60c:	a809      	add	r0, sp, #36	; 0x24
 800e60e:	f7ff fbf3 	bl	800ddf8 <RegionUS915GetPhyParam>
 800e612:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800e614:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e618:	7aab      	ldrb	r3, [r5, #10]
 800e61a:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e61e:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e622:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e626:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800e62a:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e62e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e632:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e636:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800e63a:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e63e:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800e642:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e646:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800e64a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800e64e:	2348      	movs	r3, #72	; 0x48
 800e650:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800e654:	ab0b      	add	r3, sp, #44	; 0x2c
 800e656:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e658:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800e65c:	2304      	movs	r3, #4
 800e65e:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800e662:	4b2e      	ldr	r3, [pc, #184]	; (800e71c <RegionUS915LinkAdrReq+0x27c>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800e668:	230e      	movs	r3, #14
 800e66a:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800e66e:	2300      	movs	r3, #0
 800e670:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e674:	682b      	ldr	r3, [r5, #0]
 800e676:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e678:	ab0e      	add	r3, sp, #56	; 0x38
 800e67a:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800e67e:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800e682:	4668      	mov	r0, sp
 800e684:	f7fe fb6c 	bl	800cd60 <RegionCommonLinkAdrReqVerifyParams>
 800e688:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e68a:	2807      	cmp	r0, #7
 800e68c:	d01c      	beq.n	800e6c8 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800e68e:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e692:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800e696:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800e69a:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800e69c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e6a0:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800e6a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e6a4:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	b011      	add	sp, #68	; 0x44
 800e6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800e6ae:	2204      	movs	r2, #4
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	a80b      	add	r0, sp, #44	; 0x2c
 800e6b4:	f7fe fa70 	bl	800cb98 <RegionCommonCountChannels>
 800e6b8:	2801      	cmp	r0, #1
 800e6ba:	d902      	bls.n	800e6c2 <RegionUS915LinkAdrReq+0x222>
 800e6bc:	f04f 0907 	mov.w	r9, #7
 800e6c0:	e79e      	b.n	800e600 <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 800e6c2:	f04f 0906 	mov.w	r9, #6
 800e6c6:	e79b      	b.n	800e600 <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800e6c8:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800e71c <RegionUS915LinkAdrReq+0x27c>
 800e6cc:	f8d9 0000 	ldr.w	r0, [r9]
 800e6d0:	2206      	movs	r2, #6
 800e6d2:	a90b      	add	r1, sp, #44	; 0x2c
 800e6d4:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e6d8:	f7fe fa74 	bl	800cbc4 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800e6dc:	4b10      	ldr	r3, [pc, #64]	; (800e720 <RegionUS915LinkAdrReq+0x280>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f8d9 2000 	ldr.w	r2, [r9]
 800e6e4:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800e6e8:	8818      	ldrh	r0, [r3, #0]
 800e6ea:	4001      	ands	r1, r0
 800e6ec:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800e6ee:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 800e6f2:	8858      	ldrh	r0, [r3, #2]
 800e6f4:	4001      	ands	r1, r0
 800e6f6:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800e6f8:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 800e6fc:	8898      	ldrh	r0, [r3, #4]
 800e6fe:	4001      	ands	r1, r0
 800e700:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800e702:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 800e706:	88d8      	ldrh	r0, [r3, #6]
 800e708:	4001      	ands	r1, r0
 800e70a:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800e70c:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 800e710:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800e712:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 800e716:	815a      	strh	r2, [r3, #10]
 800e718:	e7b9      	b.n	800e68e <RegionUS915LinkAdrReq+0x1ee>
 800e71a:	bf00      	nop
 800e71c:	20000e50 	.word	0x20000e50
 800e720:	20000e4c 	.word	0x20000e4c

0800e724 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e724:	b538      	push	{r3, r4, r5, lr}
 800e726:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800e728:	6840      	ldr	r0, [r0, #4]
 800e72a:	f7ff fafb 	bl	800dd24 <VerifyRfFreq>
 800e72e:	b310      	cbz	r0, 800e776 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800e730:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800e732:	220d      	movs	r2, #13
 800e734:	2108      	movs	r1, #8
 800e736:	f994 0000 	ldrsb.w	r0, [r4]
 800e73a:	f7fe f9d2 	bl	800cae2 <RegionCommonValueInRange>
 800e73e:	b908      	cbnz	r0, 800e744 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800e740:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800e744:	2207      	movs	r2, #7
 800e746:	2105      	movs	r1, #5
 800e748:	f994 0000 	ldrsb.w	r0, [r4]
 800e74c:	f7fe f9c9 	bl	800cae2 <RegionCommonValueInRange>
 800e750:	2801      	cmp	r0, #1
 800e752:	d003      	beq.n	800e75c <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800e754:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800e758:	2b0d      	cmp	r3, #13
 800e75a:	dd01      	ble.n	800e760 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800e75c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800e760:	2203      	movs	r2, #3
 800e762:	2100      	movs	r1, #0
 800e764:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e768:	f7fe f9bb 	bl	800cae2 <RegionCommonValueInRange>
 800e76c:	b908      	cbnz	r0, 800e772 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800e76e:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800e772:	4628      	mov	r0, r5
 800e774:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800e776:	2506      	movs	r5, #6
 800e778:	e7db      	b.n	800e732 <RegionUS915RxParamSetupReq+0xe>

0800e77a <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e77a:	f04f 30ff 	mov.w	r0, #4294967295
 800e77e:	4770      	bx	lr

0800e780 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800e780:	f04f 30ff 	mov.w	r0, #4294967295
 800e784:	4770      	bx	lr

0800e786 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e786:	f04f 30ff 	mov.w	r0, #4294967295
 800e78a:	4770      	bx	lr

0800e78c <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800e78c:	b999      	cbnz	r1, 800e7b6 <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800e78e:	4b0e      	ldr	r3, [pc, #56]	; (800e7c8 <RegionUS915AlternateDr+0x3c>)
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	7b53      	ldrb	r3, [r2, #13]
 800e794:	3301      	adds	r3, #1
 800e796:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800e798:	4b0b      	ldr	r3, [pc, #44]	; (800e7c8 <RegionUS915AlternateDr+0x3c>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	7b5a      	ldrb	r2, [r3, #13]
 800e79e:	4b0b      	ldr	r3, [pc, #44]	; (800e7cc <RegionUS915AlternateDr+0x40>)
 800e7a0:	fba3 1302 	umull	r1, r3, r3, r2
 800e7a4:	085b      	lsrs	r3, r3, #1
 800e7a6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800e7aa:	1ad3      	subs	r3, r2, r3
 800e7ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e7b0:	d007      	beq.n	800e7c2 <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800e7b2:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800e7b4:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800e7b6:	4b04      	ldr	r3, [pc, #16]	; (800e7c8 <RegionUS915AlternateDr+0x3c>)
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	7b53      	ldrb	r3, [r2, #13]
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	7353      	strb	r3, [r2, #13]
 800e7c0:	e7ea      	b.n	800e798 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 800e7c2:	2004      	movs	r0, #4
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop
 800e7c8:	20000e4c 	.word	0x20000e4c
 800e7cc:	38e38e39 	.word	0x38e38e39

0800e7d0 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d4:	b0a4      	sub	sp, #144	; 0x90
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	460e      	mov	r6, r1
 800e7da:	4690      	mov	r8, r2
 800e7dc:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800e7de:	2500      	movs	r5, #0
 800e7e0:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800e7e4:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800e7e8:	9511      	str	r5, [sp, #68]	; 0x44
 800e7ea:	2244      	movs	r2, #68	; 0x44
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	a812      	add	r0, sp, #72	; 0x48
 800e7f0:	f003 fc90 	bl	8012114 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800e7f4:	2204      	movs	r2, #4
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	4b49      	ldr	r3, [pc, #292]	; (800e920 <RegionUS915NextChannel+0x150>)
 800e7fa:	6818      	ldr	r0, [r3, #0]
 800e7fc:	f7fe f9cc 	bl	800cb98 <RegionCommonCountChannels>
 800e800:	2800      	cmp	r0, #0
 800e802:	d052      	beq.n	800e8aa <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800e804:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e808:	2b03      	cmp	r3, #3
 800e80a:	dd08      	ble.n	800e81e <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800e80c:	4b44      	ldr	r3, [pc, #272]	; (800e920 <RegionUS915NextChannel+0x150>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	7a1a      	ldrb	r2, [r3, #8]
 800e812:	b922      	cbnz	r2, 800e81e <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800e814:	4a43      	ldr	r2, [pc, #268]	; (800e924 <RegionUS915NextChannel+0x154>)
 800e816:	6812      	ldr	r2, [r2, #0]
 800e818:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 800e81c:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e81e:	7a63      	ldrb	r3, [r4, #9]
 800e820:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e824:	7a23      	ldrb	r3, [r4, #8]
 800e826:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800e82a:	4b3d      	ldr	r3, [pc, #244]	; (800e920 <RegionUS915NextChannel+0x150>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e830:	4b3c      	ldr	r3, [pc, #240]	; (800e924 <RegionUS915NextChannel+0x154>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800e836:	4b3c      	ldr	r3, [pc, #240]	; (800e928 <RegionUS915NextChannel+0x158>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800e83c:	2348      	movs	r3, #72	; 0x48
 800e83e:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800e842:	2300      	movs	r3, #0
 800e844:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e846:	6823      	ldr	r3, [r4, #0]
 800e848:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e84a:	6863      	ldr	r3, [r4, #4]
 800e84c:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e84e:	7aa3      	ldrb	r3, [r4, #10]
 800e850:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800e854:	2301      	movs	r3, #1
 800e856:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e85a:	ab03      	add	r3, sp, #12
 800e85c:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e85e:	ab0c      	add	r3, sp, #48	; 0x30
 800e860:	f104 020c 	add.w	r2, r4, #12
 800e864:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e868:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e86c:	7d23      	ldrb	r3, [r4, #20]
 800e86e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e872:	8ae1      	ldrh	r1, [r4, #22]
 800e874:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e878:	f7ff fa84 	bl	800dd84 <GetTimeOnAir>
 800e87c:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e87e:	f8cd 8004 	str.w	r8, [sp, #4]
 800e882:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800e88c:	aa11      	add	r2, sp, #68	; 0x44
 800e88e:	4639      	mov	r1, r7
 800e890:	a809      	add	r0, sp, #36	; 0x24
 800e892:	f7fe fb83 	bl	800cf9c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e896:	4605      	mov	r5, r0
 800e898:	2800      	cmp	r0, #0
 800e89a:	d13c      	bne.n	800e916 <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 800e89c:	7a63      	ldrb	r3, [r4, #9]
 800e89e:	b98b      	cbnz	r3, 800e8c4 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800e8a0:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e8a4:	b1db      	cbz	r3, 800e8de <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	e026      	b.n	800e8f8 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800e8aa:	4d1d      	ldr	r5, [pc, #116]	; (800e920 <RegionUS915NextChannel+0x150>)
 800e8ac:	4b1d      	ldr	r3, [pc, #116]	; (800e924 <RegionUS915NextChannel+0x154>)
 800e8ae:	6819      	ldr	r1, [r3, #0]
 800e8b0:	2204      	movs	r2, #4
 800e8b2:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800e8b6:	6828      	ldr	r0, [r5, #0]
 800e8b8:	f7fe f984 	bl	800cbc4 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800e8bc:	682b      	ldr	r3, [r5, #0]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	731a      	strb	r2, [r3, #12]
 800e8c2:	e79f      	b.n	800e804 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e8c4:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800e8c8:	3901      	subs	r1, #1
 800e8ca:	f000 ff5f 	bl	800f78c <randr>
 800e8ce:	f100 0390 	add.w	r3, r0, #144	; 0x90
 800e8d2:	eb0d 0003 	add.w	r0, sp, r3
 800e8d6:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800e8da:	7033      	strb	r3, [r6, #0]
 800e8dc:	e015      	b.n	800e90a <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800e8de:	4b10      	ldr	r3, [pc, #64]	; (800e920 <RegionUS915NextChannel+0x150>)
 800e8e0:	6818      	ldr	r0, [r3, #0]
 800e8e2:	4632      	mov	r2, r6
 800e8e4:	f100 010c 	add.w	r1, r0, #12
 800e8e8:	f7fd ffde 	bl	800c8a8 <RegionBaseUSComputeNext125kHzJoinChannel>
 800e8ec:	2803      	cmp	r0, #3
 800e8ee:	d10c      	bne.n	800e90a <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800e8f0:	4605      	mov	r5, r0
 800e8f2:	e010      	b.n	800e916 <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800e8f8:	4a09      	ldr	r2, [pc, #36]	; (800e920 <RegionUS915NextChannel+0x150>)
 800e8fa:	6812      	ldr	r2, [r2, #0]
 800e8fc:	7a10      	ldrb	r0, [r2, #8]
 800e8fe:	4118      	asrs	r0, r3
 800e900:	f010 0f01 	tst.w	r0, #1
 800e904:	d0f6      	beq.n	800e8f4 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 800e906:	3340      	adds	r3, #64	; 0x40
 800e908:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800e90a:	2248      	movs	r2, #72	; 0x48
 800e90c:	7831      	ldrb	r1, [r6, #0]
 800e90e:	4b04      	ldr	r3, [pc, #16]	; (800e920 <RegionUS915NextChannel+0x150>)
 800e910:	6818      	ldr	r0, [r3, #0]
 800e912:	f7fe f928 	bl	800cb66 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800e916:	4628      	mov	r0, r5
 800e918:	b024      	add	sp, #144	; 0x90
 800e91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e91e:	bf00      	nop
 800e920:	20000e4c 	.word	0x20000e4c
 800e924:	20000e50 	.word	0x20000e50
 800e928:	20000e48 	.word	0x20000e48

0800e92c <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800e92c:	4b04      	ldr	r3, [pc, #16]	; (800e940 <RegionUS915ApplyDrOffset+0x14>)
 800e92e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e932:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800e934:	2800      	cmp	r0, #0
 800e936:	db01      	blt.n	800e93c <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800e938:	b2c0      	uxtb	r0, r0
 800e93a:	4770      	bx	lr
        datarate = DR_0;
 800e93c:	2000      	movs	r0, #0
 800e93e:	e7fb      	b.n	800e938 <RegionUS915ApplyDrOffset+0xc>
 800e940:	080129ec 	.word	0x080129ec

0800e944 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800e944:	b510      	push	{r4, lr}
 800e946:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800e948:	2210      	movs	r2, #16
 800e94a:	2100      	movs	r1, #0
 800e94c:	30f1      	adds	r0, #241	; 0xf1
 800e94e:	f000 ff42 	bl	800f7d6 <memset1>
    ctx->M_n = 0;
 800e952:	2100      	movs	r1, #0
 800e954:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800e958:	22f0      	movs	r2, #240	; 0xf0
 800e95a:	4620      	mov	r0, r4
 800e95c:	f000 ff3b 	bl	800f7d6 <memset1>
}
 800e960:	bd10      	pop	{r4, pc}

0800e962 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800e962:	b508      	push	{r3, lr}
 800e964:	4602      	mov	r2, r0
 800e966:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800e968:	2110      	movs	r1, #16
 800e96a:	f000 fb3b 	bl	800efe4 <lorawan_aes_set_key>
}
 800e96e:	bd08      	pop	{r3, pc}

0800e970 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800e970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e974:	b084      	sub	sp, #16
 800e976:	4604      	mov	r4, r0
 800e978:	460d      	mov	r5, r1
 800e97a:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800e97c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800e980:	2b00      	cmp	r3, #0
 800e982:	d054      	beq.n	800ea2e <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800e984:	f1c3 0810 	rsb	r8, r3, #16
 800e988:	4647      	mov	r7, r8
 800e98a:	4590      	cmp	r8, r2
 800e98c:	bf28      	it	cs
 800e98e:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800e990:	f200 1001 	addw	r0, r0, #257	; 0x101
 800e994:	b2ba      	uxth	r2, r7
 800e996:	4418      	add	r0, r3
 800e998:	f000 ff05 	bl	800f7a6 <memcpy1>
        ctx->M_n += mlen;
 800e99c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e9a0:	443b      	add	r3, r7
 800e9a2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800e9a6:	2b0f      	cmp	r3, #15
 800e9a8:	d94d      	bls.n	800ea46 <AES_CMAC_Update+0xd6>
 800e9aa:	45b0      	cmp	r8, r6
 800e9ac:	d24b      	bcs.n	800ea46 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	e008      	b.n	800e9c4 <AES_CMAC_Update+0x54>
 800e9b2:	18e2      	adds	r2, r4, r3
 800e9b4:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800e9b8:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800e9bc:	4041      	eors	r1, r0
 800e9be:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	2b0f      	cmp	r3, #15
 800e9c6:	ddf4      	ble.n	800e9b2 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e9c8:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800e9cc:	2210      	movs	r2, #16
 800e9ce:	4641      	mov	r1, r8
 800e9d0:	4668      	mov	r0, sp
 800e9d2:	f000 fee8 	bl	800f7a6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e9d6:	4622      	mov	r2, r4
 800e9d8:	4669      	mov	r1, sp
 800e9da:	4668      	mov	r0, sp
 800e9dc:	f000 fb84 	bl	800f0e8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e9e0:	2210      	movs	r2, #16
 800e9e2:	4669      	mov	r1, sp
 800e9e4:	4640      	mov	r0, r8
 800e9e6:	f000 fede 	bl	800f7a6 <memcpy1>

        data += mlen;
 800e9ea:	443d      	add	r5, r7
        len -= mlen;
 800e9ec:	1bf6      	subs	r6, r6, r7
 800e9ee:	e01e      	b.n	800ea2e <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800e9f0:	eb04 0e03 	add.w	lr, r4, r3
 800e9f4:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800e9f8:	5cea      	ldrb	r2, [r5, r3]
 800e9fa:	ea8c 0c02 	eor.w	ip, ip, r2
 800e9fe:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800ea02:	3301      	adds	r3, #1
 800ea04:	2b0f      	cmp	r3, #15
 800ea06:	ddf3      	ble.n	800e9f0 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ea08:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800ea0c:	2210      	movs	r2, #16
 800ea0e:	4639      	mov	r1, r7
 800ea10:	4668      	mov	r0, sp
 800ea12:	f000 fec8 	bl	800f7a6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ea16:	4622      	mov	r2, r4
 800ea18:	4669      	mov	r1, sp
 800ea1a:	4668      	mov	r0, sp
 800ea1c:	f000 fb64 	bl	800f0e8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ea20:	2210      	movs	r2, #16
 800ea22:	4669      	mov	r1, sp
 800ea24:	4638      	mov	r0, r7
 800ea26:	f000 febe 	bl	800f7a6 <memcpy1>

        data += 16;
 800ea2a:	3510      	adds	r5, #16
        len -= 16;
 800ea2c:	3e10      	subs	r6, #16
    while( len > 16 )
 800ea2e:	2e10      	cmp	r6, #16
 800ea30:	d901      	bls.n	800ea36 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800ea32:	2300      	movs	r3, #0
 800ea34:	e7e6      	b.n	800ea04 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ea36:	b2b2      	uxth	r2, r6
 800ea38:	4629      	mov	r1, r5
 800ea3a:	f204 1001 	addw	r0, r4, #257	; 0x101
 800ea3e:	f000 feb2 	bl	800f7a6 <memcpy1>
    ctx->M_n = len;
 800ea42:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800ea46:	b004      	add	sp, #16
 800ea48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ea4c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ea4c:	b530      	push	{r4, r5, lr}
 800ea4e:	b089      	sub	sp, #36	; 0x24
 800ea50:	4605      	mov	r5, r0
 800ea52:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ea54:	2210      	movs	r2, #16
 800ea56:	2100      	movs	r1, #0
 800ea58:	eb0d 0002 	add.w	r0, sp, r2
 800ea5c:	f000 febb 	bl	800f7d6 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ea60:	4622      	mov	r2, r4
 800ea62:	a904      	add	r1, sp, #16
 800ea64:	4608      	mov	r0, r1
 800ea66:	f000 fb3f 	bl	800f0e8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ea6a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	db01      	blt.n	800ea76 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800ea72:	2300      	movs	r3, #0
 800ea74:	e030      	b.n	800ead8 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800ea76:	2300      	movs	r3, #0
 800ea78:	2b0e      	cmp	r3, #14
 800ea7a:	dc11      	bgt.n	800eaa0 <AES_CMAC_Final+0x54>
 800ea7c:	f103 0220 	add.w	r2, r3, #32
 800ea80:	eb0d 0102 	add.w	r1, sp, r2
 800ea84:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	f103 0220 	add.w	r2, r3, #32
 800ea8e:	446a      	add	r2, sp
 800ea90:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800ea94:	09d2      	lsrs	r2, r2, #7
 800ea96:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800ea9a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800ea9e:	e7eb      	b.n	800ea78 <AES_CMAC_Final+0x2c>
 800eaa0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800eaac:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800eab0:	f88d 301f 	strb.w	r3, [sp, #31]
 800eab4:	e017      	b.n	800eae6 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800eab6:	f103 0220 	add.w	r2, r3, #32
 800eaba:	eb0d 0102 	add.w	r1, sp, r2
 800eabe:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800eac2:	3301      	adds	r3, #1
 800eac4:	f103 0220 	add.w	r2, r3, #32
 800eac8:	446a      	add	r2, sp
 800eaca:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800eace:	09d2      	lsrs	r2, r2, #7
 800ead0:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800ead4:	f801 2c10 	strb.w	r2, [r1, #-16]
 800ead8:	2b0e      	cmp	r3, #14
 800eada:	ddec      	ble.n	800eab6 <AES_CMAC_Final+0x6a>
 800eadc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800eae0:	005b      	lsls	r3, r3, #1
 800eae2:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800eae6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800eaea:	2810      	cmp	r0, #16
 800eaec:	d014      	beq.n	800eb18 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800eaee:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	db30      	blt.n	800eb58 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	e041      	b.n	800eb7e <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800eafa:	18e1      	adds	r1, r4, r3
 800eafc:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800eb00:	f103 0020 	add.w	r0, r3, #32
 800eb04:	4468      	add	r0, sp
 800eb06:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800eb0a:	4042      	eors	r2, r0
 800eb0c:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800eb10:	3301      	adds	r3, #1
 800eb12:	2b0f      	cmp	r3, #15
 800eb14:	ddf1      	ble.n	800eafa <AES_CMAC_Final+0xae>
 800eb16:	e059      	b.n	800ebcc <AES_CMAC_Final+0x180>
 800eb18:	2300      	movs	r3, #0
 800eb1a:	e7fa      	b.n	800eb12 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800eb1c:	f103 0220 	add.w	r2, r3, #32
 800eb20:	eb0d 0102 	add.w	r1, sp, r2
 800eb24:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	f103 0220 	add.w	r2, r3, #32
 800eb2e:	446a      	add	r2, sp
 800eb30:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800eb34:	09d2      	lsrs	r2, r2, #7
 800eb36:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800eb3a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800eb3e:	2b0e      	cmp	r3, #14
 800eb40:	ddec      	ble.n	800eb1c <AES_CMAC_Final+0xd0>
 800eb42:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800eb46:	005b      	lsls	r3, r3, #1
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800eb4e:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800eb52:	f88d 301f 	strb.w	r3, [sp, #31]
 800eb56:	e019      	b.n	800eb8c <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800eb58:	2300      	movs	r3, #0
 800eb5a:	e7f0      	b.n	800eb3e <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800eb5c:	f103 0220 	add.w	r2, r3, #32
 800eb60:	eb0d 0102 	add.w	r1, sp, r2
 800eb64:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	f103 0220 	add.w	r2, r3, #32
 800eb6e:	446a      	add	r2, sp
 800eb70:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800eb74:	09d2      	lsrs	r2, r2, #7
 800eb76:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800eb7a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800eb7e:	2b0e      	cmp	r3, #14
 800eb80:	ddec      	ble.n	800eb5c <AES_CMAC_Final+0x110>
 800eb82:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800eb86:	005b      	lsls	r3, r3, #1
 800eb88:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800eb8c:	4420      	add	r0, r4
 800eb8e:	2380      	movs	r3, #128	; 0x80
 800eb90:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800eb94:	e003      	b.n	800eb9e <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800eb96:	4423      	add	r3, r4
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800eb9e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800eba2:	3301      	adds	r3, #1
 800eba4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800eba8:	2b0f      	cmp	r3, #15
 800ebaa:	d9f4      	bls.n	800eb96 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800ebac:	2300      	movs	r3, #0
 800ebae:	e00b      	b.n	800ebc8 <AES_CMAC_Final+0x17c>
 800ebb0:	18e1      	adds	r1, r4, r3
 800ebb2:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800ebb6:	f103 0020 	add.w	r0, r3, #32
 800ebba:	4468      	add	r0, sp
 800ebbc:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800ebc0:	4042      	eors	r2, r0
 800ebc2:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	2b0f      	cmp	r3, #15
 800ebca:	ddf1      	ble.n	800ebb0 <AES_CMAC_Final+0x164>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	e009      	b.n	800ebe4 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800ebd0:	18e2      	adds	r2, r4, r3
 800ebd2:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800ebd6:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800ebda:	ea8c 0c01 	eor.w	ip, ip, r1
 800ebde:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	2b0f      	cmp	r3, #15
 800ebe6:	ddf3      	ble.n	800ebd0 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ebe8:	2210      	movs	r2, #16
 800ebea:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800ebee:	4668      	mov	r0, sp
 800ebf0:	f000 fdd9 	bl	800f7a6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ebf4:	4622      	mov	r2, r4
 800ebf6:	4629      	mov	r1, r5
 800ebf8:	4668      	mov	r0, sp
 800ebfa:	f000 fa75 	bl	800f0e8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800ebfe:	2210      	movs	r2, #16
 800ec00:	2100      	movs	r1, #0
 800ec02:	eb0d 0002 	add.w	r0, sp, r2
 800ec06:	f000 fde6 	bl	800f7d6 <memset1>
}
 800ec0a:	b009      	add	sp, #36	; 0x24
 800ec0c:	bd30      	pop	{r4, r5, pc}

0800ec0e <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ec0e:	780b      	ldrb	r3, [r1, #0]
 800ec10:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ec12:	784b      	ldrb	r3, [r1, #1]
 800ec14:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ec16:	788b      	ldrb	r3, [r1, #2]
 800ec18:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ec1a:	78cb      	ldrb	r3, [r1, #3]
 800ec1c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ec1e:	790b      	ldrb	r3, [r1, #4]
 800ec20:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ec22:	794b      	ldrb	r3, [r1, #5]
 800ec24:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ec26:	798b      	ldrb	r3, [r1, #6]
 800ec28:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ec2a:	79cb      	ldrb	r3, [r1, #7]
 800ec2c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ec2e:	7a0b      	ldrb	r3, [r1, #8]
 800ec30:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ec32:	7a4b      	ldrb	r3, [r1, #9]
 800ec34:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ec36:	7a8b      	ldrb	r3, [r1, #10]
 800ec38:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ec3a:	7acb      	ldrb	r3, [r1, #11]
 800ec3c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ec3e:	7b0b      	ldrb	r3, [r1, #12]
 800ec40:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ec42:	7b4b      	ldrb	r3, [r1, #13]
 800ec44:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ec46:	7b8b      	ldrb	r3, [r1, #14]
 800ec48:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ec4a:	7bcb      	ldrb	r3, [r1, #15]
 800ec4c:	73c3      	strb	r3, [r0, #15]
#endif
}
 800ec4e:	4770      	bx	lr

0800ec50 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800ec50:	e004      	b.n	800ec5c <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ec52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec56:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	1e53      	subs	r3, r2, #1
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	2a00      	cmp	r2, #0
 800ec62:	d1f6      	bne.n	800ec52 <copy_block_nn+0x2>
}
 800ec64:	4770      	bx	lr

0800ec66 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800ec66:	780b      	ldrb	r3, [r1, #0]
 800ec68:	7802      	ldrb	r2, [r0, #0]
 800ec6a:	4053      	eors	r3, r2
 800ec6c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800ec6e:	784b      	ldrb	r3, [r1, #1]
 800ec70:	7842      	ldrb	r2, [r0, #1]
 800ec72:	4053      	eors	r3, r2
 800ec74:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800ec76:	788b      	ldrb	r3, [r1, #2]
 800ec78:	7882      	ldrb	r2, [r0, #2]
 800ec7a:	4053      	eors	r3, r2
 800ec7c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800ec7e:	78cb      	ldrb	r3, [r1, #3]
 800ec80:	78c2      	ldrb	r2, [r0, #3]
 800ec82:	4053      	eors	r3, r2
 800ec84:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800ec86:	790b      	ldrb	r3, [r1, #4]
 800ec88:	7902      	ldrb	r2, [r0, #4]
 800ec8a:	4053      	eors	r3, r2
 800ec8c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ec8e:	794b      	ldrb	r3, [r1, #5]
 800ec90:	7942      	ldrb	r2, [r0, #5]
 800ec92:	4053      	eors	r3, r2
 800ec94:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ec96:	798b      	ldrb	r3, [r1, #6]
 800ec98:	7982      	ldrb	r2, [r0, #6]
 800ec9a:	4053      	eors	r3, r2
 800ec9c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ec9e:	79cb      	ldrb	r3, [r1, #7]
 800eca0:	79c2      	ldrb	r2, [r0, #7]
 800eca2:	4053      	eors	r3, r2
 800eca4:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800eca6:	7a0b      	ldrb	r3, [r1, #8]
 800eca8:	7a02      	ldrb	r2, [r0, #8]
 800ecaa:	4053      	eors	r3, r2
 800ecac:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ecae:	7a4b      	ldrb	r3, [r1, #9]
 800ecb0:	7a42      	ldrb	r2, [r0, #9]
 800ecb2:	4053      	eors	r3, r2
 800ecb4:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ecb6:	7a8b      	ldrb	r3, [r1, #10]
 800ecb8:	7a82      	ldrb	r2, [r0, #10]
 800ecba:	4053      	eors	r3, r2
 800ecbc:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ecbe:	7acb      	ldrb	r3, [r1, #11]
 800ecc0:	7ac2      	ldrb	r2, [r0, #11]
 800ecc2:	4053      	eors	r3, r2
 800ecc4:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ecc6:	7b0b      	ldrb	r3, [r1, #12]
 800ecc8:	7b02      	ldrb	r2, [r0, #12]
 800ecca:	4053      	eors	r3, r2
 800eccc:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ecce:	7b4b      	ldrb	r3, [r1, #13]
 800ecd0:	7b42      	ldrb	r2, [r0, #13]
 800ecd2:	4053      	eors	r3, r2
 800ecd4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800ecd6:	7b8b      	ldrb	r3, [r1, #14]
 800ecd8:	7b82      	ldrb	r2, [r0, #14]
 800ecda:	4053      	eors	r3, r2
 800ecdc:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ecde:	7bcb      	ldrb	r3, [r1, #15]
 800ece0:	7bc2      	ldrb	r2, [r0, #15]
 800ece2:	4053      	eors	r3, r2
 800ece4:	73c3      	strb	r3, [r0, #15]
#endif
}
 800ece6:	4770      	bx	lr

0800ece8 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ece8:	780b      	ldrb	r3, [r1, #0]
 800ecea:	f892 c000 	ldrb.w	ip, [r2]
 800ecee:	ea83 030c 	eor.w	r3, r3, ip
 800ecf2:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ecf4:	784b      	ldrb	r3, [r1, #1]
 800ecf6:	f892 c001 	ldrb.w	ip, [r2, #1]
 800ecfa:	ea83 030c 	eor.w	r3, r3, ip
 800ecfe:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ed00:	788b      	ldrb	r3, [r1, #2]
 800ed02:	f892 c002 	ldrb.w	ip, [r2, #2]
 800ed06:	ea83 030c 	eor.w	r3, r3, ip
 800ed0a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ed0c:	78cb      	ldrb	r3, [r1, #3]
 800ed0e:	f892 c003 	ldrb.w	ip, [r2, #3]
 800ed12:	ea83 030c 	eor.w	r3, r3, ip
 800ed16:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ed18:	790b      	ldrb	r3, [r1, #4]
 800ed1a:	f892 c004 	ldrb.w	ip, [r2, #4]
 800ed1e:	ea83 030c 	eor.w	r3, r3, ip
 800ed22:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ed24:	794b      	ldrb	r3, [r1, #5]
 800ed26:	f892 c005 	ldrb.w	ip, [r2, #5]
 800ed2a:	ea83 030c 	eor.w	r3, r3, ip
 800ed2e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ed30:	798b      	ldrb	r3, [r1, #6]
 800ed32:	f892 c006 	ldrb.w	ip, [r2, #6]
 800ed36:	ea83 030c 	eor.w	r3, r3, ip
 800ed3a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ed3c:	79cb      	ldrb	r3, [r1, #7]
 800ed3e:	f892 c007 	ldrb.w	ip, [r2, #7]
 800ed42:	ea83 030c 	eor.w	r3, r3, ip
 800ed46:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ed48:	7a0b      	ldrb	r3, [r1, #8]
 800ed4a:	f892 c008 	ldrb.w	ip, [r2, #8]
 800ed4e:	ea83 030c 	eor.w	r3, r3, ip
 800ed52:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ed54:	7a4b      	ldrb	r3, [r1, #9]
 800ed56:	f892 c009 	ldrb.w	ip, [r2, #9]
 800ed5a:	ea83 030c 	eor.w	r3, r3, ip
 800ed5e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ed60:	7a8b      	ldrb	r3, [r1, #10]
 800ed62:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800ed66:	ea83 030c 	eor.w	r3, r3, ip
 800ed6a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ed6c:	7acb      	ldrb	r3, [r1, #11]
 800ed6e:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800ed72:	ea83 030c 	eor.w	r3, r3, ip
 800ed76:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ed78:	7b0b      	ldrb	r3, [r1, #12]
 800ed7a:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800ed7e:	ea83 030c 	eor.w	r3, r3, ip
 800ed82:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ed84:	7b4b      	ldrb	r3, [r1, #13]
 800ed86:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800ed8a:	ea83 030c 	eor.w	r3, r3, ip
 800ed8e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ed90:	7b8b      	ldrb	r3, [r1, #14]
 800ed92:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800ed96:	ea83 030c 	eor.w	r3, r3, ip
 800ed9a:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800ed9c:	7bcb      	ldrb	r3, [r1, #15]
 800ed9e:	7bd2      	ldrb	r2, [r2, #15]
 800eda0:	4053      	eors	r3, r2
 800eda2:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800eda4:	4770      	bx	lr

0800eda6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800eda6:	b508      	push	{r3, lr}
    xor_block(d, k);
 800eda8:	f7ff ff5d 	bl	800ec66 <xor_block>
}
 800edac:	bd08      	pop	{r3, pc}
	...

0800edb0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800edb0:	7802      	ldrb	r2, [r0, #0]
 800edb2:	4b18      	ldr	r3, [pc, #96]	; (800ee14 <shift_sub_rows+0x64>)
 800edb4:	5c9a      	ldrb	r2, [r3, r2]
 800edb6:	7002      	strb	r2, [r0, #0]
 800edb8:	7902      	ldrb	r2, [r0, #4]
 800edba:	5c9a      	ldrb	r2, [r3, r2]
 800edbc:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800edbe:	7a02      	ldrb	r2, [r0, #8]
 800edc0:	5c9a      	ldrb	r2, [r3, r2]
 800edc2:	7202      	strb	r2, [r0, #8]
 800edc4:	7b02      	ldrb	r2, [r0, #12]
 800edc6:	5c9a      	ldrb	r2, [r3, r2]
 800edc8:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800edca:	7842      	ldrb	r2, [r0, #1]
 800edcc:	7941      	ldrb	r1, [r0, #5]
 800edce:	5c59      	ldrb	r1, [r3, r1]
 800edd0:	7041      	strb	r1, [r0, #1]
 800edd2:	7a41      	ldrb	r1, [r0, #9]
 800edd4:	5c59      	ldrb	r1, [r3, r1]
 800edd6:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800edd8:	7b41      	ldrb	r1, [r0, #13]
 800edda:	5c59      	ldrb	r1, [r3, r1]
 800eddc:	7241      	strb	r1, [r0, #9]
 800edde:	5c9a      	ldrb	r2, [r3, r2]
 800ede0:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ede2:	7882      	ldrb	r2, [r0, #2]
 800ede4:	7a81      	ldrb	r1, [r0, #10]
 800ede6:	5c59      	ldrb	r1, [r3, r1]
 800ede8:	7081      	strb	r1, [r0, #2]
 800edea:	5c9a      	ldrb	r2, [r3, r2]
 800edec:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800edee:	7982      	ldrb	r2, [r0, #6]
 800edf0:	7b81      	ldrb	r1, [r0, #14]
 800edf2:	5c59      	ldrb	r1, [r3, r1]
 800edf4:	7181      	strb	r1, [r0, #6]
 800edf6:	5c9a      	ldrb	r2, [r3, r2]
 800edf8:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800edfa:	7bc2      	ldrb	r2, [r0, #15]
 800edfc:	7ac1      	ldrb	r1, [r0, #11]
 800edfe:	5c59      	ldrb	r1, [r3, r1]
 800ee00:	73c1      	strb	r1, [r0, #15]
 800ee02:	79c1      	ldrb	r1, [r0, #7]
 800ee04:	5c59      	ldrb	r1, [r3, r1]
 800ee06:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ee08:	78c1      	ldrb	r1, [r0, #3]
 800ee0a:	5c59      	ldrb	r1, [r3, r1]
 800ee0c:	71c1      	strb	r1, [r0, #7]
 800ee0e:	5c9b      	ldrb	r3, [r3, r2]
 800ee10:	70c3      	strb	r3, [r0, #3]
}
 800ee12:	4770      	bx	lr
 800ee14:	08012c30 	.word	0x08012c30

0800ee18 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ee18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee1c:	b084      	sub	sp, #16
 800ee1e:	4604      	mov	r4, r0
    block_copy(st, dt);
 800ee20:	4601      	mov	r1, r0
 800ee22:	4668      	mov	r0, sp
 800ee24:	f7ff fef3 	bl	800ec0e <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ee28:	f89d c000 	ldrb.w	ip, [sp]
 800ee2c:	4b6a      	ldr	r3, [pc, #424]	; (800efd8 <mix_sub_columns+0x1c0>)
 800ee2e:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ee32:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ee36:	4a69      	ldr	r2, [pc, #420]	; (800efdc <mix_sub_columns+0x1c4>)
 800ee38:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ee3c:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800ee40:	4967      	ldr	r1, [pc, #412]	; (800efe0 <mix_sub_columns+0x1c8>)
 800ee42:	f811 500e 	ldrb.w	r5, [r1, lr]
 800ee46:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800ee4a:	5dce      	ldrb	r6, [r1, r7]
 800ee4c:	ea80 0009 	eor.w	r0, r0, r9
 800ee50:	4068      	eors	r0, r5
 800ee52:	4070      	eors	r0, r6
 800ee54:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ee56:	f811 000c 	ldrb.w	r0, [r1, ip]
 800ee5a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ee5e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ee62:	ea80 0a0a 	eor.w	sl, r0, sl
 800ee66:	ea89 090a 	eor.w	r9, r9, sl
 800ee6a:	ea86 0609 	eor.w	r6, r6, r9
 800ee6e:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ee70:	f811 8008 	ldrb.w	r8, [r1, r8]
 800ee74:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800ee78:	5dd6      	ldrb	r6, [r2, r7]
 800ee7a:	ea80 0008 	eor.w	r0, r0, r8
 800ee7e:	ea8e 0000 	eor.w	r0, lr, r0
 800ee82:	4070      	eors	r0, r6
 800ee84:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ee86:	f812 600c 	ldrb.w	r6, [r2, ip]
 800ee8a:	5dd8      	ldrb	r0, [r3, r7]
 800ee8c:	ea86 0608 	eor.w	r6, r6, r8
 800ee90:	4075      	eors	r5, r6
 800ee92:	4045      	eors	r5, r0
 800ee94:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ee96:	f89d c004 	ldrb.w	ip, [sp, #4]
 800ee9a:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ee9e:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800eea2:	f812 9008 	ldrb.w	r9, [r2, r8]
 800eea6:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800eeaa:	f811 500e 	ldrb.w	r5, [r1, lr]
 800eeae:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800eeb2:	5dce      	ldrb	r6, [r1, r7]
 800eeb4:	ea80 0009 	eor.w	r0, r0, r9
 800eeb8:	4068      	eors	r0, r5
 800eeba:	4070      	eors	r0, r6
 800eebc:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800eebe:	f811 000c 	ldrb.w	r0, [r1, ip]
 800eec2:	f813 a008 	ldrb.w	sl, [r3, r8]
 800eec6:	f812 900e 	ldrb.w	r9, [r2, lr]
 800eeca:	ea80 0a0a 	eor.w	sl, r0, sl
 800eece:	ea89 090a 	eor.w	r9, r9, sl
 800eed2:	ea86 0609 	eor.w	r6, r6, r9
 800eed6:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800eed8:	f811 8008 	ldrb.w	r8, [r1, r8]
 800eedc:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800eee0:	5dd6      	ldrb	r6, [r2, r7]
 800eee2:	ea80 0008 	eor.w	r0, r0, r8
 800eee6:	ea8e 0000 	eor.w	r0, lr, r0
 800eeea:	4070      	eors	r0, r6
 800eeec:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800eeee:	f812 600c 	ldrb.w	r6, [r2, ip]
 800eef2:	5dd8      	ldrb	r0, [r3, r7]
 800eef4:	ea86 0608 	eor.w	r6, r6, r8
 800eef8:	4075      	eors	r5, r6
 800eefa:	4045      	eors	r5, r0
 800eefc:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800eefe:	f89d c008 	ldrb.w	ip, [sp, #8]
 800ef02:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ef06:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800ef0a:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ef0e:	f89d e002 	ldrb.w	lr, [sp, #2]
 800ef12:	f811 500e 	ldrb.w	r5, [r1, lr]
 800ef16:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800ef1a:	5dce      	ldrb	r6, [r1, r7]
 800ef1c:	ea80 0009 	eor.w	r0, r0, r9
 800ef20:	4068      	eors	r0, r5
 800ef22:	4070      	eors	r0, r6
 800ef24:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ef26:	f811 000c 	ldrb.w	r0, [r1, ip]
 800ef2a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ef2e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ef32:	ea80 0a0a 	eor.w	sl, r0, sl
 800ef36:	ea89 090a 	eor.w	r9, r9, sl
 800ef3a:	ea86 0609 	eor.w	r6, r6, r9
 800ef3e:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ef40:	f811 8008 	ldrb.w	r8, [r1, r8]
 800ef44:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800ef48:	5dd6      	ldrb	r6, [r2, r7]
 800ef4a:	ea80 0008 	eor.w	r0, r0, r8
 800ef4e:	ea8e 0000 	eor.w	r0, lr, r0
 800ef52:	4070      	eors	r0, r6
 800ef54:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ef56:	f812 600c 	ldrb.w	r6, [r2, ip]
 800ef5a:	5dd8      	ldrb	r0, [r3, r7]
 800ef5c:	ea86 0608 	eor.w	r6, r6, r8
 800ef60:	4075      	eors	r5, r6
 800ef62:	4045      	eors	r5, r0
 800ef64:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ef66:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800ef6a:	5d98      	ldrb	r0, [r3, r6]
 800ef6c:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800ef70:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ef74:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800ef78:	f811 c007 	ldrb.w	ip, [r1, r7]
 800ef7c:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800ef80:	f811 e005 	ldrb.w	lr, [r1, r5]
 800ef84:	ea80 0009 	eor.w	r0, r0, r9
 800ef88:	ea8c 0000 	eor.w	r0, ip, r0
 800ef8c:	ea8e 0000 	eor.w	r0, lr, r0
 800ef90:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ef92:	5d88      	ldrb	r0, [r1, r6]
 800ef94:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ef98:	f812 9007 	ldrb.w	r9, [r2, r7]
 800ef9c:	ea80 0a0a 	eor.w	sl, r0, sl
 800efa0:	ea89 090a 	eor.w	r9, r9, sl
 800efa4:	ea8e 0e09 	eor.w	lr, lr, r9
 800efa8:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800efac:	f811 1008 	ldrb.w	r1, [r1, r8]
 800efb0:	f813 e007 	ldrb.w	lr, [r3, r7]
 800efb4:	5d57      	ldrb	r7, [r2, r5]
 800efb6:	4048      	eors	r0, r1
 800efb8:	ea8e 0000 	eor.w	r0, lr, r0
 800efbc:	4078      	eors	r0, r7
 800efbe:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800efc0:	5d92      	ldrb	r2, [r2, r6]
 800efc2:	5d5b      	ldrb	r3, [r3, r5]
 800efc4:	4051      	eors	r1, r2
 800efc6:	ea8c 0c01 	eor.w	ip, ip, r1
 800efca:	ea83 0c0c 	eor.w	ip, r3, ip
 800efce:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 800efd2:	b004      	add	sp, #16
 800efd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efd8:	08012a30 	.word	0x08012a30
 800efdc:	08012b30 	.word	0x08012b30
 800efe0:	08012c30 	.word	0x08012c30

0800efe4 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800efe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe8:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800efea:	f1a1 0310 	sub.w	r3, r1, #16
 800efee:	b2da      	uxtb	r2, r3
 800eff0:	2a10      	cmp	r2, #16
 800eff2:	d807      	bhi.n	800f004 <lorawan_aes_set_key+0x20>
 800eff4:	460d      	mov	r5, r1
 800eff6:	2301      	movs	r3, #1
 800eff8:	4093      	lsls	r3, r2
 800effa:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800effe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f002:	b92b      	cbnz	r3, 800f010 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800f004:	2300      	movs	r3, #0
 800f006:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800f00a:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800f00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800f010:	460a      	mov	r2, r1
 800f012:	4601      	mov	r1, r0
 800f014:	4620      	mov	r0, r4
 800f016:	f7ff fe1b 	bl	800ec50 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800f01a:	f105 031c 	add.w	r3, r5, #28
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800f026:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f02a:	3b01      	subs	r3, #1
 800f02c:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800f030:	462b      	mov	r3, r5
 800f032:	f04f 0c01 	mov.w	ip, #1
 800f036:	e023      	b.n	800f080 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 800f038:	2d18      	cmp	r5, #24
 800f03a:	d901      	bls.n	800f040 <lorawan_aes_set_key+0x5c>
 800f03c:	2a10      	cmp	r2, #16
 800f03e:	d047      	beq.n	800f0d0 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800f040:	1b5a      	subs	r2, r3, r5
 800f042:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800f044:	f814 9002 	ldrb.w	r9, [r4, r2]
 800f048:	ea89 0808 	eor.w	r8, r9, r8
 800f04c:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800f050:	f102 0801 	add.w	r8, r2, #1
 800f054:	f814 8008 	ldrb.w	r8, [r4, r8]
 800f058:	f100 0901 	add.w	r9, r0, #1
 800f05c:	ea88 0707 	eor.w	r7, r8, r7
 800f060:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800f064:	1c97      	adds	r7, r2, #2
 800f066:	5de7      	ldrb	r7, [r4, r7]
 800f068:	f100 0802 	add.w	r8, r0, #2
 800f06c:	407e      	eors	r6, r7
 800f06e:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800f072:	3203      	adds	r2, #3
 800f074:	5ca6      	ldrb	r6, [r4, r2]
 800f076:	1cc2      	adds	r2, r0, #3
 800f078:	4071      	eors	r1, r6
 800f07a:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800f07c:	3304      	adds	r3, #4
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	4573      	cmp	r3, lr
 800f082:	d22c      	bcs.n	800f0de <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800f084:	4618      	mov	r0, r3
 800f086:	1f1a      	subs	r2, r3, #4
 800f088:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800f08c:	1eda      	subs	r2, r3, #3
 800f08e:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800f090:	1e9a      	subs	r2, r3, #2
 800f092:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800f094:	1e5a      	subs	r2, r3, #1
 800f096:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800f098:	fbb3 f2f5 	udiv	r2, r3, r5
 800f09c:	fb05 3212 	mls	r2, r5, r2, r3
 800f0a0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800f0a4:	d1c8      	bne.n	800f038 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 800f0a6:	4a0f      	ldr	r2, [pc, #60]	; (800f0e4 <lorawan_aes_set_key+0x100>)
 800f0a8:	f812 9007 	ldrb.w	r9, [r2, r7]
 800f0ac:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800f0b0:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800f0b2:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800f0b4:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800f0b8:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800f0bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f0c0:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800f0c4:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 800f0c8:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 800f0cc:	46c8      	mov	r8, r9
 800f0ce:	e7b7      	b.n	800f040 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 800f0d0:	4a04      	ldr	r2, [pc, #16]	; (800f0e4 <lorawan_aes_set_key+0x100>)
 800f0d2:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800f0d6:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800f0d8:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800f0da:	5c51      	ldrb	r1, [r2, r1]
 800f0dc:	e7b0      	b.n	800f040 <lorawan_aes_set_key+0x5c>
    return 0;
 800f0de:	2000      	movs	r0, #0
 800f0e0:	e794      	b.n	800f00c <lorawan_aes_set_key+0x28>
 800f0e2:	bf00      	nop
 800f0e4:	08012c30 	.word	0x08012c30

0800f0e8 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800f0e8:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800f0ec:	b31b      	cbz	r3, 800f136 <lorawan_aes_encrypt+0x4e>
{
 800f0ee:	b570      	push	{r4, r5, r6, lr}
 800f0f0:	b084      	sub	sp, #16
 800f0f2:	460e      	mov	r6, r1
 800f0f4:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800f0f6:	4601      	mov	r1, r0
 800f0f8:	4668      	mov	r0, sp
 800f0fa:	f7ff fdf5 	bl	800ece8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800f0fe:	2401      	movs	r4, #1
 800f100:	e009      	b.n	800f116 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800f102:	4668      	mov	r0, sp
 800f104:	f7ff fe88 	bl	800ee18 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800f108:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800f10c:	4668      	mov	r0, sp
 800f10e:	f7ff fe4a 	bl	800eda6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800f112:	3401      	adds	r4, #1
 800f114:	b2e4      	uxtb	r4, r4
 800f116:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800f11a:	42a3      	cmp	r3, r4
 800f11c:	d8f1      	bhi.n	800f102 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800f11e:	4668      	mov	r0, sp
 800f120:	f7ff fe46 	bl	800edb0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800f124:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800f128:	4669      	mov	r1, sp
 800f12a:	4630      	mov	r0, r6
 800f12c:	f7ff fddc 	bl	800ece8 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800f130:	2000      	movs	r0, #0
}
 800f132:	b004      	add	sp, #16
 800f134:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800f136:	20ff      	movs	r0, #255	; 0xff
}
 800f138:	4770      	bx	lr
	...

0800f13c <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f13c:	2300      	movs	r3, #0
 800f13e:	2b0a      	cmp	r3, #10
 800f140:	d817      	bhi.n	800f172 <GetKeyByID+0x36>
{
 800f142:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f144:	4a0c      	ldr	r2, [pc, #48]	; (800f178 <GetKeyByID+0x3c>)
 800f146:	6814      	ldr	r4, [r2, #0]
 800f148:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f14c:	4422      	add	r2, r4
 800f14e:	7e12      	ldrb	r2, [r2, #24]
 800f150:	4282      	cmp	r2, r0
 800f152:	d006      	beq.n	800f162 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f154:	3301      	adds	r3, #1
 800f156:	b2db      	uxtb	r3, r3
 800f158:	2b0a      	cmp	r3, #10
 800f15a:	d9f3      	bls.n	800f144 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f15c:	2003      	movs	r0, #3
}
 800f15e:	bc10      	pop	{r4}
 800f160:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800f162:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800f166:	f10c 0c18 	add.w	ip, ip, #24
 800f16a:	4464      	add	r4, ip
 800f16c:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f16e:	2000      	movs	r0, #0
 800f170:	e7f5      	b.n	800f15e <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f172:	2003      	movs	r0, #3
}
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop
 800f178:	20000e54 	.word	0x20000e54

0800f17c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800f17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f180:	b0cc      	sub	sp, #304	; 0x130
 800f182:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800f184:	b3a9      	cbz	r1, 800f1f2 <ComputeCmac+0x76>
 800f186:	4607      	mov	r7, r0
 800f188:	4616      	mov	r6, r2
 800f18a:	461c      	mov	r4, r3
 800f18c:	4688      	mov	r8, r1
 800f18e:	b395      	cbz	r5, 800f1f6 <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800f190:	a802      	add	r0, sp, #8
 800f192:	f7ff fbd7 	bl	800e944 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800f196:	a901      	add	r1, sp, #4
 800f198:	4620      	mov	r0, r4
 800f19a:	f7ff ffcf 	bl	800f13c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f19e:	4604      	mov	r4, r0
 800f1a0:	b118      	cbz	r0, 800f1aa <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	b04c      	add	sp, #304	; 0x130
 800f1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800f1aa:	9901      	ldr	r1, [sp, #4]
 800f1ac:	3101      	adds	r1, #1
 800f1ae:	a802      	add	r0, sp, #8
 800f1b0:	f7ff fbd7 	bl	800e962 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800f1b4:	b127      	cbz	r7, 800f1c0 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800f1b6:	2210      	movs	r2, #16
 800f1b8:	4639      	mov	r1, r7
 800f1ba:	a802      	add	r0, sp, #8
 800f1bc:	f7ff fbd8 	bl	800e970 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800f1c0:	4632      	mov	r2, r6
 800f1c2:	4641      	mov	r1, r8
 800f1c4:	a802      	add	r0, sp, #8
 800f1c6:	f7ff fbd3 	bl	800e970 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800f1ca:	a902      	add	r1, sp, #8
 800f1cc:	a848      	add	r0, sp, #288	; 0x120
 800f1ce:	f7ff fc3d 	bl	800ea4c <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800f1d2:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 800f1d6:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800f1da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f1de:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 800f1e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1e6:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800f1ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f1ee:	602b      	str	r3, [r5, #0]
 800f1f0:	e7d7      	b.n	800f1a2 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800f1f2:	2402      	movs	r4, #2
 800f1f4:	e7d5      	b.n	800f1a2 <ComputeCmac+0x26>
 800f1f6:	2402      	movs	r4, #2
 800f1f8:	e7d3      	b.n	800f1a2 <ComputeCmac+0x26>
	...

0800f1fc <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 800f1fc:	b140      	cbz	r0, 800f210 <SecureElementInit+0x14>
{
 800f1fe:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800f200:	4a04      	ldr	r2, [pc, #16]	; (800f214 <SecureElementInit+0x18>)
 800f202:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800f204:	22d8      	movs	r2, #216	; 0xd8
 800f206:	4904      	ldr	r1, [pc, #16]	; (800f218 <SecureElementInit+0x1c>)
 800f208:	f000 facd 	bl	800f7a6 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800f20c:	2000      	movs	r0, #0
}
 800f20e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f210:	2002      	movs	r0, #2
}
 800f212:	4770      	bx	lr
 800f214:	20000e54 	.word	0x20000e54
 800f218:	0803e500 	.word	0x0803e500

0800f21c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f21c:	2300      	movs	r3, #0
 800f21e:	2b0a      	cmp	r3, #10
 800f220:	d817      	bhi.n	800f252 <SecureElementGetKeyByID+0x36>
{
 800f222:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f224:	4a0c      	ldr	r2, [pc, #48]	; (800f258 <SecureElementGetKeyByID+0x3c>)
 800f226:	6814      	ldr	r4, [r2, #0]
 800f228:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f22c:	4422      	add	r2, r4
 800f22e:	7e12      	ldrb	r2, [r2, #24]
 800f230:	4282      	cmp	r2, r0
 800f232:	d006      	beq.n	800f242 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f234:	3301      	adds	r3, #1
 800f236:	b2db      	uxtb	r3, r3
 800f238:	2b0a      	cmp	r3, #10
 800f23a:	d9f3      	bls.n	800f224 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f23c:	2003      	movs	r0, #3
}
 800f23e:	bc10      	pop	{r4}
 800f240:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800f242:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800f246:	f10c 0c18 	add.w	ip, ip, #24
 800f24a:	4464      	add	r4, ip
 800f24c:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f24e:	2000      	movs	r0, #0
 800f250:	e7f5      	b.n	800f23e <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f252:	2003      	movs	r0, #3
}
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop
 800f258:	20000e54 	.word	0x20000e54

0800f25c <PrintKey>:
{
 800f25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f260:	b099      	sub	sp, #100	; 0x64
 800f262:	4605      	mov	r5, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800f264:	a917      	add	r1, sp, #92	; 0x5c
 800f266:	f7ff ffd9 	bl	800f21c <SecureElementGetKeyByID>
 800f26a:	4602      	mov	r2, r0
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d043      	beq.n	800f2f8 <PrintKey+0x9c>
}
 800f270:	b019      	add	sp, #100	; 0x64
 800f272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 800f276:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f278:	7851      	ldrb	r1, [r2, #1]
 800f27a:	9113      	str	r1, [sp, #76]	; 0x4c
 800f27c:	7890      	ldrb	r0, [r2, #2]
 800f27e:	9014      	str	r0, [sp, #80]	; 0x50
 800f280:	78d4      	ldrb	r4, [r2, #3]
 800f282:	9415      	str	r4, [sp, #84]	; 0x54
 800f284:	7911      	ldrb	r1, [r2, #4]
 800f286:	7950      	ldrb	r0, [r2, #5]
 800f288:	7994      	ldrb	r4, [r2, #6]
 800f28a:	79d5      	ldrb	r5, [r2, #7]
 800f28c:	7a16      	ldrb	r6, [r2, #8]
 800f28e:	7a57      	ldrb	r7, [r2, #9]
 800f290:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800f294:	f892 e00b 	ldrb.w	lr, [r2, #11]
 800f298:	f892 800c 	ldrb.w	r8, [r2, #12]
 800f29c:	f892 900d 	ldrb.w	r9, [r2, #13]
 800f2a0:	f892 a00e 	ldrb.w	sl, [r2, #14]
 800f2a4:	f892 b00f 	ldrb.w	fp, [r2, #15]
 800f2a8:	7c12      	ldrb	r2, [r2, #16]
 800f2aa:	9210      	str	r2, [sp, #64]	; 0x40
 800f2ac:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800f2b0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f2b4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800f2b8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800f2bc:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800f2c0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800f2c4:	9709      	str	r7, [sp, #36]	; 0x24
 800f2c6:	9608      	str	r6, [sp, #32]
 800f2c8:	9507      	str	r5, [sp, #28]
 800f2ca:	9406      	str	r4, [sp, #24]
 800f2cc:	9005      	str	r0, [sp, #20]
 800f2ce:	9104      	str	r1, [sp, #16]
 800f2d0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f2d2:	9403      	str	r4, [sp, #12]
 800f2d4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f2d6:	9002      	str	r0, [sp, #8]
 800f2d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f2da:	9101      	str	r1, [sp, #4]
 800f2dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f2e0:	4a0c      	ldr	r2, [pc, #48]	; (800f314 <PrintKey+0xb8>)
 800f2e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	4b0b      	ldr	r3, [pc, #44]	; (800f318 <PrintKey+0xbc>)
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	4611      	mov	r1, r2
 800f2f0:	2002      	movs	r0, #2
 800f2f2:	f002 f937 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800f2f6:	e7bb      	b.n	800f270 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f2f8:	2a0a      	cmp	r2, #10
 800f2fa:	d8b9      	bhi.n	800f270 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 800f2fc:	4613      	mov	r3, r2
 800f2fe:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800f302:	4804      	ldr	r0, [pc, #16]	; (800f314 <PrintKey+0xb8>)
 800f304:	f810 1021 	ldrb.w	r1, [r0, r1, lsl #2]
 800f308:	42a9      	cmp	r1, r5
 800f30a:	d0b4      	beq.n	800f276 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f30c:	3201      	adds	r2, #1
 800f30e:	b2d2      	uxtb	r2, r2
 800f310:	e7f2      	b.n	800f2f8 <PrintKey+0x9c>
 800f312:	bf00      	nop
 800f314:	08012ec8 	.word	0x08012ec8
 800f318:	08012d30 	.word	0x08012d30

0800f31c <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 800f31c:	2b0b      	cmp	r3, #11
 800f31e:	d80a      	bhi.n	800f336 <SecureElementComputeAesCmac+0x1a>
{
 800f320:	b500      	push	{lr}
 800f322:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f324:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f328:	f8cd c000 	str.w	ip, [sp]
 800f32c:	f7ff ff26 	bl	800f17c <ComputeCmac>
}
 800f330:	b003      	add	sp, #12
 800f332:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f336:	2003      	movs	r0, #3
}
 800f338:	4770      	bx	lr

0800f33a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800f33a:	b190      	cbz	r0, 800f362 <SecureElementVerifyAesCmac+0x28>
{
 800f33c:	b510      	push	{r4, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	468c      	mov	ip, r1
 800f342:	4614      	mov	r4, r2
 800f344:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800f346:	2000      	movs	r0, #0
 800f348:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f34a:	aa03      	add	r2, sp, #12
 800f34c:	9200      	str	r2, [sp, #0]
 800f34e:	4662      	mov	r2, ip
 800f350:	f7ff ff14 	bl	800f17c <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f354:	b918      	cbnz	r0, 800f35e <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800f356:	9b03      	ldr	r3, [sp, #12]
 800f358:	42a3      	cmp	r3, r4
 800f35a:	d000      	beq.n	800f35e <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f35c:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800f35e:	b004      	add	sp, #16
 800f360:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f362:	2002      	movs	r0, #2
}
 800f364:	4770      	bx	lr

0800f366 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800f366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f36a:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800f36c:	b348      	cbz	r0, 800f3c2 <SecureElementAesEncrypt+0x5c>
 800f36e:	460d      	mov	r5, r1
 800f370:	4614      	mov	r4, r2
 800f372:	461e      	mov	r6, r3
 800f374:	4607      	mov	r7, r0
 800f376:	b33b      	cbz	r3, 800f3c8 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800f378:	f011 0f0f 	tst.w	r1, #15
 800f37c:	d127      	bne.n	800f3ce <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f37e:	22f0      	movs	r2, #240	; 0xf0
 800f380:	2100      	movs	r1, #0
 800f382:	a801      	add	r0, sp, #4
 800f384:	f000 fa27 	bl	800f7d6 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f388:	4669      	mov	r1, sp
 800f38a:	4620      	mov	r0, r4
 800f38c:	f7ff fed6 	bl	800f13c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f390:	4680      	mov	r8, r0
 800f392:	b118      	cbz	r0, 800f39c <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800f394:	4640      	mov	r0, r8
 800f396:	b03e      	add	sp, #248	; 0xf8
 800f398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800f39c:	aa01      	add	r2, sp, #4
 800f39e:	2110      	movs	r1, #16
 800f3a0:	9800      	ldr	r0, [sp, #0]
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	f7ff fe1e 	bl	800efe4 <lorawan_aes_set_key>
        uint8_t block = 0;
 800f3a8:	4644      	mov	r4, r8
        while( size != 0 )
 800f3aa:	e007      	b.n	800f3bc <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800f3ac:	aa01      	add	r2, sp, #4
 800f3ae:	1931      	adds	r1, r6, r4
 800f3b0:	1938      	adds	r0, r7, r4
 800f3b2:	f7ff fe99 	bl	800f0e8 <lorawan_aes_encrypt>
            block = block + 16;
 800f3b6:	3410      	adds	r4, #16
 800f3b8:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 800f3ba:	3d10      	subs	r5, #16
        while( size != 0 )
 800f3bc:	2d00      	cmp	r5, #0
 800f3be:	d1f5      	bne.n	800f3ac <SecureElementAesEncrypt+0x46>
 800f3c0:	e7e8      	b.n	800f394 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800f3c2:	f04f 0802 	mov.w	r8, #2
 800f3c6:	e7e5      	b.n	800f394 <SecureElementAesEncrypt+0x2e>
 800f3c8:	f04f 0802 	mov.w	r8, #2
 800f3cc:	e7e2      	b.n	800f394 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f3ce:	f04f 0805 	mov.w	r8, #5
 800f3d2:	e7df      	b.n	800f394 <SecureElementAesEncrypt+0x2e>

0800f3d4 <SecureElementSetKey>:
{
 800f3d4:	b530      	push	{r4, r5, lr}
 800f3d6:	b085      	sub	sp, #20
    if( key == NULL )
 800f3d8:	2900      	cmp	r1, #0
 800f3da:	d038      	beq.n	800f44e <SecureElementSetKey+0x7a>
 800f3dc:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f3de:	2300      	movs	r3, #0
 800f3e0:	2b0a      	cmp	r3, #10
 800f3e2:	d830      	bhi.n	800f446 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f3e4:	4a1b      	ldr	r2, [pc, #108]	; (800f454 <SecureElementSetKey+0x80>)
 800f3e6:	6811      	ldr	r1, [r2, #0]
 800f3e8:	461c      	mov	r4, r3
 800f3ea:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f3ee:	440a      	add	r2, r1
 800f3f0:	7e12      	ldrb	r2, [r2, #24]
 800f3f2:	4282      	cmp	r2, r0
 800f3f4:	d002      	beq.n	800f3fc <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	e7f1      	b.n	800f3e0 <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 800f3fc:	280d      	cmp	r0, #13
 800f3fe:	d00a      	beq.n	800f416 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f400:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800f404:	3318      	adds	r3, #24
 800f406:	440b      	add	r3, r1
 800f408:	2210      	movs	r2, #16
 800f40a:	4661      	mov	r1, ip
 800f40c:	1c58      	adds	r0, r3, #1
 800f40e:	f000 f9ca 	bl	800f7a6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f412:	2500      	movs	r5, #0
 800f414:	e018      	b.n	800f448 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800f416:	2300      	movs	r3, #0
 800f418:	9300      	str	r3, [sp, #0]
 800f41a:	9301      	str	r3, [sp, #4]
 800f41c:	9302      	str	r3, [sp, #8]
 800f41e:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800f420:	466b      	mov	r3, sp
 800f422:	220c      	movs	r2, #12
 800f424:	2110      	movs	r1, #16
 800f426:	4660      	mov	r0, ip
 800f428:	f7ff ff9d 	bl	800f366 <SecureElementAesEncrypt>
 800f42c:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f42e:	4b09      	ldr	r3, [pc, #36]	; (800f454 <SecureElementSetKey+0x80>)
 800f430:	6818      	ldr	r0, [r3, #0]
 800f432:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800f436:	3418      	adds	r4, #24
 800f438:	4420      	add	r0, r4
 800f43a:	2210      	movs	r2, #16
 800f43c:	4669      	mov	r1, sp
 800f43e:	3001      	adds	r0, #1
 800f440:	f000 f9b1 	bl	800f7a6 <memcpy1>
                return retval;
 800f444:	e000      	b.n	800f448 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f446:	2503      	movs	r5, #3
}
 800f448:	4628      	mov	r0, r5
 800f44a:	b005      	add	sp, #20
 800f44c:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f44e:	2502      	movs	r5, #2
 800f450:	e7fa      	b.n	800f448 <SecureElementSetKey+0x74>
 800f452:	bf00      	nop
 800f454:	20000e54 	.word	0x20000e54

0800f458 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800f458:	b1d0      	cbz	r0, 800f490 <SecureElementDeriveAndStoreKey+0x38>
{
 800f45a:	b510      	push	{r4, lr}
 800f45c:	b084      	sub	sp, #16
 800f45e:	4614      	mov	r4, r2
 800f460:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800f462:	2a0c      	cmp	r2, #12
 800f464:	d101      	bne.n	800f46a <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f466:	290b      	cmp	r1, #11
 800f468:	d114      	bne.n	800f494 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800f46a:	2300      	movs	r3, #0
 800f46c:	9300      	str	r3, [sp, #0]
 800f46e:	9301      	str	r3, [sp, #4]
 800f470:	9302      	str	r3, [sp, #8]
 800f472:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800f474:	466b      	mov	r3, sp
 800f476:	460a      	mov	r2, r1
 800f478:	2110      	movs	r1, #16
 800f47a:	4660      	mov	r0, ip
 800f47c:	f7ff ff73 	bl	800f366 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f480:	b108      	cbz	r0, 800f486 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f482:	b004      	add	sp, #16
 800f484:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800f486:	4669      	mov	r1, sp
 800f488:	4620      	mov	r0, r4
 800f48a:	f7ff ffa3 	bl	800f3d4 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f48e:	e7f8      	b.n	800f482 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800f490:	2002      	movs	r0, #2
}
 800f492:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f494:	2003      	movs	r0, #3
 800f496:	e7f4      	b.n	800f482 <SecureElementDeriveAndStoreKey+0x2a>

0800f498 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800f49e:	9c07      	ldr	r4, [sp, #28]
 800f4a0:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f4a2:	b35b      	cbz	r3, 800f4fc <SecureElementProcessJoinAccept+0x64>
 800f4a4:	461f      	mov	r7, r3
 800f4a6:	b35c      	cbz	r4, 800f500 <SecureElementProcessJoinAccept+0x68>
 800f4a8:	b366      	cbz	r6, 800f504 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f4aa:	2d21      	cmp	r5, #33	; 0x21
 800f4ac:	d82c      	bhi.n	800f508 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f4ae:	462a      	mov	r2, r5
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	f000 f977 	bl	800f7a6 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f4b8:	1c63      	adds	r3, r4, #1
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	1e69      	subs	r1, r5, #1
 800f4be:	18b8      	adds	r0, r7, r2
 800f4c0:	f7ff ff51 	bl	800f366 <SecureElementAesEncrypt>
 800f4c4:	bb10      	cbnz	r0, 800f50c <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f4c6:	7ae3      	ldrb	r3, [r4, #11]
 800f4c8:	09db      	lsrs	r3, r3, #7
 800f4ca:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800f4cc:	1961      	adds	r1, r4, r5
 800f4ce:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800f4d2:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800f4d6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f4da:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800f4de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f4e2:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800f4e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800f4ea:	b98b      	cbnz	r3, 800f510 <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	1f29      	subs	r1, r5, #4
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f7ff ff22 	bl	800f33a <SecureElementVerifyAesCmac>
 800f4f6:	b140      	cbz	r0, 800f50a <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f4f8:	2001      	movs	r0, #1
 800f4fa:	e006      	b.n	800f50a <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 800f4fc:	2002      	movs	r0, #2
 800f4fe:	e004      	b.n	800f50a <SecureElementProcessJoinAccept+0x72>
 800f500:	2002      	movs	r0, #2
 800f502:	e002      	b.n	800f50a <SecureElementProcessJoinAccept+0x72>
 800f504:	2002      	movs	r0, #2
 800f506:	e000      	b.n	800f50a <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f508:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800f50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f50c:	2007      	movs	r0, #7
 800f50e:	e7fc      	b.n	800f50a <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f510:	2004      	movs	r0, #4
 800f512:	e7fa      	b.n	800f50a <SecureElementProcessJoinAccept+0x72>

0800f514 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800f514:	b140      	cbz	r0, 800f528 <SecureElementSetDevEui+0x14>
{
 800f516:	b508      	push	{r3, lr}
 800f518:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f51a:	2208      	movs	r2, #8
 800f51c:	4b03      	ldr	r3, [pc, #12]	; (800f52c <SecureElementSetDevEui+0x18>)
 800f51e:	6818      	ldr	r0, [r3, #0]
 800f520:	f000 f941 	bl	800f7a6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f524:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f526:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f528:	2002      	movs	r0, #2
}
 800f52a:	4770      	bx	lr
 800f52c:	20000e54 	.word	0x20000e54

0800f530 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800f530:	b138      	cbz	r0, 800f542 <SecureElementGetDevEui+0x12>
{
 800f532:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f534:	2208      	movs	r2, #8
 800f536:	4904      	ldr	r1, [pc, #16]	; (800f548 <SecureElementGetDevEui+0x18>)
 800f538:	6809      	ldr	r1, [r1, #0]
 800f53a:	f000 f934 	bl	800f7a6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f53e:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f540:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f542:	2002      	movs	r0, #2
}
 800f544:	4770      	bx	lr
 800f546:	bf00      	nop
 800f548:	20000e54 	.word	0x20000e54

0800f54c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800f54c:	b148      	cbz	r0, 800f562 <SecureElementSetJoinEui+0x16>
{
 800f54e:	b508      	push	{r3, lr}
 800f550:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f552:	4b05      	ldr	r3, [pc, #20]	; (800f568 <SecureElementSetJoinEui+0x1c>)
 800f554:	6818      	ldr	r0, [r3, #0]
 800f556:	2208      	movs	r2, #8
 800f558:	4410      	add	r0, r2
 800f55a:	f000 f924 	bl	800f7a6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f55e:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f560:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f562:	2002      	movs	r0, #2
}
 800f564:	4770      	bx	lr
 800f566:	bf00      	nop
 800f568:	20000e54 	.word	0x20000e54

0800f56c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800f56c:	b140      	cbz	r0, 800f580 <SecureElementGetJoinEui+0x14>
{
 800f56e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f570:	4a04      	ldr	r2, [pc, #16]	; (800f584 <SecureElementGetJoinEui+0x18>)
 800f572:	6811      	ldr	r1, [r2, #0]
 800f574:	2208      	movs	r2, #8
 800f576:	4411      	add	r1, r2
 800f578:	f000 f915 	bl	800f7a6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f57c:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f57e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f580:	2002      	movs	r0, #2
}
 800f582:	4770      	bx	lr
 800f584:	20000e54 	.word	0x20000e54

0800f588 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f588:	2802      	cmp	r0, #2
 800f58a:	d004      	beq.n	800f596 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f58c:	4b04      	ldr	r3, [pc, #16]	; (800f5a0 <SecureElementSetDevAddr+0x18>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f592:	2000      	movs	r0, #0
 800f594:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f596:	4b02      	ldr	r3, [pc, #8]	; (800f5a0 <SecureElementSetDevAddr+0x18>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	6119      	str	r1, [r3, #16]
 800f59c:	e7f9      	b.n	800f592 <SecureElementSetDevAddr+0xa>
 800f59e:	bf00      	nop
 800f5a0:	20000e54 	.word	0x20000e54

0800f5a4 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 800f5a4:	b169      	cbz	r1, 800f5c2 <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f5a6:	2802      	cmp	r0, #2
 800f5a8:	d005      	beq.n	800f5b6 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f5aa:	4a07      	ldr	r2, [pc, #28]	; (800f5c8 <SecureElementGetDevAddr+0x24>)
 800f5ac:	6812      	ldr	r2, [r2, #0]
 800f5ae:	6952      	ldr	r2, [r2, #20]
 800f5b0:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f5b2:	2000      	movs	r0, #0
 800f5b4:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f5b6:	4a04      	ldr	r2, [pc, #16]	; (800f5c8 <SecureElementGetDevAddr+0x24>)
 800f5b8:	6812      	ldr	r2, [r2, #0]
 800f5ba:	6912      	ldr	r2, [r2, #16]
 800f5bc:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f5be:	2000      	movs	r0, #0
 800f5c0:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 800f5c2:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop
 800f5c8:	20000e54 	.word	0x20000e54

0800f5cc <SecureElementInitMcuID>:
{
 800f5cc:	b530      	push	{r4, r5, lr}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	4605      	mov	r5, r0
 800f5d2:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 800f5d8:	a802      	add	r0, sp, #8
 800f5da:	f7ff ffa9 	bl	800f530 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800f5de:	a901      	add	r1, sp, #4
 800f5e0:	2001      	movs	r0, #1
 800f5e2:	f7ff ffdf 	bl	800f5a4 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 800f5e6:	b195      	cbz	r5, 800f60e <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	2b07      	cmp	r3, #7
 800f5ec:	d808      	bhi.n	800f600 <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 800f5ee:	f103 0210 	add.w	r2, r3, #16
 800f5f2:	446a      	add	r2, sp
 800f5f4:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800f5f8:	b9aa      	cbnz	r2, 800f626 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	e7f4      	b.n	800f5ea <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 800f600:	2300      	movs	r3, #0
        if( id_init == false )
 800f602:	b923      	cbnz	r3, 800f60e <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 800f604:	a802      	add	r0, sp, #8
 800f606:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 800f608:	a802      	add	r0, sp, #8
 800f60a:	f7ff ff83 	bl	800f514 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800f60e:	b13c      	cbz	r4, 800f620 <SecureElementInitMcuID+0x54>
 800f610:	9b01      	ldr	r3, [sp, #4]
 800f612:	b92b      	cbnz	r3, 800f620 <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 800f614:	a801      	add	r0, sp, #4
 800f616:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800f618:	9901      	ldr	r1, [sp, #4]
 800f61a:	2001      	movs	r0, #1
 800f61c:	f7ff ffb4 	bl	800f588 <SecureElementSetDevAddr>
}
 800f620:	2000      	movs	r0, #0
 800f622:	b005      	add	sp, #20
 800f624:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 800f626:	2301      	movs	r3, #1
 800f628:	e7eb      	b.n	800f602 <SecureElementInitMcuID+0x36>
	...

0800f62c <PrintIds>:
{
 800f62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f62e:	b08f      	sub	sp, #60	; 0x3c
 800f630:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 800f632:	2400      	movs	r4, #0
 800f634:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 800f636:	a80a      	add	r0, sp, #40	; 0x28
 800f638:	f7ff ff7a 	bl	800f530 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800f63c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800f640:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800f644:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 800f648:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 800f64c:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 800f650:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 800f654:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 800f658:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 800f65c:	f8cd e01c 	str.w	lr, [sp, #28]
 800f660:	f8cd c018 	str.w	ip, [sp, #24]
 800f664:	9705      	str	r7, [sp, #20]
 800f666:	9604      	str	r6, [sp, #16]
 800f668:	9003      	str	r0, [sp, #12]
 800f66a:	9102      	str	r1, [sp, #8]
 800f66c:	9201      	str	r2, [sp, #4]
 800f66e:	9300      	str	r3, [sp, #0]
 800f670:	4b20      	ldr	r3, [pc, #128]	; (800f6f4 <PrintIds+0xc8>)
 800f672:	4622      	mov	r2, r4
 800f674:	4621      	mov	r1, r4
 800f676:	2002      	movs	r0, #2
 800f678:	f001 ff74 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 800f67c:	a80c      	add	r0, sp, #48	; 0x30
 800f67e:	f7ff ff75 	bl	800f56c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800f682:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f686:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800f68a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 800f68e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800f692:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800f696:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 800f69a:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 800f69e:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 800f6a2:	f8cd e01c 	str.w	lr, [sp, #28]
 800f6a6:	f8cd c018 	str.w	ip, [sp, #24]
 800f6aa:	9705      	str	r7, [sp, #20]
 800f6ac:	9604      	str	r6, [sp, #16]
 800f6ae:	9003      	str	r0, [sp, #12]
 800f6b0:	9102      	str	r1, [sp, #8]
 800f6b2:	9201      	str	r2, [sp, #4]
 800f6b4:	9300      	str	r3, [sp, #0]
 800f6b6:	4b10      	ldr	r3, [pc, #64]	; (800f6f8 <PrintIds+0xcc>)
 800f6b8:	4622      	mov	r2, r4
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	2002      	movs	r0, #2
 800f6be:	f001 ff51 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 800f6c2:	a909      	add	r1, sp, #36	; 0x24
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f7ff ff6d 	bl	800f5a4 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800f6ca:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800f6ce:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800f6d2:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800f6d6:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800f6da:	9003      	str	r0, [sp, #12]
 800f6dc:	9102      	str	r1, [sp, #8]
 800f6de:	9201      	str	r2, [sp, #4]
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	4b06      	ldr	r3, [pc, #24]	; (800f6fc <PrintIds+0xd0>)
 800f6e4:	4622      	mov	r2, r4
 800f6e6:	4621      	mov	r1, r4
 800f6e8:	2002      	movs	r0, #2
 800f6ea:	f001 ff3b 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 800f6ee:	b00f      	add	sp, #60	; 0x3c
 800f6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	08012d8c 	.word	0x08012d8c
 800f6f8:	08012dcc 	.word	0x08012dcc
 800f6fc:	08012e0c 	.word	0x08012e0c

0800f700 <SecureElementPrintKeys>:
{
 800f700:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 800f702:	2000      	movs	r0, #0
 800f704:	f7ff fdaa 	bl	800f25c <PrintKey>
    PrintKey( NWK_KEY );
 800f708:	2001      	movs	r0, #1
 800f70a:	f7ff fda7 	bl	800f25c <PrintKey>
    PrintKey( APP_S_KEY );
 800f70e:	2009      	movs	r0, #9
 800f710:	f7ff fda4 	bl	800f25c <PrintKey>
    PrintKey( NWK_S_KEY );
 800f714:	2008      	movs	r0, #8
 800f716:	f7ff fda1 	bl	800f25c <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 800f71a:	2000      	movs	r0, #0
 800f71c:	f7ff ff86 	bl	800f62c <PrintIds>
}
 800f720:	2000      	movs	r0, #0
 800f722:	bd08      	pop	{r3, pc}

0800f724 <SecureElementPrintSessionKeys>:
{
 800f724:	b510      	push	{r4, lr}
 800f726:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 800f728:	200b      	movs	r0, #11
 800f72a:	f7ff fd97 	bl	800f25c <PrintKey>
    PrintKey( MC_KE_KEY );
 800f72e:	200c      	movs	r0, #12
 800f730:	f7ff fd94 	bl	800f25c <PrintKey>
    PrintKey( APP_S_KEY );
 800f734:	2009      	movs	r0, #9
 800f736:	f7ff fd91 	bl	800f25c <PrintKey>
    PrintKey( NWK_S_KEY );
 800f73a:	2008      	movs	r0, #8
 800f73c:	f7ff fd8e 	bl	800f25c <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 800f740:	200a      	movs	r0, #10
 800f742:	f7ff fd8b 	bl	800f25c <PrintKey>
    PrintIds( mode );
 800f746:	4620      	mov	r0, r4
 800f748:	f7ff ff70 	bl	800f62c <PrintIds>
}
 800f74c:	2000      	movs	r0, #0
 800f74e:	bd10      	pop	{r4, pc}

0800f750 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800f750:	4b09      	ldr	r3, [pc, #36]	; (800f778 <rand1+0x28>)
 800f752:	681a      	ldr	r2, [r3, #0]
 800f754:	4909      	ldr	r1, [pc, #36]	; (800f77c <rand1+0x2c>)
 800f756:	f243 0039 	movw	r0, #12345	; 0x3039
 800f75a:	fb01 0002 	mla	r0, r1, r2, r0
 800f75e:	6018      	str	r0, [r3, #0]
 800f760:	2303      	movs	r3, #3
 800f762:	fba3 2300 	umull	r2, r3, r3, r0
 800f766:	1ac2      	subs	r2, r0, r3
 800f768:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800f76c:	0f9b      	lsrs	r3, r3, #30
 800f76e:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800f772:	1ac0      	subs	r0, r0, r3
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop
 800f778:	200000f8 	.word	0x200000f8
 800f77c:	41c64e6d 	.word	0x41c64e6d

0800f780 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800f780:	4b01      	ldr	r3, [pc, #4]	; (800f788 <srand1+0x8>)
 800f782:	6018      	str	r0, [r3, #0]
}
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop
 800f788:	200000f8 	.word	0x200000f8

0800f78c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800f78c:	b538      	push	{r3, r4, r5, lr}
 800f78e:	4605      	mov	r5, r0
 800f790:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800f792:	f7ff ffdd 	bl	800f750 <rand1>
 800f796:	1b61      	subs	r1, r4, r5
 800f798:	3101      	adds	r1, #1
 800f79a:	fb90 f3f1 	sdiv	r3, r0, r1
 800f79e:	fb01 0013 	mls	r0, r1, r3, r0
}
 800f7a2:	4428      	add	r0, r5
 800f7a4:	bd38      	pop	{r3, r4, r5, pc}

0800f7a6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800f7a6:	e004      	b.n	800f7b2 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800f7a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7ac:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	1e53      	subs	r3, r2, #1
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	2a00      	cmp	r2, #0
 800f7b8:	d1f6      	bne.n	800f7a8 <memcpy1+0x2>
    }
}
 800f7ba:	4770      	bx	lr

0800f7bc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800f7bc:	1e53      	subs	r3, r2, #1
 800f7be:	4418      	add	r0, r3
    while( size-- )
 800f7c0:	e004      	b.n	800f7cc <memcpyr+0x10>
    {
        *dst-- = *src++;
 800f7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7c6:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	1e53      	subs	r3, r2, #1
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	2a00      	cmp	r2, #0
 800f7d2:	d1f6      	bne.n	800f7c2 <memcpyr+0x6>
    }
}
 800f7d4:	4770      	bx	lr

0800f7d6 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800f7d6:	e002      	b.n	800f7de <memset1+0x8>
    {
        *dst++ = value;
 800f7d8:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800f7dc:	461a      	mov	r2, r3
 800f7de:	1e53      	subs	r3, r2, #1
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	2a00      	cmp	r2, #0
 800f7e4:	d1f8      	bne.n	800f7d8 <memset1+0x2>
    }
}
 800f7e6:	4770      	bx	lr

0800f7e8 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800f7e8:	b1f0      	cbz	r0, 800f828 <Crc32+0x40>
{
 800f7ea:	b510      	push	{r4, lr}
 800f7ec:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800f7ee:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800f7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f6:	e00e      	b.n	800f816 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800f7f8:	f340 0c00 	sbfx	ip, r0, #0, #1
 800f7fc:	4a0b      	ldr	r2, [pc, #44]	; (800f82c <Crc32+0x44>)
 800f7fe:	ea0c 0202 	and.w	r2, ip, r2
 800f802:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800f806:	3301      	adds	r3, #1
 800f808:	b29b      	uxth	r3, r3
 800f80a:	2b07      	cmp	r3, #7
 800f80c:	d9f4      	bls.n	800f7f8 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800f80e:	f10e 0e01 	add.w	lr, lr, #1
 800f812:	fa1f fe8e 	uxth.w	lr, lr
 800f816:	458e      	cmp	lr, r1
 800f818:	d204      	bcs.n	800f824 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800f81a:	f814 300e 	ldrb.w	r3, [r4, lr]
 800f81e:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800f820:	2300      	movs	r3, #0
 800f822:	e7f2      	b.n	800f80a <Crc32+0x22>
        }
    }

    return ~crc;
 800f824:	43c0      	mvns	r0, r0
}
 800f826:	bd10      	pop	{r4, pc}
        return 0;
 800f828:	2000      	movs	r0, #0
}
 800f82a:	4770      	bx	lr
 800f82c:	edb88320 	.word	0xedb88320

0800f830 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800f830:	2001      	movs	r0, #1
 800f832:	4770      	bx	lr

0800f834 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800f834:	280a      	cmp	r0, #10
 800f836:	d807      	bhi.n	800f848 <RadioGetLoRaBandwidthInHz+0x14>
 800f838:	e8df f000 	tbb	[pc, r0]
 800f83c:	17110b20 	.word	0x17110b20
 800f840:	061e1c1a 	.word	0x061e1c1a
 800f844:	0e08      	.short	0x0e08
 800f846:	14          	.byte	0x14
 800f847:	00          	.byte	0x00
 800f848:	2000      	movs	r0, #0
 800f84a:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800f84c:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800f850:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800f852:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800f856:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800f858:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800f85c:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800f85e:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800f862:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800f864:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800f868:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800f86a:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800f86e:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800f870:	4804      	ldr	r0, [pc, #16]	; (800f884 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800f872:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800f874:	4804      	ldr	r0, [pc, #16]	; (800f888 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800f876:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800f878:	4804      	ldr	r0, [pc, #16]	; (800f88c <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800f87a:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800f87c:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	0001e848 	.word	0x0001e848
 800f888:	0003d090 	.word	0x0003d090
 800f88c:	0007a120 	.word	0x0007a120

0800f890 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f890:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 800f894:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f896:	b953      	cbnz	r3, 800f8ae <RadioGetGfskTimeOnAirNumerator+0x1e>
 800f898:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 800f89a:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f89c:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f89e:	b141      	cbz	r1, 800f8b2 <RadioGetGfskTimeOnAirNumerator+0x22>
 800f8a0:	2302      	movs	r3, #2
 800f8a2:	f89d 0000 	ldrb.w	r0, [sp]
 800f8a6:	4418      	add	r0, r3
}
 800f8a8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800f8ac:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f8ae:	2000      	movs	r0, #0
 800f8b0:	e7f3      	b.n	800f89a <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	e7f5      	b.n	800f8a2 <RadioGetGfskTimeOnAirNumerator+0x12>

0800f8b6 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f8b6:	b570      	push	{r4, r5, r6, lr}
 800f8b8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800f8bc:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800f8c0:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800f8c2:	f1a1 0c05 	sub.w	ip, r1, #5
 800f8c6:	f1bc 0f01 	cmp.w	ip, #1
 800f8ca:	d932      	bls.n	800f932 <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f8cc:	b918      	cbnz	r0, 800f8d6 <RadioGetLoRaTimeOnAirNumerator+0x20>
 800f8ce:	f1a1 060b 	sub.w	r6, r1, #11
 800f8d2:	2e01      	cmp	r6, #1
 800f8d4:	d935      	bls.n	800f942 <RadioGetLoRaTimeOnAirNumerator+0x8c>
 800f8d6:	2801      	cmp	r0, #1
 800f8d8:	d02f      	beq.n	800f93a <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800f8da:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f8dc:	f89d e014 	ldrb.w	lr, [sp, #20]
 800f8e0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800f8e4:	b38d      	cbz	r5, 800f94a <RadioGetLoRaTimeOnAirNumerator+0x94>
 800f8e6:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f8ea:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800f8ec:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800f8ee:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800f8f2:	b36c      	cbz	r4, 800f950 <RadioGetLoRaTimeOnAirNumerator+0x9a>
 800f8f4:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800f8f8:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800f8fa:	2906      	cmp	r1, #6
 800f8fc:	d904      	bls.n	800f908 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800f8fe:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800f902:	b10e      	cbz	r6, 800f908 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800f904:	1e88      	subs	r0, r1, #2
 800f906:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800f908:	f1bc 0f00 	cmp.w	ip, #0
 800f90c:	db23      	blt.n	800f956 <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800f90e:	4484      	add	ip, r0
 800f910:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f914:	fb9c fcf0 	sdiv	ip, ip, r0
 800f918:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800f91c:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800f920:	2906      	cmp	r1, #6
 800f922:	d801      	bhi.n	800f928 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 800f924:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800f928:	0080      	lsls	r0, r0, #2
 800f92a:	3001      	adds	r0, #1
 800f92c:	3902      	subs	r1, #2
}
 800f92e:	4088      	lsls	r0, r1
 800f930:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800f932:	2b0b      	cmp	r3, #11
 800f934:	d8ca      	bhi.n	800f8cc <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800f936:	230c      	movs	r3, #12
 800f938:	e7c8      	b.n	800f8cc <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f93a:	290c      	cmp	r1, #12
 800f93c:	d003      	beq.n	800f946 <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800f93e:	2600      	movs	r6, #0
 800f940:	e7cc      	b.n	800f8dc <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800f942:	2601      	movs	r6, #1
 800f944:	e7ca      	b.n	800f8dc <RadioGetLoRaTimeOnAirNumerator+0x26>
 800f946:	2601      	movs	r6, #1
 800f948:	e7c8      	b.n	800f8dc <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800f94a:	f04f 0c00 	mov.w	ip, #0
 800f94e:	e7cc      	b.n	800f8ea <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800f950:	f04f 0c14 	mov.w	ip, #20
 800f954:	e7d0      	b.n	800f8f8 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800f956:	f04f 0c00 	mov.w	ip, #0
 800f95a:	e7d8      	b.n	800f90e <RadioGetLoRaTimeOnAirNumerator+0x58>

0800f95c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800f95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f95e:	b085      	sub	sp, #20
 800f960:	460e      	mov	r6, r1
 800f962:	4615      	mov	r5, r2
 800f964:	4619      	mov	r1, r3
 800f966:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800f96a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800f96e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800f972:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800f976:	b148      	cbz	r0, 800f98c <RadioTimeOnAir+0x30>
 800f978:	2801      	cmp	r0, #1
 800f97a:	d012      	beq.n	800f9a2 <RadioTimeOnAir+0x46>
 800f97c:	2501      	movs	r5, #1
 800f97e:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800f980:	442c      	add	r4, r5
 800f982:	1e60      	subs	r0, r4, #1
}
 800f984:	fbb0 f0f5 	udiv	r0, r0, r5
 800f988:	b005      	add	sp, #20
 800f98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800f98c:	f8cd c004 	str.w	ip, [sp, #4]
 800f990:	9700      	str	r7, [sp, #0]
 800f992:	4628      	mov	r0, r5
 800f994:	f7ff ff7c 	bl	800f890 <RadioGetGfskTimeOnAirNumerator>
 800f998:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f99c:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800f9a0:	e7ee      	b.n	800f980 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800f9a2:	f8cd c008 	str.w	ip, [sp, #8]
 800f9a6:	9701      	str	r7, [sp, #4]
 800f9a8:	9300      	str	r3, [sp, #0]
 800f9aa:	4613      	mov	r3, r2
 800f9ac:	460a      	mov	r2, r1
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	f7ff ff80 	bl	800f8b6 <RadioGetLoRaTimeOnAirNumerator>
 800f9b6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f9ba:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800f9be:	4b03      	ldr	r3, [pc, #12]	; (800f9cc <RadioTimeOnAir+0x70>)
 800f9c0:	5d98      	ldrb	r0, [r3, r6]
 800f9c2:	f7ff ff37 	bl	800f834 <RadioGetLoRaBandwidthInHz>
 800f9c6:	4605      	mov	r5, r0
        break;
 800f9c8:	e7da      	b.n	800f980 <RadioTimeOnAir+0x24>
 800f9ca:	bf00      	nop
 800f9cc:	08012fb8 	.word	0x08012fb8

0800f9d0 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800f9d0:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800f9d2:	4b05      	ldr	r3, [pc, #20]	; (800f9e8 <RadioOnTxTimeoutProcess+0x18>)
 800f9d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f9d8:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f9da:	4b04      	ldr	r3, [pc, #16]	; (800f9ec <RadioOnTxTimeoutProcess+0x1c>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	b113      	cbz	r3, 800f9e6 <RadioOnTxTimeoutProcess+0x16>
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	b103      	cbz	r3, 800f9e6 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 800f9e4:	4798      	blx	r3
    }
}
 800f9e6:	bd08      	pop	{r3, pc}
 800f9e8:	48000400 	.word	0x48000400
 800f9ec:	20000f58 	.word	0x20000f58

0800f9f0 <RadioOnTxTimeoutIrq>:
{
 800f9f0:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800f9f2:	f7ff ffed 	bl	800f9d0 <RadioOnTxTimeoutProcess>
}
 800f9f6:	bd08      	pop	{r3, pc}

0800f9f8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800f9f8:	b508      	push	{r3, lr}
 800f9fa:	4b05      	ldr	r3, [pc, #20]	; (800fa10 <RadioOnRxTimeoutProcess+0x18>)
 800f9fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fa00:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fa02:	4b04      	ldr	r3, [pc, #16]	; (800fa14 <RadioOnRxTimeoutProcess+0x1c>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	b113      	cbz	r3, 800fa0e <RadioOnRxTimeoutProcess+0x16>
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	b103      	cbz	r3, 800fa0e <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 800fa0c:	4798      	blx	r3
    }
}
 800fa0e:	bd08      	pop	{r3, pc}
 800fa10:	48000400 	.word	0x48000400
 800fa14:	20000f58 	.word	0x20000f58

0800fa18 <RadioOnRxTimeoutIrq>:
{
 800fa18:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800fa1a:	f7ff ffed 	bl	800f9f8 <RadioOnRxTimeoutProcess>
}
 800fa1e:	bd08      	pop	{r3, pc}

0800fa20 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800fa20:	f04f 30ff 	mov.w	r0, #4294967295
 800fa24:	4770      	bx	lr

0800fa26 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800fa26:	f04f 30ff 	mov.w	r0, #4294967295
 800fa2a:	4770      	bx	lr

0800fa2c <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 800fa2c:	2001      	movs	r0, #1
 800fa2e:	4770      	bx	lr

0800fa30 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 800fa30:	2001      	movs	r0, #1
 800fa32:	4770      	bx	lr

0800fa34 <RadioWrite>:
{
 800fa34:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800fa36:	f000 fe37 	bl	80106a8 <SUBGRF_WriteRegister>
}
 800fa3a:	bd08      	pop	{r3, pc}

0800fa3c <RadioTxCw>:
{
 800fa3c:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800fa3e:	f001 fbcf 	bl	80111e0 <SUBGRF_SetRfTxPower>
 800fa42:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800fa44:	210e      	movs	r1, #14
 800fa46:	f640 101f 	movw	r0, #2335	; 0x91f
 800fa4a:	f000 fe2d 	bl	80106a8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800fa4e:	2101      	movs	r1, #1
 800fa50:	4620      	mov	r0, r4
 800fa52:	f001 fbb1 	bl	80111b8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800fa56:	f000 fff7 	bl	8010a48 <SUBGRF_SetTxContinuousWave>
}
 800fa5a:	bd10      	pop	{r4, pc}

0800fa5c <RadioTxPrbs>:
{
 800fa5c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800fa5e:	2101      	movs	r1, #1
 800fa60:	4b07      	ldr	r3, [pc, #28]	; (800fa80 <RadioTxPrbs+0x24>)
 800fa62:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800fa66:	f001 fba7 	bl	80111b8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800fa6a:	212d      	movs	r1, #45	; 0x2d
 800fa6c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fa70:	f7ff ffe0 	bl	800fa34 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800fa74:	f000 ffef 	bl	8010a56 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800fa78:	4802      	ldr	r0, [pc, #8]	; (800fa84 <RadioTxPrbs+0x28>)
 800fa7a:	f000 ff25 	bl	80108c8 <SUBGRF_SetTx>
}
 800fa7e:	bd08      	pop	{r3, pc}
 800fa80:	20000f74 	.word	0x20000f74
 800fa84:	000fffff 	.word	0x000fffff

0800fa88 <RadioSetRxDutyCycle>:
{
 800fa88:	b570      	push	{r4, r5, r6, lr}
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800fa8e:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800fa92:	4e09      	ldr	r6, [pc, #36]	; (800fab8 <RadioSetRxDutyCycle+0x30>)
 800fa94:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800fa96:	2300      	movs	r3, #0
 800fa98:	461a      	mov	r2, r3
 800fa9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fa9e:	4608      	mov	r0, r1
 800faa0:	f001 f8a5 	bl	8010bee <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800faa4:	2100      	movs	r1, #0
 800faa6:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800faaa:	f001 fb85 	bl	80111b8 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800faae:	4629      	mov	r1, r5
 800fab0:	4620      	mov	r0, r4
 800fab2:	f000 ff99 	bl	80109e8 <SUBGRF_SetRxDutyCycle>
}
 800fab6:	bd70      	pop	{r4, r5, r6, pc}
 800fab8:	20000f74 	.word	0x20000f74

0800fabc <RadioRxBoosted>:
{
 800fabc:	b538      	push	{r3, r4, r5, lr}
 800fabe:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800fac0:	f001 fc69 	bl	8011396 <RFW_Is_Init>
 800fac4:	2801      	cmp	r0, #1
 800fac6:	d019      	beq.n	800fafc <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800fac8:	2300      	movs	r3, #0
 800faca:	461a      	mov	r2, r3
 800facc:	f240 2162 	movw	r1, #610	; 0x262
 800fad0:	4608      	mov	r0, r1
 800fad2:	f001 f88c 	bl	8010bee <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800fad6:	b9a4      	cbnz	r4, 800fb02 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800fad8:	4c11      	ldr	r4, [pc, #68]	; (800fb20 <RadioRxBoosted+0x64>)
 800fada:	2100      	movs	r1, #0
 800fadc:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800fade:	4b11      	ldr	r3, [pc, #68]	; (800fb24 <RadioRxBoosted+0x68>)
 800fae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fae4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800fae6:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800faea:	f001 fb65 	bl	80111b8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800faee:	7863      	ldrb	r3, [r4, #1]
 800faf0:	b183      	cbz	r3, 800fb14 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800faf2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800faf6:	f000 ff59 	bl	80109ac <SUBGRF_SetRxBoosted>
}
 800fafa:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800fafc:	f001 fc53 	bl	80113a6 <RFW_ReceiveInit>
 800fb00:	e7e9      	b.n	800fad6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800fb02:	4d09      	ldr	r5, [pc, #36]	; (800fb28 <RadioRxBoosted+0x6c>)
 800fb04:	4621      	mov	r1, r4
 800fb06:	4628      	mov	r0, r5
 800fb08:	f002 f920 	bl	8011d4c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	f002 f8d7 	bl	8011cc0 <UTIL_TIMER_Start>
 800fb12:	e7e1      	b.n	800fad8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800fb14:	4b02      	ldr	r3, [pc, #8]	; (800fb20 <RadioRxBoosted+0x64>)
 800fb16:	6898      	ldr	r0, [r3, #8]
 800fb18:	0180      	lsls	r0, r0, #6
 800fb1a:	f000 ff47 	bl	80109ac <SUBGRF_SetRxBoosted>
}
 800fb1e:	e7ec      	b.n	800fafa <RadioRxBoosted+0x3e>
 800fb20:	20000f74 	.word	0x20000f74
 800fb24:	48000400 	.word	0x48000400
 800fb28:	20000f5c 	.word	0x20000f5c

0800fb2c <RadioStandby>:
{
 800fb2c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800fb2e:	2000      	movs	r0, #0
 800fb30:	f000 feb0 	bl	8010894 <SUBGRF_SetStandby>
}
 800fb34:	bd08      	pop	{r3, pc}

0800fb36 <RadioRead>:
{
 800fb36:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800fb38:	f000 fdc6 	bl	80106c8 <SUBGRF_ReadRegister>
}
 800fb3c:	bd08      	pop	{r3, pc}

0800fb3e <RadioGetStatus>:
{
 800fb3e:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800fb40:	f000 fda6 	bl	8010690 <SUBGRF_GetOperatingMode>
 800fb44:	2805      	cmp	r0, #5
 800fb46:	d007      	beq.n	800fb58 <RadioGetStatus+0x1a>
 800fb48:	2807      	cmp	r0, #7
 800fb4a:	d007      	beq.n	800fb5c <RadioGetStatus+0x1e>
 800fb4c:	2804      	cmp	r0, #4
 800fb4e:	d001      	beq.n	800fb54 <RadioGetStatus+0x16>
            return RF_IDLE;
 800fb50:	2000      	movs	r0, #0
}
 800fb52:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800fb54:	2002      	movs	r0, #2
 800fb56:	e7fc      	b.n	800fb52 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800fb58:	2001      	movs	r0, #1
 800fb5a:	e7fa      	b.n	800fb52 <RadioGetStatus+0x14>
            return RF_CAD;
 800fb5c:	2003      	movs	r0, #3
 800fb5e:	e7f8      	b.n	800fb52 <RadioGetStatus+0x14>

0800fb60 <RadioIrqProcess>:
{
 800fb60:	b530      	push	{r4, r5, lr}
 800fb62:	b083      	sub	sp, #12
    uint8_t size = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800fb6a:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800fb6c:	4ba5      	ldr	r3, [pc, #660]	; (800fe04 <RadioIrqProcess+0x2a4>)
 800fb6e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800fb72:	2b20      	cmp	r3, #32
 800fb74:	d829      	bhi.n	800fbca <RadioIrqProcess+0x6a>
 800fb76:	b21a      	sxth	r2, r3
 800fb78:	2a00      	cmp	r2, #0
 800fb7a:	f000 8140 	beq.w	800fdfe <RadioIrqProcess+0x29e>
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	2b1f      	cmp	r3, #31
 800fb82:	f200 813c 	bhi.w	800fdfe <RadioIrqProcess+0x29e>
 800fb86:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fb8a:	0063      	.short	0x0063
 800fb8c:	013a007f 	.word	0x013a007f
 800fb90:	013a00f7 	.word	0x013a00f7
 800fb94:	013a013a 	.word	0x013a013a
 800fb98:	013a0127 	.word	0x013a0127
 800fb9c:	013a013a 	.word	0x013a013a
 800fba0:	013a013a 	.word	0x013a013a
 800fba4:	013a013a 	.word	0x013a013a
 800fba8:	013a0134 	.word	0x013a0134
 800fbac:	013a013a 	.word	0x013a013a
 800fbb0:	013a013a 	.word	0x013a013a
 800fbb4:	013a013a 	.word	0x013a013a
 800fbb8:	013a013a 	.word	0x013a013a
 800fbbc:	013a013a 	.word	0x013a013a
 800fbc0:	013a013a 	.word	0x013a013a
 800fbc4:	013a013a 	.word	0x013a013a
 800fbc8:	0155      	.short	0x0155
 800fbca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbce:	f000 80b3 	beq.w	800fd38 <RadioIrqProcess+0x1d8>
 800fbd2:	d928      	bls.n	800fc26 <RadioIrqProcess+0xc6>
 800fbd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbd8:	f040 8111 	bne.w	800fdfe <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800fbdc:	4b8a      	ldr	r3, [pc, #552]	; (800fe08 <RadioIrqProcess+0x2a8>)
 800fbde:	2201      	movs	r2, #1
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	2002      	movs	r0, #2
 800fbe4:	f001 fcbe 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800fbe8:	f000 fd52 	bl	8010690 <SUBGRF_GetOperatingMode>
 800fbec:	2804      	cmp	r0, #4
 800fbee:	f000 80b0 	beq.w	800fd52 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800fbf2:	f000 fd4d 	bl	8010690 <SUBGRF_GetOperatingMode>
 800fbf6:	2805      	cmp	r0, #5
 800fbf8:	f040 8101 	bne.w	800fdfe <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800fbfc:	4b83      	ldr	r3, [pc, #524]	; (800fe0c <RadioIrqProcess+0x2ac>)
 800fbfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fc02:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 800fc04:	4882      	ldr	r0, [pc, #520]	; (800fe10 <RadioIrqProcess+0x2b0>)
 800fc06:	f002 f801 	bl	8011c0c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800fc0a:	2000      	movs	r0, #0
 800fc0c:	f000 fe42 	bl	8010894 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fc10:	4b80      	ldr	r3, [pc, #512]	; (800fe14 <RadioIrqProcess+0x2b4>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	f000 80f2 	beq.w	800fdfe <RadioIrqProcess+0x29e>
 800fc1a:	68db      	ldr	r3, [r3, #12]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	f000 80ee 	beq.w	800fdfe <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800fc22:	4798      	blx	r3
 800fc24:	e0eb      	b.n	800fdfe <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800fc26:	2b40      	cmp	r3, #64	; 0x40
 800fc28:	f000 811d 	beq.w	800fe66 <RadioIrqProcess+0x306>
 800fc2c:	2b80      	cmp	r3, #128	; 0x80
 800fc2e:	f040 80e6 	bne.w	800fdfe <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800fc32:	2000      	movs	r0, #0
 800fc34:	f000 fe2e 	bl	8010894 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800fc38:	4b76      	ldr	r3, [pc, #472]	; (800fe14 <RadioIrqProcess+0x2b4>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f000 80de 	beq.w	800fdfe <RadioIrqProcess+0x29e>
 800fc42:	699b      	ldr	r3, [r3, #24]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	f000 80da 	beq.w	800fdfe <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 800fc4a:	2000      	movs	r0, #0
 800fc4c:	4798      	blx	r3
 800fc4e:	e0d6      	b.n	800fdfe <RadioIrqProcess+0x29e>
 800fc50:	4b6e      	ldr	r3, [pc, #440]	; (800fe0c <RadioIrqProcess+0x2ac>)
 800fc52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fc56:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 800fc58:	486f      	ldr	r0, [pc, #444]	; (800fe18 <RadioIrqProcess+0x2b8>)
 800fc5a:	f001 ffd7 	bl	8011c0c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800fc5e:	2000      	movs	r0, #0
 800fc60:	f000 fe18 	bl	8010894 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800fc64:	f001 fb99 	bl	801139a <RFW_Is_LongPacketModeEnabled>
 800fc68:	2801      	cmp	r0, #1
 800fc6a:	d00a      	beq.n	800fc82 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800fc6c:	4b69      	ldr	r3, [pc, #420]	; (800fe14 <RadioIrqProcess+0x2b4>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f000 80c4 	beq.w	800fdfe <RadioIrqProcess+0x29e>
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f000 80c0 	beq.w	800fdfe <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800fc7e:	4798      	blx	r3
 800fc80:	e0bd      	b.n	800fdfe <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800fc82:	f001 fb93 	bl	80113ac <RFW_DeInit_TxLongPacket>
 800fc86:	e7f1      	b.n	800fc6c <RadioIrqProcess+0x10c>
 800fc88:	4b60      	ldr	r3, [pc, #384]	; (800fe0c <RadioIrqProcess+0x2ac>)
 800fc8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fc8e:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 800fc90:	485f      	ldr	r0, [pc, #380]	; (800fe10 <RadioIrqProcess+0x2b0>)
 800fc92:	f001 ffbb 	bl	8011c0c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800fc96:	4b5b      	ldr	r3, [pc, #364]	; (800fe04 <RadioIrqProcess+0x2a4>)
 800fc98:	785b      	ldrb	r3, [r3, #1]
 800fc9a:	b303      	cbz	r3, 800fcde <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800fc9c:	22ff      	movs	r2, #255	; 0xff
 800fc9e:	f10d 0107 	add.w	r1, sp, #7
 800fca2:	485e      	ldr	r0, [pc, #376]	; (800fe1c <RadioIrqProcess+0x2bc>)
 800fca4:	f001 fa32 	bl	801110c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800fca8:	485d      	ldr	r0, [pc, #372]	; (800fe20 <RadioIrqProcess+0x2c0>)
 800fcaa:	f001 fa49 	bl	8011140 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800fcae:	4b59      	ldr	r3, [pc, #356]	; (800fe14 <RadioIrqProcess+0x2b4>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	f000 80a3 	beq.w	800fdfe <RadioIrqProcess+0x29e>
 800fcb8:	689c      	ldr	r4, [r3, #8]
 800fcba:	2c00      	cmp	r4, #0
 800fcbc:	f000 809f 	beq.w	800fdfe <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800fcc0:	4b50      	ldr	r3, [pc, #320]	; (800fe04 <RadioIrqProcess+0x2a4>)
 800fcc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fcc6:	2b01      	cmp	r3, #1
 800fcc8:	d11d      	bne.n	800fd06 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800fcca:	4a4e      	ldr	r2, [pc, #312]	; (800fe04 <RadioIrqProcess+0x2a4>)
 800fccc:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800fcd0:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800fcd4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fcd8:	4850      	ldr	r0, [pc, #320]	; (800fe1c <RadioIrqProcess+0x2bc>)
 800fcda:	47a0      	blx	r4
                break;
 800fcdc:	e08f      	b.n	800fdfe <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800fcde:	2000      	movs	r0, #0
 800fce0:	f000 fdd8 	bl	8010894 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800fce4:	2100      	movs	r1, #0
 800fce6:	f640 1002 	movw	r0, #2306	; 0x902
 800fcea:	f000 fcdd 	bl	80106a8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800fcee:	f640 1044 	movw	r0, #2372	; 0x944
 800fcf2:	f000 fce9 	bl	80106c8 <SUBGRF_ReadRegister>
 800fcf6:	f040 0102 	orr.w	r1, r0, #2
 800fcfa:	b2c9      	uxtb	r1, r1
 800fcfc:	f640 1044 	movw	r0, #2372	; 0x944
 800fd00:	f000 fcd2 	bl	80106a8 <SUBGRF_WriteRegister>
 800fd04:	e7ca      	b.n	800fc9c <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800fd06:	4c3f      	ldr	r4, [pc, #252]	; (800fe04 <RadioIrqProcess+0x2a4>)
 800fd08:	4669      	mov	r1, sp
 800fd0a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800fd0c:	f001 faf8 	bl	8011300 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800fd10:	4b40      	ldr	r3, [pc, #256]	; (800fe14 <RadioIrqProcess+0x2b4>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	689d      	ldr	r5, [r3, #8]
 800fd16:	9b00      	ldr	r3, [sp, #0]
 800fd18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fd1c:	4a41      	ldr	r2, [pc, #260]	; (800fe24 <RadioIrqProcess+0x2c4>)
 800fd1e:	fb82 1203 	smull	r1, r2, r2, r3
 800fd22:	17db      	asrs	r3, r3, #31
 800fd24:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800fd28:	b25b      	sxtb	r3, r3
 800fd2a:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800fd2e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fd32:	483a      	ldr	r0, [pc, #232]	; (800fe1c <RadioIrqProcess+0x2bc>)
 800fd34:	47a8      	blx	r5
                break;
 800fd36:	e062      	b.n	800fdfe <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800fd38:	2000      	movs	r0, #0
 800fd3a:	f000 fdab 	bl	8010894 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800fd3e:	4b35      	ldr	r3, [pc, #212]	; (800fe14 <RadioIrqProcess+0x2b4>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d05b      	beq.n	800fdfe <RadioIrqProcess+0x29e>
 800fd46:	699b      	ldr	r3, [r3, #24]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d058      	beq.n	800fdfe <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 800fd4c:	2001      	movs	r0, #1
 800fd4e:	4798      	blx	r3
 800fd50:	e055      	b.n	800fdfe <RadioIrqProcess+0x29e>
 800fd52:	4b2e      	ldr	r3, [pc, #184]	; (800fe0c <RadioIrqProcess+0x2ac>)
 800fd54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fd58:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 800fd5a:	482f      	ldr	r0, [pc, #188]	; (800fe18 <RadioIrqProcess+0x2b8>)
 800fd5c:	f001 ff56 	bl	8011c0c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800fd60:	2000      	movs	r0, #0
 800fd62:	f000 fd97 	bl	8010894 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800fd66:	4b2b      	ldr	r3, [pc, #172]	; (800fe14 <RadioIrqProcess+0x2b4>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d047      	beq.n	800fdfe <RadioIrqProcess+0x29e>
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d044      	beq.n	800fdfe <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 800fd74:	4798      	blx	r3
 800fd76:	e042      	b.n	800fdfe <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800fd78:	4b2b      	ldr	r3, [pc, #172]	; (800fe28 <RadioIrqProcess+0x2c8>)
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	2002      	movs	r0, #2
 800fd80:	f001 fbf0 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800fd84:	4b1f      	ldr	r3, [pc, #124]	; (800fe04 <RadioIrqProcess+0x2a4>)
 800fd86:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800fd88:	b3c9      	cbz	r1, 800fdfe <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800fd8a:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800fd8e:	f640 1003 	movw	r0, #2307	; 0x903
 800fd92:	f7ff fe4f 	bl	800fa34 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800fd96:	4c1b      	ldr	r4, [pc, #108]	; (800fe04 <RadioIrqProcess+0x2a4>)
 800fd98:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800fd9c:	f640 1004 	movw	r0, #2308	; 0x904
 800fda0:	f7ff fe48 	bl	800fa34 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800fda4:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 800fda8:	f640 1005 	movw	r0, #2309	; 0x905
 800fdac:	f7ff fe42 	bl	800fa34 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800fdb0:	f640 1002 	movw	r0, #2306	; 0x902
 800fdb4:	f7ff febf 	bl	800fb36 <RadioRead>
 800fdb8:	f040 0101 	orr.w	r1, r0, #1
 800fdbc:	b2c9      	uxtb	r1, r1
 800fdbe:	f640 1002 	movw	r0, #2306	; 0x902
 800fdc2:	f7ff fe37 	bl	800fa34 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800fdca:	4613      	mov	r3, r2
 800fdcc:	f240 2162 	movw	r1, #610	; 0x262
 800fdd0:	4608      	mov	r0, r1
 800fdd2:	f000 ff0c 	bl	8010bee <SUBGRF_SetDioIrqParams>
 800fdd6:	e012      	b.n	800fdfe <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800fdd8:	4b14      	ldr	r3, [pc, #80]	; (800fe2c <RadioIrqProcess+0x2cc>)
 800fdda:	2201      	movs	r2, #1
 800fddc:	2100      	movs	r1, #0
 800fdde:	2002      	movs	r0, #2
 800fde0:	f001 fbc0 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800fde4:	f001 fad7 	bl	8011396 <RFW_Is_Init>
 800fde8:	2801      	cmp	r0, #1
 800fdea:	d108      	bne.n	800fdfe <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 800fdec:	f001 fadf 	bl	80113ae <RFW_ReceivePayload>
 800fdf0:	e005      	b.n	800fdfe <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800fdf2:	4b0f      	ldr	r3, [pc, #60]	; (800fe30 <RadioIrqProcess+0x2d0>)
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	2100      	movs	r1, #0
 800fdf8:	2002      	movs	r0, #2
 800fdfa:	f001 fbb3 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
}
 800fdfe:	b003      	add	sp, #12
 800fe00:	bd30      	pop	{r4, r5, pc}
 800fe02:	bf00      	nop
 800fe04:	20000f74 	.word	0x20000f74
 800fe08:	08012f4c 	.word	0x08012f4c
 800fe0c:	48000400 	.word	0x48000400
 800fe10:	20000f5c 	.word	0x20000f5c
 800fe14:	20000f58 	.word	0x20000f58
 800fe18:	20000fd0 	.word	0x20000fd0
 800fe1c:	20000e58 	.word	0x20000e58
 800fe20:	20000f98 	.word	0x20000f98
 800fe24:	10624dd3 	.word	0x10624dd3
 800fe28:	08012f60 	.word	0x08012f60
 800fe2c:	08012f6c 	.word	0x08012f6c
 800fe30:	08012f78 	.word	0x08012f78
        TimerStop( &RxTimeoutTimer );
 800fe34:	4817      	ldr	r0, [pc, #92]	; (800fe94 <RadioIrqProcess+0x334>)
 800fe36:	f001 fee9 	bl	8011c0c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800fe3a:	4b17      	ldr	r3, [pc, #92]	; (800fe98 <RadioIrqProcess+0x338>)
 800fe3c:	785b      	ldrb	r3, [r3, #1]
 800fe3e:	b173      	cbz	r3, 800fe5e <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fe40:	4b16      	ldr	r3, [pc, #88]	; (800fe9c <RadioIrqProcess+0x33c>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d0da      	beq.n	800fdfe <RadioIrqProcess+0x29e>
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d0d7      	beq.n	800fdfe <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800fe4e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800fe50:	4b13      	ldr	r3, [pc, #76]	; (800fea0 <RadioIrqProcess+0x340>)
 800fe52:	2201      	movs	r2, #1
 800fe54:	2100      	movs	r1, #0
 800fe56:	2002      	movs	r0, #2
 800fe58:	f001 fb84 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
 800fe5c:	e7cf      	b.n	800fdfe <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800fe5e:	2000      	movs	r0, #0
 800fe60:	f000 fd18 	bl	8010894 <SUBGRF_SetStandby>
 800fe64:	e7ec      	b.n	800fe40 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800fe66:	4b0f      	ldr	r3, [pc, #60]	; (800fea4 <RadioIrqProcess+0x344>)
 800fe68:	2201      	movs	r2, #1
 800fe6a:	2100      	movs	r1, #0
 800fe6c:	2002      	movs	r0, #2
 800fe6e:	f001 fb79 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800fe72:	4b09      	ldr	r3, [pc, #36]	; (800fe98 <RadioIrqProcess+0x338>)
 800fe74:	785b      	ldrb	r3, [r3, #1]
 800fe76:	b143      	cbz	r3, 800fe8a <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800fe78:	4b08      	ldr	r3, [pc, #32]	; (800fe9c <RadioIrqProcess+0x33c>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d0be      	beq.n	800fdfe <RadioIrqProcess+0x29e>
 800fe80:	691b      	ldr	r3, [r3, #16]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d0bb      	beq.n	800fdfe <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 800fe86:	4798      	blx	r3
}
 800fe88:	e7b9      	b.n	800fdfe <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800fe8a:	2000      	movs	r0, #0
 800fe8c:	f000 fd02 	bl	8010894 <SUBGRF_SetStandby>
 800fe90:	e7f2      	b.n	800fe78 <RadioIrqProcess+0x318>
 800fe92:	bf00      	nop
 800fe94:	20000f5c 	.word	0x20000f5c
 800fe98:	20000f74 	.word	0x20000f74
 800fe9c:	20000f58 	.word	0x20000f58
 800fea0:	08012f84 	.word	0x08012f84
 800fea4:	08012f90 	.word	0x08012f90

0800fea8 <RadioOnDioIrq>:
{
 800fea8:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800feaa:	4b03      	ldr	r3, [pc, #12]	; (800feb8 <RadioOnDioIrq+0x10>)
 800feac:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800feb0:	f7ff fe56 	bl	800fb60 <RadioIrqProcess>
}
 800feb4:	bd08      	pop	{r3, pc}
 800feb6:	bf00      	nop
 800feb8:	20000f74 	.word	0x20000f74

0800febc <RadioGetWakeupTime>:
{
 800febc:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800febe:	f001 f9a6 	bl	801120e <SUBGRF_GetRadioWakeUpTime>
}
 800fec2:	3003      	adds	r0, #3
 800fec4:	bd08      	pop	{r3, pc}
	...

0800fec8 <RadioSetMaxPayloadLength>:
{
 800fec8:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800feca:	2801      	cmp	r0, #1
 800fecc:	d004      	beq.n	800fed8 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800fece:	4b0a      	ldr	r3, [pc, #40]	; (800fef8 <RadioSetMaxPayloadLength+0x30>)
 800fed0:	7d5b      	ldrb	r3, [r3, #21]
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	d008      	beq.n	800fee8 <RadioSetMaxPayloadLength+0x20>
}
 800fed6:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800fed8:	4b08      	ldr	r3, [pc, #32]	; (800fefc <RadioSetMaxPayloadLength+0x34>)
 800feda:	7019      	strb	r1, [r3, #0]
 800fedc:	4806      	ldr	r0, [pc, #24]	; (800fef8 <RadioSetMaxPayloadLength+0x30>)
 800fede:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fee0:	300e      	adds	r0, #14
 800fee2:	f001 f853 	bl	8010f8c <SUBGRF_SetPacketParams>
 800fee6:	e7f6      	b.n	800fed6 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800fee8:	4b04      	ldr	r3, [pc, #16]	; (800fefc <RadioSetMaxPayloadLength+0x34>)
 800feea:	7019      	strb	r1, [r3, #0]
 800feec:	4802      	ldr	r0, [pc, #8]	; (800fef8 <RadioSetMaxPayloadLength+0x30>)
 800feee:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fef0:	300e      	adds	r0, #14
 800fef2:	f001 f84b 	bl	8010f8c <SUBGRF_SetPacketParams>
}
 800fef6:	e7ee      	b.n	800fed6 <RadioSetMaxPayloadLength+0xe>
 800fef8:	20000f74 	.word	0x20000f74
 800fefc:	200000fc 	.word	0x200000fc

0800ff00 <RadioReadRegisters>:
{
 800ff00:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800ff02:	f000 fc5f 	bl	80107c4 <SUBGRF_ReadRegisters>
}
 800ff06:	bd08      	pop	{r3, pc}

0800ff08 <RadioWriteRegisters>:
{
 800ff08:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800ff0a:	f000 fc19 	bl	8010740 <SUBGRF_WriteRegisters>
}
 800ff0e:	bd08      	pop	{r3, pc}

0800ff10 <RadioRssi>:
{
 800ff10:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800ff12:	f001 f8cb 	bl	80110ac <SUBGRF_GetRssiInst>
}
 800ff16:	b200      	sxth	r0, r0
 800ff18:	bd08      	pop	{r3, pc}
	...

0800ff1c <RadioSetTxContinuousWave>:
{
 800ff1c:	b538      	push	{r3, r4, r5, lr}
 800ff1e:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800ff20:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800ff24:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 800ff28:	f000 fed4 	bl	8010cd4 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	f001 f957 	bl	80111e0 <SUBGRF_SetRfTxPower>
 800ff32:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800ff34:	210e      	movs	r1, #14
 800ff36:	f640 101f 	movw	r0, #2335	; 0x91f
 800ff3a:	f000 fbb5 	bl	80106a8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800ff3e:	2101      	movs	r1, #1
 800ff40:	4628      	mov	r0, r5
 800ff42:	f001 f939 	bl	80111b8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800ff46:	f000 fd7f 	bl	8010a48 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800ff4a:	4d04      	ldr	r5, [pc, #16]	; (800ff5c <RadioSetTxContinuousWave+0x40>)
 800ff4c:	4621      	mov	r1, r4
 800ff4e:	4628      	mov	r0, r5
 800ff50:	f001 fefc 	bl	8011d4c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ff54:	4628      	mov	r0, r5
 800ff56:	f001 feb3 	bl	8011cc0 <UTIL_TIMER_Start>
}
 800ff5a:	bd38      	pop	{r3, r4, r5, pc}
 800ff5c:	20000fd0 	.word	0x20000fd0

0800ff60 <RadioSetChannel>:
{
 800ff60:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800ff62:	f000 feb7 	bl	8010cd4 <SUBGRF_SetRfFrequency>
}
 800ff66:	bd08      	pop	{r3, pc}

0800ff68 <RadioStartCad>:
{
 800ff68:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800ff6a:	2100      	movs	r1, #0
 800ff6c:	4b07      	ldr	r3, [pc, #28]	; (800ff8c <RadioStartCad+0x24>)
 800ff6e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800ff72:	f001 f921 	bl	80111b8 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800ff76:	2300      	movs	r3, #0
 800ff78:	461a      	mov	r2, r3
 800ff7a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800ff7e:	4608      	mov	r0, r1
 800ff80:	f000 fe35 	bl	8010bee <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800ff84:	f000 fd54 	bl	8010a30 <SUBGRF_SetCad>
}
 800ff88:	bd08      	pop	{r3, pc}
 800ff8a:	bf00      	nop
 800ff8c:	20000f74 	.word	0x20000f74

0800ff90 <RadioRx>:
{
 800ff90:	b538      	push	{r3, r4, r5, lr}
 800ff92:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800ff94:	f001 f9ff 	bl	8011396 <RFW_Is_Init>
 800ff98:	2801      	cmp	r0, #1
 800ff9a:	d019      	beq.n	800ffd0 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	f240 2162 	movw	r1, #610	; 0x262
 800ffa4:	4608      	mov	r0, r1
 800ffa6:	f000 fe22 	bl	8010bee <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800ffaa:	b9a4      	cbnz	r4, 800ffd6 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800ffac:	4c11      	ldr	r4, [pc, #68]	; (800fff4 <RadioRx+0x64>)
 800ffae:	2100      	movs	r1, #0
 800ffb0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800ffb2:	4b11      	ldr	r3, [pc, #68]	; (800fff8 <RadioRx+0x68>)
 800ffb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ffb8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800ffba:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800ffbe:	f001 f8fb 	bl	80111b8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800ffc2:	7863      	ldrb	r3, [r4, #1]
 800ffc4:	b183      	cbz	r3, 800ffe8 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800ffc6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ffca:	f000 fc9f 	bl	801090c <SUBGRF_SetRx>
}
 800ffce:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800ffd0:	f001 f9e9 	bl	80113a6 <RFW_ReceiveInit>
 800ffd4:	e7e9      	b.n	800ffaa <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800ffd6:	4d09      	ldr	r5, [pc, #36]	; (800fffc <RadioRx+0x6c>)
 800ffd8:	4621      	mov	r1, r4
 800ffda:	4628      	mov	r0, r5
 800ffdc:	f001 feb6 	bl	8011d4c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	f001 fe6d 	bl	8011cc0 <UTIL_TIMER_Start>
 800ffe6:	e7e1      	b.n	800ffac <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800ffe8:	4b02      	ldr	r3, [pc, #8]	; (800fff4 <RadioRx+0x64>)
 800ffea:	6898      	ldr	r0, [r3, #8]
 800ffec:	0180      	lsls	r0, r0, #6
 800ffee:	f000 fc8d 	bl	801090c <SUBGRF_SetRx>
}
 800fff2:	e7ec      	b.n	800ffce <RadioRx+0x3e>
 800fff4:	20000f74 	.word	0x20000f74
 800fff8:	48000400 	.word	0x48000400
 800fffc:	20000f5c 	.word	0x20000f5c

08010000 <RadioSleep>:
{
 8010000:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8010002:	f04f 0004 	mov.w	r0, #4
 8010006:	f000 fc25 	bl	8010854 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 801000a:	2002      	movs	r0, #2
 801000c:	f7f1 fce6 	bl	80019dc <HAL_Delay>
}
 8010010:	bd08      	pop	{r3, pc}
	...

08010014 <RadioSend>:
{
 8010014:	b570      	push	{r4, r5, r6, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	4605      	mov	r5, r0
 801001a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801001c:	2300      	movs	r3, #0
 801001e:	461a      	mov	r2, r3
 8010020:	f240 2101 	movw	r1, #513	; 0x201
 8010024:	4608      	mov	r0, r1
 8010026:	f000 fde2 	bl	8010bee <SUBGRF_SetDioIrqParams>
 801002a:	4b3f      	ldr	r3, [pc, #252]	; (8010128 <RadioSend+0x114>)
 801002c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010030:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8010032:	4e3e      	ldr	r6, [pc, #248]	; (801012c <RadioSend+0x118>)
 8010034:	2101      	movs	r1, #1
 8010036:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 801003a:	f001 f8bd 	bl	80111b8 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801003e:	7833      	ldrb	r3, [r6, #0]
 8010040:	2b01      	cmp	r3, #1
 8010042:	d103      	bne.n	801004c <RadioSend+0x38>
 8010044:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8010048:	2b06      	cmp	r3, #6
 801004a:	d012      	beq.n	8010072 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801004c:	f640 0089 	movw	r0, #2185	; 0x889
 8010050:	f000 fb3a 	bl	80106c8 <SUBGRF_ReadRegister>
 8010054:	f040 0104 	orr.w	r1, r0, #4
 8010058:	b2c9      	uxtb	r1, r1
 801005a:	f640 0089 	movw	r0, #2185	; 0x889
 801005e:	f000 fb23 	bl	80106a8 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8010062:	4b32      	ldr	r3, [pc, #200]	; (801012c <RadioSend+0x118>)
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	2b03      	cmp	r3, #3
 8010068:	d818      	bhi.n	801009c <RadioSend+0x88>
 801006a:	e8df f003 	tbb	[pc, r3]
 801006e:	0d23      	.short	0x0d23
 8010070:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8010072:	f640 0089 	movw	r0, #2185	; 0x889
 8010076:	f000 fb27 	bl	80106c8 <SUBGRF_ReadRegister>
 801007a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 801007e:	f640 0089 	movw	r0, #2185	; 0x889
 8010082:	f000 fb11 	bl	80106a8 <SUBGRF_WriteRegister>
 8010086:	e7ec      	b.n	8010062 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8010088:	4828      	ldr	r0, [pc, #160]	; (801012c <RadioSend+0x118>)
 801008a:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801008c:	300e      	adds	r0, #14
 801008e:	f000 ff7d 	bl	8010f8c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8010092:	2200      	movs	r2, #0
 8010094:	4621      	mov	r1, r4
 8010096:	4628      	mov	r0, r5
 8010098:	f000 fc30 	bl	80108fc <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801009c:	4c24      	ldr	r4, [pc, #144]	; (8010130 <RadioSend+0x11c>)
 801009e:	4b23      	ldr	r3, [pc, #140]	; (801012c <RadioSend+0x118>)
 80100a0:	6859      	ldr	r1, [r3, #4]
 80100a2:	4620      	mov	r0, r4
 80100a4:	f001 fe52 	bl	8011d4c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80100a8:	4620      	mov	r0, r4
 80100aa:	f001 fe09 	bl	8011cc0 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 80100ae:	2000      	movs	r0, #0
}
 80100b0:	b002      	add	sp, #8
 80100b2:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80100b4:	f001 f96f 	bl	8011396 <RFW_Is_Init>
 80100b8:	2801      	cmp	r0, #1
 80100ba:	d00a      	beq.n	80100d2 <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80100bc:	481b      	ldr	r0, [pc, #108]	; (801012c <RadioSend+0x118>)
 80100be:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80100c0:	300e      	adds	r0, #14
 80100c2:	f000 ff63 	bl	8010f8c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80100c6:	2200      	movs	r2, #0
 80100c8:	4621      	mov	r1, r4
 80100ca:	4628      	mov	r0, r5
 80100cc:	f000 fc16 	bl	80108fc <SUBGRF_SendPayload>
 80100d0:	e7e4      	b.n	801009c <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80100d2:	f10d 0207 	add.w	r2, sp, #7
 80100d6:	4621      	mov	r1, r4
 80100d8:	4628      	mov	r0, r5
 80100da:	f001 f961 	bl	80113a0 <RFW_TransmitInit>
 80100de:	b968      	cbnz	r0, 80100fc <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80100e0:	4812      	ldr	r0, [pc, #72]	; (801012c <RadioSend+0x118>)
 80100e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80100e6:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80100e8:	300e      	adds	r0, #14
 80100ea:	f000 ff4f 	bl	8010f8c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80100ee:	2200      	movs	r2, #0
 80100f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80100f4:	4628      	mov	r0, r5
 80100f6:	f000 fc01 	bl	80108fc <SUBGRF_SendPayload>
 80100fa:	e7cf      	b.n	801009c <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80100fc:	4b0d      	ldr	r3, [pc, #52]	; (8010134 <RadioSend+0x120>)
 80100fe:	2201      	movs	r2, #1
 8010100:	2100      	movs	r1, #0
 8010102:	2002      	movs	r0, #2
 8010104:	f001 fa2e 	bl	8011564 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8010108:	2003      	movs	r0, #3
 801010a:	e7d1      	b.n	80100b0 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801010c:	4807      	ldr	r0, [pc, #28]	; (801012c <RadioSend+0x118>)
 801010e:	2302      	movs	r3, #2
 8010110:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8010112:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010114:	300e      	adds	r0, #14
 8010116:	f000 ff39 	bl	8010f8c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801011a:	2200      	movs	r2, #0
 801011c:	4621      	mov	r1, r4
 801011e:	4628      	mov	r0, r5
 8010120:	f000 fbec 	bl	80108fc <SUBGRF_SendPayload>
            break;
 8010124:	e7ba      	b.n	801009c <RadioSend+0x88>
 8010126:	bf00      	nop
 8010128:	48000400 	.word	0x48000400
 801012c:	20000f74 	.word	0x20000f74
 8010130:	20000fd0 	.word	0x20000fd0
 8010134:	08012fa0 	.word	0x08012fa0

08010138 <RadioRandom>:
{
 8010138:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801013a:	2300      	movs	r3, #0
 801013c:	461a      	mov	r2, r3
 801013e:	4619      	mov	r1, r3
 8010140:	4618      	mov	r0, r3
 8010142:	f000 fd54 	bl	8010bee <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8010146:	f000 fbfb 	bl	8010940 <SUBGRF_GetRandom>
}
 801014a:	bd08      	pop	{r3, pc}

0801014c <RadioSetModem>:
{
 801014c:	b510      	push	{r4, lr}
 801014e:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8010150:	4b14      	ldr	r3, [pc, #80]	; (80101a4 <RadioSetModem+0x58>)
 8010152:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8010154:	f001 f92c 	bl	80113b0 <RFW_SetRadioModem>
    switch( modem )
 8010158:	2c01      	cmp	r4, #1
 801015a:	d010      	beq.n	801017e <RadioSetModem+0x32>
 801015c:	2c03      	cmp	r4, #3
 801015e:	d01a      	beq.n	8010196 <RadioSetModem+0x4a>
 8010160:	b134      	cbz	r4, 8010170 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8010162:	2003      	movs	r0, #3
 8010164:	f000 fde2 	bl	8010d2c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010168:	4b0e      	ldr	r3, [pc, #56]	; (80101a4 <RadioSetModem+0x58>)
 801016a:	2200      	movs	r2, #0
 801016c:	735a      	strb	r2, [r3, #13]
}
 801016e:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8010170:	2000      	movs	r0, #0
 8010172:	f000 fddb 	bl	8010d2c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010176:	4b0b      	ldr	r3, [pc, #44]	; (80101a4 <RadioSetModem+0x58>)
 8010178:	2200      	movs	r2, #0
 801017a:	735a      	strb	r2, [r3, #13]
        break;
 801017c:	e7f7      	b.n	801016e <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801017e:	2001      	movs	r0, #1
 8010180:	f000 fdd4 	bl	8010d2c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8010184:	4b07      	ldr	r3, [pc, #28]	; (80101a4 <RadioSetModem+0x58>)
 8010186:	7b5a      	ldrb	r2, [r3, #13]
 8010188:	7b18      	ldrb	r0, [r3, #12]
 801018a:	4282      	cmp	r2, r0
 801018c:	d0ef      	beq.n	801016e <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801018e:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8010190:	f000 f80a 	bl	80101a8 <RadioSetPublicNetwork>
 8010194:	e7eb      	b.n	801016e <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8010196:	2002      	movs	r0, #2
 8010198:	f000 fdc8 	bl	8010d2c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801019c:	4b01      	ldr	r3, [pc, #4]	; (80101a4 <RadioSetModem+0x58>)
 801019e:	2200      	movs	r2, #0
 80101a0:	735a      	strb	r2, [r3, #13]
}
 80101a2:	e7e4      	b.n	801016e <RadioSetModem+0x22>
 80101a4:	20000f74 	.word	0x20000f74

080101a8 <RadioSetPublicNetwork>:
{
 80101a8:	b510      	push	{r4, lr}
 80101aa:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80101ac:	4b0e      	ldr	r3, [pc, #56]	; (80101e8 <RadioSetPublicNetwork+0x40>)
 80101ae:	7318      	strb	r0, [r3, #12]
 80101b0:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 80101b2:	2001      	movs	r0, #1
 80101b4:	f7ff ffca 	bl	801014c <RadioSetModem>
    if( enable == true )
 80101b8:	b154      	cbz	r4, 80101d0 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80101ba:	2134      	movs	r1, #52	; 0x34
 80101bc:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80101c0:	f000 fa72 	bl	80106a8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80101c4:	2144      	movs	r1, #68	; 0x44
 80101c6:	f240 7041 	movw	r0, #1857	; 0x741
 80101ca:	f000 fa6d 	bl	80106a8 <SUBGRF_WriteRegister>
}
 80101ce:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80101d0:	2114      	movs	r1, #20
 80101d2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80101d6:	f000 fa67 	bl	80106a8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80101da:	2124      	movs	r1, #36	; 0x24
 80101dc:	f240 7041 	movw	r0, #1857	; 0x741
 80101e0:	f000 fa62 	bl	80106a8 <SUBGRF_WriteRegister>
}
 80101e4:	e7f3      	b.n	80101ce <RadioSetPublicNetwork+0x26>
 80101e6:	bf00      	nop
 80101e8:	20000f74 	.word	0x20000f74

080101ec <RadioSetTxConfig>:
{
 80101ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f0:	b083      	sub	sp, #12
 80101f2:	4604      	mov	r4, r0
 80101f4:	460e      	mov	r6, r1
 80101f6:	4617      	mov	r7, r2
 80101f8:	461d      	mov	r5, r3
 80101fa:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 80101fe:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8010202:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 8010206:	f001 f8c5 	bl	8011394 <RFW_DeInit>
    switch( modem )
 801020a:	b1ac      	cbz	r4, 8010238 <RadioSetTxConfig+0x4c>
 801020c:	2c01      	cmp	r4, #1
 801020e:	d05a      	beq.n	80102c6 <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8010210:	4630      	mov	r0, r6
 8010212:	f000 ffe5 	bl	80111e0 <SUBGRF_SetRfTxPower>
 8010216:	4c55      	ldr	r4, [pc, #340]	; (801036c <RadioSetTxConfig+0x180>)
 8010218:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801021c:	210e      	movs	r1, #14
 801021e:	f640 101f 	movw	r0, #2335	; 0x91f
 8010222:	f000 fa41 	bl	80106a8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8010226:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801022a:	f001 f8b8 	bl	801139e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801022e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010230:	6063      	str	r3, [r4, #4]
}
 8010232:	b003      	add	sp, #12
 8010234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010238:	4c4c      	ldr	r4, [pc, #304]	; (801036c <RadioSetTxConfig+0x180>)
 801023a:	f04f 0b00 	mov.w	fp, #0
 801023e:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010244:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010246:	230b      	movs	r3, #11
 8010248:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801024c:	4628      	mov	r0, r5
 801024e:	f001 f83f 	bl	80112d0 <SUBGRF_GetFskBandwidthRegValue>
 8010252:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8010256:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010258:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801025c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8010260:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010264:	2304      	movs	r3, #4
 8010266:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8010268:	2318      	movs	r3, #24
 801026a:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801026c:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010270:	f089 0901 	eor.w	r9, r9, #1
 8010274:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8010278:	f1ba 0f00 	cmp.w	sl, #0
 801027c:	d01f      	beq.n	80102be <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801027e:	22f2      	movs	r2, #242	; 0xf2
 8010280:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010282:	4c3a      	ldr	r4, [pc, #232]	; (801036c <RadioSetTxConfig+0x180>)
 8010284:	2301      	movs	r3, #1
 8010286:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010288:	f7ff fc50 	bl	800fb2c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801028c:	2000      	movs	r0, #0
 801028e:	f7ff ff5d 	bl	801014c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010292:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010296:	f000 fdf1 	bl	8010e7c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801029a:	f104 000e 	add.w	r0, r4, #14
 801029e:	f000 fe75 	bl	8010f8c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80102a2:	4a33      	ldr	r2, [pc, #204]	; (8010370 <RadioSetTxConfig+0x184>)
 80102a4:	466b      	mov	r3, sp
 80102a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80102ae:	4618      	mov	r0, r3
 80102b0:	f000 fa56 	bl	8010760 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80102b4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80102b8:	f000 fa29 	bl	801070e <SUBGRF_SetWhiteningSeed>
            break;
 80102bc:	e7a8      	b.n	8010210 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80102be:	4b2b      	ldr	r3, [pc, #172]	; (801036c <RadioSetTxConfig+0x180>)
 80102c0:	2201      	movs	r2, #1
 80102c2:	75da      	strb	r2, [r3, #23]
 80102c4:	e7dd      	b.n	8010282 <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80102c6:	4a29      	ldr	r2, [pc, #164]	; (801036c <RadioSetTxConfig+0x180>)
 80102c8:	2301      	movs	r3, #1
 80102ca:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80102ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80102d6:	4927      	ldr	r1, [pc, #156]	; (8010374 <RadioSetTxConfig+0x188>)
 80102d8:	5d49      	ldrb	r1, [r1, r5]
 80102da:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80102de:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80102e2:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80102e6:	b91d      	cbnz	r5, 80102f0 <RadioSetTxConfig+0x104>
 80102e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102ea:	3a0b      	subs	r2, #11
 80102ec:	2a01      	cmp	r2, #1
 80102ee:	d92c      	bls.n	801034a <RadioSetTxConfig+0x15e>
 80102f0:	2d01      	cmp	r5, #1
 80102f2:	d027      	beq.n	8010344 <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80102f4:	4a1d      	ldr	r2, [pc, #116]	; (801036c <RadioSetTxConfig+0x180>)
 80102f6:	2100      	movs	r1, #0
 80102f8:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80102fc:	4a1b      	ldr	r2, [pc, #108]	; (801036c <RadioSetTxConfig+0x180>)
 80102fe:	2101      	movs	r1, #1
 8010300:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010302:	3b05      	subs	r3, #5
 8010304:	b2db      	uxtb	r3, r3
 8010306:	428b      	cmp	r3, r1
 8010308:	d924      	bls.n	8010354 <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801030a:	4b18      	ldr	r3, [pc, #96]	; (801036c <RadioSetTxConfig+0x180>)
 801030c:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010310:	4c16      	ldr	r4, [pc, #88]	; (801036c <RadioSetTxConfig+0x180>)
 8010312:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010316:	4b18      	ldr	r3, [pc, #96]	; (8010378 <RadioSetTxConfig+0x18c>)
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801031c:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010320:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010324:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8010328:	f7ff fc00 	bl	800fb2c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801032c:	2001      	movs	r0, #1
 801032e:	f7ff ff0d 	bl	801014c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010332:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010336:	f000 fda1 	bl	8010e7c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801033a:	f104 000e 	add.w	r0, r4, #14
 801033e:	f000 fe25 	bl	8010f8c <SUBGRF_SetPacketParams>
            break;
 8010342:	e765      	b.n	8010210 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010344:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010346:	2a0c      	cmp	r2, #12
 8010348:	d1d4      	bne.n	80102f4 <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801034a:	4a08      	ldr	r2, [pc, #32]	; (801036c <RadioSetTxConfig+0x180>)
 801034c:	2101      	movs	r1, #1
 801034e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8010352:	e7d3      	b.n	80102fc <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 8010354:	f1b8 0f0b 	cmp.w	r8, #11
 8010358:	d803      	bhi.n	8010362 <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801035a:	4613      	mov	r3, r2
 801035c:	220c      	movs	r2, #12
 801035e:	839a      	strh	r2, [r3, #28]
 8010360:	e7d6      	b.n	8010310 <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010362:	4b02      	ldr	r3, [pc, #8]	; (801036c <RadioSetTxConfig+0x180>)
 8010364:	f8a3 801c 	strh.w	r8, [r3, #28]
 8010368:	e7d2      	b.n	8010310 <RadioSetTxConfig+0x124>
 801036a:	bf00      	nop
 801036c:	20000f74 	.word	0x20000f74
 8010370:	080122ac 	.word	0x080122ac
 8010374:	08012fb8 	.word	0x08012fb8
 8010378:	200000fc 	.word	0x200000fc

0801037c <RadioSetRxConfig>:
{
 801037c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010380:	b085      	sub	sp, #20
 8010382:	4604      	mov	r4, r0
 8010384:	460d      	mov	r5, r1
 8010386:	4616      	mov	r6, r2
 8010388:	9301      	str	r3, [sp, #4]
 801038a:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 801038e:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8010392:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8010396:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 801039a:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 801039e:	4b73      	ldr	r3, [pc, #460]	; (801056c <RadioSetRxConfig+0x1f0>)
 80103a0:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 80103a4:	f000 fff6 	bl	8011394 <RFW_DeInit>
    if( rxContinuous == true )
 80103a8:	f1b8 0f00 	cmp.w	r8, #0
 80103ac:	d001      	beq.n	80103b2 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80103ae:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80103b2:	b14f      	cbz	r7, 80103c8 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 80103b4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80103b8:	4b6d      	ldr	r3, [pc, #436]	; (8010570 <RadioSetRxConfig+0x1f4>)
 80103ba:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80103bc:	b144      	cbz	r4, 80103d0 <RadioSetRxConfig+0x54>
 80103be:	2c01      	cmp	r4, #1
 80103c0:	d057      	beq.n	8010472 <RadioSetRxConfig+0xf6>
}
 80103c2:	b005      	add	sp, #20
 80103c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 80103c8:	4b69      	ldr	r3, [pc, #420]	; (8010570 <RadioSetRxConfig+0x1f4>)
 80103ca:	22ff      	movs	r2, #255	; 0xff
 80103cc:	701a      	strb	r2, [r3, #0]
 80103ce:	e7f5      	b.n	80103bc <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80103d0:	2000      	movs	r0, #0
 80103d2:	f000 fb47 	bl	8010a64 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80103d6:	4c65      	ldr	r4, [pc, #404]	; (801056c <RadioSetRxConfig+0x1f0>)
 80103d8:	f04f 0800 	mov.w	r8, #0
 80103dc:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80103e0:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80103e2:	230b      	movs	r3, #11
 80103e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80103e8:	4628      	mov	r0, r5
 80103ea:	f000 ff71 	bl	80112d0 <SUBGRF_GetFskBandwidthRegValue>
 80103ee:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80103f2:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80103f6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80103fa:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80103fe:	2304      	movs	r3, #4
 8010400:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8010402:	2318      	movs	r3, #24
 8010404:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010406:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801040a:	f087 0701 	eor.w	r7, r7, #1
 801040e:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8010410:	4b57      	ldr	r3, [pc, #348]	; (8010570 <RadioSetRxConfig+0x1f4>)
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8010416:	f1bb 0f00 	cmp.w	fp, #0
 801041a:	d026      	beq.n	801046a <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801041c:	22f2      	movs	r2, #242	; 0xf2
 801041e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010420:	4c52      	ldr	r4, [pc, #328]	; (801056c <RadioSetRxConfig+0x1f0>)
 8010422:	2301      	movs	r3, #1
 8010424:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010426:	f7ff fb81 	bl	800fb2c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801042a:	2000      	movs	r0, #0
 801042c:	f7ff fe8e 	bl	801014c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010430:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010434:	f000 fd22 	bl	8010e7c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010438:	f104 000e 	add.w	r0, r4, #14
 801043c:	f000 fda6 	bl	8010f8c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010440:	4a4c      	ldr	r2, [pc, #304]	; (8010574 <RadioSetRxConfig+0x1f8>)
 8010442:	ab02      	add	r3, sp, #8
 8010444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010448:	e883 0003 	stmia.w	r3, {r0, r1}
 801044c:	4618      	mov	r0, r3
 801044e:	f000 f987 	bl	8010760 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010456:	f000 f95a 	bl	801070e <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801045a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801045e:	fb02 fa0a 	mul.w	sl, r2, sl
 8010462:	fbba f6f6 	udiv	r6, sl, r6
 8010466:	60a6      	str	r6, [r4, #8]
            break;
 8010468:	e7ab      	b.n	80103c2 <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801046a:	4b40      	ldr	r3, [pc, #256]	; (801056c <RadioSetRxConfig+0x1f0>)
 801046c:	2201      	movs	r2, #1
 801046e:	75da      	strb	r2, [r3, #23]
 8010470:	e7d6      	b.n	8010420 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010472:	2000      	movs	r0, #0
 8010474:	f000 faf6 	bl	8010a64 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010478:	4a3c      	ldr	r2, [pc, #240]	; (801056c <RadioSetRxConfig+0x1f0>)
 801047a:	2301      	movs	r3, #1
 801047c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8010480:	b2f3      	uxtb	r3, r6
 8010482:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8010486:	493c      	ldr	r1, [pc, #240]	; (8010578 <RadioSetRxConfig+0x1fc>)
 8010488:	5d49      	ldrb	r1, [r1, r5]
 801048a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801048e:	9901      	ldr	r1, [sp, #4]
 8010490:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010494:	b91d      	cbnz	r5, 801049e <RadioSetRxConfig+0x122>
 8010496:	f1a6 020b 	sub.w	r2, r6, #11
 801049a:	2a01      	cmp	r2, #1
 801049c:	d94b      	bls.n	8010536 <RadioSetRxConfig+0x1ba>
 801049e:	2d01      	cmp	r5, #1
 80104a0:	d047      	beq.n	8010532 <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80104a2:	4a32      	ldr	r2, [pc, #200]	; (801056c <RadioSetRxConfig+0x1f0>)
 80104a4:	2100      	movs	r1, #0
 80104a6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80104aa:	4a30      	ldr	r2, [pc, #192]	; (801056c <RadioSetRxConfig+0x1f0>)
 80104ac:	2101      	movs	r1, #1
 80104ae:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80104b0:	3b05      	subs	r3, #5
 80104b2:	b2db      	uxtb	r3, r3
 80104b4:	428b      	cmp	r3, r1
 80104b6:	d943      	bls.n	8010540 <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80104b8:	4b2c      	ldr	r3, [pc, #176]	; (801056c <RadioSetRxConfig+0x1f0>)
 80104ba:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80104be:	4c2b      	ldr	r4, [pc, #172]	; (801056c <RadioSetRxConfig+0x1f0>)
 80104c0:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80104c2:	4b2b      	ldr	r3, [pc, #172]	; (8010570 <RadioSetRxConfig+0x1f4>)
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80104c8:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80104cc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80104d0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80104d4:	f7ff fb2a 	bl	800fb2c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80104d8:	2001      	movs	r0, #1
 80104da:	f7ff fe37 	bl	801014c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80104de:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80104e2:	f000 fccb 	bl	8010e7c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80104e6:	f104 000e 	add.w	r0, r4, #14
 80104ea:	f000 fd4f 	bl	8010f8c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80104ee:	fa5f f08a 	uxtb.w	r0, sl
 80104f2:	f000 fac4 	bl	8010a7e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80104f6:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80104fa:	f000 f8e5 	bl	80106c8 <SUBGRF_ReadRegister>
 80104fe:	f000 0101 	and.w	r1, r0, #1
 8010502:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8010506:	f000 f8cf 	bl	80106a8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801050a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 801050e:	2b01      	cmp	r3, #1
 8010510:	d021      	beq.n	8010556 <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8010512:	f240 7036 	movw	r0, #1846	; 0x736
 8010516:	f000 f8d7 	bl	80106c8 <SUBGRF_ReadRegister>
 801051a:	f040 0104 	orr.w	r1, r0, #4
 801051e:	b2c9      	uxtb	r1, r1
 8010520:	f240 7036 	movw	r0, #1846	; 0x736
 8010524:	f000 f8c0 	bl	80106a8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8010528:	4b10      	ldr	r3, [pc, #64]	; (801056c <RadioSetRxConfig+0x1f0>)
 801052a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801052e:	609a      	str	r2, [r3, #8]
}
 8010530:	e747      	b.n	80103c2 <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010532:	2e0c      	cmp	r6, #12
 8010534:	d1b5      	bne.n	80104a2 <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010536:	4a0d      	ldr	r2, [pc, #52]	; (801056c <RadioSetRxConfig+0x1f0>)
 8010538:	2101      	movs	r1, #1
 801053a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 801053e:	e7b4      	b.n	80104aa <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8010540:	f1b9 0f0b 	cmp.w	r9, #11
 8010544:	d803      	bhi.n	801054e <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8010546:	4613      	mov	r3, r2
 8010548:	220c      	movs	r2, #12
 801054a:	839a      	strh	r2, [r3, #28]
 801054c:	e7b7      	b.n	80104be <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801054e:	4b07      	ldr	r3, [pc, #28]	; (801056c <RadioSetRxConfig+0x1f0>)
 8010550:	f8a3 901c 	strh.w	r9, [r3, #28]
 8010554:	e7b3      	b.n	80104be <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8010556:	f240 7036 	movw	r0, #1846	; 0x736
 801055a:	f000 f8b5 	bl	80106c8 <SUBGRF_ReadRegister>
 801055e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010562:	f240 7036 	movw	r0, #1846	; 0x736
 8010566:	f000 f89f 	bl	80106a8 <SUBGRF_WriteRegister>
 801056a:	e7dd      	b.n	8010528 <RadioSetRxConfig+0x1ac>
 801056c:	20000f74 	.word	0x20000f74
 8010570:	200000fc 	.word	0x200000fc
 8010574:	080122ac 	.word	0x080122ac
 8010578:	08012fb8 	.word	0x08012fb8

0801057c <RadioIsChannelFree>:
{
 801057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801057e:	b08b      	sub	sp, #44	; 0x2c
 8010580:	4604      	mov	r4, r0
 8010582:	460f      	mov	r7, r1
 8010584:	4616      	mov	r6, r2
 8010586:	461d      	mov	r5, r3
    RadioStandby( );
 8010588:	f7ff fad0 	bl	800fb2c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 801058c:	2000      	movs	r0, #0
 801058e:	f7ff fddd 	bl	801014c <RadioSetModem>
    RadioSetChannel( freq );
 8010592:	4620      	mov	r0, r4
 8010594:	f7ff fce4 	bl	800ff60 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8010598:	2301      	movs	r3, #1
 801059a:	9309      	str	r3, [sp, #36]	; 0x24
 801059c:	2400      	movs	r4, #0
 801059e:	9408      	str	r4, [sp, #32]
 80105a0:	9407      	str	r4, [sp, #28]
 80105a2:	9406      	str	r4, [sp, #24]
 80105a4:	9405      	str	r4, [sp, #20]
 80105a6:	9404      	str	r4, [sp, #16]
 80105a8:	9403      	str	r4, [sp, #12]
 80105aa:	9402      	str	r4, [sp, #8]
 80105ac:	2303      	movs	r3, #3
 80105ae:	9301      	str	r3, [sp, #4]
 80105b0:	9700      	str	r7, [sp, #0]
 80105b2:	4623      	mov	r3, r4
 80105b4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80105b8:	4639      	mov	r1, r7
 80105ba:	4620      	mov	r0, r4
 80105bc:	f7ff fede 	bl	801037c <RadioSetRxConfig>
    RadioRx( 0 );
 80105c0:	4620      	mov	r0, r4
 80105c2:	f7ff fce5 	bl	800ff90 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80105c6:	f7ff fc79 	bl	800febc <RadioGetWakeupTime>
 80105ca:	f7f1 fa07 	bl	80019dc <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80105ce:	f001 fadd 	bl	8011b8c <UTIL_TIMER_GetCurrentTime>
 80105d2:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80105d4:	4620      	mov	r0, r4
 80105d6:	f001 fae3 	bl	8011ba0 <UTIL_TIMER_GetElapsedTime>
 80105da:	42a8      	cmp	r0, r5
 80105dc:	d206      	bcs.n	80105ec <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80105de:	2000      	movs	r0, #0
 80105e0:	f7ff fc96 	bl	800ff10 <RadioRssi>
        if( rssi > rssiThresh )
 80105e4:	42b0      	cmp	r0, r6
 80105e6:	ddf5      	ble.n	80105d4 <RadioIsChannelFree+0x58>
            status = false;
 80105e8:	2400      	movs	r4, #0
 80105ea:	e000      	b.n	80105ee <RadioIsChannelFree+0x72>
    bool status = true;
 80105ec:	2401      	movs	r4, #1
    RadioStandby( );
 80105ee:	f7ff fa9d 	bl	800fb2c <RadioStandby>
}
 80105f2:	4620      	mov	r0, r4
 80105f4:	b00b      	add	sp, #44	; 0x2c
 80105f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080105f8 <RadioInit>:
{
 80105f8:	b570      	push	{r4, r5, r6, lr}
 80105fa:	b082      	sub	sp, #8
    RadioEvents = events;
 80105fc:	4b1d      	ldr	r3, [pc, #116]	; (8010674 <RadioInit+0x7c>)
 80105fe:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8010600:	4d1d      	ldr	r5, [pc, #116]	; (8010678 <RadioInit+0x80>)
 8010602:	2400      	movs	r4, #0
 8010604:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8010606:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8010608:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801060a:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 801060c:	481b      	ldr	r0, [pc, #108]	; (801067c <RadioInit+0x84>)
 801060e:	f000 fb27 	bl	8010c60 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8010612:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8010614:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8010616:	f000 fa53 	bl	8010ac0 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801061a:	4621      	mov	r1, r4
 801061c:	4620      	mov	r0, r4
 801061e:	f000 fd27 	bl	8011070 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8010622:	2204      	movs	r2, #4
 8010624:	4621      	mov	r1, r4
 8010626:	2001      	movs	r0, #1
 8010628:	f000 fb9a 	bl	8010d60 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801062c:	4623      	mov	r3, r4
 801062e:	4622      	mov	r2, r4
 8010630:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010634:	4608      	mov	r0, r1
 8010636:	f000 fada 	bl	8010bee <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801063a:	f7ff fce1 	bl	8010000 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801063e:	4e10      	ldr	r6, [pc, #64]	; (8010680 <RadioInit+0x88>)
 8010640:	9400      	str	r4, [sp, #0]
 8010642:	4b10      	ldr	r3, [pc, #64]	; (8010684 <RadioInit+0x8c>)
 8010644:	4622      	mov	r2, r4
 8010646:	f04f 31ff 	mov.w	r1, #4294967295
 801064a:	4630      	mov	r0, r6
 801064c:	f001 fa80 	bl	8011b50 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8010650:	4d0d      	ldr	r5, [pc, #52]	; (8010688 <RadioInit+0x90>)
 8010652:	9400      	str	r4, [sp, #0]
 8010654:	4b0d      	ldr	r3, [pc, #52]	; (801068c <RadioInit+0x94>)
 8010656:	4622      	mov	r2, r4
 8010658:	f04f 31ff 	mov.w	r1, #4294967295
 801065c:	4628      	mov	r0, r5
 801065e:	f001 fa77 	bl	8011b50 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8010662:	4630      	mov	r0, r6
 8010664:	f001 fad2 	bl	8011c0c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8010668:	4628      	mov	r0, r5
 801066a:	f001 facf 	bl	8011c0c <UTIL_TIMER_Stop>
}
 801066e:	b002      	add	sp, #8
 8010670:	bd70      	pop	{r4, r5, r6, pc}
 8010672:	bf00      	nop
 8010674:	20000f58 	.word	0x20000f58
 8010678:	20000f74 	.word	0x20000f74
 801067c:	0800fea9 	.word	0x0800fea9
 8010680:	20000fd0 	.word	0x20000fd0
 8010684:	0800f9f1 	.word	0x0800f9f1
 8010688:	20000f5c 	.word	0x20000f5c
 801068c:	0800fa19 	.word	0x0800fa19

08010690 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8010690:	4b01      	ldr	r3, [pc, #4]	; (8010698 <SUBGRF_GetOperatingMode+0x8>)
 8010692:	7818      	ldrb	r0, [r3, #0]
 8010694:	4770      	bx	lr
 8010696:	bf00      	nop
 8010698:	20000fee 	.word	0x20000fee

0801069c <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 801069c:	4b01      	ldr	r3, [pc, #4]	; (80106a4 <SUBGRF_GetPacketType+0x8>)
 801069e:	7818      	ldrb	r0, [r3, #0]
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop
 80106a4:	20000fef 	.word	0x20000fef

080106a8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80106a8:	b500      	push	{lr}
 80106aa:	b083      	sub	sp, #12
 80106ac:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80106b0:	2301      	movs	r3, #1
 80106b2:	f10d 0207 	add.w	r2, sp, #7
 80106b6:	4601      	mov	r1, r0
 80106b8:	4802      	ldr	r0, [pc, #8]	; (80106c4 <SUBGRF_WriteRegister+0x1c>)
 80106ba:	f7f4 fff3 	bl	80056a4 <HAL_SUBGHZ_WriteRegisters>
}
 80106be:	b003      	add	sp, #12
 80106c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80106c4:	200001c8 	.word	0x200001c8

080106c8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80106c8:	b500      	push	{lr}
 80106ca:	b083      	sub	sp, #12
 80106cc:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80106ce:	2301      	movs	r3, #1
 80106d0:	f10d 0207 	add.w	r2, sp, #7
 80106d4:	4803      	ldr	r0, [pc, #12]	; (80106e4 <SUBGRF_ReadRegister+0x1c>)
 80106d6:	f7f5 f835 	bl	8005744 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 80106da:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80106de:	b003      	add	sp, #12
 80106e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80106e4:	200001c8 	.word	0x200001c8

080106e8 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80106e8:	b510      	push	{r4, lr}
 80106ea:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80106ec:	f7f2 f92c 	bl	8002948 <RBI_IsDCDC>
 80106f0:	2801      	cmp	r0, #1
 80106f2:	d000      	beq.n	80106f6 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80106f4:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80106f6:	f640 1023 	movw	r0, #2339	; 0x923
 80106fa:	f7ff ffe5 	bl	80106c8 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80106fe:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8010702:	4321      	orrs	r1, r4
 8010704:	f640 1023 	movw	r0, #2339	; 0x923
 8010708:	f7ff ffce 	bl	80106a8 <SUBGRF_WriteRegister>
}
 801070c:	e7f2      	b.n	80106f4 <Radio_SMPS_Set+0xc>

0801070e <SUBGRF_SetWhiteningSeed>:
{
 801070e:	b510      	push	{r4, lr}
 8010710:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8010712:	f7ff ffc3 	bl	801069c <SUBGRF_GetPacketType>
 8010716:	b100      	cbz	r0, 801071a <SUBGRF_SetWhiteningSeed+0xc>
}
 8010718:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801071a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801071e:	f7ff ffd3 	bl	80106c8 <SUBGRF_ReadRegister>
 8010722:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8010726:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801072a:	4301      	orrs	r1, r0
 801072c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010730:	f7ff ffba 	bl	80106a8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8010734:	b2e1      	uxtb	r1, r4
 8010736:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801073a:	f7ff ffb5 	bl	80106a8 <SUBGRF_WriteRegister>
}
 801073e:	e7eb      	b.n	8010718 <SUBGRF_SetWhiteningSeed+0xa>

08010740 <SUBGRF_WriteRegisters>:
{
 8010740:	b510      	push	{r4, lr}
 8010742:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010744:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010748:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801074a:	460a      	mov	r2, r1
 801074c:	4601      	mov	r1, r0
 801074e:	4803      	ldr	r0, [pc, #12]	; (801075c <SUBGRF_WriteRegisters+0x1c>)
 8010750:	f7f4 ffa8 	bl	80056a4 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010754:	f384 8810 	msr	PRIMASK, r4
}
 8010758:	bd10      	pop	{r4, pc}
 801075a:	bf00      	nop
 801075c:	200001c8 	.word	0x200001c8

08010760 <SUBGRF_SetSyncWord>:
{
 8010760:	b508      	push	{r3, lr}
 8010762:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8010764:	2208      	movs	r2, #8
 8010766:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801076a:	f7ff ffe9 	bl	8010740 <SUBGRF_WriteRegisters>
}
 801076e:	2000      	movs	r0, #0
 8010770:	bd08      	pop	{r3, pc}

08010772 <SUBGRF_SetCrcSeed>:
{
 8010772:	b500      	push	{lr}
 8010774:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8010776:	0a03      	lsrs	r3, r0, #8
 8010778:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801077c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010780:	f7ff ff8c 	bl	801069c <SUBGRF_GetPacketType>
 8010784:	b110      	cbz	r0, 801078c <SUBGRF_SetCrcSeed+0x1a>
}
 8010786:	b003      	add	sp, #12
 8010788:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801078c:	2202      	movs	r2, #2
 801078e:	a901      	add	r1, sp, #4
 8010790:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8010794:	f7ff ffd4 	bl	8010740 <SUBGRF_WriteRegisters>
}
 8010798:	e7f5      	b.n	8010786 <SUBGRF_SetCrcSeed+0x14>

0801079a <SUBGRF_SetCrcPolynomial>:
{
 801079a:	b500      	push	{lr}
 801079c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801079e:	0a03      	lsrs	r3, r0, #8
 80107a0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80107a4:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80107a8:	f7ff ff78 	bl	801069c <SUBGRF_GetPacketType>
 80107ac:	b110      	cbz	r0, 80107b4 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80107ae:	b003      	add	sp, #12
 80107b0:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80107b4:	2202      	movs	r2, #2
 80107b6:	a901      	add	r1, sp, #4
 80107b8:	f240 60be 	movw	r0, #1726	; 0x6be
 80107bc:	f7ff ffc0 	bl	8010740 <SUBGRF_WriteRegisters>
}
 80107c0:	e7f5      	b.n	80107ae <SUBGRF_SetCrcPolynomial+0x14>
	...

080107c4 <SUBGRF_ReadRegisters>:
{
 80107c4:	b510      	push	{r4, lr}
 80107c6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107c8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80107cc:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80107ce:	460a      	mov	r2, r1
 80107d0:	4601      	mov	r1, r0
 80107d2:	4803      	ldr	r0, [pc, #12]	; (80107e0 <SUBGRF_ReadRegisters+0x1c>)
 80107d4:	f7f4 ffb6 	bl	8005744 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107d8:	f384 8810 	msr	PRIMASK, r4
}
 80107dc:	bd10      	pop	{r4, pc}
 80107de:	bf00      	nop
 80107e0:	200001c8 	.word	0x200001c8

080107e4 <SUBGRF_WriteBuffer>:
{
 80107e4:	b510      	push	{r4, lr}
 80107e6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107e8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80107ec:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80107ee:	460a      	mov	r2, r1
 80107f0:	4601      	mov	r1, r0
 80107f2:	4803      	ldr	r0, [pc, #12]	; (8010800 <SUBGRF_WriteBuffer+0x1c>)
 80107f4:	f7f5 f904 	bl	8005a00 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107f8:	f384 8810 	msr	PRIMASK, r4
}
 80107fc:	bd10      	pop	{r4, pc}
 80107fe:	bf00      	nop
 8010800:	200001c8 	.word	0x200001c8

08010804 <SUBGRF_SetPayload>:
{
 8010804:	b508      	push	{r3, lr}
 8010806:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8010808:	4601      	mov	r1, r0
 801080a:	2000      	movs	r0, #0
 801080c:	f7ff ffea 	bl	80107e4 <SUBGRF_WriteBuffer>
}
 8010810:	bd08      	pop	{r3, pc}
	...

08010814 <SUBGRF_ReadBuffer>:
{
 8010814:	b510      	push	{r4, lr}
 8010816:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010818:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801081c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801081e:	460a      	mov	r2, r1
 8010820:	4601      	mov	r1, r0
 8010822:	4803      	ldr	r0, [pc, #12]	; (8010830 <SUBGRF_ReadBuffer+0x1c>)
 8010824:	f7f5 f936 	bl	8005a94 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010828:	f384 8810 	msr	PRIMASK, r4
}
 801082c:	bd10      	pop	{r4, pc}
 801082e:	bf00      	nop
 8010830:	200001c8 	.word	0x200001c8

08010834 <SUBGRF_WriteCommand>:
{
 8010834:	b510      	push	{r4, lr}
 8010836:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010838:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801083c:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801083e:	460a      	mov	r2, r1
 8010840:	4601      	mov	r1, r0
 8010842:	4803      	ldr	r0, [pc, #12]	; (8010850 <SUBGRF_WriteCommand+0x1c>)
 8010844:	f7f4 ffd2 	bl	80057ec <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010848:	f384 8810 	msr	PRIMASK, r4
}
 801084c:	bd10      	pop	{r4, pc}
 801084e:	bf00      	nop
 8010850:	200001c8 	.word	0x200001c8

08010854 <SUBGRF_SetSleep>:
{
 8010854:	b510      	push	{r4, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801085a:	2000      	movs	r0, #0
 801085c:	f7f2 f868 	bl	8002930 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010860:	2002      	movs	r0, #2
 8010862:	f7ff ff41 	bl	80106e8 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010866:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801086a:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801086e:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8010870:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010874:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010876:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801087a:	2201      	movs	r2, #1
 801087c:	f10d 0107 	add.w	r1, sp, #7
 8010880:	2084      	movs	r0, #132	; 0x84
 8010882:	f7ff ffd7 	bl	8010834 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8010886:	4b02      	ldr	r3, [pc, #8]	; (8010890 <SUBGRF_SetSleep+0x3c>)
 8010888:	2200      	movs	r2, #0
 801088a:	701a      	strb	r2, [r3, #0]
}
 801088c:	b002      	add	sp, #8
 801088e:	bd10      	pop	{r4, pc}
 8010890:	20000fee 	.word	0x20000fee

08010894 <SUBGRF_SetStandby>:
{
 8010894:	b500      	push	{lr}
 8010896:	b083      	sub	sp, #12
 8010898:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801089c:	2201      	movs	r2, #1
 801089e:	f10d 0107 	add.w	r1, sp, #7
 80108a2:	2080      	movs	r0, #128	; 0x80
 80108a4:	f7ff ffc6 	bl	8010834 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80108a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80108ac:	b92b      	cbnz	r3, 80108ba <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 80108ae:	4b05      	ldr	r3, [pc, #20]	; (80108c4 <SUBGRF_SetStandby+0x30>)
 80108b0:	2201      	movs	r2, #1
 80108b2:	701a      	strb	r2, [r3, #0]
}
 80108b4:	b003      	add	sp, #12
 80108b6:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 80108ba:	4b02      	ldr	r3, [pc, #8]	; (80108c4 <SUBGRF_SetStandby+0x30>)
 80108bc:	2202      	movs	r2, #2
 80108be:	701a      	strb	r2, [r3, #0]
}
 80108c0:	e7f8      	b.n	80108b4 <SUBGRF_SetStandby+0x20>
 80108c2:	bf00      	nop
 80108c4:	20000fee 	.word	0x20000fee

080108c8 <SUBGRF_SetTx>:
{
 80108c8:	b500      	push	{lr}
 80108ca:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80108cc:	4b0a      	ldr	r3, [pc, #40]	; (80108f8 <SUBGRF_SetTx+0x30>)
 80108ce:	2204      	movs	r2, #4
 80108d0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80108d2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80108d6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80108da:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80108de:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80108e2:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80108e6:	2203      	movs	r2, #3
 80108e8:	a901      	add	r1, sp, #4
 80108ea:	2083      	movs	r0, #131	; 0x83
 80108ec:	f7ff ffa2 	bl	8010834 <SUBGRF_WriteCommand>
}
 80108f0:	b003      	add	sp, #12
 80108f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80108f6:	bf00      	nop
 80108f8:	20000fee 	.word	0x20000fee

080108fc <SUBGRF_SendPayload>:
{
 80108fc:	b510      	push	{r4, lr}
 80108fe:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8010900:	f7ff ff80 	bl	8010804 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8010904:	4620      	mov	r0, r4
 8010906:	f7ff ffdf 	bl	80108c8 <SUBGRF_SetTx>
}
 801090a:	bd10      	pop	{r4, pc}

0801090c <SUBGRF_SetRx>:
{
 801090c:	b500      	push	{lr}
 801090e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8010910:	4b0a      	ldr	r3, [pc, #40]	; (801093c <SUBGRF_SetRx+0x30>)
 8010912:	2205      	movs	r2, #5
 8010914:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010916:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801091a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801091e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010922:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010926:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801092a:	2203      	movs	r2, #3
 801092c:	a901      	add	r1, sp, #4
 801092e:	2082      	movs	r0, #130	; 0x82
 8010930:	f7ff ff80 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010934:	b003      	add	sp, #12
 8010936:	f85d fb04 	ldr.w	pc, [sp], #4
 801093a:	bf00      	nop
 801093c:	20000fee 	.word	0x20000fee

08010940 <SUBGRF_GetRandom>:
{
 8010940:	b570      	push	{r4, r5, r6, lr}
 8010942:	b082      	sub	sp, #8
    uint32_t number = 0;
 8010944:	2600      	movs	r6, #0
 8010946:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8010948:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801094c:	f7ff febc 	bl	80106c8 <SUBGRF_ReadRegister>
 8010950:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8010952:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8010956:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801095a:	f7ff fea5 	bl	80106a8 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801095e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8010962:	f7ff feb1 	bl	80106c8 <SUBGRF_ReadRegister>
 8010966:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8010968:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 801096c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8010970:	f7ff fe9a 	bl	80106a8 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8010974:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010978:	f7ff ffc8 	bl	801090c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801097c:	2204      	movs	r2, #4
 801097e:	eb0d 0102 	add.w	r1, sp, r2
 8010982:	f640 0019 	movw	r0, #2073	; 0x819
 8010986:	f7ff ff1d 	bl	80107c4 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 801098a:	4630      	mov	r0, r6
 801098c:	f7ff ff82 	bl	8010894 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8010990:	4629      	mov	r1, r5
 8010992:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010996:	f7ff fe87 	bl	80106a8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801099a:	4621      	mov	r1, r4
 801099c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80109a0:	f7ff fe82 	bl	80106a8 <SUBGRF_WriteRegister>
}
 80109a4:	9801      	ldr	r0, [sp, #4]
 80109a6:	b002      	add	sp, #8
 80109a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080109ac <SUBGRF_SetRxBoosted>:
{
 80109ac:	b510      	push	{r4, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80109b2:	4b0c      	ldr	r3, [pc, #48]	; (80109e4 <SUBGRF_SetRxBoosted+0x38>)
 80109b4:	2205      	movs	r2, #5
 80109b6:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80109b8:	2197      	movs	r1, #151	; 0x97
 80109ba:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80109be:	f7ff fe73 	bl	80106a8 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80109c2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80109c6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80109ca:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80109ce:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80109d2:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80109d6:	2203      	movs	r2, #3
 80109d8:	a901      	add	r1, sp, #4
 80109da:	2082      	movs	r0, #130	; 0x82
 80109dc:	f7ff ff2a 	bl	8010834 <SUBGRF_WriteCommand>
}
 80109e0:	b002      	add	sp, #8
 80109e2:	bd10      	pop	{r4, pc}
 80109e4:	20000fee 	.word	0x20000fee

080109e8 <SUBGRF_SetRxDutyCycle>:
{
 80109e8:	b500      	push	{lr}
 80109ea:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80109ec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80109f0:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80109f4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80109f8:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80109fc:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8010a00:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010a04:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8010a08:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010a0c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8010a10:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8010a14:	2206      	movs	r2, #6
 8010a16:	4669      	mov	r1, sp
 8010a18:	2094      	movs	r0, #148	; 0x94
 8010a1a:	f7ff ff0b 	bl	8010834 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8010a1e:	4b03      	ldr	r3, [pc, #12]	; (8010a2c <SUBGRF_SetRxDutyCycle+0x44>)
 8010a20:	2206      	movs	r2, #6
 8010a22:	701a      	strb	r2, [r3, #0]
}
 8010a24:	b003      	add	sp, #12
 8010a26:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a2a:	bf00      	nop
 8010a2c:	20000fee 	.word	0x20000fee

08010a30 <SUBGRF_SetCad>:
{
 8010a30:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8010a32:	2200      	movs	r2, #0
 8010a34:	4611      	mov	r1, r2
 8010a36:	20c5      	movs	r0, #197	; 0xc5
 8010a38:	f7ff fefc 	bl	8010834 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8010a3c:	4b01      	ldr	r3, [pc, #4]	; (8010a44 <SUBGRF_SetCad+0x14>)
 8010a3e:	2207      	movs	r2, #7
 8010a40:	701a      	strb	r2, [r3, #0]
}
 8010a42:	bd08      	pop	{r3, pc}
 8010a44:	20000fee 	.word	0x20000fee

08010a48 <SUBGRF_SetTxContinuousWave>:
{
 8010a48:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	4611      	mov	r1, r2
 8010a4e:	20d1      	movs	r0, #209	; 0xd1
 8010a50:	f7ff fef0 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010a54:	bd08      	pop	{r3, pc}

08010a56 <SUBGRF_SetTxInfinitePreamble>:
{
 8010a56:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8010a58:	2200      	movs	r2, #0
 8010a5a:	4611      	mov	r1, r2
 8010a5c:	20d2      	movs	r0, #210	; 0xd2
 8010a5e:	f7ff fee9 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010a62:	bd08      	pop	{r3, pc}

08010a64 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8010a64:	b500      	push	{lr}
 8010a66:	b083      	sub	sp, #12
 8010a68:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	f10d 0107 	add.w	r1, sp, #7
 8010a72:	209f      	movs	r0, #159	; 0x9f
 8010a74:	f7ff fede 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010a78:	b003      	add	sp, #12
 8010a7a:	f85d fb04 	ldr.w	pc, [sp], #4

08010a7e <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8010a7e:	b500      	push	{lr}
 8010a80:	b083      	sub	sp, #12
 8010a82:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8010a86:	2201      	movs	r2, #1
 8010a88:	f10d 0107 	add.w	r1, sp, #7
 8010a8c:	20a0      	movs	r0, #160	; 0xa0
 8010a8e:	f7ff fed1 	bl	8010834 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8010a92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010a96:	2b3f      	cmp	r3, #63	; 0x3f
 8010a98:	d90f      	bls.n	8010aba <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8010a9a:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8010a9c:	2200      	movs	r2, #0
        while( mant > 31 )
 8010a9e:	e002      	b.n	8010aa6 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8010aa0:	089b      	lsrs	r3, r3, #2
            exp++;
 8010aa2:	1c51      	adds	r1, r2, #1
 8010aa4:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 8010aa6:	2b1f      	cmp	r3, #31
 8010aa8:	d8fa      	bhi.n	8010aa0 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8010aaa:	00d9      	lsls	r1, r3, #3
 8010aac:	b2c9      	uxtb	r1, r1
 8010aae:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8010ab0:	b2c9      	uxtb	r1, r1
 8010ab2:	f240 7006 	movw	r0, #1798	; 0x706
 8010ab6:	f7ff fdf7 	bl	80106a8 <SUBGRF_WriteRegister>
}
 8010aba:	b003      	add	sp, #12
 8010abc:	f85d fb04 	ldr.w	pc, [sp], #4

08010ac0 <SUBGRF_SetRegulatorMode>:
{
 8010ac0:	b500      	push	{lr}
 8010ac2:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8010ac4:	f7f1 ff40 	bl	8002948 <RBI_IsDCDC>
 8010ac8:	2801      	cmp	r0, #1
 8010aca:	d00b      	beq.n	8010ae4 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8010acc:	2300      	movs	r3, #0
 8010ace:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	f10d 0107 	add.w	r1, sp, #7
 8010ad8:	2096      	movs	r0, #150	; 0x96
 8010ada:	f7ff feab 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010ade:	b003      	add	sp, #12
 8010ae0:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	f88d 3007 	strb.w	r3, [sp, #7]
 8010aea:	e7f2      	b.n	8010ad2 <SUBGRF_SetRegulatorMode+0x12>

08010aec <SUBGRF_Calibrate>:
{
 8010aec:	b500      	push	{lr}
 8010aee:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010af0:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010af4:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010af8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010afa:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010afe:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010b00:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010b04:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010b06:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010b0a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8010b0c:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010b10:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8010b12:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8010b16:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010b18:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	f10d 0107 	add.w	r1, sp, #7
 8010b22:	2089      	movs	r0, #137	; 0x89
 8010b24:	f7ff fe86 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010b28:	b003      	add	sp, #12
 8010b2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010b30 <SUBGRF_CalibrateImage>:
{
 8010b30:	b500      	push	{lr}
 8010b32:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8010b34:	4b1f      	ldr	r3, [pc, #124]	; (8010bb4 <SUBGRF_CalibrateImage+0x84>)
 8010b36:	4298      	cmp	r0, r3
 8010b38:	d90d      	bls.n	8010b56 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8010b3a:	23e1      	movs	r3, #225	; 0xe1
 8010b3c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8010b40:	23e9      	movs	r3, #233	; 0xe9
 8010b42:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8010b46:	2202      	movs	r2, #2
 8010b48:	a901      	add	r1, sp, #4
 8010b4a:	2098      	movs	r0, #152	; 0x98
 8010b4c:	f7ff fe72 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010b50:	b003      	add	sp, #12
 8010b52:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8010b56:	4b18      	ldr	r3, [pc, #96]	; (8010bb8 <SUBGRF_CalibrateImage+0x88>)
 8010b58:	4298      	cmp	r0, r3
 8010b5a:	d906      	bls.n	8010b6a <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8010b5c:	23d7      	movs	r3, #215	; 0xd7
 8010b5e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8010b62:	23db      	movs	r3, #219	; 0xdb
 8010b64:	f88d 3005 	strb.w	r3, [sp, #5]
 8010b68:	e7ed      	b.n	8010b46 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8010b6a:	4b14      	ldr	r3, [pc, #80]	; (8010bbc <SUBGRF_CalibrateImage+0x8c>)
 8010b6c:	4298      	cmp	r0, r3
 8010b6e:	d906      	bls.n	8010b7e <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8010b70:	23c1      	movs	r3, #193	; 0xc1
 8010b72:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8010b76:	23c5      	movs	r3, #197	; 0xc5
 8010b78:	f88d 3005 	strb.w	r3, [sp, #5]
 8010b7c:	e7e3      	b.n	8010b46 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8010b7e:	4b10      	ldr	r3, [pc, #64]	; (8010bc0 <SUBGRF_CalibrateImage+0x90>)
 8010b80:	4298      	cmp	r0, r3
 8010b82:	d906      	bls.n	8010b92 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8010b84:	2375      	movs	r3, #117	; 0x75
 8010b86:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8010b8a:	2381      	movs	r3, #129	; 0x81
 8010b8c:	f88d 3005 	strb.w	r3, [sp, #5]
 8010b90:	e7d9      	b.n	8010b46 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8010b92:	4b0c      	ldr	r3, [pc, #48]	; (8010bc4 <SUBGRF_CalibrateImage+0x94>)
 8010b94:	4298      	cmp	r0, r3
 8010b96:	d906      	bls.n	8010ba6 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8010b98:	236b      	movs	r3, #107	; 0x6b
 8010b9a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8010b9e:	236f      	movs	r3, #111	; 0x6f
 8010ba0:	f88d 3005 	strb.w	r3, [sp, #5]
 8010ba4:	e7cf      	b.n	8010b46 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8010ba6:	2329      	movs	r3, #41	; 0x29
 8010ba8:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8010bac:	232b      	movs	r3, #43	; 0x2b
 8010bae:	f88d 3005 	strb.w	r3, [sp, #5]
 8010bb2:	e7c8      	b.n	8010b46 <SUBGRF_CalibrateImage+0x16>
 8010bb4:	35a4e900 	.word	0x35a4e900
 8010bb8:	32a9f880 	.word	0x32a9f880
 8010bbc:	2de54480 	.word	0x2de54480
 8010bc0:	1b6b0b00 	.word	0x1b6b0b00
 8010bc4:	1954fc40 	.word	0x1954fc40

08010bc8 <SUBGRF_SetPaConfig>:
{
 8010bc8:	b500      	push	{lr}
 8010bca:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8010bcc:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8010bd0:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8010bd4:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8010bd8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8010bdc:	2204      	movs	r2, #4
 8010bde:	eb0d 0102 	add.w	r1, sp, r2
 8010be2:	2095      	movs	r0, #149	; 0x95
 8010be4:	f7ff fe26 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010be8:	b003      	add	sp, #12
 8010bea:	f85d fb04 	ldr.w	pc, [sp], #4

08010bee <SUBGRF_SetDioIrqParams>:
{
 8010bee:	b500      	push	{lr}
 8010bf0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8010bf2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8010bf6:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8010bfa:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8010bfe:	0a08      	lsrs	r0, r1, #8
 8010c00:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8010c04:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8010c08:	0a11      	lsrs	r1, r2, #8
 8010c0a:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8010c0e:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8010c12:	0a1a      	lsrs	r2, r3, #8
 8010c14:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8010c18:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8010c1c:	2208      	movs	r2, #8
 8010c1e:	4669      	mov	r1, sp
 8010c20:	4610      	mov	r0, r2
 8010c22:	f7ff fe07 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010c26:	b003      	add	sp, #12
 8010c28:	f85d fb04 	ldr.w	pc, [sp], #4

08010c2c <SUBGRF_SetTcxoMode>:
{
 8010c2c:	b500      	push	{lr}
 8010c2e:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8010c30:	f000 0007 	and.w	r0, r0, #7
 8010c34:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010c38:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010c3c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010c40:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010c44:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8010c48:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8010c4c:	2204      	movs	r2, #4
 8010c4e:	eb0d 0102 	add.w	r1, sp, r2
 8010c52:	2097      	movs	r0, #151	; 0x97
 8010c54:	f7ff fdee 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010c58:	b003      	add	sp, #12
 8010c5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010c60 <SUBGRF_Init>:
{
 8010c60:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8010c62:	b108      	cbz	r0, 8010c68 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8010c64:	4a18      	ldr	r2, [pc, #96]	; (8010cc8 <SUBGRF_Init+0x68>)
 8010c66:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8010c68:	f7f0 fdac 	bl	80017c4 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010c6c:	2002      	movs	r0, #2
 8010c6e:	f7ff fd3b 	bl	80106e8 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8010c72:	2000      	movs	r0, #0
 8010c74:	4b15      	ldr	r3, [pc, #84]	; (8010ccc <SUBGRF_Init+0x6c>)
 8010c76:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8010c78:	f7ff fe0c 	bl	8010894 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8010c7c:	f7f1 fe60 	bl	8002940 <RBI_IsTCXO>
 8010c80:	2801      	cmp	r0, #1
 8010c82:	d014      	beq.n	8010cae <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010c84:	2120      	movs	r1, #32
 8010c86:	f640 1011 	movw	r0, #2321	; 0x911
 8010c8a:	f7ff fd0d 	bl	80106a8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010c8e:	2120      	movs	r1, #32
 8010c90:	f640 1012 	movw	r0, #2322	; 0x912
 8010c94:	f7ff fd08 	bl	80106a8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010c98:	210e      	movs	r1, #14
 8010c9a:	f640 101f 	movw	r0, #2335	; 0x91f
 8010c9e:	f7ff fd03 	bl	80106a8 <SUBGRF_WriteRegister>
    RBI_Init();
 8010ca2:	f7f1 fe41 	bl	8002928 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8010ca6:	4b0a      	ldr	r3, [pc, #40]	; (8010cd0 <SUBGRF_Init+0x70>)
 8010ca8:	2201      	movs	r2, #1
 8010caa:	701a      	strb	r2, [r3, #0]
}
 8010cac:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8010cae:	2140      	movs	r1, #64	; 0x40
 8010cb0:	f7ff ffbc 	bl	8010c2c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	f640 1011 	movw	r0, #2321	; 0x911
 8010cba:	f7ff fcf5 	bl	80106a8 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8010cbe:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8010cc2:	f7ff ff13 	bl	8010aec <SUBGRF_Calibrate>
 8010cc6:	e7e7      	b.n	8010c98 <SUBGRF_Init+0x38>
 8010cc8:	20000ff0 	.word	0x20000ff0
 8010ccc:	20000fec 	.word	0x20000fec
 8010cd0:	20000fee 	.word	0x20000fee

08010cd4 <SUBGRF_SetRfFrequency>:
{
 8010cd4:	b510      	push	{r4, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8010cda:	4b12      	ldr	r3, [pc, #72]	; (8010d24 <SUBGRF_SetRfFrequency+0x50>)
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	b1d3      	cbz	r3, 8010d16 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8010ce0:	4a11      	ldr	r2, [pc, #68]	; (8010d28 <SUBGRF_SetRfFrequency+0x54>)
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	0660      	lsls	r0, r4, #25
 8010ce6:	09e1      	lsrs	r1, r4, #7
 8010ce8:	f7ef ff5e 	bl	8000ba8 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8010cec:	0e03      	lsrs	r3, r0, #24
 8010cee:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8010cf2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010cf6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8010cfa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010cfe:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8010d02:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8010d06:	2204      	movs	r2, #4
 8010d08:	eb0d 0102 	add.w	r1, sp, r2
 8010d0c:	2086      	movs	r0, #134	; 0x86
 8010d0e:	f7ff fd91 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010d12:	b002      	add	sp, #8
 8010d14:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8010d16:	f7ff ff0b 	bl	8010b30 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8010d1a:	4b02      	ldr	r3, [pc, #8]	; (8010d24 <SUBGRF_SetRfFrequency+0x50>)
 8010d1c:	2201      	movs	r2, #1
 8010d1e:	701a      	strb	r2, [r3, #0]
 8010d20:	e7de      	b.n	8010ce0 <SUBGRF_SetRfFrequency+0xc>
 8010d22:	bf00      	nop
 8010d24:	20000fec 	.word	0x20000fec
 8010d28:	01e84800 	.word	0x01e84800

08010d2c <SUBGRF_SetPacketType>:
{
 8010d2c:	b500      	push	{lr}
 8010d2e:	b083      	sub	sp, #12
 8010d30:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8010d34:	b2c3      	uxtb	r3, r0
 8010d36:	4a09      	ldr	r2, [pc, #36]	; (8010d5c <SUBGRF_SetPacketType+0x30>)
 8010d38:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8010d3a:	b143      	cbz	r3, 8010d4e <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8010d3c:	2201      	movs	r2, #1
 8010d3e:	f10d 0107 	add.w	r1, sp, #7
 8010d42:	208a      	movs	r0, #138	; 0x8a
 8010d44:	f7ff fd76 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010d48:	b003      	add	sp, #12
 8010d4a:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8010d4e:	2100      	movs	r1, #0
 8010d50:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8010d54:	f7ff fca8 	bl	80106a8 <SUBGRF_WriteRegister>
 8010d58:	e7f0      	b.n	8010d3c <SUBGRF_SetPacketType+0x10>
 8010d5a:	bf00      	nop
 8010d5c:	20000fef 	.word	0x20000fef

08010d60 <SUBGRF_SetTxParams>:
{
 8010d60:	b570      	push	{r4, r5, r6, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	460c      	mov	r4, r1
 8010d66:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8010d68:	2801      	cmp	r0, #1
 8010d6a:	d035      	beq.n	8010dd8 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8010d6c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8010d70:	f7ff fcaa 	bl	80106c8 <SUBGRF_ReadRegister>
 8010d74:	f040 011e 	orr.w	r1, r0, #30
 8010d78:	b2c9      	uxtb	r1, r1
 8010d7a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8010d7e:	f7ff fc93 	bl	80106a8 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8010d82:	2001      	movs	r0, #1
 8010d84:	f7f1 fde4 	bl	8002950 <RBI_GetRFOMaxPowerConfig>
 8010d88:	4605      	mov	r5, r0
        if (power > max_power)
 8010d8a:	4284      	cmp	r4, r0
 8010d8c:	dd00      	ble.n	8010d90 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8010d8e:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8010d90:	2d14      	cmp	r5, #20
 8010d92:	d054      	beq.n	8010e3e <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8010d94:	2d11      	cmp	r5, #17
 8010d96:	d05c      	beq.n	8010e52 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8010d98:	2d0e      	cmp	r5, #14
 8010d9a:	d064      	beq.n	8010e66 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	2200      	movs	r2, #0
 8010da0:	2107      	movs	r1, #7
 8010da2:	2004      	movs	r0, #4
 8010da4:	f7ff ff10 	bl	8010bc8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010da8:	1b64      	subs	r4, r4, r5
 8010daa:	3416      	adds	r4, #22
 8010dac:	b264      	sxtb	r4, r4
        if (power < -9)
 8010dae:	f114 0f09 	cmn.w	r4, #9
 8010db2:	da01      	bge.n	8010db8 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8010db4:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8010db8:	2138      	movs	r1, #56	; 0x38
 8010dba:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8010dbe:	f7ff fc73 	bl	80106a8 <SUBGRF_WriteRegister>
    buf[0] = power;
 8010dc2:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8010dc6:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8010dca:	2202      	movs	r2, #2
 8010dcc:	a901      	add	r1, sp, #4
 8010dce:	208e      	movs	r0, #142	; 0x8e
 8010dd0:	f7ff fd30 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010dd4:	b002      	add	sp, #8
 8010dd6:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8010dd8:	2000      	movs	r0, #0
 8010dda:	f7f1 fdb9 	bl	8002950 <RBI_GetRFOMaxPowerConfig>
 8010dde:	4605      	mov	r5, r0
        if (power >  max_power)
 8010de0:	4284      	cmp	r4, r0
 8010de2:	dd00      	ble.n	8010de6 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8010de4:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8010de6:	2d0e      	cmp	r5, #14
 8010de8:	d015      	beq.n	8010e16 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8010dea:	2d0a      	cmp	r5, #10
 8010dec:	d01d      	beq.n	8010e2a <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8010dee:	2301      	movs	r3, #1
 8010df0:	461a      	mov	r2, r3
 8010df2:	2100      	movs	r1, #0
 8010df4:	2007      	movs	r0, #7
 8010df6:	f7ff fee7 	bl	8010bc8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010dfa:	1b64      	subs	r4, r4, r5
 8010dfc:	340e      	adds	r4, #14
 8010dfe:	b264      	sxtb	r4, r4
        if (power < -17)
 8010e00:	f114 0f11 	cmn.w	r4, #17
 8010e04:	da01      	bge.n	8010e0a <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8010e06:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8010e0a:	2118      	movs	r1, #24
 8010e0c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8010e10:	f7ff fc4a 	bl	80106a8 <SUBGRF_WriteRegister>
 8010e14:	e7d5      	b.n	8010dc2 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8010e16:	2301      	movs	r3, #1
 8010e18:	461a      	mov	r2, r3
 8010e1a:	2100      	movs	r1, #0
 8010e1c:	2004      	movs	r0, #4
 8010e1e:	f7ff fed3 	bl	8010bc8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010e22:	1b64      	subs	r4, r4, r5
 8010e24:	340e      	adds	r4, #14
 8010e26:	b264      	sxtb	r4, r4
 8010e28:	e7ea      	b.n	8010e00 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	2100      	movs	r1, #0
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7ff fec9 	bl	8010bc8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8010e36:	1b64      	subs	r4, r4, r5
 8010e38:	340d      	adds	r4, #13
 8010e3a:	b264      	sxtb	r4, r4
 8010e3c:	e7e0      	b.n	8010e00 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8010e3e:	2301      	movs	r3, #1
 8010e40:	2200      	movs	r2, #0
 8010e42:	2105      	movs	r1, #5
 8010e44:	2003      	movs	r0, #3
 8010e46:	f7ff febf 	bl	8010bc8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010e4a:	1b64      	subs	r4, r4, r5
 8010e4c:	3416      	adds	r4, #22
 8010e4e:	b264      	sxtb	r4, r4
 8010e50:	e7ad      	b.n	8010dae <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8010e52:	2301      	movs	r3, #1
 8010e54:	2200      	movs	r2, #0
 8010e56:	2103      	movs	r1, #3
 8010e58:	2002      	movs	r0, #2
 8010e5a:	f7ff feb5 	bl	8010bc8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010e5e:	1b64      	subs	r4, r4, r5
 8010e60:	3416      	adds	r4, #22
 8010e62:	b264      	sxtb	r4, r4
 8010e64:	e7a3      	b.n	8010dae <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8010e66:	2301      	movs	r3, #1
 8010e68:	2200      	movs	r2, #0
 8010e6a:	2102      	movs	r1, #2
 8010e6c:	4608      	mov	r0, r1
 8010e6e:	f7ff feab 	bl	8010bc8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010e72:	1b64      	subs	r4, r4, r5
 8010e74:	340e      	adds	r4, #14
 8010e76:	b264      	sxtb	r4, r4
 8010e78:	e799      	b.n	8010dae <SUBGRF_SetTxParams+0x4e>
	...

08010e7c <SUBGRF_SetModulationParams>:
{
 8010e7c:	b510      	push	{r4, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010e82:	4b3e      	ldr	r3, [pc, #248]	; (8010f7c <SUBGRF_SetModulationParams+0x100>)
 8010e84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010e88:	ab02      	add	r3, sp, #8
 8010e8a:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8010e8e:	7820      	ldrb	r0, [r4, #0]
 8010e90:	4b3b      	ldr	r3, [pc, #236]	; (8010f80 <SUBGRF_SetModulationParams+0x104>)
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	4298      	cmp	r0, r3
 8010e96:	d106      	bne.n	8010ea6 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8010e98:	7823      	ldrb	r3, [r4, #0]
 8010e9a:	2b03      	cmp	r3, #3
 8010e9c:	d82c      	bhi.n	8010ef8 <SUBGRF_SetModulationParams+0x7c>
 8010e9e:	e8df f003 	tbb	[pc, r3]
 8010ea2:	4205      	.short	0x4205
 8010ea4:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8010ea6:	f7ff ff41 	bl	8010d2c <SUBGRF_SetPacketType>
 8010eaa:	e7f5      	b.n	8010e98 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8010eac:	6862      	ldr	r2, [r4, #4]
 8010eae:	4b35      	ldr	r3, [pc, #212]	; (8010f84 <SUBGRF_SetModulationParams+0x108>)
 8010eb0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010eb4:	0c1a      	lsrs	r2, r3, #16
 8010eb6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010eba:	0a1a      	lsrs	r2, r3, #8
 8010ebc:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010ec0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8010ec4:	7b23      	ldrb	r3, [r4, #12]
 8010ec6:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8010eca:	7b63      	ldrb	r3, [r4, #13]
 8010ecc:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8010ed0:	68a1      	ldr	r1, [r4, #8]
 8010ed2:	4a2d      	ldr	r2, [pc, #180]	; (8010f88 <SUBGRF_SetModulationParams+0x10c>)
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	0648      	lsls	r0, r1, #25
 8010ed8:	09c9      	lsrs	r1, r1, #7
 8010eda:	f7ef fe65 	bl	8000ba8 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8010ede:	0c03      	lsrs	r3, r0, #16
 8010ee0:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8010ee4:	0a03      	lsrs	r3, r0, #8
 8010ee6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8010eea:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010eee:	2208      	movs	r2, #8
 8010ef0:	4669      	mov	r1, sp
 8010ef2:	208b      	movs	r0, #139	; 0x8b
 8010ef4:	f7ff fc9e 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010ef8:	b002      	add	sp, #8
 8010efa:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8010efc:	6922      	ldr	r2, [r4, #16]
 8010efe:	4b21      	ldr	r3, [pc, #132]	; (8010f84 <SUBGRF_SetModulationParams+0x108>)
 8010f00:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010f04:	0c1a      	lsrs	r2, r3, #16
 8010f06:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010f0a:	0a1a      	lsrs	r2, r3, #8
 8010f0c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010f10:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8010f14:	7d23      	ldrb	r3, [r4, #20]
 8010f16:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010f1a:	2204      	movs	r2, #4
 8010f1c:	4669      	mov	r1, sp
 8010f1e:	208b      	movs	r0, #139	; 0x8b
 8010f20:	f7ff fc88 	bl	8010834 <SUBGRF_WriteCommand>
        break;
 8010f24:	e7e8      	b.n	8010ef8 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8010f26:	7e23      	ldrb	r3, [r4, #24]
 8010f28:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8010f2c:	7e63      	ldrb	r3, [r4, #25]
 8010f2e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8010f32:	7ea3      	ldrb	r3, [r4, #26]
 8010f34:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8010f38:	7ee3      	ldrb	r3, [r4, #27]
 8010f3a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010f3e:	2204      	movs	r2, #4
 8010f40:	4669      	mov	r1, sp
 8010f42:	208b      	movs	r0, #139	; 0x8b
 8010f44:	f7ff fc76 	bl	8010834 <SUBGRF_WriteCommand>
        break;
 8010f48:	e7d6      	b.n	8010ef8 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8010f4a:	6862      	ldr	r2, [r4, #4]
 8010f4c:	4b0d      	ldr	r3, [pc, #52]	; (8010f84 <SUBGRF_SetModulationParams+0x108>)
 8010f4e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010f52:	0c1a      	lsrs	r2, r3, #16
 8010f54:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010f58:	0a1a      	lsrs	r2, r3, #8
 8010f5a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010f5e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8010f62:	7b23      	ldrb	r3, [r4, #12]
 8010f64:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8010f68:	7b63      	ldrb	r3, [r4, #13]
 8010f6a:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010f6e:	2205      	movs	r2, #5
 8010f70:	4669      	mov	r1, sp
 8010f72:	208b      	movs	r0, #139	; 0x8b
 8010f74:	f7ff fc5e 	bl	8010834 <SUBGRF_WriteCommand>
}
 8010f78:	e7be      	b.n	8010ef8 <SUBGRF_SetModulationParams+0x7c>
 8010f7a:	bf00      	nop
 8010f7c:	080122b4 	.word	0x080122b4
 8010f80:	20000fef 	.word	0x20000fef
 8010f84:	3d090000 	.word	0x3d090000
 8010f88:	01e84800 	.word	0x01e84800

08010f8c <SUBGRF_SetPacketParams>:
{
 8010f8c:	b510      	push	{r4, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010f92:	ab01      	add	r3, sp, #4
 8010f94:	4a33      	ldr	r2, [pc, #204]	; (8011064 <SUBGRF_SetPacketParams+0xd8>)
 8010f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8010f98:	c303      	stmia	r3!, {r0, r1}
 8010f9a:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8010f9c:	7820      	ldrb	r0, [r4, #0]
 8010f9e:	4b32      	ldr	r3, [pc, #200]	; (8011068 <SUBGRF_SetPacketParams+0xdc>)
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	4298      	cmp	r0, r3
 8010fa4:	d106      	bne.n	8010fb4 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8010fa6:	7823      	ldrb	r3, [r4, #0]
 8010fa8:	2b03      	cmp	r3, #3
 8010faa:	d82a      	bhi.n	8011002 <SUBGRF_SetPacketParams+0x76>
 8010fac:	e8df f003 	tbb	[pc, r3]
 8010fb0:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8010fb4:	f7ff feba 	bl	8010d2c <SUBGRF_SetPacketType>
 8010fb8:	e7f5      	b.n	8010fa6 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8010fba:	7a63      	ldrb	r3, [r4, #9]
 8010fbc:	2bf1      	cmp	r3, #241	; 0xf1
 8010fbe:	d022      	beq.n	8011006 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8010fc0:	2bf2      	cmp	r3, #242	; 0xf2
 8010fc2:	d02a      	beq.n	801101a <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8010fc4:	8862      	ldrh	r2, [r4, #2]
 8010fc6:	0a11      	lsrs	r1, r2, #8
 8010fc8:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8010fcc:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8010fd0:	7922      	ldrb	r2, [r4, #4]
 8010fd2:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8010fd6:	7962      	ldrb	r2, [r4, #5]
 8010fd8:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8010fdc:	79a2      	ldrb	r2, [r4, #6]
 8010fde:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8010fe2:	79e2      	ldrb	r2, [r4, #7]
 8010fe4:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8010fe8:	7a22      	ldrb	r2, [r4, #8]
 8010fea:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8010fee:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8010ff2:	7aa3      	ldrb	r3, [r4, #10]
 8010ff4:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8010ff8:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8010ffa:	a901      	add	r1, sp, #4
 8010ffc:	208c      	movs	r0, #140	; 0x8c
 8010ffe:	f7ff fc19 	bl	8010834 <SUBGRF_WriteCommand>
}
 8011002:	b004      	add	sp, #16
 8011004:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8011006:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801100a:	f7ff fbb2 	bl	8010772 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801100e:	f248 0005 	movw	r0, #32773	; 0x8005
 8011012:	f7ff fbc2 	bl	801079a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8011016:	2302      	movs	r3, #2
 8011018:	e7d4      	b.n	8010fc4 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801101a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801101e:	f7ff fba8 	bl	8010772 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8011022:	f241 0021 	movw	r0, #4129	; 0x1021
 8011026:	f7ff fbb8 	bl	801079a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801102a:	2306      	movs	r3, #6
 801102c:	e7ca      	b.n	8010fc4 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801102e:	7b23      	ldrb	r3, [r4, #12]
 8011030:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8011034:	2201      	movs	r2, #1
        break;
 8011036:	e7e0      	b.n	8010ffa <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8011038:	89e3      	ldrh	r3, [r4, #14]
 801103a:	0a1a      	lsrs	r2, r3, #8
 801103c:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8011040:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8011044:	7c23      	ldrb	r3, [r4, #16]
 8011046:	4a09      	ldr	r2, [pc, #36]	; (801106c <SUBGRF_SetPacketParams+0xe0>)
 8011048:	7013      	strb	r3, [r2, #0]
 801104a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801104e:	7c63      	ldrb	r3, [r4, #17]
 8011050:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8011054:	7ca3      	ldrb	r3, [r4, #18]
 8011056:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801105a:	7ce3      	ldrb	r3, [r4, #19]
 801105c:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8011060:	2206      	movs	r2, #6
        break;
 8011062:	e7ca      	b.n	8010ffa <SUBGRF_SetPacketParams+0x6e>
 8011064:	080122bc 	.word	0x080122bc
 8011068:	20000fef 	.word	0x20000fef
 801106c:	20000fed 	.word	0x20000fed

08011070 <SUBGRF_SetBufferBaseAddress>:
{
 8011070:	b500      	push	{lr}
 8011072:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8011074:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8011078:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801107c:	2202      	movs	r2, #2
 801107e:	a901      	add	r1, sp, #4
 8011080:	208f      	movs	r0, #143	; 0x8f
 8011082:	f7ff fbd7 	bl	8010834 <SUBGRF_WriteCommand>
}
 8011086:	b003      	add	sp, #12
 8011088:	f85d fb04 	ldr.w	pc, [sp], #4

0801108c <SUBGRF_ReadCommand>:
{
 801108c:	b510      	push	{r4, lr}
 801108e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011090:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011094:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8011096:	460a      	mov	r2, r1
 8011098:	4601      	mov	r1, r0
 801109a:	4803      	ldr	r0, [pc, #12]	; (80110a8 <SUBGRF_ReadCommand+0x1c>)
 801109c:	f7f4 fbfc 	bl	8005898 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110a0:	f384 8810 	msr	PRIMASK, r4
}
 80110a4:	bd10      	pop	{r4, pc}
 80110a6:	bf00      	nop
 80110a8:	200001c8 	.word	0x200001c8

080110ac <SUBGRF_GetRssiInst>:
{
 80110ac:	b500      	push	{lr}
 80110ae:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80110b0:	2201      	movs	r2, #1
 80110b2:	a901      	add	r1, sp, #4
 80110b4:	2015      	movs	r0, #21
 80110b6:	f7ff ffe9 	bl	801108c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80110ba:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80110be:	4240      	negs	r0, r0
}
 80110c0:	1040      	asrs	r0, r0, #1
 80110c2:	b003      	add	sp, #12
 80110c4:	f85d fb04 	ldr.w	pc, [sp], #4

080110c8 <SUBGRF_GetRxBufferStatus>:
{
 80110c8:	b530      	push	{r4, r5, lr}
 80110ca:	b083      	sub	sp, #12
 80110cc:	4605      	mov	r5, r0
 80110ce:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80110d0:	2202      	movs	r2, #2
 80110d2:	a901      	add	r1, sp, #4
 80110d4:	2013      	movs	r0, #19
 80110d6:	f7ff ffd9 	bl	801108c <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80110da:	f7ff fadf 	bl	801069c <SUBGRF_GetPacketType>
 80110de:	2801      	cmp	r0, #1
 80110e0:	d007      	beq.n	80110f2 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 80110e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80110e6:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 80110e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80110ec:	7023      	strb	r3, [r4, #0]
}
 80110ee:	b003      	add	sp, #12
 80110f0:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80110f2:	4b05      	ldr	r3, [pc, #20]	; (8011108 <SUBGRF_GetRxBufferStatus+0x40>)
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	d1f2      	bne.n	80110e2 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80110fc:	f240 7002 	movw	r0, #1794	; 0x702
 8011100:	f7ff fae2 	bl	80106c8 <SUBGRF_ReadRegister>
 8011104:	7028      	strb	r0, [r5, #0]
 8011106:	e7ef      	b.n	80110e8 <SUBGRF_GetRxBufferStatus+0x20>
 8011108:	20000fed 	.word	0x20000fed

0801110c <SUBGRF_GetPayload>:
{
 801110c:	b570      	push	{r4, r5, r6, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	4606      	mov	r6, r0
 8011112:	460c      	mov	r4, r1
 8011114:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8011116:	2300      	movs	r3, #0
 8011118:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 801111c:	f10d 0107 	add.w	r1, sp, #7
 8011120:	4620      	mov	r0, r4
 8011122:	f7ff ffd1 	bl	80110c8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8011126:	7822      	ldrb	r2, [r4, #0]
 8011128:	42aa      	cmp	r2, r5
 801112a:	d902      	bls.n	8011132 <SUBGRF_GetPayload+0x26>
        return 1;
 801112c:	2001      	movs	r0, #1
}
 801112e:	b002      	add	sp, #8
 8011130:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8011132:	4631      	mov	r1, r6
 8011134:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011138:	f7ff fb6c 	bl	8010814 <SUBGRF_ReadBuffer>
    return 0;
 801113c:	2000      	movs	r0, #0
 801113e:	e7f6      	b.n	801112e <SUBGRF_GetPayload+0x22>

08011140 <SUBGRF_GetPacketStatus>:
{
 8011140:	b510      	push	{r4, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8011146:	2203      	movs	r2, #3
 8011148:	a901      	add	r1, sp, #4
 801114a:	2014      	movs	r0, #20
 801114c:	f7ff ff9e 	bl	801108c <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8011150:	f7ff faa4 	bl	801069c <SUBGRF_GetPacketType>
 8011154:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8011156:	b148      	cbz	r0, 801116c <SUBGRF_GetPacketStatus+0x2c>
 8011158:	2801      	cmp	r0, #1
 801115a:	d018      	beq.n	801118e <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801115c:	2214      	movs	r2, #20
 801115e:	2100      	movs	r1, #0
 8011160:	4620      	mov	r0, r4
 8011162:	f000 fb20 	bl	80117a6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8011166:	230f      	movs	r3, #15
 8011168:	7023      	strb	r3, [r4, #0]
}
 801116a:	e00e      	b.n	801118a <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801116c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011170:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8011172:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011176:	425b      	negs	r3, r3
 8011178:	105b      	asrs	r3, r3, #1
 801117a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801117c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011180:	425b      	negs	r3, r3
 8011182:	105b      	asrs	r3, r3, #1
 8011184:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8011186:	2300      	movs	r3, #0
 8011188:	60a3      	str	r3, [r4, #8]
}
 801118a:	b002      	add	sp, #8
 801118c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801118e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011192:	425b      	negs	r3, r3
 8011194:	105b      	asrs	r3, r3, #1
 8011196:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8011198:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 801119c:	3302      	adds	r3, #2
 801119e:	109b      	asrs	r3, r3, #2
 80111a0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80111a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80111a6:	425b      	negs	r3, r3
 80111a8:	105b      	asrs	r3, r3, #1
 80111aa:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80111ac:	4b01      	ldr	r3, [pc, #4]	; (80111b4 <SUBGRF_GetPacketStatus+0x74>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	6123      	str	r3, [r4, #16]
            break;
 80111b2:	e7ea      	b.n	801118a <SUBGRF_GetPacketStatus+0x4a>
 80111b4:	20000fe8 	.word	0x20000fe8

080111b8 <SUBGRF_SetSwitch>:
{
 80111b8:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80111ba:	2901      	cmp	r1, #1
 80111bc:	d003      	beq.n	80111c6 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80111be:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 80111c0:	f7f1 fbb6 	bl	8002930 <RBI_ConfigRFSwitch>
}
 80111c4:	bd10      	pop	{r4, pc}
 80111c6:	4604      	mov	r4, r0
 80111c8:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 80111ca:	2c01      	cmp	r4, #1
 80111cc:	d003      	beq.n	80111d6 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 80111ce:	2c02      	cmp	r4, #2
 80111d0:	d1f6      	bne.n	80111c0 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 80111d2:	2003      	movs	r0, #3
 80111d4:	e7f4      	b.n	80111c0 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80111d6:	2004      	movs	r0, #4
 80111d8:	f7ff fa86 	bl	80106e8 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 80111dc:	2002      	movs	r0, #2
 80111de:	e7f6      	b.n	80111ce <SUBGRF_SetSwitch+0x16>

080111e0 <SUBGRF_SetRfTxPower>:
{
 80111e0:	b538      	push	{r3, r4, r5, lr}
 80111e2:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 80111e4:	f7f1 fba8 	bl	8002938 <RBI_GetTxConfig>
    switch (TxConfig)
 80111e8:	b148      	cbz	r0, 80111fe <SUBGRF_SetRfTxPower+0x1e>
 80111ea:	2802      	cmp	r0, #2
 80111ec:	d10d      	bne.n	801120a <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 80111ee:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80111f0:	2202      	movs	r2, #2
 80111f2:	4621      	mov	r1, r4
 80111f4:	4628      	mov	r0, r5
 80111f6:	f7ff fdb3 	bl	8010d60 <SUBGRF_SetTxParams>
}
 80111fa:	4628      	mov	r0, r5
 80111fc:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80111fe:	2c0f      	cmp	r4, #15
 8011200:	dc01      	bgt.n	8011206 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8011202:	2501      	movs	r5, #1
 8011204:	e7f4      	b.n	80111f0 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8011206:	2502      	movs	r5, #2
 8011208:	e7f2      	b.n	80111f0 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 801120a:	2501      	movs	r5, #1
 801120c:	e7f0      	b.n	80111f0 <SUBGRF_SetRfTxPower+0x10>

0801120e <SUBGRF_GetRadioWakeUpTime>:
}
 801120e:	2001      	movs	r0, #1
 8011210:	4770      	bx	lr
	...

08011214 <HAL_SUBGHZ_TxCpltCallback>:
{
 8011214:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8011216:	4b02      	ldr	r3, [pc, #8]	; (8011220 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2001      	movs	r0, #1
 801121c:	4798      	blx	r3
}
 801121e:	bd08      	pop	{r3, pc}
 8011220:	20000ff0 	.word	0x20000ff0

08011224 <HAL_SUBGHZ_RxCpltCallback>:
{
 8011224:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8011226:	4b02      	ldr	r3, [pc, #8]	; (8011230 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	2002      	movs	r0, #2
 801122c:	4798      	blx	r3
}
 801122e:	bd08      	pop	{r3, pc}
 8011230:	20000ff0 	.word	0x20000ff0

08011234 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8011234:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8011236:	4b02      	ldr	r3, [pc, #8]	; (8011240 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	2040      	movs	r0, #64	; 0x40
 801123c:	4798      	blx	r3
}
 801123e:	bd08      	pop	{r3, pc}
 8011240:	20000ff0 	.word	0x20000ff0

08011244 <HAL_SUBGHZ_CADStatusCallback>:
{
 8011244:	b508      	push	{r3, lr}
    switch (cadstatus)
 8011246:	b111      	cbz	r1, 801124e <HAL_SUBGHZ_CADStatusCallback+0xa>
 8011248:	2901      	cmp	r1, #1
 801124a:	d005      	beq.n	8011258 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 801124c:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801124e:	4b05      	ldr	r3, [pc, #20]	; (8011264 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	2080      	movs	r0, #128	; 0x80
 8011254:	4798      	blx	r3
            break;
 8011256:	e7f9      	b.n	801124c <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8011258:	4b02      	ldr	r3, [pc, #8]	; (8011264 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011260:	4798      	blx	r3
}
 8011262:	e7f3      	b.n	801124c <HAL_SUBGHZ_CADStatusCallback+0x8>
 8011264:	20000ff0 	.word	0x20000ff0

08011268 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8011268:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801126a:	4b03      	ldr	r3, [pc, #12]	; (8011278 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011272:	4798      	blx	r3
}
 8011274:	bd08      	pop	{r3, pc}
 8011276:	bf00      	nop
 8011278:	20000ff0 	.word	0x20000ff0

0801127c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 801127c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801127e:	4b02      	ldr	r3, [pc, #8]	; (8011288 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	2020      	movs	r0, #32
 8011284:	4798      	blx	r3
}
 8011286:	bd08      	pop	{r3, pc}
 8011288:	20000ff0 	.word	0x20000ff0

0801128c <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 801128c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801128e:	4b02      	ldr	r3, [pc, #8]	; (8011298 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	2004      	movs	r0, #4
 8011294:	4798      	blx	r3
}
 8011296:	bd08      	pop	{r3, pc}
 8011298:	20000ff0 	.word	0x20000ff0

0801129c <HAL_SUBGHZ_SyncWordValidCallback>:
{
 801129c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801129e:	4b02      	ldr	r3, [pc, #8]	; (80112a8 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	2008      	movs	r0, #8
 80112a4:	4798      	blx	r3
}
 80112a6:	bd08      	pop	{r3, pc}
 80112a8:	20000ff0 	.word	0x20000ff0

080112ac <HAL_SUBGHZ_HeaderValidCallback>:
{
 80112ac:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80112ae:	4b02      	ldr	r3, [pc, #8]	; (80112b8 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	2010      	movs	r0, #16
 80112b4:	4798      	blx	r3
}
 80112b6:	bd08      	pop	{r3, pc}
 80112b8:	20000ff0 	.word	0x20000ff0

080112bc <HAL_SUBGHZ_LrFhssHopCallback>:
{
 80112bc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80112be:	4b03      	ldr	r3, [pc, #12]	; (80112cc <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80112c6:	4798      	blx	r3
}
 80112c8:	bd08      	pop	{r3, pc}
 80112ca:	bf00      	nop
 80112cc:	20000ff0 	.word	0x20000ff0

080112d0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80112d0:	4601      	mov	r1, r0
 80112d2:	b188      	cbz	r0, 80112f8 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80112d4:	2300      	movs	r3, #0
 80112d6:	2b15      	cmp	r3, #21
 80112d8:	d80d      	bhi.n	80112f6 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80112da:	4618      	mov	r0, r3
 80112dc:	4a07      	ldr	r2, [pc, #28]	; (80112fc <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80112de:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80112e2:	428a      	cmp	r2, r1
 80112e4:	d802      	bhi.n	80112ec <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80112e6:	3301      	adds	r3, #1
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	e7f4      	b.n	80112d6 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 80112ec:	4b03      	ldr	r3, [pc, #12]	; (80112fc <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80112ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80112f2:	7900      	ldrb	r0, [r0, #4]
 80112f4:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 80112f6:	e7fe      	b.n	80112f6 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 80112f8:	201f      	movs	r0, #31
}
 80112fa:	4770      	bx	lr
 80112fc:	08013048 	.word	0x08013048

08011300 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8011300:	b570      	push	{r4, r5, r6, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	4606      	mov	r6, r0
 8011306:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8011308:	4b1d      	ldr	r3, [pc, #116]	; (8011380 <SUBGRF_GetCFO+0x80>)
 801130a:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801130c:	f640 0007 	movw	r0, #2055	; 0x807
 8011310:	f7ff f9da 	bl	80106c8 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8011314:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8011318:	3308      	adds	r3, #8
 801131a:	446b      	add	r3, sp
 801131c:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8011320:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8011324:	3301      	adds	r3, #1
 8011326:	fa05 f303 	lsl.w	r3, r5, r3
 801132a:	4d16      	ldr	r5, [pc, #88]	; (8011384 <SUBGRF_GetCFO+0x84>)
 801132c:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8011330:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8011334:	2a07      	cmp	r2, #7
 8011336:	d921      	bls.n	801137c <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8011338:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 801133a:	fb00 f202 	mul.w	r2, r0, r2
 801133e:	2a03      	cmp	r2, #3
 8011340:	d800      	bhi.n	8011344 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8011342:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8011344:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8011348:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801134c:	f7ff f9bc 	bl	80106c8 <SUBGRF_ReadRegister>
 8011350:	0200      	lsls	r0, r0, #8
 8011352:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8011356:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801135a:	f7ff f9b5 	bl	80106c8 <SUBGRF_ReadRegister>
 801135e:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8011360:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8011364:	d003      	beq.n	801136e <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8011366:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 801136a:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801136e:	096d      	lsrs	r5, r5, #5
 8011370:	fb05 f000 	mul.w	r0, r5, r0
 8011374:	11c0      	asrs	r0, r0, #7
 8011376:	6020      	str	r0, [r4, #0]
}
 8011378:	b002      	add	sp, #8
 801137a:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 801137c:	2002      	movs	r0, #2
 801137e:	e7dc      	b.n	801133a <SUBGRF_GetCFO+0x3a>
 8011380:	0c0a0804 	.word	0x0c0a0804
 8011384:	01e84800 	.word	0x01e84800

08011388 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8011388:	f04f 30ff 	mov.w	r0, #4294967295
 801138c:	4770      	bx	lr

0801138e <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 801138e:	f04f 30ff 	mov.w	r0, #4294967295
 8011392:	4770      	bx	lr

08011394 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8011394:	4770      	bx	lr

08011396 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8011396:	2000      	movs	r0, #0
 8011398:	4770      	bx	lr

0801139a <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 801139a:	2000      	movs	r0, #0
 801139c:	4770      	bx	lr

0801139e <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801139e:	4770      	bx	lr

080113a0 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 80113a0:	f04f 30ff 	mov.w	r0, #4294967295
 80113a4:	4770      	bx	lr

080113a6 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 80113a6:	f04f 30ff 	mov.w	r0, #4294967295
 80113aa:	4770      	bx	lr

080113ac <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80113ac:	4770      	bx	lr

080113ae <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80113ae:	4770      	bx	lr

080113b0 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80113b0:	4770      	bx	lr
	...

080113b4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80113b4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113b6:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80113ba:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80113bc:	4b1e      	ldr	r3, [pc, #120]	; (8011438 <TRACE_AllocateBufer+0x84>)
 80113be:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 80113c2:	8a1a      	ldrh	r2, [r3, #16]
 80113c4:	4594      	cmp	ip, r2
 80113c6:	d011      	beq.n	80113ec <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80113c8:	4594      	cmp	ip, r2
 80113ca:	d921      	bls.n	8011410 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80113cc:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80113d0:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80113d2:	4283      	cmp	r3, r0
 80113d4:	d81f      	bhi.n	8011416 <TRACE_AllocateBufer+0x62>
 80113d6:	4282      	cmp	r2, r0
 80113d8:	d91d      	bls.n	8011416 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80113da:	4b17      	ldr	r3, [pc, #92]	; (8011438 <TRACE_AllocateBufer+0x84>)
 80113dc:	2401      	movs	r4, #1
 80113de:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80113e0:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80113e4:	2400      	movs	r4, #0
 80113e6:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80113e8:	4613      	mov	r3, r2
 80113ea:	e014      	b.n	8011416 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80113ec:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80113f0:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80113f2:	4298      	cmp	r0, r3
 80113f4:	d30f      	bcc.n	8011416 <TRACE_AllocateBufer+0x62>
 80113f6:	4282      	cmp	r2, r0
 80113f8:	d90d      	bls.n	8011416 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80113fa:	4b0f      	ldr	r3, [pc, #60]	; (8011438 <TRACE_AllocateBufer+0x84>)
 80113fc:	2401      	movs	r4, #1
 80113fe:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011400:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011404:	f04f 0c00 	mov.w	ip, #0
 8011408:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801140c:	4613      	mov	r3, r2
 801140e:	e002      	b.n	8011416 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8011410:	eba2 030c 	sub.w	r3, r2, ip
 8011414:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8011416:	4283      	cmp	r3, r0
 8011418:	d90a      	bls.n	8011430 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801141a:	4a07      	ldr	r2, [pc, #28]	; (8011438 <TRACE_AllocateBufer+0x84>)
 801141c:	8a53      	ldrh	r3, [r2, #18]
 801141e:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011420:	4403      	add	r3, r0
 8011422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011426:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8011428:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801142a:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 801142e:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8011430:	f04f 30ff 	mov.w	r0, #4294967295
 8011434:	e7f9      	b.n	801142a <TRACE_AllocateBufer+0x76>
 8011436:	bf00      	nop
 8011438:	200013f4 	.word	0x200013f4

0801143c <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801143c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011440:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8011442:	4a03      	ldr	r2, [pc, #12]	; (8011450 <TRACE_Lock+0x14>)
 8011444:	8ad3      	ldrh	r3, [r2, #22]
 8011446:	3301      	adds	r3, #1
 8011448:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801144a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801144e:	4770      	bx	lr
 8011450:	200013f4 	.word	0x200013f4

08011454 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011454:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011458:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 801145a:	4a03      	ldr	r2, [pc, #12]	; (8011468 <TRACE_UnLock+0x14>)
 801145c:	8ad3      	ldrh	r3, [r2, #22]
 801145e:	3b01      	subs	r3, #1
 8011460:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011462:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011466:	4770      	bx	lr
 8011468:	200013f4 	.word	0x200013f4

0801146c <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801146c:	4b02      	ldr	r3, [pc, #8]	; (8011478 <TRACE_IsLocked+0xc>)
 801146e:	8ad8      	ldrh	r0, [r3, #22]
}
 8011470:	3800      	subs	r0, #0
 8011472:	bf18      	it	ne
 8011474:	2001      	movne	r0, #1
 8011476:	4770      	bx	lr
 8011478:	200013f4 	.word	0x200013f4

0801147c <UTIL_ADV_TRACE_Init>:
{
 801147c:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801147e:	2218      	movs	r2, #24
 8011480:	2100      	movs	r1, #0
 8011482:	4807      	ldr	r0, [pc, #28]	; (80114a0 <UTIL_ADV_TRACE_Init+0x24>)
 8011484:	f000 f98f 	bl	80117a6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8011488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801148c:	2100      	movs	r1, #0
 801148e:	4805      	ldr	r0, [pc, #20]	; (80114a4 <UTIL_ADV_TRACE_Init+0x28>)
 8011490:	f000 f989 	bl	80117a6 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8011494:	4b04      	ldr	r3, [pc, #16]	; (80114a8 <UTIL_ADV_TRACE_Init+0x2c>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	4804      	ldr	r0, [pc, #16]	; (80114ac <UTIL_ADV_TRACE_Init+0x30>)
 801149a:	4798      	blx	r3
}
 801149c:	bd08      	pop	{r3, pc}
 801149e:	bf00      	nop
 80114a0:	200013f4 	.word	0x200013f4
 80114a4:	20000ff4 	.word	0x20000ff4
 80114a8:	0801232c 	.word	0x0801232c
 80114ac:	08011631 	.word	0x08011631

080114b0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80114b0:	4b01      	ldr	r3, [pc, #4]	; (80114b8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 80114b2:	6058      	str	r0, [r3, #4]
}
 80114b4:	4770      	bx	lr
 80114b6:	bf00      	nop
 80114b8:	200013f4 	.word	0x200013f4

080114bc <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80114bc:	4b01      	ldr	r3, [pc, #4]	; (80114c4 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 80114be:	7218      	strb	r0, [r3, #8]
}
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	200013f4 	.word	0x200013f4

080114c8 <TRACE_Send>:
{
 80114c8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114ca:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80114ce:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 80114d0:	f7ff ffcc 	bl	801146c <TRACE_IsLocked>
 80114d4:	b118      	cbz	r0, 80114de <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114d6:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80114da:	2000      	movs	r0, #0
}
 80114dc:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 80114de:	f7ff ffad 	bl	801143c <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80114e2:	4b1d      	ldr	r3, [pc, #116]	; (8011558 <TRACE_Send+0x90>)
 80114e4:	8a1a      	ldrh	r2, [r3, #16]
 80114e6:	8a5b      	ldrh	r3, [r3, #18]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d02e      	beq.n	801154a <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80114ec:	491a      	ldr	r1, [pc, #104]	; (8011558 <TRACE_Send+0x90>)
 80114ee:	7889      	ldrb	r1, [r1, #2]
 80114f0:	2901      	cmp	r1, #1
 80114f2:	d017      	beq.n	8011524 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80114f4:	4a18      	ldr	r2, [pc, #96]	; (8011558 <TRACE_Send+0x90>)
 80114f6:	7892      	ldrb	r2, [r2, #2]
 80114f8:	b932      	cbnz	r2, 8011508 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80114fa:	4a17      	ldr	r2, [pc, #92]	; (8011558 <TRACE_Send+0x90>)
 80114fc:	8a12      	ldrh	r2, [r2, #16]
 80114fe:	4293      	cmp	r3, r2
 8011500:	d91e      	bls.n	8011540 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8011502:	1a9b      	subs	r3, r3, r2
 8011504:	4a14      	ldr	r2, [pc, #80]	; (8011558 <TRACE_Send+0x90>)
 8011506:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8011508:	4e13      	ldr	r6, [pc, #76]	; (8011558 <TRACE_Send+0x90>)
 801150a:	8a33      	ldrh	r3, [r6, #16]
 801150c:	4d13      	ldr	r5, [pc, #76]	; (801155c <TRACE_Send+0x94>)
 801150e:	441d      	add	r5, r3
 8011510:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8011514:	f7f0 fa48 	bl	80019a8 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8011518:	4b11      	ldr	r3, [pc, #68]	; (8011560 <TRACE_Send+0x98>)
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	8ab1      	ldrh	r1, [r6, #20]
 801151e:	4628      	mov	r0, r5
 8011520:	4798      	blx	r3
 8011522:	e7db      	b.n	80114dc <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8011524:	480c      	ldr	r0, [pc, #48]	; (8011558 <TRACE_Send+0x90>)
 8011526:	8801      	ldrh	r1, [r0, #0]
 8011528:	1a8a      	subs	r2, r1, r2
 801152a:	b292      	uxth	r2, r2
 801152c:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801152e:	2102      	movs	r1, #2
 8011530:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8011532:	2100      	movs	r1, #0
 8011534:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8011536:	2a00      	cmp	r2, #0
 8011538:	d1dc      	bne.n	80114f4 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801153a:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801153c:	8201      	strh	r1, [r0, #16]
 801153e:	e7d9      	b.n	80114f4 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8011540:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8011544:	4a04      	ldr	r2, [pc, #16]	; (8011558 <TRACE_Send+0x90>)
 8011546:	8293      	strh	r3, [r2, #20]
 8011548:	e7de      	b.n	8011508 <TRACE_Send+0x40>
      TRACE_UnLock();
 801154a:	f7ff ff83 	bl	8011454 <TRACE_UnLock>
 801154e:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011552:	2000      	movs	r0, #0
}
 8011554:	e7c2      	b.n	80114dc <TRACE_Send+0x14>
 8011556:	bf00      	nop
 8011558:	200013f4 	.word	0x200013f4
 801155c:	20000ff4 	.word	0x20000ff4
 8011560:	0801232c 	.word	0x0801232c

08011564 <UTIL_ADV_TRACE_COND_FSend>:
{
 8011564:	b408      	push	{r3}
 8011566:	b530      	push	{r4, r5, lr}
 8011568:	b086      	sub	sp, #24
 801156a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 801156c:	2300      	movs	r3, #0
 801156e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8011572:	4b2c      	ldr	r3, [pc, #176]	; (8011624 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011574:	7a1b      	ldrb	r3, [r3, #8]
 8011576:	4283      	cmp	r3, r0
 8011578:	d34d      	bcc.n	8011616 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801157a:	4b2a      	ldr	r3, [pc, #168]	; (8011624 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 801157c:	68db      	ldr	r3, [r3, #12]
 801157e:	ea31 0303 	bics.w	r3, r1, r3
 8011582:	d14b      	bne.n	801161c <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8011584:	4b27      	ldr	r3, [pc, #156]	; (8011624 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	b123      	cbz	r3, 8011594 <UTIL_ADV_TRACE_COND_FSend+0x30>
 801158a:	b11a      	cbz	r2, 8011594 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801158c:	f10d 0102 	add.w	r1, sp, #2
 8011590:	a801      	add	r0, sp, #4
 8011592:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8011594:	ab0a      	add	r3, sp, #40	; 0x28
 8011596:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8011598:	4622      	mov	r2, r4
 801159a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801159e:	4822      	ldr	r0, [pc, #136]	; (8011628 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80115a0:	f000 fcd0 	bl	8011f44 <tiny_vsnprintf_like>
 80115a4:	b285      	uxth	r5, r0
  TRACE_Lock();
 80115a6:	f7ff ff49 	bl	801143c <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80115aa:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80115ae:	4428      	add	r0, r5
 80115b0:	4669      	mov	r1, sp
 80115b2:	b280      	uxth	r0, r0
 80115b4:	f7ff fefe 	bl	80113b4 <TRACE_AllocateBufer>
 80115b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80115bc:	d026      	beq.n	801160c <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 80115be:	2300      	movs	r3, #0
 80115c0:	e00d      	b.n	80115de <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80115c2:	f8bd 2000 	ldrh.w	r2, [sp]
 80115c6:	f103 0118 	add.w	r1, r3, #24
 80115ca:	4469      	add	r1, sp
 80115cc:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80115d0:	4916      	ldr	r1, [pc, #88]	; (801162c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80115d2:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 80115d4:	3201      	adds	r2, #1
 80115d6:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 80115da:	3301      	adds	r3, #1
 80115dc:	b29b      	uxth	r3, r3
 80115de:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d8ed      	bhi.n	80115c2 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80115e6:	f8bd 0000 	ldrh.w	r0, [sp]
 80115ea:	9b05      	ldr	r3, [sp, #20]
 80115ec:	4622      	mov	r2, r4
 80115ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80115f2:	4c0e      	ldr	r4, [pc, #56]	; (801162c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80115f4:	4420      	add	r0, r4
 80115f6:	f000 fca5 	bl	8011f44 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80115fa:	f7ff ff2b 	bl	8011454 <TRACE_UnLock>
    return TRACE_Send();
 80115fe:	f7ff ff63 	bl	80114c8 <TRACE_Send>
}
 8011602:	b006      	add	sp, #24
 8011604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011608:	b001      	add	sp, #4
 801160a:	4770      	bx	lr
  TRACE_UnLock();
 801160c:	f7ff ff22 	bl	8011454 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8011610:	f06f 0002 	mvn.w	r0, #2
 8011614:	e7f5      	b.n	8011602 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8011616:	f06f 0004 	mvn.w	r0, #4
 801161a:	e7f2      	b.n	8011602 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 801161c:	f06f 0005 	mvn.w	r0, #5
 8011620:	e7ef      	b.n	8011602 <UTIL_ADV_TRACE_COND_FSend+0x9e>
 8011622:	bf00      	nop
 8011624:	200013f4 	.word	0x200013f4
 8011628:	2000140c 	.word	0x2000140c
 801162c:	20000ff4 	.word	0x20000ff4

08011630 <TRACE_TxCpltCallback>:
{
 8011630:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011632:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011636:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8011638:	4b25      	ldr	r3, [pc, #148]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 801163a:	789b      	ldrb	r3, [r3, #2]
 801163c:	2b02      	cmp	r3, #2
 801163e:	d016      	beq.n	801166e <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011640:	4a23      	ldr	r2, [pc, #140]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 8011642:	8a13      	ldrh	r3, [r2, #16]
 8011644:	8a90      	ldrh	r0, [r2, #20]
 8011646:	4403      	add	r3, r0
 8011648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801164c:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801164e:	4b20      	ldr	r3, [pc, #128]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 8011650:	8a1a      	ldrh	r2, [r3, #16]
 8011652:	8a5b      	ldrh	r3, [r3, #18]
 8011654:	429a      	cmp	r2, r3
 8011656:	d003      	beq.n	8011660 <TRACE_TxCpltCallback+0x30>
 8011658:	481d      	ldr	r0, [pc, #116]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 801165a:	8ac0      	ldrh	r0, [r0, #22]
 801165c:	2801      	cmp	r0, #1
 801165e:	d00b      	beq.n	8011678 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011660:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8011664:	f7f0 f9a6 	bl	80019b4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8011668:	f7ff fef4 	bl	8011454 <TRACE_UnLock>
}
 801166c:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801166e:	4b18      	ldr	r3, [pc, #96]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 8011670:	2200      	movs	r2, #0
 8011672:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011674:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8011676:	e7ea      	b.n	801164e <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8011678:	4815      	ldr	r0, [pc, #84]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 801167a:	7880      	ldrb	r0, [r0, #2]
 801167c:	2801      	cmp	r0, #1
 801167e:	d014      	beq.n	80116aa <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8011680:	4a13      	ldr	r2, [pc, #76]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 8011682:	7892      	ldrb	r2, [r2, #2]
 8011684:	b932      	cbnz	r2, 8011694 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011686:	4a12      	ldr	r2, [pc, #72]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 8011688:	8a12      	ldrh	r2, [r2, #16]
 801168a:	4293      	cmp	r3, r2
 801168c:	d91b      	bls.n	80116c6 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801168e:	1a9b      	subs	r3, r3, r2
 8011690:	4a0f      	ldr	r2, [pc, #60]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 8011692:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8011694:	4b0e      	ldr	r3, [pc, #56]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 8011696:	8a1a      	ldrh	r2, [r3, #16]
 8011698:	480e      	ldr	r0, [pc, #56]	; (80116d4 <TRACE_TxCpltCallback+0xa4>)
 801169a:	4410      	add	r0, r2
 801169c:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80116a0:	4a0d      	ldr	r2, [pc, #52]	; (80116d8 <TRACE_TxCpltCallback+0xa8>)
 80116a2:	68d2      	ldr	r2, [r2, #12]
 80116a4:	8a99      	ldrh	r1, [r3, #20]
 80116a6:	4790      	blx	r2
 80116a8:	e7e0      	b.n	801166c <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80116aa:	4c09      	ldr	r4, [pc, #36]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 80116ac:	8820      	ldrh	r0, [r4, #0]
 80116ae:	1a82      	subs	r2, r0, r2
 80116b0:	b292      	uxth	r2, r2
 80116b2:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80116b4:	2002      	movs	r0, #2
 80116b6:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80116b8:	2000      	movs	r0, #0
 80116ba:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80116bc:	2a00      	cmp	r2, #0
 80116be:	d1df      	bne.n	8011680 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80116c0:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80116c2:	8220      	strh	r0, [r4, #16]
 80116c4:	e7dc      	b.n	8011680 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80116c6:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80116ca:	4a01      	ldr	r2, [pc, #4]	; (80116d0 <TRACE_TxCpltCallback+0xa0>)
 80116cc:	8293      	strh	r3, [r2, #20]
 80116ce:	e7e1      	b.n	8011694 <TRACE_TxCpltCallback+0x64>
 80116d0:	200013f4 	.word	0x200013f4
 80116d4:	20000ff4 	.word	0x20000ff4
 80116d8:	0801232c 	.word	0x0801232c

080116dc <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80116dc:	2300      	movs	r3, #0
 80116de:	4a02      	ldr	r2, [pc, #8]	; (80116e8 <UTIL_LPM_Init+0xc>)
 80116e0:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80116e2:	4a02      	ldr	r2, [pc, #8]	; (80116ec <UTIL_LPM_Init+0x10>)
 80116e4:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80116e6:	4770      	bx	lr
 80116e8:	20001610 	.word	0x20001610
 80116ec:	2000160c 	.word	0x2000160c

080116f0 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116f0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80116f4:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80116f6:	b141      	cbz	r1, 801170a <UTIL_LPM_SetStopMode+0x1a>
 80116f8:	2901      	cmp	r1, #1
 80116fa:	d103      	bne.n	8011704 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80116fc:	4906      	ldr	r1, [pc, #24]	; (8011718 <UTIL_LPM_SetStopMode+0x28>)
 80116fe:	680a      	ldr	r2, [r1, #0]
 8011700:	4310      	orrs	r0, r2
 8011702:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011704:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011708:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 801170a:	4903      	ldr	r1, [pc, #12]	; (8011718 <UTIL_LPM_SetStopMode+0x28>)
 801170c:	680a      	ldr	r2, [r1, #0]
 801170e:	ea22 0000 	bic.w	r0, r2, r0
 8011712:	6008      	str	r0, [r1, #0]
      break;
 8011714:	e7f6      	b.n	8011704 <UTIL_LPM_SetStopMode+0x14>
 8011716:	bf00      	nop
 8011718:	20001610 	.word	0x20001610

0801171c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801171c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011720:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8011722:	b141      	cbz	r1, 8011736 <UTIL_LPM_SetOffMode+0x1a>
 8011724:	2901      	cmp	r1, #1
 8011726:	d103      	bne.n	8011730 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8011728:	4906      	ldr	r1, [pc, #24]	; (8011744 <UTIL_LPM_SetOffMode+0x28>)
 801172a:	680a      	ldr	r2, [r1, #0]
 801172c:	4310      	orrs	r0, r2
 801172e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011730:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011734:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8011736:	4903      	ldr	r1, [pc, #12]	; (8011744 <UTIL_LPM_SetOffMode+0x28>)
 8011738:	680a      	ldr	r2, [r1, #0]
 801173a:	ea22 0000 	bic.w	r0, r2, r0
 801173e:	6008      	str	r0, [r1, #0]
      break;
 8011740:	e7f6      	b.n	8011730 <UTIL_LPM_SetOffMode+0x14>
 8011742:	bf00      	nop
 8011744:	2000160c 	.word	0x2000160c

08011748 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8011748:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801174a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801174e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8011750:	4b0c      	ldr	r3, [pc, #48]	; (8011784 <UTIL_LPM_EnterLowPower+0x3c>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	b13b      	cbz	r3, 8011766 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8011756:	4d0c      	ldr	r5, [pc, #48]	; (8011788 <UTIL_LPM_EnterLowPower+0x40>)
 8011758:	682b      	ldr	r3, [r5, #0]
 801175a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801175c:	686b      	ldr	r3, [r5, #4]
 801175e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011760:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8011764:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8011766:	4b09      	ldr	r3, [pc, #36]	; (801178c <UTIL_LPM_EnterLowPower+0x44>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	b12b      	cbz	r3, 8011778 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 801176c:	4d06      	ldr	r5, [pc, #24]	; (8011788 <UTIL_LPM_EnterLowPower+0x40>)
 801176e:	68ab      	ldr	r3, [r5, #8]
 8011770:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8011772:	68eb      	ldr	r3, [r5, #12]
 8011774:	4798      	blx	r3
 8011776:	e7f3      	b.n	8011760 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8011778:	4d03      	ldr	r5, [pc, #12]	; (8011788 <UTIL_LPM_EnterLowPower+0x40>)
 801177a:	692b      	ldr	r3, [r5, #16]
 801177c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801177e:	696b      	ldr	r3, [r5, #20]
 8011780:	4798      	blx	r3
 8011782:	e7ed      	b.n	8011760 <UTIL_LPM_EnterLowPower+0x18>
 8011784:	20001610 	.word	0x20001610
 8011788:	080122c8 	.word	0x080122c8
 801178c:	2000160c 	.word	0x2000160c

08011790 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8011790:	e004      	b.n	801179c <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8011792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011796:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 801179a:	461a      	mov	r2, r3
 801179c:	1e53      	subs	r3, r2, #1
 801179e:	b29b      	uxth	r3, r3
 80117a0:	2a00      	cmp	r2, #0
 80117a2:	d1f6      	bne.n	8011792 <UTIL_MEM_cpy_8+0x2>
    }
}
 80117a4:	4770      	bx	lr

080117a6 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80117a6:	e002      	b.n	80117ae <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80117a8:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80117ac:	461a      	mov	r2, r3
 80117ae:	1e53      	subs	r3, r2, #1
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	2a00      	cmp	r2, #0
 80117b4:	d1f8      	bne.n	80117a8 <UTIL_MEM_set_8+0x2>
  }
}
 80117b6:	4770      	bx	lr

080117b8 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117b8:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80117bc:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80117be:	4a06      	ldr	r2, [pc, #24]	; (80117d8 <UTIL_SEQ_SetTask+0x20>)
 80117c0:	6813      	ldr	r3, [r2, #0]
 80117c2:	4303      	orrs	r3, r0
 80117c4:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80117c6:	4a05      	ldr	r2, [pc, #20]	; (80117dc <UTIL_SEQ_SetTask+0x24>)
 80117c8:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80117cc:	4318      	orrs	r0, r3
 80117ce:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117d2:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80117d6:	4770      	bx	lr
 80117d8:	20001638 	.word	0x20001638
 80117dc:	20001630 	.word	0x20001630

080117e0 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80117e0:	4770      	bx	lr

080117e2 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80117e2:	4770      	bx	lr

080117e4 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80117e4:	0c03      	lsrs	r3, r0, #16
 80117e6:	041b      	lsls	r3, r3, #16
 80117e8:	b9b3      	cbnz	r3, 8011818 <SEQ_BitPosition+0x34>
 80117ea:	0400      	lsls	r0, r0, #16
 80117ec:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80117ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80117f2:	d102      	bne.n	80117fa <SEQ_BitPosition+0x16>
 80117f4:	3308      	adds	r3, #8
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80117fa:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80117fe:	d102      	bne.n	8011806 <SEQ_BitPosition+0x22>
 8011800:	3304      	adds	r3, #4
 8011802:	b2db      	uxtb	r3, r3
 8011804:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8011806:	0f00      	lsrs	r0, r0, #28
 8011808:	4a04      	ldr	r2, [pc, #16]	; (801181c <SEQ_BitPosition+0x38>)
 801180a:	5c10      	ldrb	r0, [r2, r0]
 801180c:	4418      	add	r0, r3
 801180e:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8011810:	f1c0 001f 	rsb	r0, r0, #31
}
 8011814:	b2c0      	uxtb	r0, r0
 8011816:	4770      	bx	lr
uint8_t n = 0U;
 8011818:	2300      	movs	r3, #0
 801181a:	e7e8      	b.n	80117ee <SEQ_BitPosition+0xa>
 801181c:	080130f8 	.word	0x080130f8

08011820 <UTIL_SEQ_Run>:
{
 8011820:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 8011822:	4b43      	ldr	r3, [pc, #268]	; (8011930 <UTIL_SEQ_Run+0x110>)
 8011824:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8011826:	4020      	ands	r0, r4
 8011828:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 801182a:	4b42      	ldr	r3, [pc, #264]	; (8011934 <UTIL_SEQ_Run+0x114>)
 801182c:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 801182e:	4b42      	ldr	r3, [pc, #264]	; (8011938 <UTIL_SEQ_Run+0x118>)
 8011830:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8011832:	4a42      	ldr	r2, [pc, #264]	; (801193c <UTIL_SEQ_Run+0x11c>)
 8011834:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8011836:	4a42      	ldr	r2, [pc, #264]	; (8011940 <UTIL_SEQ_Run+0x120>)
 8011838:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801183a:	e030      	b.n	801189e <UTIL_SEQ_Run+0x7e>
      counter++;
 801183c:	3301      	adds	r3, #1
 801183e:	e035      	b.n	80118ac <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011840:	4d40      	ldr	r5, [pc, #256]	; (8011944 <UTIL_SEQ_Run+0x124>)
 8011842:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011846:	6868      	ldr	r0, [r5, #4]
 8011848:	4010      	ands	r0, r2
 801184a:	f7ff ffcb 	bl	80117e4 <SEQ_BitPosition>
 801184e:	493e      	ldr	r1, [pc, #248]	; (8011948 <UTIL_SEQ_Run+0x128>)
 8011850:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011852:	686a      	ldr	r2, [r5, #4]
 8011854:	2301      	movs	r3, #1
 8011856:	fa03 f000 	lsl.w	r0, r3, r0
 801185a:	ea22 0000 	bic.w	r0, r2, r0
 801185e:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011860:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011864:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8011866:	680a      	ldr	r2, [r1, #0]
 8011868:	fa03 f202 	lsl.w	r2, r3, r2
 801186c:	ea6f 0c02 	mvn.w	ip, r2
 8011870:	4830      	ldr	r0, [pc, #192]	; (8011934 <UTIL_SEQ_Run+0x114>)
 8011872:	6801      	ldr	r1, [r0, #0]
 8011874:	ea21 0202 	bic.w	r2, r1, r2
 8011878:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801187a:	2b00      	cmp	r3, #0
 801187c:	d12d      	bne.n	80118da <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801187e:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 8011882:	4b31      	ldr	r3, [pc, #196]	; (8011948 <UTIL_SEQ_Run+0x128>)
 8011884:	681a      	ldr	r2, [r3, #0]
 8011886:	4b31      	ldr	r3, [pc, #196]	; (801194c <UTIL_SEQ_Run+0x12c>)
 8011888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801188c:	4798      	blx	r3
    local_taskset = TaskSet;
 801188e:	4b29      	ldr	r3, [pc, #164]	; (8011934 <UTIL_SEQ_Run+0x114>)
 8011890:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 8011892:	4b29      	ldr	r3, [pc, #164]	; (8011938 <UTIL_SEQ_Run+0x118>)
 8011894:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8011896:	4a29      	ldr	r2, [pc, #164]	; (801193c <UTIL_SEQ_Run+0x11c>)
 8011898:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 801189a:	4a29      	ldr	r2, [pc, #164]	; (8011940 <UTIL_SEQ_Run+0x120>)
 801189c:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801189e:	4001      	ands	r1, r0
 80118a0:	4d23      	ldr	r5, [pc, #140]	; (8011930 <UTIL_SEQ_Run+0x110>)
 80118a2:	682d      	ldr	r5, [r5, #0]
 80118a4:	4229      	tst	r1, r5
 80118a6:	d021      	beq.n	80118ec <UTIL_SEQ_Run+0xcc>
 80118a8:	4013      	ands	r3, r2
 80118aa:	d11f      	bne.n	80118ec <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80118ac:	4a25      	ldr	r2, [pc, #148]	; (8011944 <UTIL_SEQ_Run+0x124>)
 80118ae:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80118b2:	4002      	ands	r2, r0
 80118b4:	422a      	tst	r2, r5
 80118b6:	d0c1      	beq.n	801183c <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80118b8:	4922      	ldr	r1, [pc, #136]	; (8011944 <UTIL_SEQ_Run+0x124>)
 80118ba:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80118be:	4002      	ands	r2, r0
 80118c0:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80118c2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80118c6:	6849      	ldr	r1, [r1, #4]
 80118c8:	4211      	tst	r1, r2
 80118ca:	d1b9      	bne.n	8011840 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80118cc:	491d      	ldr	r1, [pc, #116]	; (8011944 <UTIL_SEQ_Run+0x124>)
 80118ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80118d2:	f04f 30ff 	mov.w	r0, #4294967295
 80118d6:	6048      	str	r0, [r1, #4]
 80118d8:	e7b2      	b.n	8011840 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80118da:	3b01      	subs	r3, #1
 80118dc:	4919      	ldr	r1, [pc, #100]	; (8011944 <UTIL_SEQ_Run+0x124>)
 80118de:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80118e2:	ea0c 0202 	and.w	r2, ip, r2
 80118e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80118ea:	e7c6      	b.n	801187a <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80118ec:	4b16      	ldr	r3, [pc, #88]	; (8011948 <UTIL_SEQ_Run+0x128>)
 80118ee:	f04f 32ff 	mov.w	r2, #4294967295
 80118f2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80118f4:	f7ff ff74 	bl	80117e0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80118f8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80118fc:	b672      	cpsid	i
  local_taskset = TaskSet;
 80118fe:	4b0d      	ldr	r3, [pc, #52]	; (8011934 <UTIL_SEQ_Run+0x114>)
 8011900:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8011902:	4a0d      	ldr	r2, [pc, #52]	; (8011938 <UTIL_SEQ_Run+0x118>)
 8011904:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8011906:	4a0d      	ldr	r2, [pc, #52]	; (801193c <UTIL_SEQ_Run+0x11c>)
 8011908:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801190a:	4013      	ands	r3, r2
 801190c:	4a08      	ldr	r2, [pc, #32]	; (8011930 <UTIL_SEQ_Run+0x110>)
 801190e:	6812      	ldr	r2, [r2, #0]
 8011910:	4213      	tst	r3, r2
 8011912:	d103      	bne.n	801191c <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8011914:	4b0a      	ldr	r3, [pc, #40]	; (8011940 <UTIL_SEQ_Run+0x120>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	420b      	tst	r3, r1
 801191a:	d006      	beq.n	801192a <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801191c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8011920:	f7ff ff5f 	bl	80117e2 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8011924:	4b02      	ldr	r3, [pc, #8]	; (8011930 <UTIL_SEQ_Run+0x110>)
 8011926:	601c      	str	r4, [r3, #0]
}
 8011928:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 801192a:	f7ef ffc3 	bl	80018b4 <UTIL_SEQ_Idle>
 801192e:	e7f5      	b.n	801191c <UTIL_SEQ_Run+0xfc>
 8011930:	20000100 	.word	0x20000100
 8011934:	20001638 	.word	0x20001638
 8011938:	20001618 	.word	0x20001618
 801193c:	20000104 	.word	0x20000104
 8011940:	2000161c 	.word	0x2000161c
 8011944:	20001630 	.word	0x20001630
 8011948:	20001614 	.word	0x20001614
 801194c:	20001620 	.word	0x20001620

08011950 <UTIL_SEQ_RegTask>:
{
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011954:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011958:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801195a:	f7ff ff43 	bl	80117e4 <SEQ_BitPosition>
 801195e:	4b03      	ldr	r3, [pc, #12]	; (801196c <UTIL_SEQ_RegTask+0x1c>)
 8011960:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011964:	f385 8810 	msr	PRIMASK, r5
}
 8011968:	bd38      	pop	{r3, r4, r5, pc}
 801196a:	bf00      	nop
 801196c:	20001620 	.word	0x20001620

08011970 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8011970:	b082      	sub	sp, #8
 8011972:	b082      	sub	sp, #8
 8011974:	f10d 0c08 	add.w	ip, sp, #8
 8011978:	e90c 0006 	stmdb	ip, {r1, r2}
 801197c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801197e:	2200      	movs	r2, #0
 8011980:	6002      	str	r2, [r0, #0]
 8011982:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8011984:	440b      	add	r3, r1
 8011986:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8011988:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801198c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011990:	440a      	add	r2, r1
 8011992:	b291      	uxth	r1, r2
 8011994:	b212      	sxth	r2, r2
 8011996:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8011998:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801199c:	db04      	blt.n	80119a8 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 801199e:	3301      	adds	r3, #1
 80119a0:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80119a2:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80119a6:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80119a8:	b002      	add	sp, #8
 80119aa:	b002      	add	sp, #8
 80119ac:	4770      	bx	lr

080119ae <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80119ae:	b082      	sub	sp, #8
 80119b0:	b082      	sub	sp, #8
 80119b2:	f10d 0c08 	add.w	ip, sp, #8
 80119b6:	e90c 0006 	stmdb	ip, {r1, r2}
 80119ba:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80119bc:	2200      	movs	r2, #0
 80119be:	6002      	str	r2, [r0, #0]
 80119c0:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 80119c2:	1acb      	subs	r3, r1, r3
 80119c4:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80119c6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80119ca:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80119ce:	1a52      	subs	r2, r2, r1
 80119d0:	b291      	uxth	r1, r2
 80119d2:	b212      	sxth	r2, r2
 80119d4:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80119d6:	2a00      	cmp	r2, #0
 80119d8:	db02      	blt.n	80119e0 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 80119da:	b002      	add	sp, #8
 80119dc:	b002      	add	sp, #8
 80119de:	4770      	bx	lr
    c.Seconds--;
 80119e0:	3b01      	subs	r3, #1
 80119e2:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 80119e4:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80119e8:	8081      	strh	r1, [r0, #4]
  return c;
 80119ea:	e7f6      	b.n	80119da <SysTimeSub+0x2c>

080119ec <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80119ec:	b530      	push	{r4, r5, lr}
 80119ee:	b089      	sub	sp, #36	; 0x24
 80119f0:	ac02      	add	r4, sp, #8
 80119f2:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80119f6:	2300      	movs	r3, #0
 80119f8:	9304      	str	r3, [sp, #16]
 80119fa:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80119fe:	4d0b      	ldr	r5, [pc, #44]	; (8011a2c <SysTimeSet+0x40>)
 8011a00:	692b      	ldr	r3, [r5, #16]
 8011a02:	a805      	add	r0, sp, #20
 8011a04:	4798      	blx	r3
 8011a06:	4603      	mov	r3, r0
 8011a08:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8011a0a:	9a05      	ldr	r2, [sp, #20]
 8011a0c:	9200      	str	r2, [sp, #0]
 8011a0e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011a12:	a806      	add	r0, sp, #24
 8011a14:	f7ff ffcb 	bl	80119ae <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8011a18:	682b      	ldr	r3, [r5, #0]
 8011a1a:	9806      	ldr	r0, [sp, #24]
 8011a1c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8011a1e:	68ab      	ldr	r3, [r5, #8]
 8011a20:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8011a24:	4798      	blx	r3
}
 8011a26:	b009      	add	sp, #36	; 0x24
 8011a28:	bd30      	pop	{r4, r5, pc}
 8011a2a:	bf00      	nop
 8011a2c:	080122ec 	.word	0x080122ec

08011a30 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8011a30:	b530      	push	{r4, r5, lr}
 8011a32:	b087      	sub	sp, #28
 8011a34:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011a36:	2300      	movs	r3, #0
 8011a38:	9304      	str	r3, [sp, #16]
 8011a3a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8011a3e:	6003      	str	r3, [r0, #0]
 8011a40:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011a42:	4d0b      	ldr	r5, [pc, #44]	; (8011a70 <SysTimeGet+0x40>)
 8011a44:	692b      	ldr	r3, [r5, #16]
 8011a46:	a805      	add	r0, sp, #20
 8011a48:	4798      	blx	r3
 8011a4a:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011a4c:	68eb      	ldr	r3, [r5, #12]
 8011a4e:	4798      	blx	r3
 8011a50:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011a54:	686b      	ldr	r3, [r5, #4]
 8011a56:	4798      	blx	r3
 8011a58:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8011a5a:	9b05      	ldr	r3, [sp, #20]
 8011a5c:	9300      	str	r3, [sp, #0]
 8011a5e:	9b04      	ldr	r3, [sp, #16]
 8011a60:	aa02      	add	r2, sp, #8
 8011a62:	ca06      	ldmia	r2, {r1, r2}
 8011a64:	4620      	mov	r0, r4
 8011a66:	f7ff ff83 	bl	8011970 <SysTimeAdd>

  return sysTime;
}
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	b007      	add	sp, #28
 8011a6e:	bd30      	pop	{r4, r5, pc}
 8011a70:	080122ec 	.word	0x080122ec

08011a74 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8011a74:	b530      	push	{r4, r5, lr}
 8011a76:	b083      	sub	sp, #12
 8011a78:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	9300      	str	r3, [sp, #0]
 8011a7e:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011a82:	4b06      	ldr	r3, [pc, #24]	; (8011a9c <SysTimeGetMcuTime+0x28>)
 8011a84:	691b      	ldr	r3, [r3, #16]
 8011a86:	466d      	mov	r5, sp
 8011a88:	a801      	add	r0, sp, #4
 8011a8a:	4798      	blx	r3
 8011a8c:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8011a8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011a92:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8011a96:	4620      	mov	r0, r4
 8011a98:	b003      	add	sp, #12
 8011a9a:	bd30      	pop	{r4, r5, pc}
 8011a9c:	080122ec 	.word	0x080122ec

08011aa0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8011aa0:	b530      	push	{r4, r5, lr}
 8011aa2:	b089      	sub	sp, #36	; 0x24
 8011aa4:	ac02      	add	r4, sp, #8
 8011aa6:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011aaa:	4d0c      	ldr	r5, [pc, #48]	; (8011adc <SysTimeToMs+0x3c>)
 8011aac:	68eb      	ldr	r3, [r5, #12]
 8011aae:	4798      	blx	r3
 8011ab0:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011ab4:	686b      	ldr	r3, [r5, #4]
 8011ab6:	4798      	blx	r3
 8011ab8:	4603      	mov	r3, r0
 8011aba:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8011abc:	9a07      	ldr	r2, [sp, #28]
 8011abe:	9200      	str	r2, [sp, #0]
 8011ac0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011ac4:	a804      	add	r0, sp, #16
 8011ac6:	f7ff ff72 	bl	80119ae <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8011aca:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8011ace:	9a04      	ldr	r2, [sp, #16]
 8011ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011ad4:	fb00 3002 	mla	r0, r0, r2, r3
 8011ad8:	b009      	add	sp, #36	; 0x24
 8011ada:	bd30      	pop	{r4, r5, pc}
 8011adc:	080122ec 	.word	0x080122ec

08011ae0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8011ae0:	b530      	push	{r4, r5, lr}
 8011ae2:	b087      	sub	sp, #28
 8011ae4:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8011ae6:	4b12      	ldr	r3, [pc, #72]	; (8011b30 <SysTimeFromMs+0x50>)
 8011ae8:	fba3 2301 	umull	r2, r3, r3, r1
 8011aec:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8011aee:	9304      	str	r3, [sp, #16]
 8011af0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8011af4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011af8:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8011afc:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8011b00:	2300      	movs	r3, #0
 8011b02:	9302      	str	r3, [sp, #8]
 8011b04:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011b06:	4d0b      	ldr	r5, [pc, #44]	; (8011b34 <SysTimeFromMs+0x54>)
 8011b08:	68eb      	ldr	r3, [r5, #12]
 8011b0a:	4798      	blx	r3
 8011b0c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011b10:	686b      	ldr	r3, [r5, #4]
 8011b12:	4798      	blx	r3
 8011b14:	4603      	mov	r3, r0
 8011b16:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8011b18:	9a03      	ldr	r2, [sp, #12]
 8011b1a:	9200      	str	r2, [sp, #0]
 8011b1c:	aa06      	add	r2, sp, #24
 8011b1e:	e912 0006 	ldmdb	r2, {r1, r2}
 8011b22:	4620      	mov	r0, r4
 8011b24:	f7ff ff24 	bl	8011970 <SysTimeAdd>
}
 8011b28:	4620      	mov	r0, r4
 8011b2a:	b007      	add	sp, #28
 8011b2c:	bd30      	pop	{r4, r5, pc}
 8011b2e:	bf00      	nop
 8011b30:	10624dd3 	.word	0x10624dd3
 8011b34:	080122ec 	.word	0x080122ec

08011b38 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8011b38:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8011b3a:	4b03      	ldr	r3, [pc, #12]	; (8011b48 <UTIL_TIMER_Init+0x10>)
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8011b40:	4b02      	ldr	r3, [pc, #8]	; (8011b4c <UTIL_TIMER_Init+0x14>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	4798      	blx	r3
}
 8011b46:	bd08      	pop	{r3, pc}
 8011b48:	2000163c 	.word	0x2000163c
 8011b4c:	08012300 	.word	0x08012300

08011b50 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8011b50:	b1a8      	cbz	r0, 8011b7e <UTIL_TIMER_Create+0x2e>
{
 8011b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b54:	4617      	mov	r7, r2
 8011b56:	461e      	mov	r6, r3
 8011b58:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8011b5a:	b193      	cbz	r3, 8011b82 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8011b5c:	2500      	movs	r5, #0
 8011b5e:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8011b60:	4b09      	ldr	r3, [pc, #36]	; (8011b88 <UTIL_TIMER_Create+0x38>)
 8011b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b64:	4608      	mov	r0, r1
 8011b66:	4798      	blx	r3
 8011b68:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8011b6a:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8011b6c:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8011b6e:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8011b70:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8011b72:	9b06      	ldr	r3, [sp, #24]
 8011b74:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8011b76:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8011b78:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8011b7a:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8011b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8011b7e:	2001      	movs	r0, #1
}
 8011b80:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8011b82:	2001      	movs	r0, #1
 8011b84:	e7fa      	b.n	8011b7c <UTIL_TIMER_Create+0x2c>
 8011b86:	bf00      	nop
 8011b88:	08012300 	.word	0x08012300

08011b8c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8011b8c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8011b8e:	4c03      	ldr	r4, [pc, #12]	; (8011b9c <UTIL_TIMER_GetCurrentTime+0x10>)
 8011b90:	69e3      	ldr	r3, [r4, #28]
 8011b92:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8011b94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011b96:	4798      	blx	r3
}
 8011b98:	bd10      	pop	{r4, pc}
 8011b9a:	bf00      	nop
 8011b9c:	08012300 	.word	0x08012300

08011ba0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8011ba0:	b570      	push	{r4, r5, r6, lr}
 8011ba2:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8011ba4:	4d05      	ldr	r5, [pc, #20]	; (8011bbc <UTIL_TIMER_GetElapsedTime+0x1c>)
 8011ba6:	69eb      	ldr	r3, [r5, #28]
 8011ba8:	4798      	blx	r3
 8011baa:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8011bac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011bae:	4630      	mov	r0, r6
 8011bb0:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8011bb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8011bb4:	1a20      	subs	r0, r4, r0
 8011bb6:	4798      	blx	r3
}
 8011bb8:	bd70      	pop	{r4, r5, r6, pc}
 8011bba:	bf00      	nop
 8011bbc:	08012300 	.word	0x08012300

08011bc0 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011bc0:	4b05      	ldr	r3, [pc, #20]	; (8011bd8 <TimerExists+0x18>)
 8011bc2:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8011bc4:	e000      	b.n	8011bc8 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8011bc6:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8011bc8:	b11b      	cbz	r3, 8011bd2 <TimerExists+0x12>
    if( cur == TimerObject )
 8011bca:	4283      	cmp	r3, r0
 8011bcc:	d1fb      	bne.n	8011bc6 <TimerExists+0x6>
      return true;
 8011bce:	2001      	movs	r0, #1
  }
  return false;
}
 8011bd0:	4770      	bx	lr
  return false;
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	4770      	bx	lr
 8011bd6:	bf00      	nop
 8011bd8:	2000163c 	.word	0x2000163c

08011bdc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8011bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bde:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8011be0:	4e09      	ldr	r6, [pc, #36]	; (8011c08 <TimerSetTimeout+0x2c>)
 8011be2:	6a33      	ldr	r3, [r6, #32]
 8011be4:	4798      	blx	r3
 8011be6:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8011be8:	2301      	movs	r3, #1
 8011bea:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8011bec:	6827      	ldr	r7, [r4, #0]
 8011bee:	69b6      	ldr	r6, [r6, #24]
 8011bf0:	47b0      	blx	r6
 8011bf2:	4428      	add	r0, r5
 8011bf4:	4287      	cmp	r7, r0
 8011bf6:	d202      	bcs.n	8011bfe <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8011bf8:	47b0      	blx	r6
 8011bfa:	4405      	add	r5, r0
 8011bfc:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8011bfe:	4b02      	ldr	r3, [pc, #8]	; (8011c08 <TimerSetTimeout+0x2c>)
 8011c00:	689b      	ldr	r3, [r3, #8]
 8011c02:	6820      	ldr	r0, [r4, #0]
 8011c04:	4798      	blx	r3
}
 8011c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c08:	08012300 	.word	0x08012300

08011c0c <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8011c0c:	b368      	cbz	r0, 8011c6a <UTIL_TIMER_Stop+0x5e>
{
 8011c0e:	b510      	push	{r4, lr}
 8011c10:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c12:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011c16:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8011c18:	4b15      	ldr	r3, [pc, #84]	; (8011c70 <UTIL_TIMER_Stop+0x64>)
 8011c1a:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8011c20:	b1e1      	cbz	r1, 8011c5c <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8011c22:	2300      	movs	r3, #0
 8011c24:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8011c26:	4288      	cmp	r0, r1
 8011c28:	d006      	beq.n	8011c38 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8011c2a:	460b      	mov	r3, r1
        while( cur != NULL )
 8011c2c:	b1b3      	cbz	r3, 8011c5c <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d011      	beq.n	8011c56 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8011c32:	4619      	mov	r1, r3
            cur = cur->Next;
 8011c34:	695b      	ldr	r3, [r3, #20]
 8011c36:	e7f9      	b.n	8011c2c <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8011c38:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8011c3a:	6948      	ldr	r0, [r1, #20]
 8011c3c:	b120      	cbz	r0, 8011c48 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8011c3e:	4b0c      	ldr	r3, [pc, #48]	; (8011c70 <UTIL_TIMER_Stop+0x64>)
 8011c40:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8011c42:	f7ff ffcb 	bl	8011bdc <TimerSetTimeout>
 8011c46:	e009      	b.n	8011c5c <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8011c48:	4b0a      	ldr	r3, [pc, #40]	; (8011c74 <UTIL_TIMER_Stop+0x68>)
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	4798      	blx	r3
            TimerListHead = NULL;
 8011c4e:	4b08      	ldr	r3, [pc, #32]	; (8011c70 <UTIL_TIMER_Stop+0x64>)
 8011c50:	2200      	movs	r2, #0
 8011c52:	601a      	str	r2, [r3, #0]
 8011c54:	e002      	b.n	8011c5c <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8011c56:	695b      	ldr	r3, [r3, #20]
 8011c58:	b123      	cbz	r3, 8011c64 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8011c5a:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c5c:	f384 8810 	msr	PRIMASK, r4
}
 8011c60:	2000      	movs	r0, #0
}
 8011c62:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8011c64:	2300      	movs	r3, #0
 8011c66:	614b      	str	r3, [r1, #20]
 8011c68:	e7f8      	b.n	8011c5c <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8011c6a:	2001      	movs	r0, #1
}
 8011c6c:	4770      	bx	lr
 8011c6e:	bf00      	nop
 8011c70:	2000163c 	.word	0x2000163c
 8011c74:	08012300 	.word	0x08012300

08011c78 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011c78:	4b09      	ldr	r3, [pc, #36]	; (8011ca0 <TimerInsertTimer+0x28>)
 8011c7a:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8011c7c:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8011c7e:	e001      	b.n	8011c84 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8011c80:	461a      	mov	r2, r3
        next = next->Next;
 8011c82:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8011c84:	6951      	ldr	r1, [r2, #20]
 8011c86:	b139      	cbz	r1, 8011c98 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8011c88:	6819      	ldr	r1, [r3, #0]
 8011c8a:	f8d0 c000 	ldr.w	ip, [r0]
 8011c8e:	458c      	cmp	ip, r1
 8011c90:	d8f6      	bhi.n	8011c80 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8011c92:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8011c94:	6143      	str	r3, [r0, #20]
        return;
 8011c96:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8011c98:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	6143      	str	r3, [r0, #20]
}
 8011c9e:	4770      	bx	lr
 8011ca0:	2000163c 	.word	0x2000163c

08011ca4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8011ca4:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011ca6:	4b05      	ldr	r3, [pc, #20]	; (8011cbc <TimerInsertNewHeadTimer+0x18>)
 8011ca8:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8011caa:	b10b      	cbz	r3, 8011cb0 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8011cac:	2200      	movs	r2, #0
 8011cae:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8011cb0:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8011cb2:	4b02      	ldr	r3, [pc, #8]	; (8011cbc <TimerInsertNewHeadTimer+0x18>)
 8011cb4:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8011cb6:	f7ff ff91 	bl	8011bdc <TimerSetTimeout>
}
 8011cba:	bd08      	pop	{r3, pc}
 8011cbc:	2000163c 	.word	0x2000163c

08011cc0 <UTIL_TIMER_Start>:
{
 8011cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8011cc2:	2800      	cmp	r0, #0
 8011cc4:	d036      	beq.n	8011d34 <UTIL_TIMER_Start+0x74>
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	f7ff ff7a 	bl	8011bc0 <TimerExists>
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d134      	bne.n	8011d3a <UTIL_TIMER_Start+0x7a>
 8011cd0:	7a65      	ldrb	r5, [r4, #9]
 8011cd2:	2d00      	cmp	r5, #0
 8011cd4:	d133      	bne.n	8011d3e <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cd6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011cda:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8011cdc:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8011cde:	4b19      	ldr	r3, [pc, #100]	; (8011d44 <UTIL_TIMER_Start+0x84>)
 8011ce0:	6a1b      	ldr	r3, [r3, #32]
 8011ce2:	4798      	blx	r3
    if( ticks < minValue )
 8011ce4:	4287      	cmp	r7, r0
 8011ce6:	d300      	bcc.n	8011cea <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8011ce8:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8011cea:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8011cec:	2300      	movs	r3, #0
 8011cee:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8011cf0:	2201      	movs	r2, #1
 8011cf2:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8011cf4:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8011cf6:	4b14      	ldr	r3, [pc, #80]	; (8011d48 <UTIL_TIMER_Start+0x88>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	b183      	cbz	r3, 8011d1e <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8011cfc:	4b11      	ldr	r3, [pc, #68]	; (8011d44 <UTIL_TIMER_Start+0x84>)
 8011cfe:	699b      	ldr	r3, [r3, #24]
 8011d00:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8011d02:	6823      	ldr	r3, [r4, #0]
 8011d04:	4418      	add	r0, r3
 8011d06:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8011d08:	4b0f      	ldr	r3, [pc, #60]	; (8011d48 <UTIL_TIMER_Start+0x88>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	4298      	cmp	r0, r3
 8011d10:	d20c      	bcs.n	8011d2c <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8011d12:	4620      	mov	r0, r4
 8011d14:	f7ff ffc6 	bl	8011ca4 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d18:	f386 8810 	msr	PRIMASK, r6
}
 8011d1c:	e00b      	b.n	8011d36 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8011d1e:	4b09      	ldr	r3, [pc, #36]	; (8011d44 <UTIL_TIMER_Start+0x84>)
 8011d20:	691b      	ldr	r3, [r3, #16]
 8011d22:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8011d24:	4620      	mov	r0, r4
 8011d26:	f7ff ffbd 	bl	8011ca4 <TimerInsertNewHeadTimer>
 8011d2a:	e7f5      	b.n	8011d18 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f7ff ffa3 	bl	8011c78 <TimerInsertTimer>
 8011d32:	e7f1      	b.n	8011d18 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011d34:	2501      	movs	r5, #1
}
 8011d36:	4628      	mov	r0, r5
 8011d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011d3a:	2501      	movs	r5, #1
 8011d3c:	e7fb      	b.n	8011d36 <UTIL_TIMER_Start+0x76>
 8011d3e:	2501      	movs	r5, #1
 8011d40:	e7f9      	b.n	8011d36 <UTIL_TIMER_Start+0x76>
 8011d42:	bf00      	nop
 8011d44:	08012300 	.word	0x08012300
 8011d48:	2000163c 	.word	0x2000163c

08011d4c <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8011d4c:	b198      	cbz	r0, 8011d76 <UTIL_TIMER_SetPeriod+0x2a>
{
 8011d4e:	b510      	push	{r4, lr}
 8011d50:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8011d52:	4b0a      	ldr	r3, [pc, #40]	; (8011d7c <UTIL_TIMER_SetPeriod+0x30>)
 8011d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d56:	4608      	mov	r0, r1
 8011d58:	4798      	blx	r3
 8011d5a:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	f7ff ff2f 	bl	8011bc0 <TimerExists>
 8011d62:	b908      	cbnz	r0, 8011d68 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8011d64:	2000      	movs	r0, #0
}
 8011d66:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8011d68:	4620      	mov	r0, r4
 8011d6a:	f7ff ff4f 	bl	8011c0c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8011d6e:	4620      	mov	r0, r4
 8011d70:	f7ff ffa6 	bl	8011cc0 <UTIL_TIMER_Start>
 8011d74:	e7f7      	b.n	8011d66 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8011d76:	2001      	movs	r0, #1
}
 8011d78:	4770      	bx	lr
 8011d7a:	bf00      	nop
 8011d7c:	08012300 	.word	0x08012300

08011d80 <UTIL_TIMER_IRQ_Handler>:
{
 8011d80:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d82:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d86:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8011d88:	4c1e      	ldr	r4, [pc, #120]	; (8011e04 <UTIL_TIMER_IRQ_Handler+0x84>)
 8011d8a:	6963      	ldr	r3, [r4, #20]
 8011d8c:	4798      	blx	r3
 8011d8e:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8011d90:	6923      	ldr	r3, [r4, #16]
 8011d92:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8011d94:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8011d96:	4b1c      	ldr	r3, [pc, #112]	; (8011e08 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	b923      	cbnz	r3, 8011da6 <UTIL_TIMER_IRQ_Handler+0x26>
 8011d9c:	e018      	b.n	8011dd0 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8011d9e:	2200      	movs	r2, #0
 8011da0:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8011da2:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8011da4:	b1a3      	cbz	r3, 8011dd0 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8011da6:	681a      	ldr	r2, [r3, #0]
 8011da8:	42a2      	cmp	r2, r4
 8011daa:	d9f8      	bls.n	8011d9e <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8011dac:	1a31      	subs	r1, r6, r0
 8011dae:	440a      	add	r2, r1
 8011db0:	601a      	str	r2, [r3, #0]
 8011db2:	e7f6      	b.n	8011da2 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8011db4:	4b14      	ldr	r3, [pc, #80]	; (8011e08 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011db6:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8011db8:	6962      	ldr	r2, [r4, #20]
 8011dba:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8011dc0:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8011dc2:	68e3      	ldr	r3, [r4, #12]
 8011dc4:	6920      	ldr	r0, [r4, #16]
 8011dc6:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8011dc8:	8963      	ldrh	r3, [r4, #10]
 8011dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011dce:	d012      	beq.n	8011df6 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8011dd0:	4b0d      	ldr	r3, [pc, #52]	; (8011e08 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	b13b      	cbz	r3, 8011de6 <UTIL_TIMER_IRQ_Handler+0x66>
 8011dd6:	681c      	ldr	r4, [r3, #0]
 8011dd8:	2c00      	cmp	r4, #0
 8011dda:	d0eb      	beq.n	8011db4 <UTIL_TIMER_IRQ_Handler+0x34>
 8011ddc:	4b09      	ldr	r3, [pc, #36]	; (8011e04 <UTIL_TIMER_IRQ_Handler+0x84>)
 8011dde:	699b      	ldr	r3, [r3, #24]
 8011de0:	4798      	blx	r3
 8011de2:	4284      	cmp	r4, r0
 8011de4:	d3e6      	bcc.n	8011db4 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8011de6:	4b08      	ldr	r3, [pc, #32]	; (8011e08 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011de8:	6818      	ldr	r0, [r3, #0]
 8011dea:	b108      	cbz	r0, 8011df0 <UTIL_TIMER_IRQ_Handler+0x70>
 8011dec:	7a03      	ldrb	r3, [r0, #8]
 8011dee:	b133      	cbz	r3, 8011dfe <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011df0:	f385 8810 	msr	PRIMASK, r5
}
 8011df4:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8011df6:	4620      	mov	r0, r4
 8011df8:	f7ff ff62 	bl	8011cc0 <UTIL_TIMER_Start>
 8011dfc:	e7e8      	b.n	8011dd0 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8011dfe:	f7ff feed 	bl	8011bdc <TimerSetTimeout>
 8011e02:	e7f5      	b.n	8011df0 <UTIL_TIMER_IRQ_Handler+0x70>
 8011e04:	08012300 	.word	0x08012300
 8011e08:	2000163c 	.word	0x2000163c

08011e0c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8011e0c:	4601      	mov	r1, r0
  int i = 0;
 8011e0e:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8011e10:	e007      	b.n	8011e22 <ee_skip_atoi+0x16>
 8011e12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011e16:	1c53      	adds	r3, r2, #1
 8011e18:	600b      	str	r3, [r1, #0]
 8011e1a:	7813      	ldrb	r3, [r2, #0]
 8011e1c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011e20:	3830      	subs	r0, #48	; 0x30
 8011e22:	680a      	ldr	r2, [r1, #0]
 8011e24:	7813      	ldrb	r3, [r2, #0]
 8011e26:	3b30      	subs	r3, #48	; 0x30
 8011e28:	b2db      	uxtb	r3, r3
 8011e2a:	2b09      	cmp	r3, #9
 8011e2c:	d9f1      	bls.n	8011e12 <ee_skip_atoi+0x6>
  return i;
}
 8011e2e:	4770      	bx	lr

08011e30 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8011e30:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8011e34:	b093      	sub	sp, #76	; 0x4c
 8011e36:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011e38:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8011e3a:	f016 0f40 	tst.w	r6, #64	; 0x40
 8011e3e:	d110      	bne.n	8011e62 <ee_number+0x32>
  char *dig = lower_digits;
 8011e40:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8011f3c <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8011e44:	1e9f      	subs	r7, r3, #2
 8011e46:	2f22      	cmp	r7, #34	; 0x22
 8011e48:	d875      	bhi.n	8011f36 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8011e4a:	f016 0401 	ands.w	r4, r6, #1
 8011e4e:	d00b      	beq.n	8011e68 <ee_number+0x38>
 8011e50:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8011e54:	f016 0f02 	tst.w	r6, #2
 8011e58:	d00f      	beq.n	8011e7a <ee_number+0x4a>
  {
    if (num < 0)
 8011e5a:	2a00      	cmp	r2, #0
 8011e5c:	db07      	blt.n	8011e6e <ee_number+0x3e>
  sign = 0;
 8011e5e:	2700      	movs	r7, #0
 8011e60:	e00c      	b.n	8011e7c <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8011e62:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8011f40 <ee_number+0x110>
 8011e66:	e7ed      	b.n	8011e44 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8011e68:	f04f 0e20 	mov.w	lr, #32
 8011e6c:	e7f2      	b.n	8011e54 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8011e6e:	4252      	negs	r2, r2
      size--;
 8011e70:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8011e72:	3e01      	subs	r6, #1
 8011e74:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8011e76:	272d      	movs	r7, #45	; 0x2d
 8011e78:	e000      	b.n	8011e7c <ee_number+0x4c>
  sign = 0;
 8011e7a:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8011e7c:	bb5a      	cbnz	r2, 8011ed6 <ee_number+0xa6>
    tmp[i++] = '0';
 8011e7e:	2330      	movs	r3, #48	; 0x30
 8011e80:	f88d 3004 	strb.w	r3, [sp, #4]
 8011e84:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8011e88:	45ac      	cmp	ip, r5
 8011e8a:	dd00      	ble.n	8011e8e <ee_number+0x5e>
 8011e8c:	4665      	mov	r5, ip
  size -= precision;
 8011e8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011e90:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8011e92:	b31c      	cbz	r4, 8011edc <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8011e94:	b11f      	cbz	r7, 8011e9e <ee_number+0x6e>
 8011e96:	f800 7b01 	strb.w	r7, [r0], #1
 8011e9a:	3901      	subs	r1, #1
 8011e9c:	d007      	beq.n	8011eae <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	f103 33ff 	add.w	r3, r3, #4294967295
 8011ea4:	dd24      	ble.n	8011ef0 <ee_number+0xc0>
 8011ea6:	f800 eb01 	strb.w	lr, [r0], #1
 8011eaa:	3901      	subs	r1, #1
 8011eac:	d1f7      	bne.n	8011e9e <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8011eae:	b013      	add	sp, #76	; 0x4c
 8011eb0:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8011eb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8011eb8:	fb03 2216 	mls	r2, r3, r6, r2
 8011ebc:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8011ec0:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8011ec4:	446a      	add	r2, sp
 8011ec6:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8011eca:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8011ecc:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8011ed0:	2a00      	cmp	r2, #0
 8011ed2:	d1ef      	bne.n	8011eb4 <ee_number+0x84>
 8011ed4:	e7d8      	b.n	8011e88 <ee_number+0x58>
  i = 0;
 8011ed6:	f04f 0c00 	mov.w	ip, #0
 8011eda:	e7f9      	b.n	8011ed0 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	f103 33ff 	add.w	r3, r3, #4294967295
 8011ee2:	ddd7      	ble.n	8011e94 <ee_number+0x64>
 8011ee4:	2220      	movs	r2, #32
 8011ee6:	f800 2b01 	strb.w	r2, [r0], #1
 8011eea:	3901      	subs	r1, #1
 8011eec:	d1f6      	bne.n	8011edc <ee_number+0xac>
 8011eee:	e7de      	b.n	8011eae <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8011ef0:	4565      	cmp	r5, ip
 8011ef2:	f105 35ff 	add.w	r5, r5, #4294967295
 8011ef6:	dd05      	ble.n	8011f04 <ee_number+0xd4>
 8011ef8:	2230      	movs	r2, #48	; 0x30
 8011efa:	f800 2b01 	strb.w	r2, [r0], #1
 8011efe:	3901      	subs	r1, #1
 8011f00:	d1f6      	bne.n	8011ef0 <ee_number+0xc0>
 8011f02:	e7d4      	b.n	8011eae <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8011f04:	4662      	mov	r2, ip
 8011f06:	2a00      	cmp	r2, #0
 8011f08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011f0c:	dd09      	ble.n	8011f22 <ee_number+0xf2>
 8011f0e:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8011f12:	446a      	add	r2, sp
 8011f14:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8011f18:	f800 2b01 	strb.w	r2, [r0], #1
 8011f1c:	3901      	subs	r1, #1
 8011f1e:	d1f1      	bne.n	8011f04 <ee_number+0xd4>
 8011f20:	e7c5      	b.n	8011eae <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	f103 33ff 	add.w	r3, r3, #4294967295
 8011f28:	ddc1      	ble.n	8011eae <ee_number+0x7e>
 8011f2a:	2220      	movs	r2, #32
 8011f2c:	f800 2b01 	strb.w	r2, [r0], #1
 8011f30:	3901      	subs	r1, #1
 8011f32:	d1f6      	bne.n	8011f22 <ee_number+0xf2>
 8011f34:	e7bb      	b.n	8011eae <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8011f36:	2000      	movs	r0, #0
 8011f38:	e7b9      	b.n	8011eae <ee_number+0x7e>
 8011f3a:	bf00      	nop
 8011f3c:	08013130 	.word	0x08013130
 8011f40:	08013108 	.word	0x08013108

08011f44 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8011f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f48:	b087      	sub	sp, #28
 8011f4a:	9205      	str	r2, [sp, #20]
 8011f4c:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8011f4e:	1e0f      	subs	r7, r1, #0
 8011f50:	f340 80b8 	ble.w	80120c4 <tiny_vsnprintf_like+0x180>
 8011f54:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8011f56:	4604      	mov	r4, r0
 8011f58:	e004      	b.n	8011f64 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8011f5a:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8011f5e:	9b05      	ldr	r3, [sp, #20]
 8011f60:	3301      	adds	r3, #1
 8011f62:	9305      	str	r3, [sp, #20]
 8011f64:	9905      	ldr	r1, [sp, #20]
 8011f66:	780a      	ldrb	r2, [r1, #0]
 8011f68:	b922      	cbnz	r2, 8011f74 <tiny_vsnprintf_like+0x30>
 8011f6a:	1ba3      	subs	r3, r4, r6
 8011f6c:	1e78      	subs	r0, r7, #1
 8011f6e:	4283      	cmp	r3, r0
 8011f70:	f2c0 80a2 	blt.w	80120b8 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8011f74:	1ba3      	subs	r3, r4, r6
 8011f76:	f107 38ff 	add.w	r8, r7, #4294967295
 8011f7a:	4543      	cmp	r3, r8
 8011f7c:	f280 809c 	bge.w	80120b8 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8011f80:	2a25      	cmp	r2, #37	; 0x25
 8011f82:	d1ea      	bne.n	8011f5a <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8011f84:	1c4b      	adds	r3, r1, #1
 8011f86:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8011f88:	784b      	ldrb	r3, [r1, #1]
 8011f8a:	2b30      	cmp	r3, #48	; 0x30
 8011f8c:	d020      	beq.n	8011fd0 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8011f8e:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8011f92:	3b30      	subs	r3, #48	; 0x30
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	2b09      	cmp	r3, #9
 8011f98:	d91d      	bls.n	8011fd6 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8011f9a:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8011f9e:	9b05      	ldr	r3, [sp, #20]
 8011fa0:	781a      	ldrb	r2, [r3, #0]
 8011fa2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8011fa6:	2b20      	cmp	r3, #32
 8011fa8:	d867      	bhi.n	801207a <tiny_vsnprintf_like+0x136>
 8011faa:	e8df f003 	tbb	[pc, r3]
 8011fae:	664a      	.short	0x664a
 8011fb0:	66666666 	.word	0x66666666
 8011fb4:	66666666 	.word	0x66666666
 8011fb8:	66621e66 	.word	0x66621e66
 8011fbc:	62666666 	.word	0x62666666
 8011fc0:	66666666 	.word	0x66666666
 8011fc4:	66666666 	.word	0x66666666
 8011fc8:	19662866 	.word	0x19662866
 8011fcc:	6666      	.short	0x6666
 8011fce:	7c          	.byte	0x7c
 8011fcf:	00          	.byte	0x00
      flags |= ZEROPAD;
 8011fd0:	f04f 0901 	mov.w	r9, #1
 8011fd4:	e7dd      	b.n	8011f92 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8011fd6:	a805      	add	r0, sp, #20
 8011fd8:	f7ff ff18 	bl	8011e0c <ee_skip_atoi>
 8011fdc:	4605      	mov	r5, r0
 8011fde:	e7de      	b.n	8011f9e <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8011fe0:	230a      	movs	r3, #10
 8011fe2:	e031      	b.n	8012048 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8011fe4:	2320      	movs	r3, #32
 8011fe6:	f804 3b01 	strb.w	r3, [r4], #1
 8011fea:	3d01      	subs	r5, #1
 8011fec:	2d00      	cmp	r5, #0
 8011fee:	dcf9      	bgt.n	8011fe4 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8011ff0:	9b04      	ldr	r3, [sp, #16]
 8011ff2:	1d1a      	adds	r2, r3, #4
 8011ff4:	9204      	str	r2, [sp, #16]
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8011ffc:	e7af      	b.n	8011f5e <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8011ffe:	9b04      	ldr	r3, [sp, #16]
 8012000:	1d1a      	adds	r2, r3, #4
 8012002:	9204      	str	r2, [sp, #16]
 8012004:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8012008:	f1b8 0f00 	cmp.w	r8, #0
 801200c:	d003      	beq.n	8012016 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 801200e:	4640      	mov	r0, r8
 8012010:	f7ee f8b2 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8012014:	e006      	b.n	8012024 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8012016:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80120c8 <tiny_vsnprintf_like+0x184>
 801201a:	e7f8      	b.n	801200e <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 801201c:	2220      	movs	r2, #32
 801201e:	f804 2b01 	strb.w	r2, [r4], #1
 8012022:	461d      	mov	r5, r3
 8012024:	1e6b      	subs	r3, r5, #1
 8012026:	4285      	cmp	r5, r0
 8012028:	dcf8      	bgt.n	801201c <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801202a:	2200      	movs	r2, #0
 801202c:	e006      	b.n	801203c <tiny_vsnprintf_like+0xf8>
 801202e:	4643      	mov	r3, r8
 8012030:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012034:	f804 1b01 	strb.w	r1, [r4], #1
 8012038:	3201      	adds	r2, #1
 801203a:	4698      	mov	r8, r3
 801203c:	4282      	cmp	r2, r0
 801203e:	dbf6      	blt.n	801202e <tiny_vsnprintf_like+0xea>
 8012040:	e78d      	b.n	8011f5e <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8012042:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8012046:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8012048:	f019 0f02 	tst.w	r9, #2
 801204c:	d02f      	beq.n	80120ae <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 801204e:	9a04      	ldr	r2, [sp, #16]
 8012050:	1d11      	adds	r1, r2, #4
 8012052:	9104      	str	r1, [sp, #16]
 8012054:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8012056:	1ba1      	subs	r1, r4, r6
 8012058:	f8cd 9008 	str.w	r9, [sp, #8]
 801205c:	f04f 30ff 	mov.w	r0, #4294967295
 8012060:	9001      	str	r0, [sp, #4]
 8012062:	9500      	str	r5, [sp, #0]
 8012064:	eba8 0101 	sub.w	r1, r8, r1
 8012068:	4620      	mov	r0, r4
 801206a:	f7ff fee1 	bl	8011e30 <ee_number>
 801206e:	4604      	mov	r4, r0
 8012070:	e775      	b.n	8011f5e <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8012072:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8012076:	230a      	movs	r3, #10
 8012078:	e7e6      	b.n	8012048 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 801207a:	2a25      	cmp	r2, #37	; 0x25
 801207c:	d002      	beq.n	8012084 <tiny_vsnprintf_like+0x140>
 801207e:	2325      	movs	r3, #37	; 0x25
 8012080:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012084:	1ba3      	subs	r3, r4, r6
 8012086:	4598      	cmp	r8, r3
 8012088:	dd0f      	ble.n	80120aa <tiny_vsnprintf_like+0x166>
        if (*fmt)
 801208a:	9b05      	ldr	r3, [sp, #20]
 801208c:	781a      	ldrb	r2, [r3, #0]
 801208e:	b13a      	cbz	r2, 80120a0 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8012090:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012094:	1ba3      	subs	r3, r4, r6
 8012096:	4598      	cmp	r8, r3
 8012098:	f73f af61 	bgt.w	8011f5e <tiny_vsnprintf_like+0x1a>
    base = 10;
 801209c:	230a      	movs	r3, #10
    if (qualifier == 'l')
 801209e:	e7d3      	b.n	8012048 <tiny_vsnprintf_like+0x104>
          --fmt;
 80120a0:	3b01      	subs	r3, #1
 80120a2:	9305      	str	r3, [sp, #20]
 80120a4:	e7f6      	b.n	8012094 <tiny_vsnprintf_like+0x150>
        base = 16;
 80120a6:	2310      	movs	r3, #16
 80120a8:	e7ce      	b.n	8012048 <tiny_vsnprintf_like+0x104>
    base = 10;
 80120aa:	230a      	movs	r3, #10
 80120ac:	e7cc      	b.n	8012048 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 80120ae:	9a04      	ldr	r2, [sp, #16]
 80120b0:	1d11      	adds	r1, r2, #4
 80120b2:	9104      	str	r1, [sp, #16]
 80120b4:	6812      	ldr	r2, [r2, #0]
 80120b6:	e7ce      	b.n	8012056 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 80120b8:	2300      	movs	r3, #0
 80120ba:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80120bc:	1ba0      	subs	r0, r4, r6
}
 80120be:	b007      	add	sp, #28
 80120c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80120c4:	2000      	movs	r0, #0
 80120c6:	e7fa      	b.n	80120be <tiny_vsnprintf_like+0x17a>
 80120c8:	08013158 	.word	0x08013158

080120cc <__libc_init_array>:
 80120cc:	b570      	push	{r4, r5, r6, lr}
 80120ce:	4d0d      	ldr	r5, [pc, #52]	; (8012104 <__libc_init_array+0x38>)
 80120d0:	4c0d      	ldr	r4, [pc, #52]	; (8012108 <__libc_init_array+0x3c>)
 80120d2:	1b64      	subs	r4, r4, r5
 80120d4:	10a4      	asrs	r4, r4, #2
 80120d6:	2600      	movs	r6, #0
 80120d8:	42a6      	cmp	r6, r4
 80120da:	d109      	bne.n	80120f0 <__libc_init_array+0x24>
 80120dc:	4d0b      	ldr	r5, [pc, #44]	; (801210c <__libc_init_array+0x40>)
 80120de:	4c0c      	ldr	r4, [pc, #48]	; (8012110 <__libc_init_array+0x44>)
 80120e0:	f000 f8a2 	bl	8012228 <_init>
 80120e4:	1b64      	subs	r4, r4, r5
 80120e6:	10a4      	asrs	r4, r4, #2
 80120e8:	2600      	movs	r6, #0
 80120ea:	42a6      	cmp	r6, r4
 80120ec:	d105      	bne.n	80120fa <__libc_init_array+0x2e>
 80120ee:	bd70      	pop	{r4, r5, r6, pc}
 80120f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80120f4:	4798      	blx	r3
 80120f6:	3601      	adds	r6, #1
 80120f8:	e7ee      	b.n	80120d8 <__libc_init_array+0xc>
 80120fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80120fe:	4798      	blx	r3
 8012100:	3601      	adds	r6, #1
 8012102:	e7f2      	b.n	80120ea <__libc_init_array+0x1e>
 8012104:	08013168 	.word	0x08013168
 8012108:	08013168 	.word	0x08013168
 801210c:	08013168 	.word	0x08013168
 8012110:	0801316c 	.word	0x0801316c

08012114 <memset>:
 8012114:	4402      	add	r2, r0
 8012116:	4603      	mov	r3, r0
 8012118:	4293      	cmp	r3, r2
 801211a:	d100      	bne.n	801211e <memset+0xa>
 801211c:	4770      	bx	lr
 801211e:	f803 1b01 	strb.w	r1, [r3], #1
 8012122:	e7f9      	b.n	8012118 <memset+0x4>
 8012124:	0000      	movs	r0, r0
	...

08012128 <floor>:
 8012128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801212c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8012130:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8012134:	2e13      	cmp	r6, #19
 8012136:	4602      	mov	r2, r0
 8012138:	460b      	mov	r3, r1
 801213a:	4607      	mov	r7, r0
 801213c:	460c      	mov	r4, r1
 801213e:	4605      	mov	r5, r0
 8012140:	dc33      	bgt.n	80121aa <floor+0x82>
 8012142:	2e00      	cmp	r6, #0
 8012144:	da14      	bge.n	8012170 <floor+0x48>
 8012146:	a334      	add	r3, pc, #208	; (adr r3, 8012218 <floor+0xf0>)
 8012148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214c:	f7ee f822 	bl	8000194 <__adddf3>
 8012150:	2200      	movs	r2, #0
 8012152:	2300      	movs	r3, #0
 8012154:	f7ee fa52 	bl	80005fc <__aeabi_dcmpgt>
 8012158:	b138      	cbz	r0, 801216a <floor+0x42>
 801215a:	2c00      	cmp	r4, #0
 801215c:	da58      	bge.n	8012210 <floor+0xe8>
 801215e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012162:	431d      	orrs	r5, r3
 8012164:	d001      	beq.n	801216a <floor+0x42>
 8012166:	4c2e      	ldr	r4, [pc, #184]	; (8012220 <floor+0xf8>)
 8012168:	2500      	movs	r5, #0
 801216a:	4623      	mov	r3, r4
 801216c:	462f      	mov	r7, r5
 801216e:	e025      	b.n	80121bc <floor+0x94>
 8012170:	4a2c      	ldr	r2, [pc, #176]	; (8012224 <floor+0xfc>)
 8012172:	fa42 f806 	asr.w	r8, r2, r6
 8012176:	ea01 0208 	and.w	r2, r1, r8
 801217a:	4302      	orrs	r2, r0
 801217c:	d01e      	beq.n	80121bc <floor+0x94>
 801217e:	a326      	add	r3, pc, #152	; (adr r3, 8012218 <floor+0xf0>)
 8012180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012184:	f7ee f806 	bl	8000194 <__adddf3>
 8012188:	2200      	movs	r2, #0
 801218a:	2300      	movs	r3, #0
 801218c:	f7ee fa36 	bl	80005fc <__aeabi_dcmpgt>
 8012190:	2800      	cmp	r0, #0
 8012192:	d0ea      	beq.n	801216a <floor+0x42>
 8012194:	2c00      	cmp	r4, #0
 8012196:	bfbe      	ittt	lt
 8012198:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801219c:	fa43 f606 	asrlt.w	r6, r3, r6
 80121a0:	19a4      	addlt	r4, r4, r6
 80121a2:	ea24 0408 	bic.w	r4, r4, r8
 80121a6:	2500      	movs	r5, #0
 80121a8:	e7df      	b.n	801216a <floor+0x42>
 80121aa:	2e33      	cmp	r6, #51	; 0x33
 80121ac:	dd0a      	ble.n	80121c4 <floor+0x9c>
 80121ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80121b2:	d103      	bne.n	80121bc <floor+0x94>
 80121b4:	f7ed ffee 	bl	8000194 <__adddf3>
 80121b8:	4607      	mov	r7, r0
 80121ba:	460b      	mov	r3, r1
 80121bc:	4638      	mov	r0, r7
 80121be:	4619      	mov	r1, r3
 80121c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121c4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80121c8:	f04f 32ff 	mov.w	r2, #4294967295
 80121cc:	fa22 f808 	lsr.w	r8, r2, r8
 80121d0:	ea18 0f00 	tst.w	r8, r0
 80121d4:	d0f2      	beq.n	80121bc <floor+0x94>
 80121d6:	a310      	add	r3, pc, #64	; (adr r3, 8012218 <floor+0xf0>)
 80121d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121dc:	f7ed ffda 	bl	8000194 <__adddf3>
 80121e0:	2200      	movs	r2, #0
 80121e2:	2300      	movs	r3, #0
 80121e4:	f7ee fa0a 	bl	80005fc <__aeabi_dcmpgt>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d0be      	beq.n	801216a <floor+0x42>
 80121ec:	2c00      	cmp	r4, #0
 80121ee:	da02      	bge.n	80121f6 <floor+0xce>
 80121f0:	2e14      	cmp	r6, #20
 80121f2:	d103      	bne.n	80121fc <floor+0xd4>
 80121f4:	3401      	adds	r4, #1
 80121f6:	ea25 0508 	bic.w	r5, r5, r8
 80121fa:	e7b6      	b.n	801216a <floor+0x42>
 80121fc:	2301      	movs	r3, #1
 80121fe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012202:	fa03 f606 	lsl.w	r6, r3, r6
 8012206:	4435      	add	r5, r6
 8012208:	42bd      	cmp	r5, r7
 801220a:	bf38      	it	cc
 801220c:	18e4      	addcc	r4, r4, r3
 801220e:	e7f2      	b.n	80121f6 <floor+0xce>
 8012210:	2500      	movs	r5, #0
 8012212:	462c      	mov	r4, r5
 8012214:	e7a9      	b.n	801216a <floor+0x42>
 8012216:	bf00      	nop
 8012218:	8800759c 	.word	0x8800759c
 801221c:	7e37e43c 	.word	0x7e37e43c
 8012220:	bff00000 	.word	0xbff00000
 8012224:	000fffff 	.word	0x000fffff

08012228 <_init>:
 8012228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801222a:	bf00      	nop
 801222c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801222e:	bc08      	pop	{r3}
 8012230:	469e      	mov	lr, r3
 8012232:	4770      	bx	lr

08012234 <_fini>:
 8012234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012236:	bf00      	nop
 8012238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801223a:	bc08      	pop	{r3}
 801223c:	469e      	mov	lr, r3
 801223e:	4770      	bx	lr
