
STM32L476RG-Nucleo_PollingTagDetect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c188  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800c318  0800c318  0001c318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca48  0800ca48  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca48  0800ca48  0001ca48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca50  0800ca50  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ca50  0800ca50  0001ca50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800ca58  0800ca58  0001ca58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800ca60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd8  200000d8  0800cb38  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00008200  200010b0  0800cb38  000210b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cd41  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000666e  00000000  00000000  0004ce49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00020756  00000000  00000000  000534b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  00073c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005060  00000000  00000000  00075008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002eb8c  00000000  00000000  0007a068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f76e  00000000  00000000  000a8bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010365d  00000000  00000000  000d8362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001db9bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004518  00000000  00000000  001dba10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c300 	.word	0x0800c300

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800c300 	.word	0x0800c300

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <st25r3911TxRxOn>:
******************************************************************************
*/

void st25r3911TxRxOn( void )
{
    st25r3911SetRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 80005a4:	2148      	movs	r1, #72	; 0x48
 80005a6:	2002      	movs	r0, #2
 80005a8:	f000 bc04 	b.w	8000db4 <st25r3911SetRegisterBits>

080005ac <st25r3911TxRxOff>:
}

void st25r3911TxRxOff( void )
{
    st25r3911ClrRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 80005ac:	2148      	movs	r1, #72	; 0x48
 80005ae:	2002      	movs	r0, #2
 80005b0:	f000 bbbe 	b.w	8000d30 <st25r3911ClrRegisterBits>

080005b4 <st25r3911OscOn>:
}


void st25r3911OscOn( void )
{
 80005b4:	b510      	push	{r4, lr}
 80005b6:	b082      	sub	sp, #8

bool st25r3911CheckReg( uint8_t reg, uint8_t mask, uint8_t value )
{
    uint8_t regVal;
    
    regVal = 0;
 80005b8:	2400      	movs	r4, #0
    st25r3911ReadRegister( reg, &regVal );
 80005ba:	f10d 0107 	add.w	r1, sp, #7
 80005be:	2002      	movs	r0, #2
    regVal = 0;
 80005c0:	f88d 4007 	strb.w	r4, [sp, #7]
    st25r3911ReadRegister( reg, &regVal );
 80005c4:	f000 fab8 	bl	8000b38 <st25r3911ReadRegister>
    
    return ((regVal & mask) == value );
 80005c8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    if( !st25r3911CheckReg( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_en, ST25R3911_REG_OP_CONTROL_en ) )
 80005cc:	42a3      	cmp	r3, r4
 80005ce:	da01      	bge.n	80005d4 <st25r3911OscOn+0x20>
}
 80005d0:	b002      	add	sp, #8
 80005d2:	bd10      	pop	{r4, pc}
        st25r3911GetInterrupt( ST25R3911_IRQ_MASK_OSC );
 80005d4:	2080      	movs	r0, #128	; 0x80
 80005d6:	f000 fecb 	bl	8001370 <st25r3911GetInterrupt>
        st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_OSC);
 80005da:	2080      	movs	r0, #128	; 0x80
 80005dc:	f000 feee 	bl	80013bc <st25r3911EnableInterrupts>
        st25r3911ModifyRegister(ST25R3911_REG_OP_CONTROL, 0x00, ST25R3911_REG_OP_CONTROL_en);
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	4621      	mov	r1, r4
 80005e4:	2002      	movs	r0, #2
 80005e6:	f000 fc6d 	bl	8000ec4 <st25r3911ModifyRegister>
        st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_OSC, ST25R3911_OSC_STABLE_TIMEOUT);
 80005ea:	210a      	movs	r1, #10
 80005ec:	2080      	movs	r0, #128	; 0x80
 80005ee:	f000 fe83 	bl	80012f8 <st25r3911WaitForInterruptsTimed>
        st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_OSC);
 80005f2:	2080      	movs	r0, #128	; 0x80
}
 80005f4:	b002      	add	sp, #8
 80005f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_OSC);
 80005fa:	f000 bf07 	b.w	800140c <st25r3911DisableInterrupts>
 80005fe:	bf00      	nop

08000600 <st25r3911Initialize>:
{
 8000600:	b510      	push	{r4, lr}
    st25r3911ExecuteCommand(ST25R3911_CMD_SET_DEFAULT);
 8000602:	20c1      	movs	r0, #193	; 0xc1
{
 8000604:	b082      	sub	sp, #8
    st25r3911ExecuteCommand(ST25R3911_CMD_SET_DEFAULT);
 8000606:	f000 fd97 	bl	8001138 <st25r3911ExecuteCommand>
    st25r3911WriteRegister(ST25R3911_REG_OP_CONTROL, 0x00);
 800060a:	2100      	movs	r1, #0
 800060c:	2002      	movs	r0, #2
 800060e:	f000 fb4b 	bl	8000ca8 <st25r3911WriteRegister>
    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2, 0, 
 8000612:	2218      	movs	r2, #24
 8000614:	2100      	movs	r1, #0
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fc54 	bl	8000ec4 <st25r3911ModifyRegister>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_ALL);
 800061c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000620:	f000 fef4 	bl	800140c <st25r3911DisableInterrupts>
    regVal = 0;
 8000624:	2400      	movs	r4, #0
    st25r3911ClearInterrupts();
 8000626:	f000 ff19 	bl	800145c <st25r3911ClearInterrupts>
    st25r3911ReadRegister( reg, &regVal );
 800062a:	f10d 0107 	add.w	r1, sp, #7
 800062e:	2002      	movs	r0, #2
    regVal = 0;
 8000630:	f88d 4007 	strb.w	r4, [sp, #7]
    st25r3911ReadRegister( reg, &regVal );
 8000634:	f000 fa80 	bl	8000b38 <st25r3911ReadRegister>
    return ((regVal & mask) == value );
 8000638:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    if( !st25r3911CheckReg( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_en, ST25R3911_REG_OP_CONTROL_en ) )
 800063c:	42a3      	cmp	r3, r4
 800063e:	db11      	blt.n	8000664 <st25r3911Initialize+0x64>
        st25r3911GetInterrupt( ST25R3911_IRQ_MASK_OSC );
 8000640:	2080      	movs	r0, #128	; 0x80
 8000642:	f000 fe95 	bl	8001370 <st25r3911GetInterrupt>
        st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_OSC);
 8000646:	2080      	movs	r0, #128	; 0x80
 8000648:	f000 feb8 	bl	80013bc <st25r3911EnableInterrupts>
        st25r3911ModifyRegister(ST25R3911_REG_OP_CONTROL, 0x00, ST25R3911_REG_OP_CONTROL_en);
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	4621      	mov	r1, r4
 8000650:	2002      	movs	r0, #2
 8000652:	f000 fc37 	bl	8000ec4 <st25r3911ModifyRegister>
        st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_OSC, ST25R3911_OSC_STABLE_TIMEOUT);
 8000656:	210a      	movs	r1, #10
 8000658:	2080      	movs	r0, #128	; 0x80
 800065a:	f000 fe4d 	bl	80012f8 <st25r3911WaitForInterruptsTimed>
        st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_OSC);
 800065e:	2080      	movs	r0, #128	; 0x80
 8000660:	f000 fed4 	bl	800140c <st25r3911DisableInterrupts>
    st25r3911ChangeRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_mask_mpsv, mpsv );
 8000664:	2200      	movs	r2, #0
 8000666:	2106      	movs	r1, #6
 8000668:	202a      	movs	r0, #42	; 0x2a
 800066a:	f000 fbe5 	bl	8000e38 <st25r3911ChangeRegisterBits>
 *****************************************************************************
 */
static ReturnCode st25r3911ExecuteCommandAndGetResult(uint8_t cmd, uint8_t resreg, uint8_t sleeptime, uint8_t* result)
{

    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 800066e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000672:	f000 fea3 	bl	80013bc <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8000676:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800067a:	f000 fe79 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 800067e:	20df      	movs	r0, #223	; 0xdf
 8000680:	f000 fd5a 	bl	8001138 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 8000684:	210a      	movs	r1, #10
 8000686:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800068a:	f000 fe35 	bl	80012f8 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 800068e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000692:	f000 febb 	bl	800140c <st25r3911DisableInterrupts>
    
    /* read out the result if the pointer is not NULL */
    if (result != NULL)
    {
        st25r3911ReadRegister(resreg, result);
 8000696:	f10d 0107 	add.w	r1, sp, #7
 800069a:	2020      	movs	r0, #32
 800069c:	f000 fa4c 	bl	8000b38 <st25r3911ReadRegister>
    return result;
 80006a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    mV += ((((uint16_t)result) * 438U) + 500U) / 1000U;
 80006a4:	4811      	ldr	r0, [pc, #68]	; (80006ec <st25r3911Initialize+0xec>)
 80006a6:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80006aa:	fb03 f202 	mul.w	r2, r3, r2
 80006ae:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    mV = ((uint16_t)result) * 23U;
 80006b2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    mV += ((((uint16_t)result) * 438U) + 500U) / 1000U;
 80006b6:	fba0 0202 	umull	r0, r2, r0, r2
 80006ba:	0992      	lsrs	r2, r2, #6
    mV = ((uint16_t)result) * 23U;
 80006bc:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
    mV += ((((uint16_t)result) * 438U) + 500U) / 1000U;
 80006c0:	fa12 f383 	uxtah	r3, r2, r3
    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2,
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80006ca:	f04f 0180 	mov.w	r1, #128	; 0x80
 80006ce:	bf38      	it	cc
 80006d0:	460a      	movcc	r2, r1
 80006d2:	f04f 0001 	mov.w	r0, #1
 80006d6:	bf28      	it	cs
 80006d8:	2200      	movcs	r2, #0
 80006da:	f000 fbf3 	bl	8000ec4 <st25r3911ModifyRegister>
    st25r3911ClrRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 80006de:	2148      	movs	r1, #72	; 0x48
 80006e0:	2002      	movs	r0, #2
}
 80006e2:	b002      	add	sp, #8
 80006e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    st25r3911ClrRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 80006e8:	f000 bb22 	b.w	8000d30 <st25r3911ClrRegisterBits>
 80006ec:	10624dd3 	.word	0x10624dd3

080006f0 <st25r3911AdjustRegulators>:
{
 80006f0:	b510      	push	{r4, lr}
    st25r3911SetRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 80006f2:	2180      	movs	r1, #128	; 0x80
{
 80006f4:	b082      	sub	sp, #8
 80006f6:	4604      	mov	r4, r0
    st25r3911SetRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 80006f8:	202a      	movs	r0, #42	; 0x2a
 80006fa:	f000 fb5b 	bl	8000db4 <st25r3911SetRegisterBits>
    st25r3911ClrRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	202a      	movs	r0, #42	; 0x2a
 8000702:	f000 fb15 	bl	8000d30 <st25r3911ClrRegisterBits>
    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8000706:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800070a:	f000 fe57 	bl	80013bc <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 800070e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000712:	f000 fe2d 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 8000716:	20d6      	movs	r0, #214	; 0xd6
 8000718:	f000 fd0e 	bl	8001138 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 800071c:	2105      	movs	r1, #5
 800071e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000722:	f000 fde9 	bl	80012f8 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8000726:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800072a:	f000 fe6f 	bl	800140c <st25r3911DisableInterrupts>
        st25r3911ReadRegister(resreg, result);
 800072e:	f10d 0106 	add.w	r1, sp, #6
 8000732:	202b      	movs	r0, #43	; 0x2b
 8000734:	f000 fa00 	bl	8000b38 <st25r3911ReadRegister>
    st25r3911ReadRegister(ST25R3911_REG_IO_CONF2, &io_conf2);
 8000738:	f10d 0107 	add.w	r1, sp, #7
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f9fb 	bl	8000b38 <st25r3911ReadRegister>
    if (result_mV != NULL)
 8000742:	b174      	cbz	r4, 8000762 <st25r3911AdjustRegulators+0x72>
    result >>= ST25R3911_REG_REGULATOR_RESULT_shift_reg;
 8000744:	f89d 3006 	ldrb.w	r3, [sp, #6]
        if((io_conf2 & ST25R3911_REG_IO_CONF2_sup3V) != 0U)
 8000748:	f99d 2007 	ldrsb.w	r2, [sp, #7]
    result >>= ST25R3911_REG_REGULATOR_RESULT_shift_reg;
 800074c:	091b      	lsrs	r3, r3, #4
    result -= 5U;
 800074e:	3b05      	subs	r3, #5
        if((io_conf2 & ST25R3911_REG_IO_CONF2_sup3V) != 0U)
 8000750:	2a00      	cmp	r2, #0
    result -= 5U;
 8000752:	b2db      	uxtb	r3, r3
        if((io_conf2 & ST25R3911_REG_IO_CONF2_sup3V) != 0U)
 8000754:	db08      	blt.n	8000768 <st25r3911AdjustRegulators+0x78>
            *result_mV += (uint16_t)result * 120U;
 8000756:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	f603 733c 	addw	r3, r3, #3900	; 0xf3c
 8000760:	8023      	strh	r3, [r4, #0]
}
 8000762:	2000      	movs	r0, #0
 8000764:	b002      	add	sp, #8
 8000766:	bd10      	pop	{r4, pc}
            *result_mV += (uint16_t)result * 100U;
 8000768:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800076c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	f503 6316 	add.w	r3, r3, #2400	; 0x960
}
 8000776:	2000      	movs	r0, #0
            *result_mV += (uint16_t)result * 100U;
 8000778:	8023      	strh	r3, [r4, #0]
}
 800077a:	b002      	add	sp, #8
 800077c:	bd10      	pop	{r4, pc}
 800077e:	bf00      	nop

08000780 <st25r3911MeasureAmplitude>:
{
 8000780:	b510      	push	{r4, lr}
 8000782:	4604      	mov	r4, r0
    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8000784:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000788:	f000 fe18 	bl	80013bc <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 800078c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000790:	f000 fdee 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 8000794:	20d3      	movs	r0, #211	; 0xd3
 8000796:	f000 fccf 	bl	8001138 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 800079a:	210a      	movs	r1, #10
 800079c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007a0:	f000 fdaa 	bl	80012f8 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 80007a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007a8:	f000 fe30 	bl	800140c <st25r3911DisableInterrupts>
    if (result != NULL)
 80007ac:	b12c      	cbz	r4, 80007ba <st25r3911MeasureAmplitude+0x3a>
        st25r3911ReadRegister(resreg, result);
 80007ae:	4621      	mov	r1, r4
 80007b0:	2020      	movs	r0, #32
}
 80007b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        st25r3911ReadRegister(resreg, result);
 80007b6:	f000 b9bf 	b.w	8000b38 <st25r3911ReadRegister>
}
 80007ba:	bd10      	pop	{r4, pc}

080007bc <st25r3911MeasurePhase>:
{
 80007bc:	b510      	push	{r4, lr}
 80007be:	4604      	mov	r4, r0
    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 80007c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007c4:	f000 fdfa 	bl	80013bc <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 80007c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007cc:	f000 fdd0 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 80007d0:	20d9      	movs	r0, #217	; 0xd9
 80007d2:	f000 fcb1 	bl	8001138 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 80007d6:	210a      	movs	r1, #10
 80007d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007dc:	f000 fd8c 	bl	80012f8 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 80007e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007e4:	f000 fe12 	bl	800140c <st25r3911DisableInterrupts>
    if (result != NULL)
 80007e8:	b12c      	cbz	r4, 80007f6 <st25r3911MeasurePhase+0x3a>
        st25r3911ReadRegister(resreg, result);
 80007ea:	4621      	mov	r1, r4
 80007ec:	2020      	movs	r0, #32
}
 80007ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        st25r3911ReadRegister(resreg, result);
 80007f2:	f000 b9a1 	b.w	8000b38 <st25r3911ReadRegister>
}
 80007f6:	bd10      	pop	{r4, pc}

080007f8 <st25r3911MeasureCapacitance>:
{
 80007f8:	b510      	push	{r4, lr}
 80007fa:	4604      	mov	r4, r0
    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 80007fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000800:	f000 fddc 	bl	80013bc <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8000804:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000808:	f000 fdb2 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 800080c:	20de      	movs	r0, #222	; 0xde
 800080e:	f000 fc93 	bl	8001138 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 8000812:	210a      	movs	r1, #10
 8000814:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000818:	f000 fd6e 	bl	80012f8 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 800081c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000820:	f000 fdf4 	bl	800140c <st25r3911DisableInterrupts>
    if (result != NULL)
 8000824:	b12c      	cbz	r4, 8000832 <st25r3911MeasureCapacitance+0x3a>
        st25r3911ReadRegister(resreg, result);
 8000826:	4621      	mov	r1, r4
 8000828:	2020      	movs	r0, #32
}
 800082a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        st25r3911ReadRegister(resreg, result);
 800082e:	f000 b983 	b.w	8000b38 <st25r3911ReadRegister>
}
 8000832:	bd10      	pop	{r4, pc}

08000834 <st25r3911CalibrateAntenna>:
{
 8000834:	b510      	push	{r4, lr}
 8000836:	4604      	mov	r4, r0
    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8000838:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800083c:	f000 fdbe 	bl	80013bc <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8000840:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000844:	f000 fd94 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 8000848:	20d8      	movs	r0, #216	; 0xd8
 800084a:	f000 fc75 	bl	8001138 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 800084e:	210a      	movs	r1, #10
 8000850:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000854:	f000 fd50 	bl	80012f8 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8000858:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800085c:	f000 fdd6 	bl	800140c <st25r3911DisableInterrupts>
    if (result != NULL)
 8000860:	b12c      	cbz	r4, 800086e <st25r3911CalibrateAntenna+0x3a>
        st25r3911ReadRegister(resreg, result);
 8000862:	4621      	mov	r1, r4
 8000864:	2023      	movs	r0, #35	; 0x23
}
 8000866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        st25r3911ReadRegister(resreg, result);
 800086a:	f000 b965 	b.w	8000b38 <st25r3911ReadRegister>
}
 800086e:	bd10      	pop	{r4, pc}

08000870 <st25r3911CalibrateCapacitiveSensor>:
{
 8000870:	b510      	push	{r4, lr}
    st25r3911ClrRegisterBits( ST25R3911_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_mask_cs_mcal );
 8000872:	21f8      	movs	r1, #248	; 0xf8
{
 8000874:	b082      	sub	sp, #8
 8000876:	4604      	mov	r4, r0
    st25r3911ClrRegisterBits( ST25R3911_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_mask_cs_mcal );
 8000878:	202e      	movs	r0, #46	; 0x2e
 800087a:	f000 fa59 	bl	8000d30 <st25r3911ClrRegisterBits>
    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 800087e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000882:	f000 fd9b 	bl	80013bc <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8000886:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800088a:	f000 fd71 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 800088e:	20dd      	movs	r0, #221	; 0xdd
 8000890:	f000 fc52 	bl	8001138 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 8000894:	2104      	movs	r1, #4
 8000896:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800089a:	f000 fd2d 	bl	80012f8 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 800089e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80008a2:	f000 fdb3 	bl	800140c <st25r3911DisableInterrupts>
        st25r3911ReadRegister(resreg, result);
 80008a6:	f10d 0107 	add.w	r1, sp, #7
 80008aa:	202f      	movs	r0, #47	; 0x2f
 80008ac:	f000 f944 	bl	8000b38 <st25r3911ReadRegister>
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 80008b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80008b4:	f003 0206 	and.w	r2, r3, #6
 80008b8:	2a04      	cmp	r2, #4
 80008ba:	d105      	bne.n	80008c8 <st25r3911CalibrateCapacitiveSensor+0x58>
    if( result != NULL )
 80008bc:	b13c      	cbz	r4, 80008ce <st25r3911CalibrateCapacitiveSensor+0x5e>
        (*result) = (uint8_t)(res >> ST25R3911_REG_CAP_SENSOR_CONTROL_shift_cs_mcal);
 80008be:	08db      	lsrs	r3, r3, #3
    return ERR_NONE;
 80008c0:	2000      	movs	r0, #0
        (*result) = (uint8_t)(res >> ST25R3911_REG_CAP_SENSOR_CONTROL_shift_cs_mcal);
 80008c2:	7023      	strb	r3, [r4, #0]
}
 80008c4:	b002      	add	sp, #8
 80008c6:	bd10      	pop	{r4, pc}
        return ERR_IO;
 80008c8:	2003      	movs	r0, #3
}
 80008ca:	b002      	add	sp, #8
 80008cc:	bd10      	pop	{r4, pc}
    return ERR_NONE;
 80008ce:	4620      	mov	r0, r4
}
 80008d0:	b002      	add	sp, #8
 80008d2:	bd10      	pop	{r4, pc}

080008d4 <st25r3911SetBitrate>:
{
 80008d4:	b530      	push	{r4, r5, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	460c      	mov	r4, r1
 80008da:	4605      	mov	r5, r0
    st25r3911ReadRegister(ST25R3911_REG_BIT_RATE, &reg);
 80008dc:	f10d 0107 	add.w	r1, sp, #7
 80008e0:	2004      	movs	r0, #4
 80008e2:	f000 f929 	bl	8000b38 <st25r3911ReadRegister>
    if (rxRate != ST25R3911_BR_DO_NOT_SET)
 80008e6:	2cff      	cmp	r4, #255	; 0xff
 80008e8:	d008      	beq.n	80008fc <st25r3911SetBitrate+0x28>
        if(rxRate > ST25R3911_BR_3390)
 80008ea:	2c05      	cmp	r4, #5
 80008ec:	d819      	bhi.n	8000922 <st25r3911SetBitrate+0x4e>
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_rxrate);     /* MISRA 10.3 */
 80008ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80008f2:	f021 010f 	bic.w	r1, r1, #15
            reg |= rxRate << ST25R3911_REG_BIT_RATE_shift_rxrate;
 80008f6:	430c      	orrs	r4, r1
 80008f8:	f88d 4007 	strb.w	r4, [sp, #7]
    if (txRate != ST25R3911_BR_DO_NOT_SET)
 80008fc:	2dff      	cmp	r5, #255	; 0xff
 80008fe:	d013      	beq.n	8000928 <st25r3911SetBitrate+0x54>
        if(txRate > ST25R3911_BR_6780)
 8000900:	2d06      	cmp	r5, #6
 8000902:	d80e      	bhi.n	8000922 <st25r3911SetBitrate+0x4e>
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_txrate);     /* MISRA 10.3 */
 8000904:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000908:	f003 030f 	and.w	r3, r3, #15
            reg |= txRate<<ST25R3911_REG_BIT_RATE_shift_txrate;
 800090c:	ea43 1105 	orr.w	r1, r3, r5, lsl #4
 8000910:	b2c9      	uxtb	r1, r1
 8000912:	f88d 1007 	strb.w	r1, [sp, #7]
    st25r3911WriteRegister(ST25R3911_REG_BIT_RATE, reg);
 8000916:	2004      	movs	r0, #4
 8000918:	f000 f9c6 	bl	8000ca8 <st25r3911WriteRegister>
    return ERR_NONE;
 800091c:	2000      	movs	r0, #0
}
 800091e:	b003      	add	sp, #12
 8000920:	bd30      	pop	{r4, r5, pc}
            return ERR_PARAM;
 8000922:	2007      	movs	r0, #7
}
 8000924:	b003      	add	sp, #12
 8000926:	bd30      	pop	{r4, r5, pc}
    st25r3911WriteRegister(ST25R3911_REG_BIT_RATE, reg);
 8000928:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800092c:	e7f3      	b.n	8000916 <st25r3911SetBitrate+0x42>
 800092e:	bf00      	nop

08000930 <st25r3911StartGPTimer_8fcs>:
{
 8000930:	b538      	push	{r3, r4, r5, lr}
 8000932:	4605      	mov	r5, r0
 8000934:	460c      	mov	r4, r1
    st25r3911WriteRegister(ST25R3911_REG_GPT1, (uint8_t)(gpt_8fcs >> 8));
 8000936:	2012      	movs	r0, #18
 8000938:	0a29      	lsrs	r1, r5, #8
 800093a:	f000 f9b5 	bl	8000ca8 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_GPT2, (uint8_t)(gpt_8fcs & 0xffU));
 800093e:	b2e9      	uxtb	r1, r5
 8000940:	2013      	movs	r0, #19
 8000942:	f000 f9b1 	bl	8000ca8 <st25r3911WriteRegister>
    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, 
 8000946:	4622      	mov	r2, r4
 8000948:	21e0      	movs	r1, #224	; 0xe0
 800094a:	2011      	movs	r0, #17
 800094c:	f000 faba 	bl	8000ec4 <st25r3911ModifyRegister>
    if (trigger_source == 0U)
 8000950:	b104      	cbz	r4, 8000954 <st25r3911StartGPTimer_8fcs+0x24>
}
 8000952:	bd38      	pop	{r3, r4, r5, pc}
 8000954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        st25r3911ExecuteCommand(ST25R3911_CMD_START_GP_TIMER);
 8000958:	20e0      	movs	r0, #224	; 0xe0
 800095a:	f000 bbed 	b.w	8001138 <st25r3911ExecuteCommand>
 800095e:	bf00      	nop

08000960 <st25r3911CheckReg>:
{
 8000960:	b530      	push	{r4, r5, lr}
 8000962:	b083      	sub	sp, #12
 8000964:	460c      	mov	r4, r1
    regVal = 0;
 8000966:	2300      	movs	r3, #0
    st25r3911ReadRegister( reg, &regVal );
 8000968:	f10d 0107 	add.w	r1, sp, #7
{
 800096c:	4615      	mov	r5, r2
    regVal = 0;
 800096e:	f88d 3007 	strb.w	r3, [sp, #7]
    st25r3911ReadRegister( reg, &regVal );
 8000972:	f000 f8e1 	bl	8000b38 <st25r3911ReadRegister>
    return ((regVal & mask) == value );
 8000976:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800097a:	4020      	ands	r0, r4
}
 800097c:	1b40      	subs	r0, r0, r5
 800097e:	fab0 f080 	clz	r0, r0
 8000982:	0940      	lsrs	r0, r0, #5
 8000984:	b003      	add	sp, #12
 8000986:	bd30      	pop	{r4, r5, pc}

08000988 <st25r3911CheckChipID>:
{
 8000988:	b530      	push	{r4, r5, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	4605      	mov	r5, r0
    ID = 0;    
 800098e:	2400      	movs	r4, #0
    st25r3911ReadRegister( ST25R3911_REG_IC_IDENTITY, &ID );
 8000990:	f10d 0107 	add.w	r1, sp, #7
 8000994:	203f      	movs	r0, #63	; 0x3f
    ID = 0;    
 8000996:	f88d 4007 	strb.w	r4, [sp, #7]
    st25r3911ReadRegister( ST25R3911_REG_IC_IDENTITY, &ID );
 800099a:	f000 f8cd 	bl	8000b38 <st25r3911ReadRegister>
    if( (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_type) != ST25R3911_REG_IC_IDENTITY_ic_type )
 800099e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80009a2:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 80009a6:	2a08      	cmp	r2, #8
 80009a8:	d106      	bne.n	80009b8 <st25r3911CheckChipID+0x30>
    if(rev != NULL)
 80009aa:	b145      	cbz	r5, 80009be <st25r3911CheckChipID+0x36>
        *rev = (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_rev);
 80009ac:	f003 0307 	and.w	r3, r3, #7
    return true;
 80009b0:	2001      	movs	r0, #1
        *rev = (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_rev);
 80009b2:	702b      	strb	r3, [r5, #0]
}
 80009b4:	b003      	add	sp, #12
 80009b6:	bd30      	pop	{r4, r5, pc}
        return false;
 80009b8:	4620      	mov	r0, r4
}
 80009ba:	b003      	add	sp, #12
 80009bc:	bd30      	pop	{r4, r5, pc}
    return true;
 80009be:	2001      	movs	r0, #1
}
 80009c0:	b003      	add	sp, #12
 80009c2:	bd30      	pop	{r4, r5, pc}

080009c4 <st25r3911SetNoResponseTime_64fcs>:
    if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80009c4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
 80009c8:	b570      	push	{r4, r5, r6, lr}
    if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80009ca:	d214      	bcs.n	80009f6 <st25r3911SetNoResponseTime_64fcs+0x32>
    st25r3911NoResponseTime_64fcs = noResponseTime_64fcs;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <st25r3911SetNoResponseTime_64fcs+0x5c>)
    uint8_t nrt_step = 0;
 80009ce:	2200      	movs	r2, #0
    st25r3911NoResponseTime_64fcs = noResponseTime_64fcs;
 80009d0:	6018      	str	r0, [r3, #0]
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER1, (uint8_t)(noResponseTime_64fcs >> 8));
 80009d2:	f3c0 2607 	ubfx	r6, r0, #8, #8
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER2, (uint8_t)(noResponseTime_64fcs & 0xffU));
 80009d6:	b2c4      	uxtb	r4, r0
    ReturnCode err = ERR_NONE;
 80009d8:	4615      	mov	r5, r2
    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_step, nrt_step);
 80009da:	2101      	movs	r1, #1
 80009dc:	2011      	movs	r0, #17
 80009de:	f000 fa71 	bl	8000ec4 <st25r3911ModifyRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER1, (uint8_t)(noResponseTime_64fcs >> 8));
 80009e2:	4631      	mov	r1, r6
 80009e4:	200f      	movs	r0, #15
 80009e6:	f000 f95f 	bl	8000ca8 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER2, (uint8_t)(noResponseTime_64fcs & 0xffU));
 80009ea:	4621      	mov	r1, r4
 80009ec:	2010      	movs	r0, #16
 80009ee:	f000 f95b 	bl	8000ca8 <st25r3911WriteRegister>
}
 80009f2:	4628      	mov	r0, r5
 80009f4:	bd70      	pop	{r4, r5, r6, pc}
        noResponseTime_64fcs = (noResponseTime_64fcs + 63U) / 64U;
 80009f6:	303f      	adds	r0, #63	; 0x3f
        if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80009f8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80009fc:	d20a      	bcs.n	8000a14 <st25r3911SetNoResponseTime_64fcs+0x50>
        st25r3911NoResponseTime_64fcs = 64U * noResponseTime_64fcs;
 80009fe:	f020 023f 	bic.w	r2, r0, #63	; 0x3f
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER1, (uint8_t)(noResponseTime_64fcs >> 8));
 8000a02:	f3c0 3687 	ubfx	r6, r0, #14, #8
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER2, (uint8_t)(noResponseTime_64fcs & 0xffU));
 8000a06:	f3c0 1487 	ubfx	r4, r0, #6, #8
    ReturnCode err = ERR_NONE;
 8000a0a:	2500      	movs	r5, #0
        st25r3911NoResponseTime_64fcs = 64U * noResponseTime_64fcs;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <st25r3911SetNoResponseTime_64fcs+0x5c>)
 8000a0e:	601a      	str	r2, [r3, #0]
        nrt_step = ST25R3911_REG_GPT_CONTROL_nrt_step;
 8000a10:	2201      	movs	r2, #1
 8000a12:	e7e2      	b.n	80009da <st25r3911SetNoResponseTime_64fcs+0x16>
 8000a14:	24ff      	movs	r4, #255	; 0xff
 8000a16:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <st25r3911SetNoResponseTime_64fcs+0x60>)
 8000a18:	4626      	mov	r6, r4
            err = ERR_PARAM;
 8000a1a:	2507      	movs	r5, #7
 8000a1c:	e7f6      	b.n	8000a0c <st25r3911SetNoResponseTime_64fcs+0x48>
 8000a1e:	bf00      	nop
 8000a20:	200000f4 	.word	0x200000f4
 8000a24:	003fffc0 	.word	0x003fffc0

08000a28 <st25r3911PerformCollisionAvoidance>:
{
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4604      	mov	r4, r0
    if( (FieldONCmd != ST25R3911_CMD_INITIAL_RF_COLLISION)    && 
 8000a2c:	3038      	adds	r0, #56	; 0x38
 8000a2e:	b2c0      	uxtb	r0, r0
 8000a30:	2802      	cmp	r0, #2
 8000a32:	d901      	bls.n	8000a38 <st25r3911PerformCollisionAvoidance+0x10>
        return ERR_PARAM;
 8000a34:	2007      	movs	r0, #7
}
 8000a36:	bd38      	pop	{r3, r4, r5, pc}
    if( (pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) )
 8000a38:	29ff      	cmp	r1, #255	; 0xff
 8000a3a:	468c      	mov	ip, r1
 8000a3c:	461d      	mov	r5, r3
 8000a3e:	d033      	beq.n	8000aa8 <st25r3911PerformCollisionAvoidance+0x80>
        if(caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 8000a40:	2aff      	cmp	r2, #255	; 0xff
 8000a42:	bf0c      	ite	eq
 8000a44:	2170      	moveq	r1, #112	; 0x70
 8000a46:	217f      	movne	r1, #127	; 0x7f
        st25r3911ChangeRegisterBits( ST25R3911_REG_FIELD_THRESHOLD, treMask, (pdThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_trg) | (caThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_rfe ) );
 8000a48:	f00c 0c70 	and.w	ip, ip, #112	; 0x70
 8000a4c:	f002 020f 	and.w	r2, r2, #15
 8000a50:	ea4c 0202 	orr.w	r2, ip, r2
 8000a54:	2029      	movs	r0, #41	; 0x29
 8000a56:	f000 f9ef 	bl	8000e38 <st25r3911ChangeRegisterBits>
    st25r3911ModifyRegister(ST25R3911_REG_AUX, ST25R3911_REG_AUX_mask_nfc_n, (nTRFW & ST25R3911_REG_AUX_mask_nfc_n) );
 8000a5a:	f005 0203 	and.w	r2, r5, #3
 8000a5e:	2103      	movs	r1, #3
 8000a60:	2009      	movs	r0, #9
 8000a62:	f000 fa2f 	bl	8000ec4 <st25r3911ModifyRegister>
    st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 8000a66:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000a6a:	f000 fca7 	bl	80013bc <st25r3911EnableInterrupts>
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 8000a6e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000a72:	f000 fc7d 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(FieldONCmd);
 8000a76:	4620      	mov	r0, r4
 8000a78:	f000 fb5e 	bl	8001138 <st25r3911ExecuteCommand>
    irqs = st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT, ST25R3911_CA_TIMEOUT );
 8000a7c:	210a      	movs	r1, #10
 8000a7e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000a82:	f000 fc39 	bl	80012f8 <st25r3911WaitForInterruptsTimed>
 8000a86:	4604      	mov	r4, r0
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_EON) );
 8000a88:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8000a8c:	f000 fc70 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT);
 8000a90:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000a94:	f000 fcba 	bl	800140c <st25r3911DisableInterrupts>
    if((ST25R3911_IRQ_MASK_CAC & irqs) != 0U)                             /* Collision occurred */
 8000a98:	0563      	lsls	r3, r4, #21
 8000a9a:	d409      	bmi.n	8000ab0 <st25r3911PerformCollisionAvoidance+0x88>
        return ERR_NONE;
 8000a9c:	f414 7f00 	tst.w	r4, #512	; 0x200
 8000aa0:	bf0c      	ite	eq
 8000aa2:	200c      	moveq	r0, #12
 8000aa4:	2000      	movne	r0, #0
}
 8000aa6:	bd38      	pop	{r3, r4, r5, pc}
    if( (pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) )
 8000aa8:	2aff      	cmp	r2, #255	; 0xff
 8000aaa:	d0d6      	beq.n	8000a5a <st25r3911PerformCollisionAvoidance+0x32>
 8000aac:	210f      	movs	r1, #15
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_rfe;
 8000aae:	e7cb      	b.n	8000a48 <st25r3911PerformCollisionAvoidance+0x20>
        return ERR_RF_COLLISION;
 8000ab0:	201d      	movs	r0, #29
}
 8000ab2:	bd38      	pop	{r3, r4, r5, pc}

08000ab4 <st25r3911SetNumTxBits>:
{
 8000ab4:	b510      	push	{r4, lr}
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xffU)); 
 8000ab6:	b2c1      	uxtb	r1, r0
{
 8000ab8:	4604      	mov	r4, r0
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xffU)); 
 8000aba:	201e      	movs	r0, #30
 8000abc:	f000 f8f4 	bl	8000ca8 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xffU));    
 8000ac0:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8000ac4:	201d      	movs	r0, #29
}
 8000ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xffU));    
 8000aca:	f000 b8ed 	b.w	8000ca8 <st25r3911WriteRegister>
 8000ace:	bf00      	nop

08000ad0 <st25r3911StreamConfigure>:
{
 8000ad0:	b510      	push	{r4, lr}
    if (config->useBPSK != 0U)
 8000ad2:	7803      	ldrb	r3, [r0, #0]
 8000ad4:	b31b      	cbz	r3, 8000b1e <st25r3911StreamConfigure+0x4e>
        if ((config->din<2U) || (config->din>4U)) /* not in fc/4 .. fc/16 */
 8000ad6:	7843      	ldrb	r3, [r0, #1]
 8000ad8:	1e9a      	subs	r2, r3, #2
 8000ada:	2a02      	cmp	r2, #2
 8000adc:	d81d      	bhi.n	8000b1a <st25r3911StreamConfigure+0x4a>
        smd |= (4U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8000ade:	f1c3 0304 	rsb	r3, r3, #4
 8000ae2:	015b      	lsls	r3, r3, #5
 8000ae4:	b2db      	uxtb	r3, r3
        mode = ST25R3911_REG_MODE_om_bpsk_stream;
 8000ae6:	2478      	movs	r4, #120	; 0x78
    if ((config->dout<1U) || (config->dout>7U)) /* not in fc/2 .. fc/128 */
 8000ae8:	7881      	ldrb	r1, [r0, #2]
 8000aea:	f101 3cff 	add.w	ip, r1, #4294967295
 8000aee:	f1bc 0f06 	cmp.w	ip, #6
 8000af2:	d812      	bhi.n	8000b1a <st25r3911StreamConfigure+0x4a>
    if (config->report_period_length > 3U) 
 8000af4:	78c0      	ldrb	r0, [r0, #3]
 8000af6:	2803      	cmp	r0, #3
 8000af8:	d80f      	bhi.n	8000b1a <st25r3911StreamConfigure+0x4a>
    smd |= (7U - config->dout) << ST25R3911_REG_STREAM_MODE_shift_stx;
 8000afa:	f1c1 0107 	rsb	r1, r1, #7
 8000afe:	430b      	orrs	r3, r1
    smd |= config->report_period_length << ST25R3911_REG_STREAM_MODE_shift_scp;
 8000b00:	ea43 01c0 	orr.w	r1, r3, r0, lsl #3
    st25r3911WriteRegister(ST25R3911_REG_STREAM_MODE, smd);
 8000b04:	b2c9      	uxtb	r1, r1
 8000b06:	2008      	movs	r0, #8
 8000b08:	f000 f8ce 	bl	8000ca8 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, ST25R3911_REG_MODE_mask_om, mode);
 8000b0c:	4622      	mov	r2, r4
 8000b0e:	2178      	movs	r1, #120	; 0x78
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f991 	bl	8000e38 <st25r3911ChangeRegisterBits>
    return ERR_NONE;
 8000b16:	2000      	movs	r0, #0
}
 8000b18:	bd10      	pop	{r4, pc}
            return ERR_PARAM;
 8000b1a:	2007      	movs	r0, #7
}
 8000b1c:	bd10      	pop	{r4, pc}
        if ((config->din<3U) || (config->din>6U)) /* not in fc/8 .. fc/64 */
 8000b1e:	7843      	ldrb	r3, [r0, #1]
 8000b20:	1eda      	subs	r2, r3, #3
 8000b22:	2a03      	cmp	r2, #3
 8000b24:	d8f9      	bhi.n	8000b1a <st25r3911StreamConfigure+0x4a>
        smd |= (6U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8000b26:	f1c3 0306 	rsb	r3, r3, #6
        if (config->report_period_length == 0U) 
 8000b2a:	78c2      	ldrb	r2, [r0, #3]
        smd |= (6U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8000b2c:	015b      	lsls	r3, r3, #5
 8000b2e:	b2db      	uxtb	r3, r3
        if (config->report_period_length == 0U) 
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	d0f2      	beq.n	8000b1a <st25r3911StreamConfigure+0x4a>
        mode = ST25R3911_REG_MODE_om_subcarrier_stream;
 8000b34:	2470      	movs	r4, #112	; 0x70
 8000b36:	e7d7      	b.n	8000ae8 <st25r3911StreamConfigure+0x18>

08000b38 <st25r3911ReadRegister>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911ReadRegister(uint8_t reg, uint8_t* value)
{ 
 8000b38:	b570      	push	{r4, r5, r6, lr}
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    platformProtectST25R391xComm();
 8000b3a:	4d1a      	ldr	r5, [pc, #104]	; (8000ba4 <st25r3911ReadRegister+0x6c>)
 8000b3c:	782b      	ldrb	r3, [r5, #0]
 8000b3e:	3301      	adds	r3, #1
{ 
 8000b40:	b082      	sub	sp, #8
 8000b42:	4604      	mov	r4, r0
 8000b44:	460e      	mov	r6, r1
    platformProtectST25R391xComm();
 8000b46:	702b      	strb	r3, [r5, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b48:	f3bf 8f4f 	dsb	sy
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <st25r3911ReadRegister+0x70>)
 8000b4e:	2140      	movs	r1, #64	; 0x40
 8000b50:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
 8000b54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b58:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8000b5c:	4813      	ldr	r0, [pc, #76]	; (8000bac <st25r3911ReadRegister+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f000 fee4 	bl	800192c <HAL_GPIO_WritePin>
  
    buf[0] = (reg | ST25R3911_READ_MODE);
    buf[1] = 0;
  
    platformSpiTxRx(buf, buf, 2);
 8000b64:	a901      	add	r1, sp, #4
    buf[0] = (reg | ST25R3911_READ_MODE);
 8000b66:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    buf[1] = 0;
 8000b6a:	2300      	movs	r3, #0
    platformSpiTxRx(buf, buf, 2);
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	4608      	mov	r0, r1
    buf[0] = (reg | ST25R3911_READ_MODE);
 8000b70:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = 0;
 8000b74:	f88d 3005 	strb.w	r3, [sp, #5]
    platformSpiTxRx(buf, buf, 2);
 8000b78:	f003 f9f4 	bl	8003f64 <spiTxRx>
  
    if(value != NULL)
 8000b7c:	b116      	cbz	r6, 8000b84 <st25r3911ReadRegister+0x4c>
    {
      *value = buf[1];
 8000b7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000b82:	7033      	strb	r3, [r6, #0]
    }
    
    platformSpiDeselect();
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <st25r3911ReadRegister+0x74>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	2140      	movs	r1, #64	; 0x40
 8000b8a:	f000 fecf 	bl	800192c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8000b8e:	782b      	ldrb	r3, [r5, #0]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	702b      	strb	r3, [r5, #0]
 8000b96:	b913      	cbnz	r3, 8000b9e <st25r3911ReadRegister+0x66>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <st25r3911ReadRegister+0x70>)
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	601a      	str	r2, [r3, #0]

    return;
}
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd70      	pop	{r4, r5, r6, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000490 	.word	0x20000490
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	48000400 	.word	0x48000400

08000bb0 <st25r3911ReadMultipleRegisters>:


void st25r3911ReadMultipleRegisters(uint8_t reg, uint8_t* values, uint8_t length)
{
 8000bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb4:	b082      	sub	sp, #8
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = (reg | ST25R3911_READ_MODE);
 8000bb6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8000bba:	f88d 0007 	strb.w	r0, [sp, #7]
#endif  /* !ST25R391X_COM_SINGLETXRX */
  
    if (length > 0U)
 8000bbe:	b912      	cbnz	r2, 8000bc6 <st25r3911ReadMultipleRegisters+0x16>
        platformSpiDeselect();
        platformUnprotectST25R391xComm();
    }
    
    return;
}
 8000bc0:	b002      	add	sp, #8
 8000bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        platformProtectST25R391xComm();
 8000bc6:	4e18      	ldr	r6, [pc, #96]	; (8000c28 <st25r3911ReadMultipleRegisters+0x78>)
 8000bc8:	7833      	ldrb	r3, [r6, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	460d      	mov	r5, r1
 8000bce:	4614      	mov	r4, r2
 8000bd0:	7033      	strb	r3, [r6, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd2:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bd6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000c30 <st25r3911ReadMultipleRegisters+0x80>
 8000bda:	2740      	movs	r7, #64	; 0x40
 8000bdc:	f8c8 7080 	str.w	r7, [r8, #128]	; 0x80
 8000be0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000be4:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 8000be8:	4810      	ldr	r0, [pc, #64]	; (8000c2c <st25r3911ReadMultipleRegisters+0x7c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	4639      	mov	r1, r7
 8000bee:	f000 fe9d 	bl	800192c <HAL_GPIO_WritePin>
        platformSpiTxRx(&cmd, NULL, ST25R3911_CMD_LEN);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	f10d 0007 	add.w	r0, sp, #7
 8000bfa:	f003 f9b3 	bl	8003f64 <spiTxRx>
        platformSpiTxRx(NULL, values, length);  
 8000bfe:	4622      	mov	r2, r4
 8000c00:	4629      	mov	r1, r5
 8000c02:	2000      	movs	r0, #0
 8000c04:	f003 f9ae 	bl	8003f64 <spiTxRx>
        platformSpiDeselect();
 8000c08:	4808      	ldr	r0, [pc, #32]	; (8000c2c <st25r3911ReadMultipleRegisters+0x7c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	f000 fe8d 	bl	800192c <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8000c12:	7833      	ldrb	r3, [r6, #0]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	7033      	strb	r3, [r6, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1d0      	bne.n	8000bc0 <st25r3911ReadMultipleRegisters+0x10>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c1e:	f8c8 7000 	str.w	r7, [r8]
}
 8000c22:	b002      	add	sp, #8
 8000c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c28:	20000490 	.word	0x20000490
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <st25r3911WriteTestRegister>:

    return;
}

void st25r3911WriteTestRegister(uint8_t reg, uint8_t value)
{
 8000c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */
    
    platformProtectST25R391xComm();
 8000c38:	4c18      	ldr	r4, [pc, #96]	; (8000c9c <st25r3911WriteTestRegister+0x68>)
 8000c3a:	7823      	ldrb	r3, [r4, #0]
 8000c3c:	3301      	adds	r3, #1
{
 8000c3e:	b082      	sub	sp, #8
 8000c40:	4607      	mov	r7, r0
 8000c42:	460e      	mov	r6, r1
    platformProtectST25R391xComm();
 8000c44:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c46:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c4a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000ca4 <st25r3911WriteTestRegister+0x70>
 8000c4e:	2540      	movs	r5, #64	; 0x40
 8000c50:	f8c8 5080 	str.w	r5, [r8, #128]	; 0x80
 8000c54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c58:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8000c5c:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <st25r3911WriteTestRegister+0x6c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4629      	mov	r1, r5
 8000c62:	f000 fe63 	bl	800192c <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8000c66:	23fc      	movs	r3, #252	; 0xfc
    buf[1] = (reg | ST25R3911_WRITE_MODE);
    buf[2] = value;
  
    platformSpiTxRx(buf, NULL, 3);
 8000c68:	2203      	movs	r2, #3
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	a801      	add	r0, sp, #4
    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8000c6e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = (reg | ST25R3911_WRITE_MODE);
 8000c72:	f88d 7005 	strb.w	r7, [sp, #5]
    buf[2] = value;
 8000c76:	f88d 6006 	strb.w	r6, [sp, #6]
    platformSpiTxRx(buf, NULL, 3);
 8000c7a:	f003 f973 	bl	8003f64 <spiTxRx>
  
    platformSpiDeselect();
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <st25r3911WriteTestRegister+0x6c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	f000 fe52 	bl	800192c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8000c88:	7823      	ldrb	r3, [r4, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	7023      	strb	r3, [r4, #0]
 8000c90:	b90b      	cbnz	r3, 8000c96 <st25r3911WriteTestRegister+0x62>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c92:	f8c8 5000 	str.w	r5, [r8]

    return;
}
 8000c96:	b002      	add	sp, #8
 8000c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c9c:	20000490 	.word	0x20000490
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <st25r3911WriteRegister>:

void st25r3911WriteRegister(uint8_t reg, uint8_t value)
{
 8000ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    if (ST25R3911_REG_OP_CONTROL == reg)
 8000cac:	2802      	cmp	r0, #2
{
 8000cae:	b082      	sub	sp, #8
 8000cb0:	4605      	mov	r5, r0
 8000cb2:	460f      	mov	r7, r1
    if (ST25R3911_REG_OP_CONTROL == reg)
 8000cb4:	d02b      	beq.n	8000d0e <st25r3911WriteRegister+0x66>
    {
        st25r3911CheckFieldSetLED(value);
    }    
    
    platformProtectST25R391xComm();
 8000cb6:	4c1b      	ldr	r4, [pc, #108]	; (8000d24 <st25r3911WriteRegister+0x7c>)
 8000cb8:	7823      	ldrb	r3, [r4, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cbe:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000cc2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000d2c <st25r3911WriteRegister+0x84>
 8000cc6:	2640      	movs	r6, #64	; 0x40
 8000cc8:	f8c8 6080 	str.w	r6, [r8, #128]	; 0x80
 8000ccc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cd0:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8000cd4:	4814      	ldr	r0, [pc, #80]	; (8000d28 <st25r3911WriteRegister+0x80>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4631      	mov	r1, r6
 8000cda:	f000 fe27 	bl	800192c <HAL_GPIO_WritePin>

    buf[0] = reg | ST25R3911_WRITE_MODE;
    buf[1] = value;
    
    platformSpiTxRx(buf, NULL, 2);
 8000cde:	2202      	movs	r2, #2
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	a801      	add	r0, sp, #4
    buf[0] = reg | ST25R3911_WRITE_MODE;
 8000ce4:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = value;
 8000ce8:	f88d 7005 	strb.w	r7, [sp, #5]
    platformSpiTxRx(buf, NULL, 2);
 8000cec:	f003 f93a 	bl	8003f64 <spiTxRx>
    
    platformSpiDeselect();
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <st25r3911WriteRegister+0x80>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	f000 fe19 	bl	800192c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8000cfa:	7823      	ldrb	r3, [r4, #0]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	7023      	strb	r3, [r4, #0]
 8000d02:	b90b      	cbnz	r3, 8000d08 <st25r3911WriteRegister+0x60>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d04:	f8c8 6000 	str.w	r6, [r8]

    return;
}
 8000d08:	b002      	add	sp, #8
 8000d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ST25R3911_REG_OP_CONTROL_tx_en & value) != 0U)
 8000d0e:	f011 0208 	ands.w	r2, r1, #8
        platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8000d12:	bf18      	it	ne
 8000d14:	2201      	movne	r2, #1
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8000d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f000 fe05 	bl	800192c <HAL_GPIO_WritePin>
 8000d22:	e7c8      	b.n	8000cb6 <st25r3911WriteRegister+0xe>
 8000d24:	20000490 	.word	0x20000490
 8000d28:	48000400 	.word	0x48000400
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <st25r3911ClrRegisterBits>:

void st25r3911ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8000d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    platformProtectST25R391xComm();
 8000d34:	4d1c      	ldr	r5, [pc, #112]	; (8000da8 <st25r3911ClrRegisterBits+0x78>)
 8000d36:	782b      	ldrb	r3, [r5, #0]
 8000d38:	3301      	adds	r3, #1
{
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
    platformProtectST25R391xComm();
 8000d40:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d42:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d46:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000db0 <st25r3911ClrRegisterBits+0x80>
 8000d4a:	2640      	movs	r6, #64	; 0x40
 8000d4c:	f8c8 6080 	str.w	r6, [r8, #128]	; 0x80
 8000d50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d54:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8000d58:	4814      	ldr	r0, [pc, #80]	; (8000dac <st25r3911ClrRegisterBits+0x7c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	f000 fde5 	bl	800192c <HAL_GPIO_WritePin>
    platformSpiTxRx(buf, buf, 2);
 8000d62:	a901      	add	r1, sp, #4
    buf[0] = (reg | ST25R3911_READ_MODE);
 8000d64:	ea44 0306 	orr.w	r3, r4, r6
    platformSpiTxRx(buf, buf, 2);
 8000d68:	2202      	movs	r2, #2
 8000d6a:	4608      	mov	r0, r1
    buf[0] = (reg | ST25R3911_READ_MODE);
 8000d6c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f88d 3005 	strb.w	r3, [sp, #5]
    platformSpiTxRx(buf, buf, 2);
 8000d76:	f003 f8f5 	bl	8003f64 <spiTxRx>
    platformSpiDeselect();
 8000d7a:	480c      	ldr	r0, [pc, #48]	; (8000dac <st25r3911ClrRegisterBits+0x7c>)
      *value = buf[1];
 8000d7c:	f89d 9005 	ldrb.w	r9, [sp, #5]
    platformSpiDeselect();
 8000d80:	2201      	movs	r2, #1
 8000d82:	4631      	mov	r1, r6
 8000d84:	f000 fdd2 	bl	800192c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8000d88:	782b      	ldrb	r3, [r5, #0]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	702b      	strb	r3, [r5, #0]
 8000d90:	b90b      	cbnz	r3, 8000d96 <st25r3911ClrRegisterBits+0x66>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d92:	f8c8 6000 	str.w	r6, [r8]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
    tmp &= ~clr_mask;
    st25r3911WriteRegister(reg, tmp);
 8000d96:	ea29 0107 	bic.w	r1, r9, r7
 8000d9a:	4620      	mov	r0, r4
    
    return;
}
 8000d9c:	b003      	add	sp, #12
 8000d9e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    st25r3911WriteRegister(reg, tmp);
 8000da2:	f7ff bf81 	b.w	8000ca8 <st25r3911WriteRegister>
 8000da6:	bf00      	nop
 8000da8:	20000490 	.word	0x20000490
 8000dac:	48000400 	.word	0x48000400
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <st25r3911SetRegisterBits>:


void st25r3911SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8000db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    platformProtectST25R391xComm();
 8000db8:	4d1c      	ldr	r5, [pc, #112]	; (8000e2c <st25r3911SetRegisterBits+0x78>)
 8000dba:	782b      	ldrb	r3, [r5, #0]
 8000dbc:	3301      	adds	r3, #1
{
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	460f      	mov	r7, r1
    platformProtectST25R391xComm();
 8000dc4:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc6:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000dca:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000e34 <st25r3911SetRegisterBits+0x80>
 8000dce:	2640      	movs	r6, #64	; 0x40
 8000dd0:	f8c8 6080 	str.w	r6, [r8, #128]	; 0x80
 8000dd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd8:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8000ddc:	4814      	ldr	r0, [pc, #80]	; (8000e30 <st25r3911SetRegisterBits+0x7c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	4631      	mov	r1, r6
 8000de2:	f000 fda3 	bl	800192c <HAL_GPIO_WritePin>
    platformSpiTxRx(buf, buf, 2);
 8000de6:	a901      	add	r1, sp, #4
    buf[0] = (reg | ST25R3911_READ_MODE);
 8000de8:	ea44 0306 	orr.w	r3, r4, r6
    platformSpiTxRx(buf, buf, 2);
 8000dec:	2202      	movs	r2, #2
 8000dee:	4608      	mov	r0, r1
    buf[0] = (reg | ST25R3911_READ_MODE);
 8000df0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f88d 3005 	strb.w	r3, [sp, #5]
    platformSpiTxRx(buf, buf, 2);
 8000dfa:	f003 f8b3 	bl	8003f64 <spiTxRx>
    platformSpiDeselect();
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <st25r3911SetRegisterBits+0x7c>)
      *value = buf[1];
 8000e00:	f89d 9005 	ldrb.w	r9, [sp, #5]
    platformSpiDeselect();
 8000e04:	2201      	movs	r2, #1
 8000e06:	4631      	mov	r1, r6
 8000e08:	f000 fd90 	bl	800192c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8000e0c:	782b      	ldrb	r3, [r5, #0]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	702b      	strb	r3, [r5, #0]
 8000e14:	b90b      	cbnz	r3, 8000e1a <st25r3911SetRegisterBits+0x66>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e16:	f8c8 6000 	str.w	r6, [r8]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
    tmp |= set_mask;
    st25r3911WriteRegister(reg, tmp);
 8000e1a:	ea47 0109 	orr.w	r1, r7, r9
 8000e1e:	4620      	mov	r0, r4
    
    return;
}
 8000e20:	b003      	add	sp, #12
 8000e22:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    st25r3911WriteRegister(reg, tmp);
 8000e26:	f7ff bf3f 	b.w	8000ca8 <st25r3911WriteRegister>
 8000e2a:	bf00      	nop
 8000e2c:	20000490 	.word	0x20000490
 8000e30:	48000400 	.word	0x48000400
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <st25r3911ChangeRegisterBits>:

void st25r3911ChangeRegisterBits(uint8_t reg, uint8_t valueMask, uint8_t value)
{
 8000e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    platformProtectST25R391xComm();
 8000e3c:	4e1e      	ldr	r6, [pc, #120]	; (8000eb8 <st25r3911ChangeRegisterBits+0x80>)
 8000e3e:	7833      	ldrb	r3, [r6, #0]
 8000e40:	3301      	adds	r3, #1
{
 8000e42:	b082      	sub	sp, #8
 8000e44:	460d      	mov	r5, r1
 8000e46:	4604      	mov	r4, r0
    st25r3911ModifyRegister(reg, valueMask, (valueMask & value) );
 8000e48:	ea01 0902 	and.w	r9, r1, r2
    platformProtectST25R391xComm();
 8000e4c:	7033      	strb	r3, [r6, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e4e:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e52:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8000ec0 <st25r3911ChangeRegisterBits+0x88>
 8000e56:	2740      	movs	r7, #64	; 0x40
 8000e58:	f8ca 7080 	str.w	r7, [sl, #128]	; 0x80
 8000e5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e60:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8000e64:	4815      	ldr	r0, [pc, #84]	; (8000ebc <st25r3911ChangeRegisterBits+0x84>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	4639      	mov	r1, r7
 8000e6a:	f000 fd5f 	bl	800192c <HAL_GPIO_WritePin>
    platformSpiTxRx(buf, buf, 2);
 8000e6e:	a901      	add	r1, sp, #4
    buf[0] = (reg | ST25R3911_READ_MODE);
 8000e70:	ea44 0307 	orr.w	r3, r4, r7
    platformSpiTxRx(buf, buf, 2);
 8000e74:	2202      	movs	r2, #2
 8000e76:	4608      	mov	r0, r1
    buf[0] = (reg | ST25R3911_READ_MODE);
 8000e78:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f88d 3005 	strb.w	r3, [sp, #5]
    platformSpiTxRx(buf, buf, 2);
 8000e82:	f003 f86f 	bl	8003f64 <spiTxRx>
    platformSpiDeselect();
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <st25r3911ChangeRegisterBits+0x84>)
      *value = buf[1];
 8000e88:	f89d 8005 	ldrb.w	r8, [sp, #5]
    platformSpiDeselect();
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	4639      	mov	r1, r7
 8000e90:	f000 fd4c 	bl	800192c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8000e94:	7833      	ldrb	r3, [r6, #0]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	7033      	strb	r3, [r6, #0]
 8000e9c:	b90b      	cbnz	r3, 8000ea2 <st25r3911ChangeRegisterBits+0x6a>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e9e:	f8ca 7000 	str.w	r7, [sl]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);

    /* mask out the bits we don't want to change */
    tmp &= ~clr_mask;
 8000ea2:	ea28 0105 	bic.w	r1, r8, r5
    /* set the new value */
    tmp |= set_mask;
    st25r3911WriteRegister(reg, tmp);
 8000ea6:	ea49 0101 	orr.w	r1, r9, r1
 8000eaa:	4620      	mov	r0, r4
}
 8000eac:	b002      	add	sp, #8
 8000eae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    st25r3911WriteRegister(reg, tmp);
 8000eb2:	f7ff bef9 	b.w	8000ca8 <st25r3911WriteRegister>
 8000eb6:	bf00      	nop
 8000eb8:	20000490 	.word	0x20000490
 8000ebc:	48000400 	.word	0x48000400
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <st25r3911ModifyRegister>:
{
 8000ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    platformProtectST25R391xComm();
 8000ec8:	4d1d      	ldr	r5, [pc, #116]	; (8000f40 <st25r3911ModifyRegister+0x7c>)
 8000eca:	782b      	ldrb	r3, [r5, #0]
 8000ecc:	3301      	adds	r3, #1
{
 8000ece:	b082      	sub	sp, #8
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	4689      	mov	r9, r1
 8000ed4:	4690      	mov	r8, r2
    platformProtectST25R391xComm();
 8000ed6:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed8:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000edc:	f8df a068 	ldr.w	sl, [pc, #104]	; 8000f48 <st25r3911ModifyRegister+0x84>
 8000ee0:	2640      	movs	r6, #64	; 0x40
 8000ee2:	f8ca 6080 	str.w	r6, [sl, #128]	; 0x80
 8000ee6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eea:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8000eee:	4815      	ldr	r0, [pc, #84]	; (8000f44 <st25r3911ModifyRegister+0x80>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	f000 fd1a 	bl	800192c <HAL_GPIO_WritePin>
    platformSpiTxRx(buf, buf, 2);
 8000ef8:	a901      	add	r1, sp, #4
    buf[0] = (reg | ST25R3911_READ_MODE);
 8000efa:	ea44 0306 	orr.w	r3, r4, r6
    platformSpiTxRx(buf, buf, 2);
 8000efe:	2202      	movs	r2, #2
 8000f00:	4608      	mov	r0, r1
    buf[0] = (reg | ST25R3911_READ_MODE);
 8000f02:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f88d 3005 	strb.w	r3, [sp, #5]
    platformSpiTxRx(buf, buf, 2);
 8000f0c:	f003 f82a 	bl	8003f64 <spiTxRx>
    platformSpiDeselect();
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <st25r3911ModifyRegister+0x80>)
      *value = buf[1];
 8000f12:	f89d 7005 	ldrb.w	r7, [sp, #5]
    platformSpiDeselect();
 8000f16:	2201      	movs	r2, #1
 8000f18:	4631      	mov	r1, r6
 8000f1a:	f000 fd07 	bl	800192c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8000f1e:	782b      	ldrb	r3, [r5, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	702b      	strb	r3, [r5, #0]
 8000f26:	b90b      	cbnz	r3, 8000f2c <st25r3911ModifyRegister+0x68>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f28:	f8ca 6000 	str.w	r6, [sl]
    tmp &= ~clr_mask;
 8000f2c:	ea27 0109 	bic.w	r1, r7, r9
    st25r3911WriteRegister(reg, tmp);
 8000f30:	ea48 0101 	orr.w	r1, r8, r1
 8000f34:	4620      	mov	r0, r4

    return;
}
 8000f36:	b002      	add	sp, #8
 8000f38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    st25r3911WriteRegister(reg, tmp);
 8000f3c:	f7ff beb4 	b.w	8000ca8 <st25r3911WriteRegister>
 8000f40:	20000490 	.word	0x20000490
 8000f44:	48000400 	.word	0x48000400
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <st25r3911ChangeTestRegisterBits>:

void st25r3911ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8000f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    platformProtectST25R391xComm();
 8000f50:	4c34      	ldr	r4, [pc, #208]	; (8001024 <st25r3911ChangeTestRegisterBits+0xd8>)
 8000f52:	7823      	ldrb	r3, [r4, #0]
 8000f54:	3301      	adds	r3, #1
{
 8000f56:	b082      	sub	sp, #8
 8000f58:	4607      	mov	r7, r0
 8000f5a:	460d      	mov	r5, r1
 8000f5c:	4690      	mov	r8, r2
    platformProtectST25R391xComm();
 8000f5e:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f60:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800102c <st25r3911ChangeTestRegisterBits+0xe0>
 8000f68:	f04f 0940 	mov.w	r9, #64	; 0x40
 8000f6c:	f8ca 9080 	str.w	r9, [sl, #128]	; 0x80
 8000f70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f74:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8000f78:	482b      	ldr	r0, [pc, #172]	; (8001028 <st25r3911ChangeTestRegisterBits+0xdc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	f000 fcd5 	bl	800192c <HAL_GPIO_WritePin>
    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8000f82:	23fc      	movs	r3, #252	; 0xfc
    platformSpiTxRx(buf, buf, 3);
 8000f84:	a901      	add	r1, sp, #4
    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8000f86:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = (reg | ST25R3911_READ_MODE);
 8000f8a:	ea47 0309 	orr.w	r3, r7, r9
    platformSpiTxRx(buf, buf, 3);
 8000f8e:	2203      	movs	r2, #3
    buf[1] = (reg | ST25R3911_READ_MODE);
 8000f90:	f88d 3005 	strb.w	r3, [sp, #5]
    platformSpiTxRx(buf, buf, 3);
 8000f94:	4608      	mov	r0, r1
    buf[2] = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f88d 3006 	strb.w	r3, [sp, #6]
    platformSpiTxRx(buf, buf, 3);
 8000f9c:	f002 ffe2 	bl	8003f64 <spiTxRx>
    platformSpiDeselect();
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4821      	ldr	r0, [pc, #132]	; (8001028 <st25r3911ChangeTestRegisterBits+0xdc>)
      *value = buf[2];
 8000fa4:	f89d 6006 	ldrb.w	r6, [sp, #6]
    platformSpiDeselect();
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f000 fcbf 	bl	800192c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8000fae:	7823      	ldrb	r3, [r4, #0]
 8000fb0:	1e5a      	subs	r2, r3, #1
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	7022      	strb	r2, [r4, #0]
 8000fb6:	b922      	cbnz	r2, 8000fc2 <st25r3911ChangeTestRegisterBits+0x76>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fb8:	f8ca 9000 	str.w	r9, [sl]
    platformProtectST25R391xComm();
 8000fbc:	7823      	ldrb	r3, [r4, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
    
    /* Read current reg value */
    st25r3911ReadTestRegister(reg, &rdVal);
    
    /* Compute new value */
    wrVal  = (rdVal & ~valueMask);
 8000fc2:	ea26 0605 	bic.w	r6, r6, r5
    wrVal |= (value & valueMask);
 8000fc6:	ea05 0508 	and.w	r5, r5, r8
    platformProtectST25R391xComm();
 8000fca:	7023      	strb	r3, [r4, #0]
    wrVal |= (value & valueMask);
 8000fcc:	4335      	orrs	r5, r6
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fd2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800102c <st25r3911ChangeTestRegisterBits+0xe0>
 8000fd6:	2640      	movs	r6, #64	; 0x40
 8000fd8:	f8c8 6080 	str.w	r6, [r8, #128]	; 0x80
 8000fdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fe0:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8000fe4:	4810      	ldr	r0, [pc, #64]	; (8001028 <st25r3911ChangeTestRegisterBits+0xdc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4631      	mov	r1, r6
 8000fea:	f000 fc9f 	bl	800192c <HAL_GPIO_WritePin>
    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8000fee:	23fc      	movs	r3, #252	; 0xfc
    platformSpiTxRx(buf, NULL, 3);
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	a801      	add	r0, sp, #4
    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8000ff6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = (reg | ST25R3911_WRITE_MODE);
 8000ffa:	f88d 7005 	strb.w	r7, [sp, #5]
    buf[2] = value;
 8000ffe:	f88d 5006 	strb.w	r5, [sp, #6]
    platformSpiTxRx(buf, NULL, 3);
 8001002:	f002 ffaf 	bl	8003f64 <spiTxRx>
    platformSpiDeselect();
 8001006:	4808      	ldr	r0, [pc, #32]	; (8001028 <st25r3911ChangeTestRegisterBits+0xdc>)
 8001008:	2201      	movs	r2, #1
 800100a:	4631      	mov	r1, r6
 800100c:	f000 fc8e 	bl	800192c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	3b01      	subs	r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	7023      	strb	r3, [r4, #0]
 8001018:	b90b      	cbnz	r3, 800101e <st25r3911ChangeTestRegisterBits+0xd2>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800101a:	f8c8 6000 	str.w	r6, [r8]
    
    /* Write new reg value */
    st25r3911WriteTestRegister(reg, wrVal );
    
    return;
}
 800101e:	b002      	add	sp, #8
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	20000490 	.word	0x20000490
 8001028:	48000400 	.word	0x48000400
 800102c:	e000e100 	.word	0xe000e100

08001030 <st25r3911WriteFifo>:
    return;
}


void st25r3911WriteFifo(const uint8_t* values, uint8_t length)
{
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001034:	b082      	sub	sp, #8
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_LOAD;
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	f88d 3007 	strb.w	r3, [sp, #7]
#endif  /* !ST25R391X_COM_SINGLETXRX */

    if (length > 0U)
 800103c:	b911      	cbnz	r1, 8001044 <st25r3911WriteFifo+0x14>
        platformSpiDeselect();
        platformUnprotectST25R391xComm();
    }

    return;
}
 800103e:	b002      	add	sp, #8
 8001040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        platformProtectST25R391xComm();
 8001044:	4e18      	ldr	r6, [pc, #96]	; (80010a8 <st25r3911WriteFifo+0x78>)
 8001046:	7833      	ldrb	r3, [r6, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4605      	mov	r5, r0
 800104c:	460c      	mov	r4, r1
 800104e:	7033      	strb	r3, [r6, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001050:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001054:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80010b0 <st25r3911WriteFifo+0x80>
 8001058:	2740      	movs	r7, #64	; 0x40
 800105a:	f8c8 7080 	str.w	r7, [r8, #128]	; 0x80
 800105e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001062:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 8001066:	4811      	ldr	r0, [pc, #68]	; (80010ac <st25r3911WriteFifo+0x7c>)
 8001068:	2200      	movs	r2, #0
 800106a:	4639      	mov	r1, r7
 800106c:	f000 fc5e 	bl	800192c <HAL_GPIO_WritePin>
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 8001070:	2100      	movs	r1, #0
 8001072:	2201      	movs	r2, #1
 8001074:	f10d 0007 	add.w	r0, sp, #7
 8001078:	f002 ff74 	bl	8003f64 <spiTxRx>
        platformSpiTxRx( values, NULL, length );
 800107c:	4622      	mov	r2, r4
 800107e:	2100      	movs	r1, #0
 8001080:	4628      	mov	r0, r5
 8001082:	f002 ff6f 	bl	8003f64 <spiTxRx>
        platformSpiDeselect();
 8001086:	4809      	ldr	r0, [pc, #36]	; (80010ac <st25r3911WriteFifo+0x7c>)
 8001088:	2201      	movs	r2, #1
 800108a:	4639      	mov	r1, r7
 800108c:	f000 fc4e 	bl	800192c <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8001090:	7833      	ldrb	r3, [r6, #0]
 8001092:	3b01      	subs	r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	7033      	strb	r3, [r6, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1d0      	bne.n	800103e <st25r3911WriteFifo+0xe>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800109c:	f8c8 7000 	str.w	r7, [r8]
}
 80010a0:	b002      	add	sp, #8
 80010a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010a6:	bf00      	nop
 80010a8:	20000490 	.word	0x20000490
 80010ac:	48000400 	.word	0x48000400
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <st25r3911ReadFifo>:

void st25r3911ReadFifo(uint8_t* buf, uint8_t length)
{
 80010b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010b8:	b082      	sub	sp, #8
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_READ;
 80010ba:	23bf      	movs	r3, #191	; 0xbf
 80010bc:	f88d 3007 	strb.w	r3, [sp, #7]
#endif  /* !ST25R391X_COM_SINGLETXRX */
    
    if(length > 0U)
 80010c0:	b911      	cbnz	r1, 80010c8 <st25r3911ReadFifo+0x14>
        platformSpiDeselect();
        platformUnprotectST25R391xComm();
    }

    return;
}
 80010c2:	b002      	add	sp, #8
 80010c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        platformProtectST25R391xComm();
 80010c8:	4e18      	ldr	r6, [pc, #96]	; (800112c <st25r3911ReadFifo+0x78>)
 80010ca:	7833      	ldrb	r3, [r6, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	4605      	mov	r5, r0
 80010d0:	460c      	mov	r4, r1
 80010d2:	7033      	strb	r3, [r6, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010d4:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010d8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8001134 <st25r3911ReadFifo+0x80>
 80010dc:	2740      	movs	r7, #64	; 0x40
 80010de:	f8c8 7080 	str.w	r7, [r8, #128]	; 0x80
 80010e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010e6:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <st25r3911ReadFifo+0x7c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	4639      	mov	r1, r7
 80010f0:	f000 fc1c 	bl	800192c <HAL_GPIO_WritePin>
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 80010f4:	2201      	movs	r2, #1
 80010f6:	2100      	movs	r1, #0
 80010f8:	f10d 0007 	add.w	r0, sp, #7
 80010fc:	f002 ff32 	bl	8003f64 <spiTxRx>
        platformSpiTxRx( NULL, buf, length );
 8001100:	4622      	mov	r2, r4
 8001102:	4629      	mov	r1, r5
 8001104:	2000      	movs	r0, #0
 8001106:	f002 ff2d 	bl	8003f64 <spiTxRx>
        platformSpiDeselect();
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <st25r3911ReadFifo+0x7c>)
 800110c:	2201      	movs	r2, #1
 800110e:	4639      	mov	r1, r7
 8001110:	f000 fc0c 	bl	800192c <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8001114:	7833      	ldrb	r3, [r6, #0]
 8001116:	3b01      	subs	r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	7033      	strb	r3, [r6, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1d0      	bne.n	80010c2 <st25r3911ReadFifo+0xe>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001120:	f8c8 7000 	str.w	r7, [r8]
}
 8001124:	b002      	add	sp, #8
 8001126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800112a:	bf00      	nop
 800112c:	20000490 	.word	0x20000490
 8001130:	48000400 	.word	0x48000400
 8001134:	e000e100 	.word	0xe000e100

08001138 <st25r3911ExecuteCommand>:

void st25r3911ExecuteCommand( uint8_t cmd )
{
 8001138:	b570      	push	{r4, r5, r6, lr}
    uint8_t tmpCmd;                                    /* MISRA 17.8 */
    
#ifdef PLATFORM_LED_FIELD_PIN
    if ( (cmd >= ST25R3911_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3911_CMD_RESPONSE_RF_COLLISION_0))
 800113a:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b06      	cmp	r3, #6
{
 8001142:	b082      	sub	sp, #8
 8001144:	4604      	mov	r4, r0
    if ( (cmd >= ST25R3911_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3911_CMD_RESPONSE_RF_COLLISION_0))
 8001146:	d929      	bls.n	800119c <st25r3911ExecuteCommand+0x64>
    }
#endif /* PLATFORM_LED_FIELD_PIN */
    
    tmpCmd = (cmd | ST25R3911_CMD_MODE);

    platformProtectST25R391xComm();
 8001148:	4d18      	ldr	r5, [pc, #96]	; (80011ac <st25r3911ExecuteCommand+0x74>)
 800114a:	782b      	ldrb	r3, [r5, #0]
    tmpCmd = (cmd | ST25R3911_CMD_MODE);
 800114c:	f064 043f 	orn	r4, r4, #63	; 0x3f
    platformProtectST25R391xComm();
 8001150:	3301      	adds	r3, #1
    tmpCmd = (cmd | ST25R3911_CMD_MODE);
 8001152:	f88d 4007 	strb.w	r4, [sp, #7]
    platformProtectST25R391xComm();
 8001156:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001158:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800115c:	4e14      	ldr	r6, [pc, #80]	; (80011b0 <st25r3911ExecuteCommand+0x78>)
 800115e:	2440      	movs	r4, #64	; 0x40
 8001160:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
 8001164:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001168:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <st25r3911ExecuteCommand+0x7c>)
 800116e:	2200      	movs	r2, #0
 8001170:	4621      	mov	r1, r4
 8001172:	f000 fbdb 	bl	800192c <HAL_GPIO_WritePin>
    
    platformSpiTxRx( &tmpCmd, NULL, ST25R3911_CMD_LEN );
 8001176:	2201      	movs	r2, #1
 8001178:	2100      	movs	r1, #0
 800117a:	f10d 0007 	add.w	r0, sp, #7
 800117e:	f002 fef1 	bl	8003f64 <spiTxRx>
    
    platformSpiDeselect();
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <st25r3911ExecuteCommand+0x7c>)
 8001184:	2201      	movs	r2, #1
 8001186:	4621      	mov	r1, r4
 8001188:	f000 fbd0 	bl	800192c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 800118c:	782b      	ldrb	r3, [r5, #0]
 800118e:	3b01      	subs	r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	702b      	strb	r3, [r5, #0]
 8001194:	b903      	cbnz	r3, 8001198 <st25r3911ExecuteCommand+0x60>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001196:	6034      	str	r4, [r6, #0]

    return;
}
 8001198:	b002      	add	sp, #8
 800119a:	bd70      	pop	{r4, r5, r6, pc}
        platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f000 fbc1 	bl	800192c <HAL_GPIO_WritePin>
 80011aa:	e7cd      	b.n	8001148 <st25r3911ExecuteCommand+0x10>
 80011ac:	20000490 	.word	0x20000490
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	48000400 	.word	0x48000400

080011b8 <st25r3911ExecuteCommands>:


void st25r3911ExecuteCommands(const uint8_t *cmds, uint8_t length)
{
 80011b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    platformProtectST25R391xComm();
 80011bc:	4c14      	ldr	r4, [pc, #80]	; (8001210 <st25r3911ExecuteCommands+0x58>)
 80011be:	7823      	ldrb	r3, [r4, #0]
 80011c0:	3301      	adds	r3, #1
{
 80011c2:	4606      	mov	r6, r0
 80011c4:	460f      	mov	r7, r1
    platformProtectST25R391xComm();
 80011c6:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80011c8:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011cc:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8001218 <st25r3911ExecuteCommands+0x60>
 80011d0:	2540      	movs	r5, #64	; 0x40
 80011d2:	f8c8 5080 	str.w	r5, [r8, #128]	; 0x80
 80011d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011da:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <st25r3911ExecuteCommands+0x5c>)
 80011e0:	4629      	mov	r1, r5
 80011e2:	2200      	movs	r2, #0
 80011e4:	f000 fba2 	bl	800192c <HAL_GPIO_WritePin>
    
    platformSpiTxRx( cmds, NULL, length );
 80011e8:	463a      	mov	r2, r7
 80011ea:	2100      	movs	r1, #0
 80011ec:	4630      	mov	r0, r6
 80011ee:	f002 feb9 	bl	8003f64 <spiTxRx>
    
    platformSpiDeselect();
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <st25r3911ExecuteCommands+0x5c>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	4629      	mov	r1, r5
 80011f8:	f000 fb98 	bl	800192c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 80011fc:	7823      	ldrb	r3, [r4, #0]
 80011fe:	3b01      	subs	r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	7023      	strb	r3, [r4, #0]
 8001204:	b90b      	cbnz	r3, 800120a <st25r3911ExecuteCommands+0x52>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001206:	f8c8 5000 	str.w	r5, [r8]

    return;
}
 800120a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800120e:	bf00      	nop
 8001210:	20000490 	.word	0x20000490
 8001214:	48000400 	.word	0x48000400
 8001218:	e000e100 	.word	0xe000e100

0800121c <st25r3911InitInterrupts>:
void st25r3911InitInterrupts( void )
{
    platformIrqST25R3911PinInitialize();
    platformIrqST25R3911SetCallback( st25r3911Isr );
    
    st25r3911interrupt.callback     = NULL;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <st25r3911InitInterrupts+0x18>)
 800121e:	2200      	movs	r2, #0
#ifdef PLATFORM_LED_RX_PIN
    platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
#endif /* PLATFORM_LED_RX_PIN */

#ifdef PLATFORM_LED_FIELD_PIN
    platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8001220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    st25r3911interrupt.callback     = NULL;
 8001228:	605a      	str	r2, [r3, #4]
    st25r3911interrupt.prevCallback = NULL;
 800122a:	601a      	str	r2, [r3, #0]
    st25r3911interrupt.status       = ST25R3911_IRQ_MASK_NONE;
 800122c:	609a      	str	r2, [r3, #8]
    st25r3911interrupt.mask         = ST25R3911_IRQ_MASK_NONE;
 800122e:	60da      	str	r2, [r3, #12]
    platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8001230:	f000 bb7c 	b.w	800192c <HAL_GPIO_WritePin>
 8001234:	200000f8 	.word	0x200000f8

08001238 <st25r3911CheckForReceivedInterrupts>:
        st25r3911interrupt.callback();
    }
}

void st25r3911CheckForReceivedInterrupts( void )
{
 8001238:	b530      	push	{r4, r5, lr}
 800123a:	b083      	sub	sp, #12
    uint8_t  iregs[ST25R3911_INT_REGS_LEN];
    uint32_t irqStatus; 

    irqStatus = ST25R3911_IRQ_MASK_NONE;
    ST_MEMSET( iregs, (int32_t)(ST25R3911_IRQ_MASK_ALL & 0xFFU), ST25R3911_INT_REGS_LEN );  /* MISRA 10.3 */
 800123c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001240:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001244:	f88d 3006 	strb.w	r3, [sp, #6]
    irqStatus = ST25R3911_IRQ_MASK_NONE;
 8001248:	2500      	movs	r5, #0
        
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 800124a:	e009      	b.n	8001260 <st25r3911CheckForReceivedInterrupts+0x28>
        }
#endif /* PLATFORM_LED_RX_PIN */
       
        irqStatus |= (uint32_t)iregs[0];
        irqStatus |= (uint32_t)iregs[1]<<8;
        irqStatus |= (uint32_t)iregs[2]<<16;
 800124c:	f89d 3006 	ldrb.w	r3, [sp, #6]
        irqStatus |= (uint32_t)iregs[1]<<8;
 8001250:	f89d 1005 	ldrb.w	r1, [sp, #5]
        irqStatus |= (uint32_t)iregs[2]<<16;
 8001254:	041b      	lsls	r3, r3, #16
 8001256:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800125a:	432b      	orrs	r3, r5
 800125c:	ea42 0503 	orr.w	r5, r2, r3
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8001260:	2101      	movs	r1, #1
 8001262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001266:	f000 fb5b 	bl	8001920 <HAL_GPIO_ReadPin>
 800126a:	4604      	mov	r4, r0
 800126c:	2c01      	cmp	r4, #1
        st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, sizeof(iregs));
 800126e:	f04f 0203 	mov.w	r2, #3
 8001272:	a901      	add	r1, sp, #4
 8001274:	f04f 0017 	mov.w	r0, #23
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8001278:	d10f      	bne.n	800129a <st25r3911CheckForReceivedInterrupts+0x62>
        st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, sizeof(iregs));
 800127a:	f7ff fc99 	bl	8000bb0 <st25r3911ReadMultipleRegisters>
        if ((iregs[0] & ST25R3911_IRQ_MASK_TXE) != 0U)
 800127e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001282:	0713      	lsls	r3, r2, #28
 8001284:	d5e2      	bpl.n	800124c <st25r3911CheckForReceivedInterrupts+0x14>
            platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8001286:	4622      	mov	r2, r4
 8001288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f000 fb4c 	bl	800192c <HAL_GPIO_WritePin>
        irqStatus |= (uint32_t)iregs[0];
 8001294:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001298:	e7d8      	b.n	800124c <st25r3911CheckForReceivedInterrupts+0x14>
    }
    
    /* Forward all interrupts, even masked ones to application. */
    platformProtectST25R391xIrqStatus();
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <st25r3911CheckForReceivedInterrupts+0x98>)
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	3201      	adds	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80012a2:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <st25r3911CheckForReceivedInterrupts+0x9c>)
 80012a8:	2440      	movs	r4, #64	; 0x40
 80012aa:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 80012ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012b2:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status |= irqStatus;
    platformUnprotectST25R391xIrqStatus();
 80012b6:	781a      	ldrb	r2, [r3, #0]
    st25r3911interrupt.status |= irqStatus;
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <st25r3911CheckForReceivedInterrupts+0xa0>)
    platformUnprotectST25R391xIrqStatus();
 80012ba:	3a01      	subs	r2, #1
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	701a      	strb	r2, [r3, #0]
    st25r3911interrupt.status |= irqStatus;
 80012c0:	688b      	ldr	r3, [r1, #8]
 80012c2:	432b      	orrs	r3, r5
 80012c4:	608b      	str	r3, [r1, #8]
    platformUnprotectST25R391xIrqStatus();
 80012c6:	b902      	cbnz	r2, 80012ca <st25r3911CheckForReceivedInterrupts+0x92>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012c8:	6004      	str	r4, [r0, #0]
}
 80012ca:	b003      	add	sp, #12
 80012cc:	bd30      	pop	{r4, r5, pc}
 80012ce:	bf00      	nop
 80012d0:	20000490 	.word	0x20000490
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	200000f8 	.word	0x200000f8

080012dc <st25r3911Isr>:
{
 80012dc:	b510      	push	{r4, lr}
    st25r3911CheckForReceivedInterrupts();
 80012de:	f7ff ffab 	bl	8001238 <st25r3911CheckForReceivedInterrupts>
    if (NULL != st25r3911interrupt.callback)
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <st25r3911Isr+0x18>)
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	b11a      	cbz	r2, 80012f0 <st25r3911Isr+0x14>
}
 80012e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        st25r3911interrupt.callback();
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4718      	bx	r3
}
 80012f0:	bd10      	pop	{r4, pc}
 80012f2:	bf00      	nop
 80012f4:	200000f8 	.word	0x200000f8

080012f8 <st25r3911WaitForInterruptsTimed>:
    return;
}


uint32_t st25r3911WaitForInterruptsTimed(uint32_t mask, uint16_t tmo)
{
 80012f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fa:	4605      	mov	r5, r0
    uint32_t tmr;
    uint32_t status;
   
    tmr = platformTimerCreate(tmo);
 80012fc:	4608      	mov	r0, r1
{
 80012fe:	460c      	mov	r4, r1
    tmr = platformTimerCreate(tmo);
 8001300:	f000 f8d2 	bl	80014a8 <timerCalculateTimer>
 8001304:	4e17      	ldr	r6, [pc, #92]	; (8001364 <st25r3911WaitForInterruptsTimed+0x6c>)
 8001306:	4607      	mov	r7, r0
 8001308:	bb1c      	cbnz	r4, 8001352 <st25r3911WaitForInterruptsTimed+0x5a>
    do 
    {
        status = (st25r3911interrupt.status & mask);
 800130a:	68b4      	ldr	r4, [r6, #8]
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 800130c:	4638      	mov	r0, r7
        status = (st25r3911interrupt.status & mask);
 800130e:	402c      	ands	r4, r5
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 8001310:	f000 f8d0 	bl	80014b4 <timerIsExpired>
 8001314:	2c00      	cmp	r4, #0
 8001316:	d0f8      	beq.n	800130a <st25r3911WaitForInterruptsTimed+0x12>

    status = st25r3911interrupt.status & mask;
    
    platformProtectST25R391xIrqStatus();
 8001318:	4a13      	ldr	r2, [pc, #76]	; (8001368 <st25r3911WaitForInterruptsTimed+0x70>)
    status = st25r3911interrupt.status & mask;
 800131a:	68b0      	ldr	r0, [r6, #8]
    platformProtectST25R391xIrqStatus();
 800131c:	7813      	ldrb	r3, [r2, #0]
 800131e:	3301      	adds	r3, #1
    status = st25r3911interrupt.status & mask;
 8001320:	4028      	ands	r0, r5
    platformProtectST25R391xIrqStatus();
 8001322:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001324:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001328:	4910      	ldr	r1, [pc, #64]	; (800136c <st25r3911WaitForInterruptsTimed+0x74>)
 800132a:	2440      	movs	r4, #64	; 0x40
 800132c:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 8001330:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001334:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status &= ~status;
    platformUnprotectST25R391xIrqStatus();
 8001338:	7813      	ldrb	r3, [r2, #0]
 800133a:	3b01      	subs	r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	7013      	strb	r3, [r2, #0]
    st25r3911interrupt.status &= ~status;
 8001340:	68b2      	ldr	r2, [r6, #8]
 8001342:	ea22 0200 	bic.w	r2, r2, r0
 8001346:	60b2      	str	r2, [r6, #8]
    platformUnprotectST25R391xIrqStatus();
 8001348:	b903      	cbnz	r3, 800134c <st25r3911WaitForInterruptsTimed+0x54>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800134a:	600c      	str	r4, [r1, #0]
    
    return status;
}
 800134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 800134e:	2c00      	cmp	r4, #0
 8001350:	d1e2      	bne.n	8001318 <st25r3911WaitForInterruptsTimed+0x20>
        status = (st25r3911interrupt.status & mask);
 8001352:	68b4      	ldr	r4, [r6, #8]
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 8001354:	4638      	mov	r0, r7
        status = (st25r3911interrupt.status & mask);
 8001356:	402c      	ands	r4, r5
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 8001358:	f000 f8ac 	bl	80014b4 <timerIsExpired>
 800135c:	2800      	cmp	r0, #0
 800135e:	d1db      	bne.n	8001318 <st25r3911WaitForInterruptsTimed+0x20>
 8001360:	e7f5      	b.n	800134e <st25r3911WaitForInterruptsTimed+0x56>
 8001362:	bf00      	nop
 8001364:	200000f8 	.word	0x200000f8
 8001368:	20000490 	.word	0x20000490
 800136c:	e000e100 	.word	0xe000e100

08001370 <st25r3911GetInterrupt>:

uint32_t st25r3911GetInterrupt(uint32_t mask)
{
    uint32_t irqs;

    irqs = (st25r3911interrupt.status & mask);
 8001370:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <st25r3911GetInterrupt+0x40>)
 8001372:	6893      	ldr	r3, [r2, #8]
    if (irqs != ST25R3911_IRQ_MASK_NONE)
 8001374:	4018      	ands	r0, r3
 8001376:	d01a      	beq.n	80013ae <st25r3911GetInterrupt+0x3e>
{
 8001378:	b430      	push	{r4, r5}
    {
        platformProtectST25R391xIrqStatus();
 800137a:	490e      	ldr	r1, [pc, #56]	; (80013b4 <st25r3911GetInterrupt+0x44>)
 800137c:	780b      	ldrb	r3, [r1, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001382:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001386:	4c0c      	ldr	r4, [pc, #48]	; (80013b8 <st25r3911GetInterrupt+0x48>)
 8001388:	2540      	movs	r5, #64	; 0x40
 800138a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800138e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001392:	f3bf 8f6f 	isb	sy
        st25r3911interrupt.status &= ~irqs;
        platformUnprotectST25R391xIrqStatus();
 8001396:	780b      	ldrb	r3, [r1, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	700b      	strb	r3, [r1, #0]
        st25r3911interrupt.status &= ~irqs;
 800139e:	6891      	ldr	r1, [r2, #8]
 80013a0:	ea21 0100 	bic.w	r1, r1, r0
 80013a4:	6091      	str	r1, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 80013a6:	b903      	cbnz	r3, 80013aa <st25r3911GetInterrupt+0x3a>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013a8:	6025      	str	r5, [r4, #0]
    }
    return irqs;
}
 80013aa:	bc30      	pop	{r4, r5}
 80013ac:	4770      	bx	lr
 80013ae:	4770      	bx	lr
 80013b0:	200000f8 	.word	0x200000f8
 80013b4:	20000490 	.word	0x20000490
 80013b8:	e000e100 	.word	0xe000e100

080013bc <st25r3911EnableInterrupts>:

void st25r3911EnableInterrupts(uint32_t mask)
{
 80013bc:	b538      	push	{r3, r4, r5, lr}
    old_mask = st25r3911interrupt.mask;
 80013be:	4d12      	ldr	r5, [pc, #72]	; (8001408 <st25r3911EnableInterrupts+0x4c>)
 80013c0:	68ec      	ldr	r4, [r5, #12]
    st25r3911interrupt.mask &= ~clr_mask;
 80013c2:	68eb      	ldr	r3, [r5, #12]
 80013c4:	ea23 0300 	bic.w	r3, r3, r0
 80013c8:	60eb      	str	r3, [r5, #12]
 80013ca:	4004      	ands	r4, r0
    st25r3911interrupt.mask |= set_mask;
 80013cc:	68ea      	ldr	r2, [r5, #12]
 80013ce:	60ea      	str	r2, [r5, #12]
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 80013d0:	b2e3      	uxtb	r3, r4
 80013d2:	b123      	cbz	r3, 80013de <st25r3911EnableInterrupts+0x22>
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 80013d4:	68e9      	ldr	r1, [r5, #12]
 80013d6:	2014      	movs	r0, #20
 80013d8:	b2c9      	uxtb	r1, r1
 80013da:	f7ff fc65 	bl	8000ca8 <st25r3911WriteRegister>
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 80013de:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
 80013e2:	d005      	beq.n	80013f0 <st25r3911EnableInterrupts+0x34>
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 80013e4:	68e9      	ldr	r1, [r5, #12]
 80013e6:	2015      	movs	r0, #21
 80013e8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80013ec:	f7ff fc5c 	bl	8000ca8 <st25r3911WriteRegister>
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 80013f0:	f414 0f7f 	tst.w	r4, #16711680	; 0xff0000
 80013f4:	d007      	beq.n	8001406 <st25r3911EnableInterrupts+0x4a>
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 80013f6:	68e9      	ldr	r1, [r5, #12]
 80013f8:	2016      	movs	r0, #22
    st25r3911ModifyInterrupts(mask,0);
}
 80013fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 80013fe:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8001402:	f7ff bc51 	b.w	8000ca8 <st25r3911WriteRegister>
}
 8001406:	bd38      	pop	{r3, r4, r5, pc}
 8001408:	200000f8 	.word	0x200000f8

0800140c <st25r3911DisableInterrupts>:

void st25r3911DisableInterrupts(uint32_t mask)
{
 800140c:	b538      	push	{r3, r4, r5, lr}
    old_mask = st25r3911interrupt.mask;
 800140e:	4c12      	ldr	r4, [pc, #72]	; (8001458 <st25r3911DisableInterrupts+0x4c>)
 8001410:	68e5      	ldr	r5, [r4, #12]
    st25r3911interrupt.mask &= ~clr_mask;
 8001412:	68e3      	ldr	r3, [r4, #12]
 8001414:	60e3      	str	r3, [r4, #12]
    st25r3911interrupt.mask |= set_mask;
 8001416:	68e3      	ldr	r3, [r4, #12]
    new_mask = (~old_mask & set_mask) | (old_mask & clr_mask);
 8001418:	ea20 0505 	bic.w	r5, r0, r5
    st25r3911interrupt.mask |= set_mask;
 800141c:	4318      	orrs	r0, r3
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 800141e:	b2eb      	uxtb	r3, r5
    st25r3911interrupt.mask |= set_mask;
 8001420:	60e0      	str	r0, [r4, #12]
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 8001422:	b123      	cbz	r3, 800142e <st25r3911DisableInterrupts+0x22>
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 8001424:	68e1      	ldr	r1, [r4, #12]
 8001426:	2014      	movs	r0, #20
 8001428:	b2c9      	uxtb	r1, r1
 800142a:	f7ff fc3d 	bl	8000ca8 <st25r3911WriteRegister>
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 800142e:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 8001432:	d005      	beq.n	8001440 <st25r3911DisableInterrupts+0x34>
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 8001434:	68e1      	ldr	r1, [r4, #12]
 8001436:	2015      	movs	r0, #21
 8001438:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800143c:	f7ff fc34 	bl	8000ca8 <st25r3911WriteRegister>
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 8001440:	f415 0f7f 	tst.w	r5, #16711680	; 0xff0000
 8001444:	d007      	beq.n	8001456 <st25r3911DisableInterrupts+0x4a>
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 8001446:	68e1      	ldr	r1, [r4, #12]
 8001448:	2016      	movs	r0, #22
    st25r3911ModifyInterrupts(0,mask);
}
 800144a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 800144e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8001452:	f7ff bc29 	b.w	8000ca8 <st25r3911WriteRegister>
}
 8001456:	bd38      	pop	{r3, r4, r5, pc}
 8001458:	200000f8 	.word	0x200000f8

0800145c <st25r3911ClearInterrupts>:

void st25r3911ClearInterrupts( void )
{
 800145c:	b510      	push	{r4, lr}
 800145e:	b082      	sub	sp, #8
    uint8_t iregs[3];

    st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, 3);
 8001460:	2203      	movs	r2, #3
 8001462:	a901      	add	r1, sp, #4
 8001464:	2017      	movs	r0, #23
 8001466:	f7ff fba3 	bl	8000bb0 <st25r3911ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 800146a:	4a0c      	ldr	r2, [pc, #48]	; (800149c <st25r3911ClearInterrupts+0x40>)
 800146c:	7813      	ldrb	r3, [r2, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001472:	f3bf 8f4f 	dsb	sy
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001476:	490a      	ldr	r1, [pc, #40]	; (80014a0 <st25r3911ClearInterrupts+0x44>)
 8001478:	2040      	movs	r0, #64	; 0x40
 800147a:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
 800147e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001482:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status = 0;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <st25r3911ClearInterrupts+0x48>)
 8001488:	2400      	movs	r4, #0
 800148a:	609c      	str	r4, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 800148c:	7813      	ldrb	r3, [r2, #0]
 800148e:	3b01      	subs	r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	7013      	strb	r3, [r2, #0]
 8001494:	b903      	cbnz	r3, 8001498 <st25r3911ClearInterrupts+0x3c>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001496:	6008      	str	r0, [r1, #0]
    return;
}
 8001498:	b002      	add	sp, #8
 800149a:	bd10      	pop	{r4, pc}
 800149c:	20000490 	.word	0x20000490
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	200000f8 	.word	0x200000f8

080014a8 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 80014a8:	b510      	push	{r4, lr}
 80014aa:	4604      	mov	r4, r0
  return (platformGetSysTick() + time);
 80014ac:	f000 f872 	bl	8001594 <HAL_GetTick>
}
 80014b0:	4420      	add	r0, r4
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 80014b4:	b510      	push	{r4, lr}
 80014b6:	4604      	mov	r4, r0
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 80014b8:	f000 f86c 	bl	8001594 <HAL_GetTick>
 80014bc:	1a20      	subs	r0, r4, r0
  {
    return true;
  }
  
  return false;
}
 80014be:	0fc0      	lsrs	r0, r0, #31
 80014c0:	bd10      	pop	{r4, pc}
 80014c2:	bf00      	nop

080014c4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4911      	ldr	r1, [pc, #68]	; (800150c <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014cc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80014d0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 80014d6:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014d8:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80014e0:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014e8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 80014ec:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80014f0:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 80014f2:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014f4:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f6:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 80014fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014fe:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 8001500:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001502:	608c      	str	r4, [r1, #8]
#endif
}
 8001504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001516:	4e0f      	ldr	r6, [pc, #60]	; (8001554 <HAL_InitTick+0x40>)
 8001518:	6833      	ldr	r3, [r6, #0]
 800151a:	b90b      	cbnz	r3, 8001520 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800151c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800151e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001520:	490d      	ldr	r1, [pc, #52]	; (8001558 <HAL_InitTick+0x44>)
 8001522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001526:	4605      	mov	r5, r0
 8001528:	fbb2 f3f3 	udiv	r3, r2, r3
 800152c:	6808      	ldr	r0, [r1, #0]
 800152e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001532:	f000 f8a3 	bl	800167c <HAL_SYSTICK_Config>
 8001536:	4604      	mov	r4, r0
 8001538:	2800      	cmp	r0, #0
 800153a:	d1ef      	bne.n	800151c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153c:	2d0f      	cmp	r5, #15
 800153e:	d8ed      	bhi.n	800151c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	4602      	mov	r2, r0
 8001542:	4629      	mov	r1, r5
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f84e 	bl	80015e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800154c:	6075      	str	r5, [r6, #4]
 800154e:	4620      	mov	r0, r4
}
 8001550:	bd70      	pop	{r4, r5, r6, pc}
 8001552:	bf00      	nop
 8001554:	20000004 	.word	0x20000004
 8001558:	20000000 	.word	0x20000000

0800155c <HAL_Init>:
{
 800155c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155e:	2003      	movs	r0, #3
 8001560:	f000 f830 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ffd5 	bl	8001514 <HAL_InitTick>
 800156a:	b110      	cbz	r0, 8001572 <HAL_Init+0x16>
    status = HAL_ERROR;
 800156c:	2401      	movs	r4, #1
}
 800156e:	4620      	mov	r0, r4
 8001570:	bd10      	pop	{r4, pc}
 8001572:	4604      	mov	r4, r0
    HAL_MspInit();
 8001574:	f002 fd20 	bl	8003fb8 <HAL_MspInit>
}
 8001578:	4620      	mov	r0, r4
 800157a:	bd10      	pop	{r4, pc}

0800157c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_IncTick+0x10>)
 800157e:	4904      	ldr	r1, [pc, #16]	; (8001590 <HAL_IncTick+0x14>)
 8001580:	6813      	ldr	r3, [r2, #0]
 8001582:	6809      	ldr	r1, [r1, #0]
 8001584:	440b      	add	r3, r1
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000108 	.word	0x20000108
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001594:	4b01      	ldr	r3, [pc, #4]	; (800159c <HAL_GetTick+0x8>)
 8001596:	6818      	ldr	r0, [r3, #0]
}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000108 	.word	0x20000108

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b538      	push	{r3, r4, r5, lr}
 80015a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff fff6 	bl	8001594 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80015aa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80015ac:	d002      	beq.n	80015b4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_Delay+0x20>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	1b43      	subs	r3, r0, r5
 80015ba:	42a3      	cmp	r3, r4
 80015bc:	d3fa      	bcc.n	80015b4 <HAL_Delay+0x14>
  {
  }
}
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4907      	ldr	r1, [pc, #28]	; (80015e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015c6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015c8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80015de:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_NVIC_SetPriority+0x74>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f2:	f1c3 0e07 	rsb	lr, r3, #7
 80015f6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fe:	bf28      	it	cs
 8001600:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001604:	f1bc 0f06 	cmp.w	ip, #6
 8001608:	d91b      	bls.n	8001642 <HAL_NVIC_SetPriority+0x5a>
 800160a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 3cff 	mov.w	ip, #4294967295
 8001610:	fa0c fc03 	lsl.w	ip, ip, r3
 8001614:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 3cff 	mov.w	ip, #4294967295
 800161c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001620:	ea21 010c 	bic.w	r1, r1, ip
 8001624:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001626:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 800162c:	db0c      	blt.n	8001648 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001632:	0109      	lsls	r1, r1, #4
 8001634:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001638:	b2c9      	uxtb	r1, r1
 800163a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800163e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001642:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001644:	4613      	mov	r3, r2
 8001646:	e7e7      	b.n	8001618 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_NVIC_SetPriority+0x78>)
 800164a:	f000 000f 	and.w	r0, r0, #15
 800164e:	0109      	lsls	r1, r1, #4
 8001650:	4403      	add	r3, r0
 8001652:	b2c9      	uxtb	r1, r1
 8001654:	7619      	strb	r1, [r3, #24]
 8001656:	f85d fb04 	ldr.w	pc, [sp], #4
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00
 8001660:	e000ecfc 	.word	0xe000ecfc

08001664 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001664:	0941      	lsrs	r1, r0, #5
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_NVIC_EnableIRQ+0x14>)
 8001668:	f000 001f 	and.w	r0, r0, #31
 800166c:	2301      	movs	r3, #1
 800166e:	fa03 f000 	lsl.w	r0, r3, r0
 8001672:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100

0800167c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	3801      	subs	r0, #1
 800167e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001682:	d210      	bcs.n	80016a6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001684:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	4c08      	ldr	r4, [pc, #32]	; (80016ac <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001692:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001696:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001698:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800169c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800169e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a2:	6119      	str	r1, [r3, #16]
 80016a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2001      	movs	r0, #1
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80016b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80016b4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80016b6:	6913      	ldr	r3, [r2, #16]
 80016b8:	bf0c      	ite	eq
 80016ba:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80016be:	f023 0304 	bicne.w	r3, r3, #4
 80016c2:	6113      	str	r3, [r2, #16]
  }
}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop

080016cc <HAL_SYSTICK_IRQHandler>:
{
 80016cc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80016ce:	f7ff fffb 	bl	80016c8 <HAL_SYSTICK_Callback>
}
 80016d2:	bd08      	pop	{r3, pc}

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d8:	680d      	ldr	r5, [r1, #0]
{
 80016da:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016dc:	2d00      	cmp	r5, #0
 80016de:	f000 80a9 	beq.w	8001834 <HAL_GPIO_Init+0x160>
  uint32_t position = 0x00u;
 80016e2:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e4:	f04f 0b01 	mov.w	fp, #1
 80016e8:	fa0b f703 	lsl.w	r7, fp, r3

    if (iocurrent != 0x00u)
 80016ec:	ea17 0a05 	ands.w	sl, r7, r5
 80016f0:	f000 809b 	beq.w	800182a <HAL_GPIO_Init+0x156>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f4:	684c      	ldr	r4, [r1, #4]
 80016f6:	f024 0e10 	bic.w	lr, r4, #16
 80016fa:	f1be 0f02 	cmp.w	lr, #2
 80016fe:	f000 809c 	beq.w	800183a <HAL_GPIO_Init+0x166>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001702:	f8d0 8000 	ldr.w	r8, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001706:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f20c 	lsl.w	r2, r2, ip
 8001710:	ea28 0602 	bic.w	r6, r8, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001714:	f004 0803 	and.w	r8, r4, #3
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001718:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800171c:	fa08 f90c 	lsl.w	r9, r8, ip
 8001720:	ea49 0906 	orr.w	r9, r9, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001724:	f1be 0f01 	cmp.w	lr, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001728:	ea6f 0202 	mvn.w	r2, r2
      GPIOx->MODER = temp;
 800172c:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001730:	f240 80ac 	bls.w	800188c <HAL_GPIO_Init+0x1b8>
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001734:	f1b8 0f03 	cmp.w	r8, #3
 8001738:	d109      	bne.n	800174e <HAL_GPIO_Init+0x7a>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800173a:	f8d0 e02c 	ldr.w	lr, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800173e:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001742:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8001746:	409f      	lsls	r7, r3
 8001748:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 800174c:	62c7      	str	r7, [r0, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800174e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001750:	403a      	ands	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001752:	688f      	ldr	r7, [r1, #8]
 8001754:	fa07 f70c 	lsl.w	r7, r7, ip
 8001758:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175a:	00e7      	lsls	r7, r4, #3
      GPIOx->PUPDR = temp;
 800175c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175e:	d564      	bpl.n	800182a <HAL_GPIO_Init+0x156>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001760:	4f67      	ldr	r7, [pc, #412]	; (8001900 <HAL_GPIO_Init+0x22c>)
 8001762:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001764:	f042 0201 	orr.w	r2, r2, #1
 8001768:	663a      	str	r2, [r7, #96]	; 0x60
 800176a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800176c:	f002 0201 	and.w	r2, r2, #1
 8001770:	9201      	str	r2, [sp, #4]
 8001772:	9a01      	ldr	r2, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001774:	f023 0203 	bic.w	r2, r3, #3
 8001778:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800177c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001780:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8001784:	f8d2 c008 	ldr.w	ip, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001788:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800178c:	270f      	movs	r7, #15
 800178e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001792:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001796:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800179a:	d01e      	beq.n	80017da <HAL_GPIO_Init+0x106>
 800179c:	4e59      	ldr	r6, [pc, #356]	; (8001904 <HAL_GPIO_Init+0x230>)
 800179e:	42b0      	cmp	r0, r6
 80017a0:	f000 8093 	beq.w	80018ca <HAL_GPIO_Init+0x1f6>
 80017a4:	4e58      	ldr	r6, [pc, #352]	; (8001908 <HAL_GPIO_Init+0x234>)
 80017a6:	42b0      	cmp	r0, r6
 80017a8:	f000 8094 	beq.w	80018d4 <HAL_GPIO_Init+0x200>
 80017ac:	4e57      	ldr	r6, [pc, #348]	; (800190c <HAL_GPIO_Init+0x238>)
 80017ae:	42b0      	cmp	r0, r6
 80017b0:	f000 8084 	beq.w	80018bc <HAL_GPIO_Init+0x1e8>
 80017b4:	4e56      	ldr	r6, [pc, #344]	; (8001910 <HAL_GPIO_Init+0x23c>)
 80017b6:	42b0      	cmp	r0, r6
 80017b8:	f000 8093 	beq.w	80018e2 <HAL_GPIO_Init+0x20e>
 80017bc:	4e55      	ldr	r6, [pc, #340]	; (8001914 <HAL_GPIO_Init+0x240>)
 80017be:	42b0      	cmp	r0, r6
 80017c0:	f000 8096 	beq.w	80018f0 <HAL_GPIO_Init+0x21c>
 80017c4:	4e54      	ldr	r6, [pc, #336]	; (8001918 <HAL_GPIO_Init+0x244>)
 80017c6:	42b0      	cmp	r0, r6
 80017c8:	bf0c      	ite	eq
 80017ca:	f04f 0c06 	moveq.w	ip, #6
 80017ce:	f04f 0c07 	movne.w	ip, #7
 80017d2:	fa0c fe0e 	lsl.w	lr, ip, lr
 80017d6:	ea47 070e 	orr.w	r7, r7, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017da:	6097      	str	r7, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017dc:	4a4f      	ldr	r2, [pc, #316]	; (800191c <HAL_GPIO_Init+0x248>)
 80017de:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e0:	03e6      	lsls	r6, r4, #15
        temp &= ~(iocurrent);
 80017e2:	ea6f 0c0a 	mvn.w	ip, sl
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80017e6:	4e4d      	ldr	r6, [pc, #308]	; (800191c <HAL_GPIO_Init+0x248>)
        temp &= ~(iocurrent);
 80017e8:	bf54      	ite	pl
 80017ea:	ea0c 0202 	andpl.w	r2, ip, r2
          temp |= iocurrent;
 80017ee:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 80017f2:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR1;
 80017f4:	6877      	ldr	r7, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f6:	03a2      	lsls	r2, r4, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80017f8:	4a48      	ldr	r2, [pc, #288]	; (800191c <HAL_GPIO_Init+0x248>)
        temp &= ~(iocurrent);
 80017fa:	bf54      	ite	pl
 80017fc:	ea0c 0707 	andpl.w	r7, ip, r7
          temp |= iocurrent;
 8001800:	ea4a 0707 	orrmi.w	r7, sl, r7
        EXTI->EMR1 = temp;
 8001804:	6057      	str	r7, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001806:	6897      	ldr	r7, [r2, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8001808:	4a44      	ldr	r2, [pc, #272]	; (800191c <HAL_GPIO_Init+0x248>)
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180a:	02e6      	lsls	r6, r4, #11
        temp &= ~(iocurrent);
 800180c:	bf54      	ite	pl
 800180e:	ea0c 0707 	andpl.w	r7, ip, r7
          temp |= iocurrent;
 8001812:	ea4a 0707 	orrmi.w	r7, sl, r7
        EXTI->RTSR1 = temp;
 8001816:	6097      	str	r7, [r2, #8]

        temp = EXTI->FTSR1;
 8001818:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800181a:	02a4      	lsls	r4, r4, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800181c:	4c3f      	ldr	r4, [pc, #252]	; (800191c <HAL_GPIO_Init+0x248>)
        temp &= ~(iocurrent);
 800181e:	bf54      	ite	pl
 8001820:	ea0c 0202 	andpl.w	r2, ip, r2
          temp |= iocurrent;
 8001824:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8001828:	60e2      	str	r2, [r4, #12]
      }
    }

    position++;
 800182a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182c:	fa35 f203 	lsrs.w	r2, r5, r3
 8001830:	f47f af5a 	bne.w	80016e8 <HAL_GPIO_Init+0x14>
  }
}
 8001834:	b003      	add	sp, #12
 8001836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3u];
 800183a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800183e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001842:	690a      	ldr	r2, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8001844:	f8dc 8020 	ldr.w	r8, [ip, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001848:	f003 0e07 	and.w	lr, r3, #7
 800184c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001850:	f04f 090f 	mov.w	r9, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001854:	fa02 f20e 	lsl.w	r2, r2, lr
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001858:	fa09 fe0e 	lsl.w	lr, r9, lr
 800185c:	ea28 0e0e 	bic.w	lr, r8, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001860:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001864:	f8cc 2020 	str.w	r2, [ip, #32]
      temp = GPIOx->MODER;
 8001868:	f8d0 e000 	ldr.w	lr, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800186c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001870:	2203      	movs	r2, #3
 8001872:	fa02 f20c 	lsl.w	r2, r2, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001876:	f004 0803 	and.w	r8, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800187a:	ea2e 0e02 	bic.w	lr, lr, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187e:	fa08 f90c 	lsl.w	r9, r8, ip
 8001882:	ea49 0e0e 	orr.w	lr, r9, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001886:	43d2      	mvns	r2, r2
      GPIOx->MODER = temp;
 8001888:	f8c0 e000 	str.w	lr, [r0]
        temp = GPIOx->OSPEEDR;
 800188c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001890:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001892:	ea02 0e0e 	and.w	lr, r2, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001896:	fa06 f90c 	lsl.w	r9, r6, ip
 800189a:	ea49 0e0e 	orr.w	lr, r9, lr
        GPIOx->OSPEEDR = temp;
 800189e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80018a2:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018a6:	f3c4 1e00 	ubfx	lr, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018aa:	ea29 0907 	bic.w	r9, r9, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018ae:	fa0e fe03 	lsl.w	lr, lr, r3
 80018b2:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->OTYPER = temp;
 80018b6:	f8c0 e004 	str.w	lr, [r0, #4]
 80018ba:	e73b      	b.n	8001734 <HAL_GPIO_Init+0x60>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018bc:	f04f 0c03 	mov.w	ip, #3
 80018c0:	fa0c fe0e 	lsl.w	lr, ip, lr
 80018c4:	ea47 070e 	orr.w	r7, r7, lr
 80018c8:	e787      	b.n	80017da <HAL_GPIO_Init+0x106>
 80018ca:	fa0b fe0e 	lsl.w	lr, fp, lr
 80018ce:	ea47 070e 	orr.w	r7, r7, lr
 80018d2:	e782      	b.n	80017da <HAL_GPIO_Init+0x106>
 80018d4:	f04f 0c02 	mov.w	ip, #2
 80018d8:	fa0c fe0e 	lsl.w	lr, ip, lr
 80018dc:	ea47 070e 	orr.w	r7, r7, lr
 80018e0:	e77b      	b.n	80017da <HAL_GPIO_Init+0x106>
 80018e2:	f04f 0c04 	mov.w	ip, #4
 80018e6:	fa0c fe0e 	lsl.w	lr, ip, lr
 80018ea:	ea47 070e 	orr.w	r7, r7, lr
 80018ee:	e774      	b.n	80017da <HAL_GPIO_Init+0x106>
 80018f0:	f04f 0c05 	mov.w	ip, #5
 80018f4:	fa0c fe0e 	lsl.w	lr, ip, lr
 80018f8:	ea47 070e 	orr.w	r7, r7, lr
 80018fc:	e76d      	b.n	80017da <HAL_GPIO_Init+0x106>
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	48000400 	.word	0x48000400
 8001908:	48000800 	.word	0x48000800
 800190c:	48000c00 	.word	0x48000c00
 8001910:	48001000 	.word	0x48001000
 8001914:	48001400 	.word	0x48001400
 8001918:	48001800 	.word	0x48001800
 800191c:	40010400 	.word	0x40010400

08001920 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001920:	6903      	ldr	r3, [r0, #16]
 8001922:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001924:	bf14      	ite	ne
 8001926:	2001      	movne	r0, #1
 8001928:	2000      	moveq	r0, #0
 800192a:	4770      	bx	lr

0800192c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800192c:	b10a      	cbz	r2, 8001932 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800192e:	6181      	str	r1, [r0, #24]
 8001930:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001932:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop

08001938 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001938:	6943      	ldr	r3, [r0, #20]
 800193a:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800193c:	bf14      	ite	ne
 800193e:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001940:	6181      	streq	r1, [r0, #24]
  }
}
 8001942:	4770      	bx	lr

08001944 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop

08001948 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800194a:	6951      	ldr	r1, [r2, #20]
 800194c:	4201      	tst	r1, r0
 800194e:	d100      	bne.n	8001952 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001950:	4770      	bx	lr
{
 8001952:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001954:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001956:	f7ff fff5 	bl	8001944 <HAL_GPIO_EXTI_Callback>
}
 800195a:	bd08      	pop	{r3, pc}
 800195c:	40010400 	.word	0x40010400

08001960 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001960:	4a02      	ldr	r2, [pc, #8]	; (800196c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001962:	6813      	ldr	r3, [r2, #0]
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	6013      	str	r3, [r2, #0]
}
 800196a:	4770      	bx	lr
 800196c:	40007000 	.word	0x40007000

08001970 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <HAL_PWREx_GetVoltageRange+0xc>)
 8001972:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001974:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40007000 	.word	0x40007000

08001980 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001980:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001984:	d00e      	beq.n	80019a4 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001986:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001988:	6813      	ldr	r3, [r2, #0]
 800198a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800198e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001992:	d02d      	beq.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001994:	6813      	ldr	r3, [r2, #0]
 8001996:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800199a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800199e:	2000      	movs	r0, #0
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019a4:	4914      	ldr	r1, [pc, #80]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019a6:	680b      	ldr	r3, [r1, #0]
 80019a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b0:	d01e      	beq.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x70>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b2:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b4:	4a11      	ldr	r2, [pc, #68]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019b6:	4812      	ldr	r0, [pc, #72]	; (8001a00 <HAL_PWREx_ControlVoltageScaling+0x80>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c0:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019c2:	6813      	ldr	r3, [r2, #0]
 80019c4:	2232      	movs	r2, #50	; 0x32
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ca:	694a      	ldr	r2, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019cc:	fba0 0303 	umull	r0, r3, r0, r3
 80019d0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d2:	0550      	lsls	r0, r2, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019d4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d8:	d506      	bpl.n	80019e8 <HAL_PWREx_ControlVoltageScaling+0x68>
 80019da:	e000      	b.n	80019de <HAL_PWREx_ControlVoltageScaling+0x5e>
 80019dc:	b123      	cbz	r3, 80019e8 <HAL_PWREx_ControlVoltageScaling+0x68>
 80019de:	694a      	ldr	r2, [r1, #20]
 80019e0:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 80019e2:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e6:	d4f9      	bmi.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	055b      	lsls	r3, r3, #21
 80019ee:	d401      	bmi.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x74>
  return HAL_OK;
 80019f0:	2000      	movs	r0, #0
 80019f2:	4770      	bx	lr
        return HAL_TIMEOUT;
 80019f4:	2003      	movs	r0, #3
}
 80019f6:	4770      	bx	lr
 80019f8:	40007000 	.word	0x40007000
 80019fc:	20000000 	.word	0x20000000
 8001a00:	431bde83 	.word	0x431bde83

08001a04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a04:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a06:	4d20      	ldr	r5, [pc, #128]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8001a08:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001a0a:	00db      	lsls	r3, r3, #3
{
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a10:	d51c      	bpl.n	8001a4c <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a12:	f7ff ffad 	bl	8001970 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a16:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001a1a:	d029      	beq.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a1c:	2c80      	cmp	r4, #128	; 0x80
 8001a1e:	d813      	bhi.n	8001a48 <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a20:	d02f      	beq.n	8001a82 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a22:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 8001a26:	fab4 f484 	clz	r4, r4
 8001a2a:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a2c:	4917      	ldr	r1, [pc, #92]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001a2e:	680b      	ldr	r3, [r1, #0]
 8001a30:	f023 0307 	bic.w	r3, r3, #7
 8001a34:	4323      	orrs	r3, r4
 8001a36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a38:	6808      	ldr	r0, [r1, #0]
 8001a3a:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001a3e:	1b00      	subs	r0, r0, r4
 8001a40:	bf18      	it	ne
 8001a42:	2001      	movne	r0, #1
 8001a44:	b003      	add	sp, #12
 8001a46:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a48:	2403      	movs	r4, #3
 8001a4a:	e7ef      	b.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a52:	65ab      	str	r3, [r5, #88]	; 0x58
 8001a54:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001a5e:	f7ff ff87 	bl	8001970 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a62:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a64:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a6e:	d1d5      	bne.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8001a70:	2c80      	cmp	r4, #128	; 0x80
 8001a72:	d904      	bls.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a74:	2ca0      	cmp	r4, #160	; 0xa0
 8001a76:	bf8c      	ite	hi
 8001a78:	2402      	movhi	r4, #2
 8001a7a:	2401      	movls	r4, #1
 8001a7c:	e7d6      	b.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a7e:	2400      	movs	r4, #0
 8001a80:	e7d4      	b.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a82:	2402      	movs	r4, #2
 8001a84:	e7d2      	b.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x28>
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40022000 	.word	0x40022000

08001a90 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a90:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a92:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a94:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a96:	f013 030c 	ands.w	r3, r3, #12
 8001a9a:	d008      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x1e>
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	d038      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d034      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	4824      	ldr	r0, [pc, #144]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001aa8:	bf18      	it	ne
 8001aaa:	2000      	movne	r0, #0
 8001aac:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001aae:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ab0:	6811      	ldr	r1, [r2, #0]
 8001ab2:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ab4:	bf54      	ite	pl
 8001ab6:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001aba:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8001abc:	491f      	ldr	r1, [pc, #124]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001abe:	bf54      	ite	pl
 8001ac0:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ac4:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001ac8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001acc:	b303      	cbz	r3, 8001b10 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d12d      	bne.n	8001b2e <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d025      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x9a>
 8001ade:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	bf08      	it	eq
 8001ae4:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ae8:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aea:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001af2:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001af6:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001afa:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001afc:	fb02 f000 	mul.w	r0, r2, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b00:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b02:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b04:	fbb0 f0f1 	udiv	r0, r0, r1
    sysclockfreq = pllvco / pllr;
 8001b08:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b0c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8001b0e:	480c      	ldr	r0, [pc, #48]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8001b10:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b12:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b16:	2a01      	cmp	r2, #1
 8001b18:	d0c9      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001b22:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b24:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8001b28:	d1d9      	bne.n	8001ade <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b2c:	e7db      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x56>
 8001b2e:	2000      	movs	r0, #0
  return sysclockfreq;
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	007a1200 	.word	0x007a1200
 8001b3c:	0800c318 	.word	0x0800c318
 8001b40:	00f42400 	.word	0x00f42400

08001b44 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001b44:	2800      	cmp	r0, #0
 8001b46:	f000 8207 	beq.w	8001f58 <HAL_RCC_OscConfig+0x414>
{
 8001b4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4e:	4a8a      	ldr	r2, [pc, #552]	; (8001d78 <HAL_RCC_OscConfig+0x234>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b50:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b54:	68d6      	ldr	r6, [r2, #12]
 8001b56:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b58:	06d8      	lsls	r0, r3, #27
{
 8001b5a:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b60:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b64:	d52e      	bpl.n	8001bc4 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b66:	2d00      	cmp	r5, #0
 8001b68:	f000 810d 	beq.w	8001d86 <HAL_RCC_OscConfig+0x242>
 8001b6c:	2d0c      	cmp	r5, #12
 8001b6e:	f000 8107 	beq.w	8001d80 <HAL_RCC_OscConfig+0x23c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b72:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8001b74:	4f80      	ldr	r7, [pc, #512]	; (8001d78 <HAL_RCC_OscConfig+0x234>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 816b 	beq.w	8001e52 <HAL_RCC_OscConfig+0x30e>
        __HAL_RCC_MSI_ENABLE();
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8001b84:	f7ff fd06 	bl	8001594 <HAL_GetTick>
 8001b88:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8a:	e006      	b.n	8001b9a <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fd02 	bl	8001594 <HAL_GetTick>
 8001b90:	eba0 0008 	sub.w	r0, r0, r8
 8001b94:	2802      	cmp	r0, #2
 8001b96:	f200 816c 	bhi.w	8001e72 <HAL_RCC_OscConfig+0x32e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	079b      	lsls	r3, r3, #30
 8001b9e:	d5f5      	bpl.n	8001b8c <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f043 0308 	orr.w	r3, r3, #8
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6a22      	ldr	r2, [r4, #32]
 8001bac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69e2      	ldr	r2, [r4, #28]
 8001bb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001bc0:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	07d9      	lsls	r1, r3, #31
 8001bc6:	f100 80ad 	bmi.w	8001d24 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	0799      	lsls	r1, r3, #30
 8001bcc:	d523      	bpl.n	8001c16 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bce:	2d04      	cmp	r5, #4
 8001bd0:	f000 812f 	beq.w	8001e32 <HAL_RCC_OscConfig+0x2ee>
 8001bd4:	2d0c      	cmp	r5, #12
 8001bd6:	f000 8129 	beq.w	8001e2c <HAL_RCC_OscConfig+0x2e8>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bda:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8001bdc:	4e66      	ldr	r6, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x234>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 818c 	beq.w	8001efc <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_HSI_ENABLE();
 8001be4:	6833      	ldr	r3, [r6, #0]
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001bec:	f7ff fcd2 	bl	8001594 <HAL_GetTick>
 8001bf0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf2:	e005      	b.n	8001c00 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fcce 	bl	8001594 <HAL_GetTick>
 8001bf8:	1bc0      	subs	r0, r0, r7
 8001bfa:	2802      	cmp	r0, #2
 8001bfc:	f200 8139 	bhi.w	8001e72 <HAL_RCC_OscConfig+0x32e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c00:	6833      	ldr	r3, [r6, #0]
 8001c02:	055b      	lsls	r3, r3, #21
 8001c04:	d5f6      	bpl.n	8001bf4 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	6873      	ldr	r3, [r6, #4]
 8001c08:	6922      	ldr	r2, [r4, #16]
 8001c0a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001c0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c12:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	0719      	lsls	r1, r3, #28
 8001c18:	d519      	bpl.n	8001c4e <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c1a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8001c1c:	4e56      	ldr	r6, [pc, #344]	; (8001d78 <HAL_RCC_OscConfig+0x234>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 812b 	beq.w	8001e7a <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_LSI_ENABLE();
 8001c24:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001c30:	f7ff fcb0 	bl	8001594 <HAL_GetTick>
 8001c34:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c36:	e005      	b.n	8001c44 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff fcac 	bl	8001594 <HAL_GetTick>
 8001c3c:	1bc0      	subs	r0, r0, r7
 8001c3e:	2802      	cmp	r0, #2
 8001c40:	f200 8117 	bhi.w	8001e72 <HAL_RCC_OscConfig+0x32e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c44:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001c48:	079a      	lsls	r2, r3, #30
 8001c4a:	d5f5      	bpl.n	8001c38 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	075e      	lsls	r6, r3, #29
 8001c50:	d53e      	bpl.n	8001cd0 <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c52:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <HAL_RCC_OscConfig+0x234>)
 8001c54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c56:	00d0      	lsls	r0, r2, #3
 8001c58:	f100 814e 	bmi.w	8001ef8 <HAL_RCC_OscConfig+0x3b4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c62:	659a      	str	r2, [r3, #88]	; 0x58
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c6e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c70:	4f42      	ldr	r7, [pc, #264]	; (8001d7c <HAL_RCC_OscConfig+0x238>)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	05d9      	lsls	r1, r3, #23
 8001c76:	f140 817c 	bpl.w	8001f72 <HAL_RCC_OscConfig+0x42e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7a:	68a3      	ldr	r3, [r4, #8]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	f000 814f 	beq.w	8001f20 <HAL_RCC_OscConfig+0x3dc>
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	f000 81d4 	beq.w	8002030 <HAL_RCC_OscConfig+0x4ec>
 8001c88:	4f3b      	ldr	r7, [pc, #236]	; (8001d78 <HAL_RCC_OscConfig+0x234>)
 8001c8a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001c96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001c9a:	f022 0204 	bic.w	r2, r2, #4
 8001c9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 8143 	bne.w	8001f2e <HAL_RCC_OscConfig+0x3ea>
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fc74 	bl	8001594 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001cb0:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb2:	e006      	b.n	8001cc2 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fc6e 	bl	8001594 <HAL_GetTick>
 8001cb8:	eba0 0008 	sub.w	r0, r0, r8
 8001cbc:	4548      	cmp	r0, r9
 8001cbe:	f200 80d8 	bhi.w	8001e72 <HAL_RCC_OscConfig+0x32e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cc6:	0798      	lsls	r0, r3, #30
 8001cc8:	d4f4      	bmi.n	8001cb4 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8001cca:	2e00      	cmp	r6, #0
 8001ccc:	f040 814b 	bne.w	8001f66 <HAL_RCC_OscConfig+0x422>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001cd2:	b318      	cbz	r0, 8001d1c <HAL_RCC_OscConfig+0x1d8>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd4:	2d0c      	cmp	r5, #12
 8001cd6:	f000 816b 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x46c>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cda:	2802      	cmp	r0, #2
 8001cdc:	f000 81b6 	beq.w	800204c <HAL_RCC_OscConfig+0x508>
        __HAL_RCC_PLL_DISABLE();
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_RCC_OscConfig+0x234>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001ce8:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 8001cf0:	f000 8134 	beq.w	8001f5c <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cf4:	4c20      	ldr	r4, [pc, #128]	; (8001d78 <HAL_RCC_OscConfig+0x234>)
 8001cf6:	68e3      	ldr	r3, [r4, #12]
 8001cf8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d00:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001d02:	f7ff fc47 	bl	8001594 <HAL_GetTick>
 8001d06:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d08:	e005      	b.n	8001d16 <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7ff fc43 	bl	8001594 <HAL_GetTick>
 8001d0e:	1b40      	subs	r0, r0, r5
 8001d10:	2802      	cmp	r0, #2
 8001d12:	f200 80ae 	bhi.w	8001e72 <HAL_RCC_OscConfig+0x32e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	019b      	lsls	r3, r3, #6
 8001d1a:	d4f6      	bmi.n	8001d0a <HAL_RCC_OscConfig+0x1c6>
  return HAL_OK;
 8001d1c:	2000      	movs	r0, #0
}
 8001d1e:	b003      	add	sp, #12
 8001d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d24:	2d08      	cmp	r5, #8
 8001d26:	d077      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2d4>
 8001d28:	2d0c      	cmp	r5, #12
 8001d2a:	d073      	beq.n	8001e14 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2c:	6863      	ldr	r3, [r4, #4]
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	f000 80cc 	beq.w	8001ece <HAL_RCC_OscConfig+0x38a>
 8001d36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d3a:	f000 812c 	beq.w	8001f96 <HAL_RCC_OscConfig+0x452>
 8001d3e:	4f0e      	ldr	r7, [pc, #56]	; (8001d78 <HAL_RCC_OscConfig+0x234>)
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d46:	603a      	str	r2, [r7, #0]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d4e:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f040 80c1 	bne.w	8001ed8 <HAL_RCC_OscConfig+0x394>
        tickstart = HAL_GetTick();
 8001d56:	f7ff fc1d 	bl	8001594 <HAL_GetTick>
 8001d5a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5c:	e006      	b.n	8001d6c <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5e:	f7ff fc19 	bl	8001594 <HAL_GetTick>
 8001d62:	eba0 0008 	sub.w	r0, r0, r8
 8001d66:	2864      	cmp	r0, #100	; 0x64
 8001d68:	f200 8083 	bhi.w	8001e72 <HAL_RCC_OscConfig+0x32e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	0398      	lsls	r0, r3, #14
 8001d70:	d4f5      	bmi.n	8001d5e <HAL_RCC_OscConfig+0x21a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	e729      	b.n	8001bca <HAL_RCC_OscConfig+0x86>
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d80:	2e01      	cmp	r6, #1
 8001d82:	f47f aef6 	bne.w	8001b72 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d86:	4ba6      	ldr	r3, [pc, #664]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	0799      	lsls	r1, r3, #30
 8001d8c:	d43b      	bmi.n	8001e06 <HAL_RCC_OscConfig+0x2c2>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d8e:	4ba4      	ldr	r3, [pc, #656]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
 8001d90:	6a20      	ldr	r0, [r4, #32]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	0712      	lsls	r2, r2, #28
 8001d96:	bf56      	itet	pl
 8001d98:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8001d9c:	681b      	ldrmi	r3, [r3, #0]
 8001d9e:	091b      	lsrpl	r3, r3, #4
 8001da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da4:	4298      	cmp	r0, r3
 8001da6:	d97c      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x35e>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001da8:	f7ff fe2c 	bl	8001a04 <RCC_SetFlashLatencyFromMSIRange>
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d12d      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db0:	4b9b      	ldr	r3, [pc, #620]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	f042 0208 	orr.w	r2, r2, #8
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	6a21      	ldr	r1, [r4, #32]
 8001dbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	69e1      	ldr	r1, [r4, #28]
 8001dca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001dce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001dd2:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dd4:	f7ff fe5c 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 8001dd8:	4b91      	ldr	r3, [pc, #580]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
 8001dda:	4a92      	ldr	r2, [pc, #584]	; (8002024 <HAL_RCC_OscConfig+0x4e0>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8001de4:	4a90      	ldr	r2, [pc, #576]	; (8002028 <HAL_RCC_OscConfig+0x4e4>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8001dee:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001df0:	4a8e      	ldr	r2, [pc, #568]	; (800202c <HAL_RCC_OscConfig+0x4e8>)
 8001df2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8001df4:	f7ff fb8e 	bl	8001514 <HAL_InitTick>
        if(status != HAL_OK)
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	d190      	bne.n	8001d1e <HAL_RCC_OscConfig+0x1da>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	07d9      	lsls	r1, r3, #31
 8001e00:	f57f aee3 	bpl.w	8001bca <HAL_RCC_OscConfig+0x86>
 8001e04:	e78e      	b.n	8001d24 <HAL_RCC_OscConfig+0x1e0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e06:	69a3      	ldr	r3, [r4, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1c0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x24a>
        return HAL_ERROR;
 8001e0c:	2001      	movs	r0, #1
}
 8001e0e:	b003      	add	sp, #12
 8001e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e14:	2e03      	cmp	r6, #3
 8001e16:	d189      	bne.n	8001d2c <HAL_RCC_OscConfig+0x1e8>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	4a81      	ldr	r2, [pc, #516]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	0392      	lsls	r2, r2, #14
 8001e1e:	f57f aed4 	bpl.w	8001bca <HAL_RCC_OscConfig+0x86>
 8001e22:	6862      	ldr	r2, [r4, #4]
 8001e24:	2a00      	cmp	r2, #0
 8001e26:	f47f aed0 	bne.w	8001bca <HAL_RCC_OscConfig+0x86>
 8001e2a:	e7ef      	b.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e2c:	2e02      	cmp	r6, #2
 8001e2e:	f47f aed4 	bne.w	8001bda <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e32:	4a7b      	ldr	r2, [pc, #492]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	d502      	bpl.n	8001e40 <HAL_RCC_OscConfig+0x2fc>
 8001e3a:	68e2      	ldr	r2, [r4, #12]
 8001e3c:	2a00      	cmp	r2, #0
 8001e3e:	d0e5      	beq.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4977      	ldr	r1, [pc, #476]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
 8001e42:	6920      	ldr	r0, [r4, #16]
 8001e44:	684a      	ldr	r2, [r1, #4]
 8001e46:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8001e4a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001e4e:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e50:	e6e1      	b.n	8001c16 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fb9b 	bl	8001594 <HAL_GetTick>
 8001e5e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	0798      	lsls	r0, r3, #30
 8001e64:	d5ca      	bpl.n	8001dfc <HAL_RCC_OscConfig+0x2b8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e66:	f7ff fb95 	bl	8001594 <HAL_GetTick>
 8001e6a:	eba0 0008 	sub.w	r0, r0, r8
 8001e6e:	2802      	cmp	r0, #2
 8001e70:	d9f6      	bls.n	8001e60 <HAL_RCC_OscConfig+0x31c>
            return HAL_TIMEOUT;
 8001e72:	2003      	movs	r0, #3
}
 8001e74:	b003      	add	sp, #12
 8001e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_LSI_DISABLE();
 8001e7a:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e86:	f7ff fb85 	bl	8001594 <HAL_GetTick>
 8001e8a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8c:	e004      	b.n	8001e98 <HAL_RCC_OscConfig+0x354>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff fb81 	bl	8001594 <HAL_GetTick>
 8001e92:	1bc0      	subs	r0, r0, r7
 8001e94:	2802      	cmp	r0, #2
 8001e96:	d8ec      	bhi.n	8001e72 <HAL_RCC_OscConfig+0x32e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e98:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001e9c:	079b      	lsls	r3, r3, #30
 8001e9e:	d4f6      	bmi.n	8001e8e <HAL_RCC_OscConfig+0x34a>
 8001ea0:	e6d4      	b.n	8001c4c <HAL_RCC_OscConfig+0x108>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea2:	4b5f      	ldr	r3, [pc, #380]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	f042 0208 	orr.w	r2, r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001eb2:	4302      	orrs	r2, r0
 8001eb4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	69e1      	ldr	r1, [r4, #28]
 8001eba:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001ebe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ec2:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec4:	f7ff fd9e 	bl	8001a04 <RCC_SetFlashLatencyFromMSIRange>
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d083      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x290>
 8001ecc:	e79e      	b.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ece:	4a54      	ldr	r2, [pc, #336]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
 8001ed0:	6813      	ldr	r3, [r2, #0]
 8001ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fb5c 	bl	8001594 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001edc:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8002020 <HAL_RCC_OscConfig+0x4dc>
        tickstart = HAL_GetTick();
 8001ee0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee2:	e004      	b.n	8001eee <HAL_RCC_OscConfig+0x3aa>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fb56 	bl	8001594 <HAL_GetTick>
 8001ee8:	1bc0      	subs	r0, r0, r7
 8001eea:	2864      	cmp	r0, #100	; 0x64
 8001eec:	d8c1      	bhi.n	8001e72 <HAL_RCC_OscConfig+0x32e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eee:	f8d8 3000 	ldr.w	r3, [r8]
 8001ef2:	039b      	lsls	r3, r3, #14
 8001ef4:	d5f6      	bpl.n	8001ee4 <HAL_RCC_OscConfig+0x3a0>
 8001ef6:	e73c      	b.n	8001d72 <HAL_RCC_OscConfig+0x22e>
    FlagStatus       pwrclkchanged = RESET;
 8001ef8:	2600      	movs	r6, #0
 8001efa:	e6b9      	b.n	8001c70 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8001efc:	6833      	ldr	r3, [r6, #0]
 8001efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f02:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001f04:	f7ff fb46 	bl	8001594 <HAL_GetTick>
 8001f08:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0a:	e004      	b.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fb42 	bl	8001594 <HAL_GetTick>
 8001f10:	1bc0      	subs	r0, r0, r7
 8001f12:	2802      	cmp	r0, #2
 8001f14:	d8ad      	bhi.n	8001e72 <HAL_RCC_OscConfig+0x32e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f16:	6833      	ldr	r3, [r6, #0]
 8001f18:	0558      	lsls	r0, r3, #21
 8001f1a:	d4f7      	bmi.n	8001f0c <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	e67a      	b.n	8001c16 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f20:	4a3f      	ldr	r2, [pc, #252]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
 8001f22:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001f2e:	f7ff fb31 	bl	8001594 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f32:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8002020 <HAL_RCC_OscConfig+0x4dc>
      tickstart = HAL_GetTick();
 8001f36:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f38:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3c:	e004      	b.n	8001f48 <HAL_RCC_OscConfig+0x404>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7ff fb29 	bl	8001594 <HAL_GetTick>
 8001f42:	1bc0      	subs	r0, r0, r7
 8001f44:	4548      	cmp	r0, r9
 8001f46:	d894      	bhi.n	8001e72 <HAL_RCC_OscConfig+0x32e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f48:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8001f4c:	079b      	lsls	r3, r3, #30
 8001f4e:	d5f6      	bpl.n	8001f3e <HAL_RCC_OscConfig+0x3fa>
    if(pwrclkchanged == SET)
 8001f50:	2e00      	cmp	r6, #0
 8001f52:	f43f aebd 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x18c>
 8001f56:	e006      	b.n	8001f66 <HAL_RCC_OscConfig+0x422>
    return HAL_ERROR;
 8001f58:	2001      	movs	r0, #1
}
 8001f5a:	4770      	bx	lr
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	f022 0203 	bic.w	r2, r2, #3
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	e6c6      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1b0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f66:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
 8001f68:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f70:	e6ae      	b.n	8001cd0 <HAL_RCC_OscConfig+0x18c>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fb0b 	bl	8001594 <HAL_GetTick>
 8001f7e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	05da      	lsls	r2, r3, #23
 8001f84:	f53f ae79 	bmi.w	8001c7a <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f88:	f7ff fb04 	bl	8001594 <HAL_GetTick>
 8001f8c:	eba0 0008 	sub.w	r0, r0, r8
 8001f90:	2802      	cmp	r0, #2
 8001f92:	d9f5      	bls.n	8001f80 <HAL_RCC_OscConfig+0x43c>
 8001f94:	e76d      	b.n	8001e72 <HAL_RCC_OscConfig+0x32e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f9a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fac:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fae:	e793      	b.n	8001ed8 <HAL_RCC_OscConfig+0x394>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb0:	2801      	cmp	r0, #1
 8001fb2:	f43f aeb4 	beq.w	8001d1e <HAL_RCC_OscConfig+0x1da>
        pll_config = RCC->PLLCFGR;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_RCC_OscConfig+0x4dc>)
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        pll_config = RCC->PLLCFGR;
 8001fba:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbc:	f003 0103 	and.w	r1, r3, #3
 8001fc0:	4291      	cmp	r1, r2
 8001fc2:	f47f af23 	bne.w	8001e0c <HAL_RCC_OscConfig+0x2c8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001fc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fcc:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001fd2:	f47f af1b 	bne.w	8001e0c <HAL_RCC_OscConfig+0x2c8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fdc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001fe0:	f47f af14 	bne.w	8001e0c <HAL_RCC_OscConfig+0x2c8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fe4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001fe6:	3a07      	subs	r2, #7
 8001fe8:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001fec:	bf18      	it	ne
 8001fee:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff0:	4291      	cmp	r1, r2
 8001ff2:	f47f af0b 	bne.w	8001e0c <HAL_RCC_OscConfig+0x2c8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ff8:	0852      	lsrs	r2, r2, #1
 8001ffa:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001ffe:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002000:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002004:	f47f af02 	bne.w	8001e0c <HAL_RCC_OscConfig+0x2c8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002008:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800200a:	0852      	lsrs	r2, r2, #1
 800200c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002010:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002012:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8002016:	bf14      	ite	ne
 8002018:	2001      	movne	r0, #1
 800201a:	2000      	moveq	r0, #0
 800201c:	e67f      	b.n	8001d1e <HAL_RCC_OscConfig+0x1da>
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	0800c348 	.word	0x0800c348
 8002028:	20000008 	.word	0x20000008
 800202c:	20000000 	.word	0x20000000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002030:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <HAL_RCC_OscConfig+0x590>)
 8002032:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002036:	f042 0204 	orr.w	r2, r2, #4
 800203a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800203e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204a:	e770      	b.n	8001f2e <HAL_RCC_OscConfig+0x3ea>
        __HAL_RCC_PLL_DISABLE();
 800204c:	4d21      	ldr	r5, [pc, #132]	; (80020d4 <HAL_RCC_OscConfig+0x590>)
 800204e:	682b      	ldr	r3, [r5, #0]
 8002050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002054:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002056:	f7ff fa9d 	bl	8001594 <HAL_GetTick>
 800205a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205c:	e005      	b.n	800206a <HAL_RCC_OscConfig+0x526>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205e:	f7ff fa99 	bl	8001594 <HAL_GetTick>
 8002062:	1b80      	subs	r0, r0, r6
 8002064:	2802      	cmp	r0, #2
 8002066:	f63f af04 	bhi.w	8001e72 <HAL_RCC_OscConfig+0x32e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206a:	682b      	ldr	r3, [r5, #0]
 800206c:	0199      	lsls	r1, r3, #6
 800206e:	d4f6      	bmi.n	800205e <HAL_RCC_OscConfig+0x51a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002070:	68e9      	ldr	r1, [r5, #12]
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_RCC_OscConfig+0x594>)
 8002074:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002076:	4e17      	ldr	r6, [pc, #92]	; (80020d4 <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002078:	400b      	ands	r3, r1
 800207a:	4313      	orrs	r3, r2
 800207c:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	; 0x30
 8002080:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002084:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8002088:	3a01      	subs	r2, #1
 800208a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800208e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002090:	0900      	lsrs	r0, r0, #4
 8002092:	0849      	lsrs	r1, r1, #1
 8002094:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8002098:	3901      	subs	r1, #1
 800209a:	0852      	lsrs	r2, r2, #1
 800209c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80020a0:	3a01      	subs	r2, #1
 80020a2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80020a6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80020a8:	682b      	ldr	r3, [r5, #0]
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b0:	68eb      	ldr	r3, [r5, #12]
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80020b8:	f7ff fa6c 	bl	8001594 <HAL_GetTick>
 80020bc:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	e005      	b.n	80020cc <HAL_RCC_OscConfig+0x588>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff fa68 	bl	8001594 <HAL_GetTick>
 80020c4:	1b00      	subs	r0, r0, r4
 80020c6:	2802      	cmp	r0, #2
 80020c8:	f63f aed3 	bhi.w	8001e72 <HAL_RCC_OscConfig+0x32e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020cc:	6833      	ldr	r3, [r6, #0]
 80020ce:	019a      	lsls	r2, r3, #6
 80020d0:	d5f6      	bpl.n	80020c0 <HAL_RCC_OscConfig+0x57c>
 80020d2:	e623      	b.n	8001d1c <HAL_RCC_OscConfig+0x1d8>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	f99d808c 	.word	0xf99d808c

080020dc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80020dc:	2800      	cmp	r0, #0
 80020de:	f000 8081 	beq.w	80021e4 <HAL_RCC_ClockConfig+0x108>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e2:	4a45      	ldr	r2, [pc, #276]	; (80021f8 <HAL_RCC_ClockConfig+0x11c>)
 80020e4:	6813      	ldr	r3, [r2, #0]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	428b      	cmp	r3, r1
{
 80020ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f0:	460d      	mov	r5, r1
 80020f2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	d20c      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	6813      	ldr	r3, [r2, #0]
 80020f8:	f023 0307 	bic.w	r3, r3, #7
 80020fc:	430b      	orrs	r3, r1
 80020fe:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002100:	6813      	ldr	r3, [r2, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	428b      	cmp	r3, r1
 8002108:	d002      	beq.n	8002110 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800210a:	2001      	movs	r0, #1
}
 800210c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	07da      	lsls	r2, r3, #31
 8002114:	d43f      	bmi.n	8002196 <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002116:	0799      	lsls	r1, r3, #30
 8002118:	d506      	bpl.n	8002128 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211a:	4938      	ldr	r1, [pc, #224]	; (80021fc <HAL_RCC_ClockConfig+0x120>)
 800211c:	68a0      	ldr	r0, [r4, #8]
 800211e:	688a      	ldr	r2, [r1, #8]
 8002120:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002124:	4302      	orrs	r2, r0
 8002126:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4933      	ldr	r1, [pc, #204]	; (80021f8 <HAL_RCC_ClockConfig+0x11c>)
 800212a:	680a      	ldr	r2, [r1, #0]
 800212c:	f002 0207 	and.w	r2, r2, #7
 8002130:	42aa      	cmp	r2, r5
 8002132:	d909      	bls.n	8002148 <HAL_RCC_ClockConfig+0x6c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002134:	680a      	ldr	r2, [r1, #0]
 8002136:	f022 0207 	bic.w	r2, r2, #7
 800213a:	432a      	orrs	r2, r5
 800213c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	680a      	ldr	r2, [r1, #0]
 8002140:	f002 0207 	and.w	r2, r2, #7
 8002144:	42aa      	cmp	r2, r5
 8002146:	d1e0      	bne.n	800210a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	075a      	lsls	r2, r3, #29
 800214a:	d506      	bpl.n	800215a <HAL_RCC_ClockConfig+0x7e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	492b      	ldr	r1, [pc, #172]	; (80021fc <HAL_RCC_ClockConfig+0x120>)
 800214e:	68e0      	ldr	r0, [r4, #12]
 8002150:	688a      	ldr	r2, [r1, #8]
 8002152:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002156:	4302      	orrs	r2, r0
 8002158:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	071b      	lsls	r3, r3, #28
 800215c:	d507      	bpl.n	800216e <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800215e:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HAL_RCC_ClockConfig+0x120>)
 8002160:	6921      	ldr	r1, [r4, #16]
 8002162:	6893      	ldr	r3, [r2, #8]
 8002164:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002168:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800216c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800216e:	f7ff fc8f 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 8002172:	4a22      	ldr	r2, [pc, #136]	; (80021fc <HAL_RCC_ClockConfig+0x120>)
 8002174:	4c22      	ldr	r4, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x124>)
 8002176:	6892      	ldr	r2, [r2, #8]
 8002178:	4922      	ldr	r1, [pc, #136]	; (8002204 <HAL_RCC_ClockConfig+0x128>)
 800217a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800217e:	4603      	mov	r3, r0
 8002180:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8002182:	4821      	ldr	r0, [pc, #132]	; (8002208 <HAL_RCC_ClockConfig+0x12c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002184:	f002 021f 	and.w	r2, r2, #31
 8002188:	40d3      	lsrs	r3, r2
}
 800218a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800218e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002190:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8002192:	f7ff b9bf 	b.w	8001514 <HAL_InitTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002196:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002198:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_RCC_ClockConfig+0x120>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219e:	d023      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x10c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a0:	2a02      	cmp	r2, #2
 80021a2:	d01c      	beq.n	80021de <HAL_RCC_ClockConfig+0x102>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021a4:	bb2a      	cbnz	r2, 80021f2 <HAL_RCC_ClockConfig+0x116>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021a6:	079e      	lsls	r6, r3, #30
 80021a8:	d5af      	bpl.n	800210a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4e14      	ldr	r6, [pc, #80]	; (80021fc <HAL_RCC_ClockConfig+0x120>)
 80021ac:	68b3      	ldr	r3, [r6, #8]
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80021b6:	f7ff f9ed 	bl	8001594 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ba:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80021be:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c0:	e004      	b.n	80021cc <HAL_RCC_ClockConfig+0xf0>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c2:	f7ff f9e7 	bl	8001594 <HAL_GetTick>
 80021c6:	1bc0      	subs	r0, r0, r7
 80021c8:	4540      	cmp	r0, r8
 80021ca:	d810      	bhi.n	80021ee <HAL_RCC_ClockConfig+0x112>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021cc:	68b3      	ldr	r3, [r6, #8]
 80021ce:	6862      	ldr	r2, [r4, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021d8:	d1f3      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xe6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	e79b      	b.n	8002116 <HAL_RCC_ClockConfig+0x3a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021de:	039f      	lsls	r7, r3, #14
 80021e0:	d4e3      	bmi.n	80021aa <HAL_RCC_ClockConfig+0xce>
 80021e2:	e792      	b.n	800210a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80021e4:	2001      	movs	r0, #1
}
 80021e6:	4770      	bx	lr
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e8:	019b      	lsls	r3, r3, #6
 80021ea:	d4de      	bmi.n	80021aa <HAL_RCC_ClockConfig+0xce>
 80021ec:	e78d      	b.n	800210a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80021ee:	2003      	movs	r0, #3
 80021f0:	e78c      	b.n	800210c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f2:	0558      	lsls	r0, r3, #21
 80021f4:	d589      	bpl.n	800210a <HAL_RCC_ClockConfig+0x2e>
 80021f6:	e7d8      	b.n	80021aa <HAL_RCC_ClockConfig+0xce>
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40021000 	.word	0x40021000
 8002200:	0800c348 	.word	0x0800c348
 8002204:	20000000 	.word	0x20000000
 8002208:	20000008 	.word	0x20000008

0800220c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800220c:	4b01      	ldr	r3, [pc, #4]	; (8002214 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000000 	.word	0x20000000

08002218 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x18>)
 800221a:	4a06      	ldr	r2, [pc, #24]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800221c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800221e:	4906      	ldr	r1, [pc, #24]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002220:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002224:	6808      	ldr	r0, [r1, #0]
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	f003 031f 	and.w	r3, r3, #31
}
 800222c:	40d8      	lsrs	r0, r3
 800222e:	4770      	bx	lr
 8002230:	40021000 	.word	0x40021000
 8002234:	0800c358 	.word	0x0800c358
 8002238:	20000000 	.word	0x20000000

0800223c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCC_GetPCLK2Freq+0x18>)
 800223e:	4a06      	ldr	r2, [pc, #24]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002240:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002242:	4906      	ldr	r1, [pc, #24]	; (800225c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002244:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002248:	6808      	ldr	r0, [r1, #0]
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	f003 031f 	and.w	r3, r3, #31
}
 8002250:	40d8      	lsrs	r0, r3
 8002252:	4770      	bx	lr
 8002254:	40021000 	.word	0x40021000
 8002258:	0800c358 	.word	0x0800c358
 800225c:	20000000 	.word	0x20000000

08002260 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002262:	4b47      	ldr	r3, [pc, #284]	; (8002380 <RCCEx_PLLSAI1_Config+0x120>)
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	0792      	lsls	r2, r2, #30
{
 8002268:	4604      	mov	r4, r0
 800226a:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800226c:	d007      	beq.n	800227e <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	6801      	ldr	r1, [r0, #0]
 8002272:	f002 0203 	and.w	r2, r2, #3
 8002276:	428a      	cmp	r2, r1
 8002278:	d04c      	beq.n	8002314 <RCCEx_PLLSAI1_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800227a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800227c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800227e:	6800      	ldr	r0, [r0, #0]
 8002280:	2802      	cmp	r0, #2
 8002282:	d058      	beq.n	8002336 <RCCEx_PLLSAI1_Config+0xd6>
 8002284:	2803      	cmp	r0, #3
 8002286:	d04f      	beq.n	8002328 <RCCEx_PLLSAI1_Config+0xc8>
 8002288:	2801      	cmp	r0, #1
 800228a:	d1f6      	bne.n	800227a <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	079b      	lsls	r3, r3, #30
 8002290:	d5f4      	bpl.n	800227c <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002292:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <RCCEx_PLLSAI1_Config+0x120>)
 8002294:	68d3      	ldr	r3, [r2, #12]
 8002296:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800229a:	4318      	orrs	r0, r3
 800229c:	6863      	ldr	r3, [r4, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80022a4:	60d0      	str	r0, [r2, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80022a6:	4d36      	ldr	r5, [pc, #216]	; (8002380 <RCCEx_PLLSAI1_Config+0x120>)
 80022a8:	682b      	ldr	r3, [r5, #0]
 80022aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022ae:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80022b0:	f7ff f970 	bl	8001594 <HAL_GetTick>
 80022b4:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022b6:	e004      	b.n	80022c2 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022b8:	f7ff f96c 	bl	8001594 <HAL_GetTick>
 80022bc:	1b83      	subs	r3, r0, r6
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d83d      	bhi.n	800233e <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022c2:	682b      	ldr	r3, [r5, #0]
 80022c4:	011a      	lsls	r2, r3, #4
 80022c6:	d4f7      	bmi.n	80022b8 <RCCEx_PLLSAI1_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 80022c8:	2f00      	cmp	r7, #0
 80022ca:	d13a      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022cc:	692b      	ldr	r3, [r5, #16]
 80022ce:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80022d2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80022d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80022de:	0912      	lsrs	r2, r2, #4
 80022e0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80022e4:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80022e6:	4d26      	ldr	r5, [pc, #152]	; (8002380 <RCCEx_PLLSAI1_Config+0x120>)
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022ee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80022f0:	f7ff f950 	bl	8001594 <HAL_GetTick>
 80022f4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022f6:	e004      	b.n	8002302 <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022f8:	f7ff f94c 	bl	8001594 <HAL_GetTick>
 80022fc:	1b83      	subs	r3, r0, r6
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d81d      	bhi.n	800233e <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002302:	682b      	ldr	r3, [r5, #0]
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	d5f7      	bpl.n	80022f8 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002308:	692b      	ldr	r3, [r5, #16]
 800230a:	69a2      	ldr	r2, [r4, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	2000      	movs	r0, #0
 8002310:	612b      	str	r3, [r5, #16]
}
 8002312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002314:	2a00      	cmp	r2, #0
 8002316:	d0b0      	beq.n	800227a <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002318:	68db      	ldr	r3, [r3, #12]
       ||
 800231a:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800231c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002320:	3301      	adds	r3, #1
       ||
 8002322:	4293      	cmp	r3, r2
 8002324:	d1a9      	bne.n	800227a <RCCEx_PLLSAI1_Config+0x1a>
 8002326:	e7be      	b.n	80022a6 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	0395      	lsls	r5, r2, #14
 800232c:	d4b1      	bmi.n	8002292 <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0359      	lsls	r1, r3, #13
 8002332:	d5a2      	bpl.n	800227a <RCCEx_PLLSAI1_Config+0x1a>
 8002334:	e7ad      	b.n	8002292 <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	055e      	lsls	r6, r3, #21
 800233a:	d59e      	bpl.n	800227a <RCCEx_PLLSAI1_Config+0x1a>
 800233c:	e7a9      	b.n	8002292 <RCCEx_PLLSAI1_Config+0x32>
        status = HAL_TIMEOUT;
 800233e:	2003      	movs	r0, #3
}
 8002340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8002342:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002344:	692b      	ldr	r3, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002346:	d00d      	beq.n	8002364 <RCCEx_PLLSAI1_Config+0x104>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002348:	6962      	ldr	r2, [r4, #20]
 800234a:	68a1      	ldr	r1, [r4, #8]
 800234c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002350:	0852      	lsrs	r2, r2, #1
 8002352:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002356:	3a01      	subs	r2, #1
 8002358:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800235c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002360:	612b      	str	r3, [r5, #16]
 8002362:	e7c0      	b.n	80022e6 <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002364:	6922      	ldr	r2, [r4, #16]
 8002366:	68a1      	ldr	r1, [r4, #8]
 8002368:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800236c:	0852      	lsrs	r2, r2, #1
 800236e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002372:	3a01      	subs	r2, #1
 8002374:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002378:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800237c:	612b      	str	r3, [r5, #16]
 800237e:	e7b2      	b.n	80022e6 <RCCEx_PLLSAI1_Config+0x86>
 8002380:	40021000 	.word	0x40021000

08002384 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <RCCEx_PLLSAI2_Config+0x100>)
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	0792      	lsls	r2, r2, #30
{
 800238c:	4604      	mov	r4, r0
 800238e:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002390:	d007      	beq.n	80023a2 <RCCEx_PLLSAI2_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	6801      	ldr	r1, [r0, #0]
 8002396:	f002 0203 	and.w	r2, r2, #3
 800239a:	428a      	cmp	r2, r1
 800239c:	d04c      	beq.n	8002438 <RCCEx_PLLSAI2_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800239e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80023a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 80023a2:	6800      	ldr	r0, [r0, #0]
 80023a4:	2802      	cmp	r0, #2
 80023a6:	d058      	beq.n	800245a <RCCEx_PLLSAI2_Config+0xd6>
 80023a8:	2803      	cmp	r0, #3
 80023aa:	d04f      	beq.n	800244c <RCCEx_PLLSAI2_Config+0xc8>
 80023ac:	2801      	cmp	r0, #1
 80023ae:	d1f6      	bne.n	800239e <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	079b      	lsls	r3, r3, #30
 80023b4:	d5f4      	bpl.n	80023a0 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023b6:	4a33      	ldr	r2, [pc, #204]	; (8002484 <RCCEx_PLLSAI2_Config+0x100>)
 80023b8:	68d3      	ldr	r3, [r2, #12]
 80023ba:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80023be:	4318      	orrs	r0, r3
 80023c0:	6863      	ldr	r3, [r4, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80023c8:	60d0      	str	r0, [r2, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 80023ca:	4d2e      	ldr	r5, [pc, #184]	; (8002484 <RCCEx_PLLSAI2_Config+0x100>)
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80023d4:	f7ff f8de 	bl	8001594 <HAL_GetTick>
 80023d8:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80023da:	e004      	b.n	80023e6 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80023dc:	f7ff f8da 	bl	8001594 <HAL_GetTick>
 80023e0:	1b83      	subs	r3, r0, r6
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d83d      	bhi.n	8002462 <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	009a      	lsls	r2, r3, #2
 80023ea:	d4f7      	bmi.n	80023dc <RCCEx_PLLSAI2_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 80023ec:	2f00      	cmp	r7, #0
 80023ee:	d13a      	bne.n	8002466 <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023f0:	696b      	ldr	r3, [r5, #20]
 80023f2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80023f6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80023fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002402:	0912      	lsrs	r2, r2, #4
 8002404:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002408:	616b      	str	r3, [r5, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800240a:	4d1e      	ldr	r5, [pc, #120]	; (8002484 <RCCEx_PLLSAI2_Config+0x100>)
 800240c:	682b      	ldr	r3, [r5, #0]
 800240e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002412:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002414:	f7ff f8be 	bl	8001594 <HAL_GetTick>
 8002418:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800241a:	e004      	b.n	8002426 <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800241c:	f7ff f8ba 	bl	8001594 <HAL_GetTick>
 8002420:	1b83      	subs	r3, r0, r6
 8002422:	2b02      	cmp	r3, #2
 8002424:	d81d      	bhi.n	8002462 <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002426:	682b      	ldr	r3, [r5, #0]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	d5f7      	bpl.n	800241c <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800242c:	696b      	ldr	r3, [r5, #20]
 800242e:	6962      	ldr	r2, [r4, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	2000      	movs	r0, #0
 8002434:	616b      	str	r3, [r5, #20]
}
 8002436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002438:	2a00      	cmp	r2, #0
 800243a:	d0b0      	beq.n	800239e <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800243c:	68db      	ldr	r3, [r3, #12]
       ||
 800243e:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002440:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002444:	3301      	adds	r3, #1
       ||
 8002446:	4293      	cmp	r3, r2
 8002448:	d1a9      	bne.n	800239e <RCCEx_PLLSAI2_Config+0x1a>
 800244a:	e7be      	b.n	80023ca <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	0395      	lsls	r5, r2, #14
 8002450:	d4b1      	bmi.n	80023b6 <RCCEx_PLLSAI2_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0359      	lsls	r1, r3, #13
 8002456:	d5a2      	bpl.n	800239e <RCCEx_PLLSAI2_Config+0x1a>
 8002458:	e7ad      	b.n	80023b6 <RCCEx_PLLSAI2_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	055e      	lsls	r6, r3, #21
 800245e:	d59e      	bpl.n	800239e <RCCEx_PLLSAI2_Config+0x1a>
 8002460:	e7a9      	b.n	80023b6 <RCCEx_PLLSAI2_Config+0x32>
        status = HAL_TIMEOUT;
 8002462:	2003      	movs	r0, #3
}
 8002464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002466:	696b      	ldr	r3, [r5, #20]
 8002468:	6922      	ldr	r2, [r4, #16]
 800246a:	68a1      	ldr	r1, [r4, #8]
 800246c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002470:	0852      	lsrs	r2, r2, #1
 8002472:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002476:	3a01      	subs	r2, #1
 8002478:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800247c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002480:	616b      	str	r3, [r5, #20]
 8002482:	e7c2      	b.n	800240a <RCCEx_PLLSAI2_Config+0x86>
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800248c:	6803      	ldr	r3, [r0, #0]
 800248e:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
{
 8002492:	b083      	sub	sp, #12
 8002494:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002496:	d020      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002498:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800249a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800249e:	f000 81d4 	beq.w	800284a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80024a2:	f200 8122 	bhi.w	80026ea <HAL_RCCEx_PeriphCLKConfig+0x262>
 80024a6:	2900      	cmp	r1, #0
 80024a8:	f000 81ab 	beq.w	8002802 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80024ac:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80024b0:	f040 811f 	bne.w	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024b4:	2100      	movs	r1, #0
 80024b6:	3020      	adds	r0, #32
 80024b8:	f7ff ff64 	bl	8002384 <RCCEx_PLLSAI2_Config>
 80024bc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80024be:	2d00      	cmp	r5, #0
 80024c0:	f040 81d0 	bne.w	8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024c6:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c8:	48ae      	ldr	r0, [pc, #696]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80024ca:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80024ce:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80024d2:	4311      	orrs	r1, r2
 80024d4:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 80024d8:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024da:	04d8      	lsls	r0, r3, #19
 80024dc:	f140 810e 	bpl.w	80026fc <HAL_RCCEx_PeriphCLKConfig+0x274>
    switch(PeriphClkInit->Sai2ClockSelection)
 80024e0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80024e2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80024e6:	f000 81b6 	beq.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80024ea:	f200 816c 	bhi.w	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80024ee:	2900      	cmp	r1, #0
 80024f0:	f000 8181 	beq.w	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80024f4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80024f8:	f040 819a 	bne.w	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024fc:	2100      	movs	r1, #0
 80024fe:	f104 0020 	add.w	r0, r4, #32
 8002502:	f7ff ff3f 	bl	8002384 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002506:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002508:	4680      	mov	r8, r0
    if(ret == HAL_OK)
 800250a:	f1b8 0f00 	cmp.w	r8, #0
 800250e:	f040 8162 	bne.w	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002512:	499c      	ldr	r1, [pc, #624]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002514:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002516:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800251a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800251e:	4302      	orrs	r2, r0
 8002520:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002524:	0399      	lsls	r1, r3, #14
 8002526:	f100 80ed 	bmi.w	8002704 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800252a:	07da      	lsls	r2, r3, #31
 800252c:	d508      	bpl.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800252e:	4995      	ldr	r1, [pc, #596]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002530:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002532:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002536:	f022 0203 	bic.w	r2, r2, #3
 800253a:	4302      	orrs	r2, r0
 800253c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002540:	079f      	lsls	r7, r3, #30
 8002542:	d508      	bpl.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002544:	498f      	ldr	r1, [pc, #572]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002546:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002548:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800254c:	f022 020c 	bic.w	r2, r2, #12
 8002550:	4302      	orrs	r2, r0
 8002552:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002556:	075e      	lsls	r6, r3, #29
 8002558:	d508      	bpl.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800255a:	498a      	ldr	r1, [pc, #552]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800255c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800255e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002562:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002566:	4302      	orrs	r2, r0
 8002568:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800256c:	0718      	lsls	r0, r3, #28
 800256e:	d508      	bpl.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002570:	4984      	ldr	r1, [pc, #528]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002572:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002574:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002578:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800257c:	4302      	orrs	r2, r0
 800257e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002582:	06d9      	lsls	r1, r3, #27
 8002584:	d508      	bpl.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002586:	497f      	ldr	r1, [pc, #508]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002588:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800258a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800258e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002592:	4302      	orrs	r2, r0
 8002594:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002598:	069a      	lsls	r2, r3, #26
 800259a:	d508      	bpl.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800259c:	4979      	ldr	r1, [pc, #484]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800259e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80025a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025a8:	4302      	orrs	r2, r0
 80025aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025ae:	059f      	lsls	r7, r3, #22
 80025b0:	d508      	bpl.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025b2:	4974      	ldr	r1, [pc, #464]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80025b4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80025b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025ba:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80025be:	4302      	orrs	r2, r0
 80025c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025c4:	055e      	lsls	r6, r3, #21
 80025c6:	d508      	bpl.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025c8:	496e      	ldr	r1, [pc, #440]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80025ca:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80025cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025d0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80025d4:	4302      	orrs	r2, r0
 80025d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025da:	0658      	lsls	r0, r3, #25
 80025dc:	d508      	bpl.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025de:	4969      	ldr	r1, [pc, #420]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80025e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80025e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025e6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025ea:	4302      	orrs	r2, r0
 80025ec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	0619      	lsls	r1, r3, #24
 80025f2:	d508      	bpl.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f4:	4963      	ldr	r1, [pc, #396]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80025f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025fc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002600:	4302      	orrs	r2, r0
 8002602:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002606:	05da      	lsls	r2, r3, #23
 8002608:	d508      	bpl.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800260a:	495e      	ldr	r1, [pc, #376]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800260c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800260e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002612:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002616:	4302      	orrs	r2, r0
 8002618:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800261c:	049f      	lsls	r7, r3, #18
 800261e:	d510      	bpl.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002620:	4958      	ldr	r1, [pc, #352]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002622:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002624:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002628:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800262c:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800262e:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002632:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002636:	f000 80f1 	beq.w	800281c <HAL_RCCEx_PeriphCLKConfig+0x394>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800263a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800263e:	f000 8128 	beq.w	8002892 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002642:	031e      	lsls	r6, r3, #12
 8002644:	d510      	bpl.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002646:	494f      	ldr	r1, [pc, #316]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002648:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800264a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800264e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002652:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002654:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002658:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800265c:	f000 80e3 	beq.w	8002826 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002660:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002664:	f000 811f 	beq.w	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002668:	0358      	lsls	r0, r3, #13
 800266a:	d510      	bpl.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800266c:	4945      	ldr	r1, [pc, #276]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800266e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002670:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002674:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002678:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800267a:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800267e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002682:	f000 80c6 	beq.w	8002812 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002686:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800268a:	f000 80f8 	beq.w	800287e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800268e:	0459      	lsls	r1, r3, #17
 8002690:	d510      	bpl.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002692:	483c      	ldr	r0, [pc, #240]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002694:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002696:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800269a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800269e:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026a4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026a8:	f000 80c5 	beq.w	8002836 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026ac:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80026b0:	f000 80da 	beq.w	8002868 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026b4:	041a      	lsls	r2, r3, #16
 80026b6:	d508      	bpl.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026b8:	4932      	ldr	r1, [pc, #200]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80026ba:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80026bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026c0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80026c4:	4302      	orrs	r2, r0
 80026c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ca:	03db      	lsls	r3, r3, #15
 80026cc:	d509      	bpl.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026ce:	4a2d      	ldr	r2, [pc, #180]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80026d0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80026d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026dc:	430b      	orrs	r3, r1
 80026de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80026e2:	4628      	mov	r0, r5
 80026e4:	b003      	add	sp, #12
 80026e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 80026ea:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80026ee:	f43f aeeb 	beq.w	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026f2:	04d8      	lsls	r0, r3, #19
    switch(PeriphClkInit->Sai1ClockSelection)
 80026f4:	f04f 0501 	mov.w	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026f8:	f53f aef2 	bmi.w	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80026fc:	46a8      	mov	r8, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026fe:	0399      	lsls	r1, r3, #14
 8002700:	f57f af13 	bpl.w	800252a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002704:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002706:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002708:	00d2      	lsls	r2, r2, #3
 800270a:	d566      	bpl.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x352>
    FlagStatus       pwrclkchanged = RESET;
 800270c:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002710:	4e1d      	ldr	r6, [pc, #116]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002712:	6833      	ldr	r3, [r6, #0]
 8002714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002718:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800271a:	f7fe ff3b 	bl	8001594 <HAL_GetTick>
 800271e:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002720:	e004      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002722:	f7fe ff37 	bl	8001594 <HAL_GetTick>
 8002726:	1bc3      	subs	r3, r0, r7
 8002728:	2b02      	cmp	r3, #2
 800272a:	d862      	bhi.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800272c:	6833      	ldr	r3, [r6, #0]
 800272e:	05db      	lsls	r3, r3, #23
 8002730:	d5f7      	bpl.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    if(ret == HAL_OK)
 8002732:	f1b8 0f00 	cmp.w	r8, #0
 8002736:	f040 80c0 	bne.w	80028ba <HAL_RCCEx_PeriphCLKConfig+0x432>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800273a:	4e12      	ldr	r6, [pc, #72]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800273c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002740:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002744:	d02b      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002746:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800274a:	429a      	cmp	r2, r3
 800274c:	d029      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800274e:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002752:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275a:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800275e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800276a:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800276c:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        RCC->BDCR = tmpregister;
 8002770:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002774:	f140 80a3 	bpl.w	80028be <HAL_RCCEx_PeriphCLKConfig+0x436>
        tickstart = HAL_GetTick();
 8002778:	f7fe ff0c 	bl	8001594 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002780:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278c:	f7fe ff02 	bl	8001594 <HAL_GetTick>
 8002790:	1bc0      	subs	r0, r0, r7
 8002792:	4540      	cmp	r0, r8
 8002794:	d82d      	bhi.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002796:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800279a:	0799      	lsls	r1, r3, #30
 800279c:	d5f6      	bpl.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x304>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800279e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80027a2:	4948      	ldr	r1, [pc, #288]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80027a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 80027b2:	f1b9 0f00 	cmp.w	r9, #0
 80027b6:	d004      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b8:	4a42      	ldr	r2, [pc, #264]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80027ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	e6b1      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    switch(PeriphClkInit->Sai2ClockSelection)
 80027c6:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80027ca:	d131      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80027cc:	46a8      	mov	r8, r5
    if(ret == HAL_OK)
 80027ce:	f1b8 0f00 	cmp.w	r8, #0
 80027d2:	f43f ae9e 	beq.w	8002512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80027d6:	4645      	mov	r5, r8
 80027d8:	e791      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x276>
      __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027e0:	659a      	str	r2, [r3, #88]	; 0x58
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80027ec:	f04f 0901 	mov.w	r9, #1
 80027f0:	e78e      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = HAL_TIMEOUT;
 80027f2:	2503      	movs	r5, #3
 80027f4:	e7dd      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027f6:	1d20      	adds	r0, r4, #4
 80027f8:	f7ff fd32 	bl	8002260 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027fc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027fe:	4680      	mov	r8, r0
      break;
 8002800:	e683      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x82>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002802:	3004      	adds	r0, #4
 8002804:	f7ff fd2c 	bl	8002260 <RCCEx_PLLSAI1_Config>
 8002808:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800280a:	2d00      	cmp	r5, #0
 800280c:	f43f ae5a 	beq.w	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002810:	e028      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002812:	68ca      	ldr	r2, [r1, #12]
 8002814:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002818:	60ca      	str	r2, [r1, #12]
 800281a:	e738      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800281c:	68ca      	ldr	r2, [r1, #12]
 800281e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002822:	60ca      	str	r2, [r1, #12]
 8002824:	e70d      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002826:	68ca      	ldr	r2, [r1, #12]
 8002828:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800282c:	60ca      	str	r2, [r1, #12]
 800282e:	e71b      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002830:	2501      	movs	r5, #1
 8002832:	46a8      	mov	r8, r5
 8002834:	e763      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x276>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002836:	2102      	movs	r1, #2
 8002838:	1d20      	adds	r0, r4, #4
 800283a:	f7ff fd11 	bl	8002260 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800283e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8002840:	2800      	cmp	r0, #0
 8002842:	f43f af37 	beq.w	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002846:	4605      	mov	r5, r0
 8002848:	e734      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800284a:	481e      	ldr	r0, [pc, #120]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800284c:	68c2      	ldr	r2, [r0, #12]
 800284e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002852:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8002854:	e638      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002856:	491b      	ldr	r1, [pc, #108]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002858:	68ca      	ldr	r2, [r1, #12]
 800285a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800285e:	60ca      	str	r2, [r1, #12]
      break;
 8002860:	46a8      	mov	r8, r5
 8002862:	e652      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x82>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	e638      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x52>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002868:	2102      	movs	r1, #2
 800286a:	f104 0020 	add.w	r0, r4, #32
 800286e:	f7ff fd89 	bl	8002384 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002872:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8002874:	2800      	cmp	r0, #0
 8002876:	f43f af1d 	beq.w	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800287a:	4605      	mov	r5, r0
 800287c:	e71a      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800287e:	2101      	movs	r1, #1
 8002880:	1d20      	adds	r0, r4, #4
 8002882:	f7ff fced 	bl	8002260 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002886:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8002888:	2800      	cmp	r0, #0
 800288a:	f43f af00 	beq.w	800268e <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800288e:	4605      	mov	r5, r0
 8002890:	e6fd      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002892:	2101      	movs	r1, #1
 8002894:	1d20      	adds	r0, r4, #4
 8002896:	f7ff fce3 	bl	8002260 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800289a:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 800289c:	2800      	cmp	r0, #0
 800289e:	f43f aed0 	beq.w	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028a2:	4605      	mov	r5, r0
 80028a4:	e6cd      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028a6:	2101      	movs	r1, #1
 80028a8:	1d20      	adds	r0, r4, #4
 80028aa:	f7ff fcd9 	bl	8002260 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028ae:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80028b0:	2800      	cmp	r0, #0
 80028b2:	f43f aed9 	beq.w	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028b6:	4605      	mov	r5, r0
 80028b8:	e6d6      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80028ba:	4645      	mov	r5, r8
 80028bc:	e779      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80028be:	4613      	mov	r3, r2
 80028c0:	e76f      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000

080028c8 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80028c8:	4a02      	ldr	r2, [pc, #8]	; (80028d4 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80028ca:	6813      	ldr	r3, [r2, #0]
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	6013      	str	r3, [r2, #0]
}
 80028d2:	4770      	bx	lr
 80028d4:	40021000 	.word	0x40021000

080028d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028da:	4605      	mov	r5, r0
 80028dc:	460e      	mov	r6, r1
 80028de:	4617      	mov	r7, r2
 80028e0:	1c70      	adds	r0, r6, #1
  while ((hspi->Instance->SR & Fifo) != State)
 80028e2:	682b      	ldr	r3, [r5, #0]
 80028e4:	d110      	bne.n	8002908 <SPI_EndRxTxTransaction+0x30>
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 80028ec:	d1fb      	bne.n	80028e6 <SPI_EndRxTxTransaction+0xe>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	0611      	lsls	r1, r2, #24
 80028f2:	d4fc      	bmi.n	80028ee <SPI_EndRxTxTransaction+0x16>
  while ((hspi->Instance->SR & Fifo) != State)
 80028f4:	6898      	ldr	r0, [r3, #8]
 80028f6:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 80028fa:	d004      	beq.n	8002906 <SPI_EndRxTxTransaction+0x2e>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80028fc:	7b1a      	ldrb	r2, [r3, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 80028fe:	6898      	ldr	r0, [r3, #8]
 8002900:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 8002904:	d1fa      	bne.n	80028fc <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 800290e:	d025      	beq.n	800295c <SPI_EndRxTxTransaction+0x84>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002910:	f7fe fe40 	bl	8001594 <HAL_GetTick>
 8002914:	1bc0      	subs	r0, r0, r7
 8002916:	4286      	cmp	r6, r0
 8002918:	d8e2      	bhi.n	80028e0 <SPI_EndRxTxTransaction+0x8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800291a:	682b      	ldr	r3, [r5, #0]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800291c:	6869      	ldr	r1, [r5, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800291e:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002920:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002924:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002928:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800292a:	d02d      	beq.n	8002988 <SPI_EndRxTxTransaction+0xb0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800292c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800292e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002932:	d107      	bne.n	8002944 <SPI_EndRxTxTransaction+0x6c>
          SPI_RESET_CRC(hspi);
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002942:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002944:	2301      	movs	r3, #1
 8002946:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800294a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 800294c:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800294e:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 8002952:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002956:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 8002958:	2003      	movs	r0, #3
}
 800295a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	0612      	lsls	r2, r2, #24
 8002960:	d506      	bpl.n	8002970 <SPI_EndRxTxTransaction+0x98>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002962:	f7fe fe17 	bl	8001594 <HAL_GetTick>
 8002966:	1bc0      	subs	r0, r0, r7
 8002968:	4286      	cmp	r6, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800296a:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800296c:	d8f6      	bhi.n	800295c <SPI_EndRxTxTransaction+0x84>
 800296e:	e7d5      	b.n	800291c <SPI_EndRxTxTransaction+0x44>
  while ((hspi->Instance->SR & Fifo) != State)
 8002970:	689c      	ldr	r4, [r3, #8]
 8002972:	f414 64c0 	ands.w	r4, r4, #1536	; 0x600
 8002976:	d013      	beq.n	80029a0 <SPI_EndRxTxTransaction+0xc8>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002978:	7b1b      	ldrb	r3, [r3, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800297a:	f7fe fe0b 	bl	8001594 <HAL_GetTick>
 800297e:	1bc0      	subs	r0, r0, r7
 8002980:	4286      	cmp	r6, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002982:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002984:	d8f4      	bhi.n	8002970 <SPI_EndRxTxTransaction+0x98>
 8002986:	e7c9      	b.n	800291c <SPI_EndRxTxTransaction+0x44>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002988:	68aa      	ldr	r2, [r5, #8]
 800298a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800298e:	d002      	beq.n	8002996 <SPI_EndRxTxTransaction+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002990:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002994:	d1ca      	bne.n	800292c <SPI_EndRxTxTransaction+0x54>
          __HAL_SPI_DISABLE(hspi);
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e7c5      	b.n	800292c <SPI_EndRxTxTransaction+0x54>
  return HAL_OK;
 80029a0:	4620      	mov	r0, r4
}
 80029a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029a4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d05e      	beq.n	8002a66 <HAL_SPI_Init+0xc2>
{
 80029a8:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 80029aa:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ae:	2200      	movs	r2, #0
 80029b0:	6282      	str	r2, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80029b2:	4604      	mov	r4, r0
 80029b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d043      	beq.n	8002a44 <HAL_SPI_Init+0xa0>
  __HAL_SPI_DISABLE(hspi);
 80029bc:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029be:	68e6      	ldr	r6, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80029c0:	2302      	movs	r3, #2
 80029c2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80029c6:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029c8:	f5b6 6fe0 	cmp.w	r6, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80029cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d0:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029d2:	d92d      	bls.n	8002a30 <HAL_SPI_Init+0x8c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029d4:	f5b6 6f70 	cmp.w	r6, #3840	; 0xf00
 80029d8:	d147      	bne.n	8002a6a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80029da:	6b23      	ldr	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80029dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d135      	bne.n	8002a4e <HAL_SPI_Init+0xaa>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80029e2:	2302      	movs	r3, #2
 80029e4:	6323      	str	r3, [r4, #48]	; 0x30
 80029e6:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80029ea:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	6922      	ldr	r2, [r4, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	6962      	ldr	r2, [r4, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	e9d4 5206 	ldrd	r5, r2, [r4, #24]
 80029fc:	4313      	orrs	r3, r2
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80029fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a00:	4332      	orrs	r2, r6
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002a02:	6a26      	ldr	r6, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002a08:	4333      	orrs	r3, r6
 8002a0a:	f405 7500 	and.w	r5, r5, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a0e:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002a10:	432b      	orrs	r3, r5
 8002a12:	4303      	orrs	r3, r0
 8002a14:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a16:	4332      	orrs	r2, r6
 8002a18:	f00e 0304 	and.w	r3, lr, #4
 8002a1c:	431a      	orrs	r2, r3
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a1e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a20:	ea42 020c 	orr.w	r2, r2, ip
  hspi->State     = HAL_SPI_STATE_READY;
 8002a24:	2301      	movs	r3, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a26:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a28:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a2a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a30:	d014      	beq.n	8002a5c <HAL_SPI_Init+0xb8>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a32:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a38:	b960      	cbnz	r0, 8002a54 <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	6323      	str	r3, [r4, #48]	; 0x30
 8002a3e:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8002a42:	e7d2      	b.n	80029ea <HAL_SPI_Init+0x46>
    hspi->Lock = HAL_UNLOCKED;
 8002a44:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002a48:	f001 fafe 	bl	8004048 <HAL_SPI_MspInit>
 8002a4c:	e7b6      	b.n	80029bc <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a4e:	f04f 0c00 	mov.w	ip, #0
 8002a52:	e7ca      	b.n	80029ea <HAL_SPI_Init+0x46>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a54:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a56:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8002a5a:	e7c6      	b.n	80029ea <HAL_SPI_Init+0x46>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002a5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ec      	bne.n	8002a3e <HAL_SPI_Init+0x9a>
 8002a64:	e7e9      	b.n	8002a3a <HAL_SPI_Init+0x96>
    return HAL_ERROR;
 8002a66:	2001      	movs	r0, #1
}
 8002a68:	4770      	bx	lr
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d0b6      	beq.n	80029e2 <HAL_SPI_Init+0x3e>
 8002a74:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a76:	469c      	mov	ip, r3
 8002a78:	e7b7      	b.n	80029ea <HAL_SPI_Init+0x46>
 8002a7a:	bf00      	nop

08002a7c <HAL_SPI_TransmitReceive>:
{
 8002a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a80:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002a82:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8002a86:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8002a88:	2801      	cmp	r0, #1
 8002a8a:	f000 8098 	beq.w	8002bbe <HAL_SPI_TransmitReceive+0x142>
 8002a8e:	461f      	mov	r7, r3
 8002a90:	2301      	movs	r3, #1
 8002a92:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002a96:	4689      	mov	r9, r1
 8002a98:	4690      	mov	r8, r2
 8002a9a:	f7fe fd7b 	bl	8001594 <HAL_GetTick>
 8002a9e:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8002aa0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8002aa4:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002aa6:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8002aa8:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002aaa:	d010      	beq.n	8002ace <HAL_SPI_TransmitReceive+0x52>
 8002aac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ab0:	d008      	beq.n	8002ac4 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8002ab2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002ab4:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8002ab6:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8002ab8:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002abc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ac4:	68a2      	ldr	r2, [r4, #8]
 8002ac6:	2a00      	cmp	r2, #0
 8002ac8:	d1f3      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x36>
 8002aca:	2904      	cmp	r1, #4
 8002acc:	d1f1      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ace:	f1b9 0f00 	cmp.w	r9, #0
 8002ad2:	d077      	beq.n	8002bc4 <HAL_SPI_TransmitReceive+0x148>
 8002ad4:	f1b8 0f00 	cmp.w	r8, #0
 8002ad8:	d074      	beq.n	8002bc4 <HAL_SPI_TransmitReceive+0x148>
 8002ada:	2f00      	cmp	r7, #0
 8002adc:	d072      	beq.n	8002bc4 <HAL_SPI_TransmitReceive+0x148>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ade:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ae2:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ae4:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ae8:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002aea:	bf1c      	itt	ne
 8002aec:	2205      	movne	r2, #5
 8002aee:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002af2:	2200      	movs	r2, #0
 8002af4:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8002af6:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002afa:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8002afc:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002b00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 8002b04:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b06:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 8002b08:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b0c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b10:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002b12:	d859      	bhi.n	8002bc8 <HAL_SPI_TransmitReceive+0x14c>
 8002b14:	2f01      	cmp	r7, #1
 8002b16:	f000 8129 	beq.w	8002d6c <HAL_SPI_TransmitReceive+0x2f0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b1a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002b1e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b20:	6811      	ldr	r1, [r2, #0]
 8002b22:	0649      	lsls	r1, r1, #25
 8002b24:	f100 80e4 	bmi.w	8002cf0 <HAL_SPI_TransmitReceive+0x274>
    __HAL_SPI_ENABLE(hspi);
 8002b28:	6811      	ldr	r1, [r2, #0]
 8002b2a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002b2e:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80e0 	beq.w	8002cf6 <HAL_SPI_TransmitReceive+0x27a>
 8002b36:	2f01      	cmp	r7, #1
 8002b38:	f000 80dd 	beq.w	8002cf6 <HAL_SPI_TransmitReceive+0x27a>
        txallowed = 1U;
 8002b3c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b92b      	cbnz	r3, 8002b50 <HAL_SPI_TransmitReceive+0xd4>
 8002b44:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8087 	beq.w	8002c5e <HAL_SPI_TransmitReceive+0x1e2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b50:	6822      	ldr	r2, [r4, #0]
 8002b52:	6893      	ldr	r3, [r2, #8]
 8002b54:	0799      	lsls	r1, r3, #30
 8002b56:	d505      	bpl.n	8002b64 <HAL_SPI_TransmitReceive+0xe8>
 8002b58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	b113      	cbz	r3, 8002b64 <HAL_SPI_TransmitReceive+0xe8>
 8002b5e:	2f00      	cmp	r7, #0
 8002b60:	f040 80e9 	bne.w	8002d36 <HAL_SPI_TransmitReceive+0x2ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b64:	6893      	ldr	r3, [r2, #8]
 8002b66:	f013 0301 	ands.w	r3, r3, #1
 8002b6a:	d01e      	beq.n	8002baa <HAL_SPI_TransmitReceive+0x12e>
 8002b6c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002b70:	b289      	uxth	r1, r1
 8002b72:	b1d1      	cbz	r1, 8002baa <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8002b74:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002b78:	b289      	uxth	r1, r1
 8002b7a:	2901      	cmp	r1, #1
 8002b7c:	f240 80cd 	bls.w	8002d1a <HAL_SPI_TransmitReceive+0x29e>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b80:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002b82:	68d0      	ldr	r0, [r2, #12]
 8002b84:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b88:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002b8a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002b8e:	3902      	subs	r1, #2
 8002b90:	b289      	uxth	r1, r1
 8002b92:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002b96:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002b9a:	b289      	uxth	r1, r1
 8002b9c:	2901      	cmp	r1, #1
        txallowed = 1U;
 8002b9e:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 8002ba0:	d803      	bhi.n	8002baa <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ba2:	6853      	ldr	r3, [r2, #4]
 8002ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba8:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002baa:	f7fe fcf3 	bl	8001594 <HAL_GetTick>
 8002bae:	1b40      	subs	r0, r0, r5
 8002bb0:	42b0      	cmp	r0, r6
 8002bb2:	f0c0 80ae 	bcc.w	8002d12 <HAL_SPI_TransmitReceive+0x296>
 8002bb6:	1c73      	adds	r3, r6, #1
 8002bb8:	d0c1      	beq.n	8002b3e <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 8002bba:	2003      	movs	r0, #3
 8002bbc:	e77a      	b.n	8002ab4 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8002bbe:	2002      	movs	r0, #2
}
 8002bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	e775      	b.n	8002ab4 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bc8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002bcc:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bce:	6811      	ldr	r1, [r2, #0]
 8002bd0:	0648      	lsls	r0, r1, #25
 8002bd2:	d403      	bmi.n	8002bdc <HAL_SPI_TransmitReceive+0x160>
    __HAL_SPI_ENABLE(hspi);
 8002bd4:	6811      	ldr	r1, [r2, #0]
 8002bd6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002bda:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d161      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x228>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be0:	4649      	mov	r1, r9
 8002be2:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002be6:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8002be8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bea:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002bf2:	1c72      	adds	r2, r6, #1
{
 8002bf4:	f04f 0701 	mov.w	r7, #1
 8002bf8:	d028      	beq.n	8002c4c <HAL_SPI_TransmitReceive+0x1d0>
 8002bfa:	e04e      	b.n	8002c9a <HAL_SPI_TransmitReceive+0x21e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bfc:	6822      	ldr	r2, [r4, #0]
 8002bfe:	6893      	ldr	r3, [r2, #8]
 8002c00:	079b      	lsls	r3, r3, #30
 8002c02:	d50d      	bpl.n	8002c20 <HAL_SPI_TransmitReceive+0x1a4>
 8002c04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	b153      	cbz	r3, 8002c20 <HAL_SPI_TransmitReceive+0x1a4>
 8002c0a:	b14f      	cbz	r7, 8002c20 <HAL_SPI_TransmitReceive+0x1a4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c0c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002c0e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002c12:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8002c14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c16:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8002c1c:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8002c1e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c20:	6893      	ldr	r3, [r2, #8]
 8002c22:	f013 0301 	ands.w	r3, r3, #1
 8002c26:	d00f      	beq.n	8002c48 <HAL_SPI_TransmitReceive+0x1cc>
 8002c28:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002c2c:	b289      	uxth	r1, r1
 8002c2e:	b159      	cbz	r1, 8002c48 <HAL_SPI_TransmitReceive+0x1cc>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c30:	68d1      	ldr	r1, [r2, #12]
 8002c32:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c34:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8002c38:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8002c3a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c3e:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c48:	f7fe fca4 	bl	8001594 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1d3      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x180>
 8002c54:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ce      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x180>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c5e:	462a      	mov	r2, r5
 8002c60:	4631      	mov	r1, r6
 8002c62:	4620      	mov	r0, r4
 8002c64:	f7ff fe38 	bl	80028d8 <SPI_EndRxTxTransaction>
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	f43f af23 	beq.w	8002ab4 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c6e:	2320      	movs	r3, #32
 8002c70:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002c72:	2001      	movs	r0, #1
 8002c74:	e71e      	b.n	8002ab4 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c76:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ee      	beq.n	8002c5e <HAL_SPI_TransmitReceive+0x1e2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c80:	6822      	ldr	r2, [r4, #0]
 8002c82:	6893      	ldr	r3, [r2, #8]
 8002c84:	0798      	lsls	r0, r3, #30
 8002c86:	d422      	bmi.n	8002cce <HAL_SPI_TransmitReceive+0x252>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c88:	6893      	ldr	r3, [r2, #8]
 8002c8a:	f013 0301 	ands.w	r3, r3, #1
 8002c8e:	d10c      	bne.n	8002caa <HAL_SPI_TransmitReceive+0x22e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c90:	f7fe fc80 	bl	8001594 <HAL_GetTick>
 8002c94:	1b40      	subs	r0, r0, r5
 8002c96:	42b0      	cmp	r0, r6
 8002c98:	d28f      	bcs.n	8002bba <HAL_SPI_TransmitReceive+0x13e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c9a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ee      	bne.n	8002c80 <HAL_SPI_TransmitReceive+0x204>
 8002ca2:	e7e8      	b.n	8002c76 <HAL_SPI_TransmitReceive+0x1fa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ca4:	2f01      	cmp	r7, #1
 8002ca6:	d1a4      	bne.n	8002bf2 <HAL_SPI_TransmitReceive+0x176>
 8002ca8:	e79a      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x164>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002caa:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002cae:	b289      	uxth	r1, r1
 8002cb0:	2900      	cmp	r1, #0
 8002cb2:	d0ed      	beq.n	8002c90 <HAL_SPI_TransmitReceive+0x214>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cb4:	68d1      	ldr	r1, [r2, #12]
 8002cb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cb8:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8002cbc:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8002cbe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cc2:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002ccc:	e7e0      	b.n	8002c90 <HAL_SPI_TransmitReceive+0x214>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0d8      	beq.n	8002c88 <HAL_SPI_TransmitReceive+0x20c>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d0d6      	beq.n	8002c88 <HAL_SPI_TransmitReceive+0x20c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cdc:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002ce0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002ce4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8002cea:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8002cec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002cee:	e7cb      	b.n	8002c88 <HAL_SPI_TransmitReceive+0x20c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f47f af23 	bne.w	8002b3c <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8002cf6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d93e      	bls.n	8002d7c <HAL_SPI_TransmitReceive+0x300>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfe:	4649      	mov	r1, r9
 8002d00:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002d04:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8002d06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d08:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d0a:	3b02      	subs	r3, #2
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002d10:	e714      	b.n	8002b3c <HAL_SPI_TransmitReceive+0xc0>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d12:	2e00      	cmp	r6, #0
 8002d14:	f47f af13 	bne.w	8002b3e <HAL_SPI_TransmitReceive+0xc2>
 8002d18:	e74f      	b.n	8002bba <HAL_SPI_TransmitReceive+0x13e>
        txallowed = 1U;
 8002d1a:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d1e:	7b12      	ldrb	r2, [r2, #12]
 8002d20:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d24:	3301      	adds	r3, #1
 8002d26:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002d28:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8002d34:	e739      	b.n	8002baa <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 8002d36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8002d3e:	d909      	bls.n	8002d54 <HAL_SPI_TransmitReceive+0x2d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d40:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002d44:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d46:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d4a:	3b02      	subs	r3, #2
 8002d4c:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8002d4e:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 8002d50:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002d52:	e707      	b.n	8002b64 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8002d58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8002d5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002d5c:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8002d5e:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8002d60:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8002d62:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002d64:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d66:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 8002d68:	2700      	movs	r7, #0
 8002d6a:	e6fb      	b.n	8002b64 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d6c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8002d70:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d72:	6811      	ldr	r1, [r2, #0]
 8002d74:	0649      	lsls	r1, r1, #25
 8002d76:	f57f aed7 	bpl.w	8002b28 <HAL_SPI_TransmitReceive+0xac>
 8002d7a:	e7bc      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x27a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d7c:	f899 3000 	ldrb.w	r3, [r9]
 8002d80:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8002d82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8002d84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002d86:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8002d88:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8002d8a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8002d8c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002d8e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002d90:	e6d4      	b.n	8002b3c <HAL_SPI_TransmitReceive+0xc0>
 8002d92:	bf00      	nop

08002d94 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d98:	4605      	mov	r5, r0
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d9a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8002d9c:	2820      	cmp	r0, #32
 8002d9e:	d16a      	bne.n	8002e76 <HAL_UART_Transmit+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da0:	4689      	mov	r9, r1
 8002da2:	2900      	cmp	r1, #0
 8002da4:	d043      	beq.n	8002e2e <HAL_UART_Transmit+0x9a>
 8002da6:	4614      	mov	r4, r2
 8002da8:	2a00      	cmp	r2, #0
 8002daa:	d040      	beq.n	8002e2e <HAL_UART_Transmit+0x9a>
 8002dac:	461e      	mov	r6, r3
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8002dae:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d05f      	beq.n	8002e76 <HAL_UART_Transmit+0xe2>
 8002db6:	2301      	movs	r3, #1
 8002db8:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbc:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc2:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc6:	676b      	str	r3, [r5, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002dc8:	f7fe fbe4 	bl	8001594 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dcc:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8002dce:	f8a5 4050 	strh.w	r4, [r5, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002dd6:	f8a5 4052 	strh.w	r4, [r5, #82]	; 0x52
    tickstart = HAL_GetTick();
 8002dda:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ddc:	d04e      	beq.n	8002e7c <HAL_UART_Transmit+0xe8>
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    while (huart->TxXferCount > 0U)
 8002dde:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d059      	beq.n	8002e9c <HAL_UART_Transmit+0x108>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de8:	682c      	ldr	r4, [r5, #0]
 8002dea:	1c72      	adds	r2, r6, #1
 8002dec:	d122      	bne.n	8002e34 <HAL_UART_Transmit+0xa0>
 8002dee:	69e2      	ldr	r2, [r4, #28]
 8002df0:	0613      	lsls	r3, r2, #24
 8002df2:	d5fc      	bpl.n	8002dee <HAL_UART_Transmit+0x5a>
      if (pdata8bits == NULL)
 8002df4:	f1b9 0f00 	cmp.w	r9, #0
 8002df8:	d038      	beq.n	8002e6c <HAL_UART_Transmit+0xd8>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dfa:	f819 3b01 	ldrb.w	r3, [r9], #1
 8002dfe:	8523      	strh	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8002e00:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e0c:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e9      	bne.n	8002dea <HAL_UART_Transmit+0x56>
 8002e16:	1c71      	adds	r1, r6, #1
 8002e18:	d136      	bne.n	8002e88 <HAL_UART_Transmit+0xf4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1a:	69e3      	ldr	r3, [r4, #28]
 8002e1c:	065a      	lsls	r2, r3, #25
 8002e1e:	d5fc      	bpl.n	8002e1a <HAL_UART_Transmit+0x86>
    __HAL_UNLOCK(huart);
 8002e20:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8002e22:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002e24:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8002e28:	676b      	str	r3, [r5, #116]	; 0x74
}
 8002e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8002e2e:	2001      	movs	r0, #1
}
 8002e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e34:	69e3      	ldr	r3, [r4, #28]
 8002e36:	0618      	lsls	r0, r3, #24
 8002e38:	d4dc      	bmi.n	8002df4 <HAL_UART_Transmit+0x60>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3a:	f7fe fbab 	bl	8001594 <HAL_GetTick>
 8002e3e:	1bc0      	subs	r0, r0, r7
 8002e40:	4286      	cmp	r6, r0
 8002e42:	d301      	bcc.n	8002e48 <HAL_UART_Transmit+0xb4>
 8002e44:	2e00      	cmp	r6, #0
 8002e46:	d1cf      	bne.n	8002de8 <HAL_UART_Transmit+0x54>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e50:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e52:	689a      	ldr	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;

        __HAL_UNLOCK(huart);
 8002e54:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002e5c:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8002e5e:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8002e62:	6769      	str	r1, [r5, #116]	; 0x74
      return HAL_TIMEOUT;
 8002e64:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8002e66:	67a9      	str	r1, [r5, #120]	; 0x78
}
 8002e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e6c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e74:	e7c3      	b.n	8002dfe <HAL_UART_Transmit+0x6a>
    return HAL_BUSY;
 8002e76:	2002      	movs	r0, #2
}
 8002e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7c:	692b      	ldr	r3, [r5, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1ad      	bne.n	8002dde <HAL_UART_Transmit+0x4a>
 8002e82:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8002e84:	4699      	mov	r9, r3
 8002e86:	e7aa      	b.n	8002dde <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e88:	69e3      	ldr	r3, [r4, #28]
 8002e8a:	065b      	lsls	r3, r3, #25
 8002e8c:	d4c8      	bmi.n	8002e20 <HAL_UART_Transmit+0x8c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fe fb81 	bl	8001594 <HAL_GetTick>
 8002e92:	1bc0      	subs	r0, r0, r7
 8002e94:	4286      	cmp	r6, r0
 8002e96:	d3d7      	bcc.n	8002e48 <HAL_UART_Transmit+0xb4>
 8002e98:	2e00      	cmp	r6, #0
 8002e9a:	d0d5      	beq.n	8002e48 <HAL_UART_Transmit+0xb4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9c:	682c      	ldr	r4, [r5, #0]
 8002e9e:	e7ba      	b.n	8002e16 <HAL_UART_Transmit+0x82>

08002ea0 <UART_SetConfig>:
{
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ea4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ea6:	6882      	ldr	r2, [r0, #8]
 8002ea8:	6900      	ldr	r0, [r0, #16]
 8002eaa:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eac:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eae:	4302      	orrs	r2, r0
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eb4:	49ac      	ldr	r1, [pc, #688]	; (8003168 <UART_SetConfig+0x2c8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eb6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eb8:	4029      	ands	r1, r5
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	68e1      	ldr	r1, [r4, #12]
 8002ec2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ec6:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ec8:	49a8      	ldr	r1, [pc, #672]	; (800316c <UART_SetConfig+0x2cc>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eca:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ecc:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ece:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ed0:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ed2:	d071      	beq.n	8002fb8 <UART_SetConfig+0x118>
    tmpreg |= huart->Init.OneBitSampling;
 8002ed4:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ed6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8002eda:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002edc:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ede:	49a4      	ldr	r1, [pc, #656]	; (8003170 <UART_SetConfig+0x2d0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ee0:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ee2:	428b      	cmp	r3, r1
 8002ee4:	d024      	beq.n	8002f30 <UART_SetConfig+0x90>
 8002ee6:	4aa3      	ldr	r2, [pc, #652]	; (8003174 <UART_SetConfig+0x2d4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d042      	beq.n	8002f72 <UART_SetConfig+0xd2>
 8002eec:	4aa2      	ldr	r2, [pc, #648]	; (8003178 <UART_SetConfig+0x2d8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	f000 80eb 	beq.w	80030ca <UART_SetConfig+0x22a>
 8002ef4:	4aa1      	ldr	r2, [pc, #644]	; (800317c <UART_SetConfig+0x2dc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	f000 80a5 	beq.w	8003046 <UART_SetConfig+0x1a6>
 8002efc:	4aa0      	ldr	r2, [pc, #640]	; (8003180 <UART_SetConfig+0x2e0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d111      	bne.n	8002f26 <UART_SetConfig+0x86>
 8002f02:	4ba0      	ldr	r3, [pc, #640]	; (8003184 <UART_SetConfig+0x2e4>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f10:	f000 80c9 	beq.w	80030a6 <UART_SetConfig+0x206>
 8002f14:	f200 80b3 	bhi.w	800307e <UART_SetConfig+0x1de>
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80e8 	beq.w	80030ee <UART_SetConfig+0x24e>
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f22:	f000 809d 	beq.w	8003060 <UART_SetConfig+0x1c0>
        ret = HAL_ERROR;
 8002f26:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8002f28:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002f2a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8002f2e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f30:	4b94      	ldr	r3, [pc, #592]	; (8003184 <UART_SetConfig+0x2e4>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d979      	bls.n	8003034 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f40:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f44:	f000 810d 	beq.w	8003162 <UART_SetConfig+0x2c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002f48:	f7ff f978 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8002f4c:	6863      	ldr	r3, [r4, #4]
 8002f4e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f56:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f58:	f1a3 0210 	sub.w	r2, r3, #16
 8002f5c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002f60:	428a      	cmp	r2, r1
 8002f62:	d8e0      	bhi.n	8002f26 <UART_SetConfig+0x86>
      huart->Instance->BRR = usartdiv;
 8002f64:	6822      	ldr	r2, [r4, #0]
 8002f66:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8002f68:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002f6a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8002f6e:	2000      	movs	r0, #0
}
 8002f70:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f72:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002f76:	4b84      	ldr	r3, [pc, #528]	; (8003188 <UART_SetConfig+0x2e8>)
 8002f78:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002f7c:	f002 020c 	and.w	r2, r2, #12
 8002f80:	4413      	add	r3, r2
 8002f82:	791b      	ldrb	r3, [r3, #4]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f88:	d070      	beq.n	800306c <UART_SetConfig+0x1cc>
    switch (clocksource)
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d8cb      	bhi.n	8002f26 <UART_SetConfig+0x86>
 8002f8e:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <UART_SetConfig+0xf4>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	080030c5 	.word	0x080030c5
 8002f98:	08002f49 	.word	0x08002f49
 8002f9c:	080030ad 	.word	0x080030ad
 8002fa0:	08002f27 	.word	0x08002f27
 8002fa4:	08003067 	.word	0x08003067
 8002fa8:	08002f27 	.word	0x08002f27
 8002fac:	08002f27 	.word	0x08002f27
 8002fb0:	08002f27 	.word	0x08002f27
 8002fb4:	08003093 	.word	0x08003093
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fbc:	4871      	ldr	r0, [pc, #452]	; (8003184 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc2:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 8002fc6:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8002fca:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002fce:	f000 808b 	beq.w	80030e8 <UART_SetConfig+0x248>
 8002fd2:	d809      	bhi.n	8002fe8 <UART_SetConfig+0x148>
 8002fd4:	b38d      	cbz	r5, 800303a <UART_SetConfig+0x19a>
 8002fd6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002fda:	d1a4      	bne.n	8002f26 <UART_SetConfig+0x86>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002fdc:	f7fe fd58 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
        break;
 8002fe0:	2504      	movs	r5, #4
    if (lpuart_ker_ck_pres != 0U)
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d0a0      	beq.n	8002f28 <UART_SetConfig+0x88>
 8002fe6:	e005      	b.n	8002ff4 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe8:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8002fec:	d19b      	bne.n	8002f26 <UART_SetConfig+0x86>
 8002fee:	2508      	movs	r5, #8
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002ff0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ff4:	6862      	ldr	r2, [r4, #4]
 8002ff6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002ffa:	4283      	cmp	r3, r0
 8002ffc:	d893      	bhi.n	8002f26 <UART_SetConfig+0x86>
 8002ffe:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003002:	d890      	bhi.n	8002f26 <UART_SetConfig+0x86>
        switch (clocksource)
 8003004:	2d08      	cmp	r5, #8
 8003006:	d88e      	bhi.n	8002f26 <UART_SetConfig+0x86>
 8003008:	a301      	add	r3, pc, #4	; (adr r3, 8003010 <UART_SetConfig+0x170>)
 800300a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 800300e:	bf00      	nop
 8003010:	080031ed 	.word	0x080031ed
 8003014:	08002f27 	.word	0x08002f27
 8003018:	080031d3 	.word	0x080031d3
 800301c:	08002f27 	.word	0x08002f27
 8003020:	080031af 	.word	0x080031af
 8003024:	08002f27 	.word	0x08002f27
 8003028:	08002f27 	.word	0x08002f27
 800302c:	08002f27 	.word	0x08002f27
 8003030:	08003191 	.word	0x08003191
 8003034:	4a54      	ldr	r2, [pc, #336]	; (8003188 <UART_SetConfig+0x2e8>)
 8003036:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003038:	e7a4      	b.n	8002f84 <UART_SetConfig+0xe4>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800303a:	f7ff f8ed 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800303e:	2800      	cmp	r0, #0
 8003040:	f43f af72 	beq.w	8002f28 <UART_SetConfig+0x88>
 8003044:	e7d6      	b.n	8002ff4 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003046:	4b4f      	ldr	r3, [pc, #316]	; (8003184 <UART_SetConfig+0x2e4>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d028      	beq.n	80030a6 <UART_SetConfig+0x206>
 8003054:	d845      	bhi.n	80030e2 <UART_SetConfig+0x242>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d049      	beq.n	80030ee <UART_SetConfig+0x24e>
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	f47f af63 	bne.w	8002f26 <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003060:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003064:	d06f      	beq.n	8003146 <UART_SetConfig+0x2a6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003066:	f7fe fd13 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 800306a:	e76f      	b.n	8002f4c <UART_SetConfig+0xac>
    switch (clocksource)
 800306c:	2b08      	cmp	r3, #8
 800306e:	d85e      	bhi.n	800312e <UART_SetConfig+0x28e>
 8003070:	e8df f003 	tbb	[pc, r3]
 8003074:	5d6c7740 	.word	0x5d6c7740
 8003078:	5d5d5d69 	.word	0x5d5d5d69
 800307c:	60          	.byte	0x60
 800307d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800307e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003082:	d003      	beq.n	800308c <UART_SetConfig+0x1ec>
 8003084:	e74f      	b.n	8002f26 <UART_SetConfig+0x86>
 8003086:	2b30      	cmp	r3, #48	; 0x30
 8003088:	f47f af4d 	bne.w	8002f26 <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800308c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003090:	d050      	beq.n	8003134 <UART_SetConfig+0x294>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003092:	6862      	ldr	r2, [r4, #4]
 8003094:	0853      	lsrs	r3, r2, #1
 8003096:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800309a:	fbb3 f3f2 	udiv	r3, r3, r2
 800309e:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a0:	f1a3 0210 	sub.w	r2, r3, #16
        break;
 80030a4:	e75a      	b.n	8002f5c <UART_SetConfig+0xbc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80030aa:	d04f      	beq.n	800314c <UART_SetConfig+0x2ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030ac:	6862      	ldr	r2, [r4, #4]
 80030ae:	0853      	lsrs	r3, r2, #1
 80030b0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80030b4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80030b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80030bc:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030be:	f1a3 0210 	sub.w	r2, r3, #16
        break;
 80030c2:	e74b      	b.n	8002f5c <UART_SetConfig+0xbc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030c4:	f7ff f8a8 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 80030c8:	e740      	b.n	8002f4c <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ca:	4b2e      	ldr	r3, [pc, #184]	; (8003184 <UART_SetConfig+0x2e4>)
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d0e6      	beq.n	80030a6 <UART_SetConfig+0x206>
 80030d8:	d8d5      	bhi.n	8003086 <UART_SetConfig+0x1e6>
 80030da:	b143      	cbz	r3, 80030ee <UART_SetConfig+0x24e>
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d0bf      	beq.n	8003060 <UART_SetConfig+0x1c0>
 80030e0:	e721      	b.n	8002f26 <UART_SetConfig+0x86>
 80030e2:	2bc0      	cmp	r3, #192	; 0xc0
 80030e4:	d0d2      	beq.n	800308c <UART_SetConfig+0x1ec>
 80030e6:	e71e      	b.n	8002f26 <UART_SetConfig+0x86>
 80030e8:	4828      	ldr	r0, [pc, #160]	; (800318c <UART_SetConfig+0x2ec>)
 80030ea:	2502      	movs	r5, #2
 80030ec:	e782      	b.n	8002ff4 <UART_SetConfig+0x154>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80030f2:	d1e7      	bne.n	80030c4 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030f4:	f7ff f890 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030f8:	6862      	ldr	r2, [r4, #4]
 80030fa:	4601      	mov	r1, r0
 80030fc:	0853      	lsrs	r3, r2, #1
 80030fe:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  HAL_StatusTypeDef ret               = HAL_OK;
 8003102:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003104:	fbb3 f3f2 	udiv	r3, r3, r2
 8003108:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800310a:	f1a3 0110 	sub.w	r1, r3, #16
 800310e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003112:	4291      	cmp	r1, r2
 8003114:	f63f af07 	bhi.w	8002f26 <UART_SetConfig+0x86>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003118:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 800311c:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800311e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003122:	4313      	orrs	r3, r2
 8003124:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 8003126:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003128:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800312c:	bd38      	pop	{r3, r4, r5, pc}
    switch (clocksource)
 800312e:	2001      	movs	r0, #1
 8003130:	2300      	movs	r3, #0
 8003132:	e7ea      	b.n	800310a <UART_SetConfig+0x26a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003134:	6862      	ldr	r2, [r4, #4]
 8003136:	0853      	lsrs	r3, r2, #1
 8003138:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
  HAL_StatusTypeDef ret               = HAL_OK;
 800313c:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800313e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003142:	b29b      	uxth	r3, r3
        break;
 8003144:	e7e1      	b.n	800310a <UART_SetConfig+0x26a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003146:	f7fe fca3 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 800314a:	e7d5      	b.n	80030f8 <UART_SetConfig+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800314c:	6862      	ldr	r2, [r4, #4]
 800314e:	0853      	lsrs	r3, r2, #1
 8003150:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003154:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
  HAL_StatusTypeDef ret               = HAL_OK;
 8003158:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800315a:	fbb3 f3f2 	udiv	r3, r3, r2
 800315e:	b29b      	uxth	r3, r3
        break;
 8003160:	e7d3      	b.n	800310a <UART_SetConfig+0x26a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003162:	f7ff f86b 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8003166:	e7c7      	b.n	80030f8 <UART_SetConfig+0x258>
 8003168:	efff69f3 	.word	0xefff69f3
 800316c:	40008000 	.word	0x40008000
 8003170:	40013800 	.word	0x40013800
 8003174:	40004400 	.word	0x40004400
 8003178:	40004800 	.word	0x40004800
 800317c:	40004c00 	.word	0x40004c00
 8003180:	40005000 	.word	0x40005000
 8003184:	40021000 	.word	0x40021000
 8003188:	0800c360 	.word	0x0800c360
 800318c:	00f42400 	.word	0x00f42400
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003190:	0850      	lsrs	r0, r2, #1
 8003192:	2300      	movs	r3, #0
 8003194:	4619      	mov	r1, r3
 8003196:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
 800319a:	f7fd f881 	bl	80002a0 <__aeabi_uldivmod>
 800319e:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031a0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80031a4:	4913      	ldr	r1, [pc, #76]	; (80031f4 <UART_SetConfig+0x354>)
 80031a6:	428a      	cmp	r2, r1
 80031a8:	f67f aedc 	bls.w	8002f64 <UART_SetConfig+0xc4>
 80031ac:	e6bb      	b.n	8002f26 <UART_SetConfig+0x86>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031ae:	f7fe fc6f 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 80031b2:	6862      	ldr	r2, [r4, #4]
 80031b4:	2300      	movs	r3, #0
 80031b6:	0851      	lsrs	r1, r2, #1
 80031b8:	468c      	mov	ip, r1
 80031ba:	f44f 7580 	mov.w	r5, #256	; 0x100
 80031be:	4619      	mov	r1, r3
 80031c0:	fbe0 c105 	umlal	ip, r1, r0, r5
 80031c4:	4660      	mov	r0, ip
 80031c6:	f7fd f86b 	bl	80002a0 <__aeabi_uldivmod>
 80031ca:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031cc:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
            break;
 80031d0:	e7e8      	b.n	80031a4 <UART_SetConfig+0x304>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80031d2:	4809      	ldr	r0, [pc, #36]	; (80031f8 <UART_SetConfig+0x358>)
 80031d4:	0853      	lsrs	r3, r2, #1
 80031d6:	1818      	adds	r0, r3, r0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	f143 0100 	adc.w	r1, r3, #0
 80031e0:	f7fd f85e 	bl	80002a0 <__aeabi_uldivmod>
 80031e4:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031e6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
            break;
 80031ea:	e7db      	b.n	80031a4 <UART_SetConfig+0x304>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80031ec:	f7ff f814 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 80031f0:	e7df      	b.n	80031b2 <UART_SetConfig+0x312>
 80031f2:	bf00      	nop
 80031f4:	000ffcff 	.word	0x000ffcff
 80031f8:	f4240000 	.word	0xf4240000

080031fc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031fe:	07da      	lsls	r2, r3, #31
{
 8003200:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003202:	d506      	bpl.n	8003212 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003204:	6801      	ldr	r1, [r0, #0]
 8003206:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003208:	684a      	ldr	r2, [r1, #4]
 800320a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800320e:	4322      	orrs	r2, r4
 8003210:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003212:	079c      	lsls	r4, r3, #30
 8003214:	d506      	bpl.n	8003224 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003216:	6801      	ldr	r1, [r0, #0]
 8003218:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800321a:	684a      	ldr	r2, [r1, #4]
 800321c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003220:	4322      	orrs	r2, r4
 8003222:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003224:	0759      	lsls	r1, r3, #29
 8003226:	d506      	bpl.n	8003236 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003228:	6801      	ldr	r1, [r0, #0]
 800322a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800322c:	684a      	ldr	r2, [r1, #4]
 800322e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003232:	4322      	orrs	r2, r4
 8003234:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003236:	071a      	lsls	r2, r3, #28
 8003238:	d506      	bpl.n	8003248 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800323a:	6801      	ldr	r1, [r0, #0]
 800323c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800323e:	684a      	ldr	r2, [r1, #4]
 8003240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003244:	4322      	orrs	r2, r4
 8003246:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003248:	06dc      	lsls	r4, r3, #27
 800324a:	d506      	bpl.n	800325a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800324c:	6801      	ldr	r1, [r0, #0]
 800324e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003250:	688a      	ldr	r2, [r1, #8]
 8003252:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003256:	4322      	orrs	r2, r4
 8003258:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800325a:	0699      	lsls	r1, r3, #26
 800325c:	d506      	bpl.n	800326c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800325e:	6801      	ldr	r1, [r0, #0]
 8003260:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003262:	688a      	ldr	r2, [r1, #8]
 8003264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003268:	4322      	orrs	r2, r4
 800326a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800326c:	065a      	lsls	r2, r3, #25
 800326e:	d509      	bpl.n	8003284 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003270:	6801      	ldr	r1, [r0, #0]
 8003272:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003274:	684a      	ldr	r2, [r1, #4]
 8003276:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800327a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800327c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003280:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003282:	d00b      	beq.n	800329c <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	d506      	bpl.n	8003296 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003288:	6802      	ldr	r2, [r0, #0]
 800328a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800328c:	6853      	ldr	r3, [r2, #4]
 800328e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003292:	430b      	orrs	r3, r1
 8003294:	6053      	str	r3, [r2, #4]
}
 8003296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800329a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800329c:	684a      	ldr	r2, [r1, #4]
 800329e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80032a0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80032a4:	4322      	orrs	r2, r4
 80032a6:	604a      	str	r2, [r1, #4]
 80032a8:	e7ec      	b.n	8003284 <UART_AdvFeatureConfig+0x88>
 80032aa:	bf00      	nop

080032ac <UART_CheckIdleState>:
{
 80032ac:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ae:	2300      	movs	r3, #0
{
 80032b0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b2:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80032b4:	f7fe f96e 	bl	8001594 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80032be:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032c0:	d409      	bmi.n	80032d6 <UART_CheckIdleState+0x2a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	0752      	lsls	r2, r2, #29
 80032c6:	d420      	bmi.n	800330a <UART_CheckIdleState+0x5e>
  __HAL_UNLOCK(huart);
 80032c8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80032ca:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80032cc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->gState = HAL_UART_STATE_READY;
 80032d0:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80032d2:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80032d4:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d6:	69de      	ldr	r6, [r3, #28]
 80032d8:	f416 1600 	ands.w	r6, r6, #2097152	; 0x200000
 80032dc:	d1f1      	bne.n	80032c2 <UART_CheckIdleState+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032de:	f7fe f959 	bl	8001594 <HAL_GetTick>
 80032e2:	1b43      	subs	r3, r0, r5
 80032e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	d3f4      	bcc.n	80032d6 <UART_CheckIdleState+0x2a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80032fc:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80032fe:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8003302:	6761      	str	r1, [r4, #116]	; 0x74
      return HAL_TIMEOUT;
 8003304:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8003306:	67a1      	str	r1, [r4, #120]	; 0x78
}
 8003308:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330a:	69de      	ldr	r6, [r3, #28]
 800330c:	f416 0680 	ands.w	r6, r6, #4194304	; 0x400000
 8003310:	d1da      	bne.n	80032c8 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003312:	f7fe f93f 	bl	8001594 <HAL_GetTick>
 8003316:	1b43      	subs	r3, r0, r5
 8003318:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331e:	d3f4      	bcc.n	800330a <UART_CheckIdleState+0x5e>
 8003320:	e7e4      	b.n	80032ec <UART_CheckIdleState+0x40>
 8003322:	bf00      	nop

08003324 <HAL_UART_Init>:
  if (huart == NULL)
 8003324:	b370      	cbz	r0, 8003384 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003326:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8003328:	b510      	push	{r4, lr}
 800332a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800332c:	b32b      	cbz	r3, 800337a <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 800332e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003330:	2324      	movs	r3, #36	; 0x24
 8003332:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800333a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800333c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800333e:	f7ff fdaf 	bl	8002ea0 <UART_SetConfig>
 8003342:	2801      	cmp	r0, #1
 8003344:	d017      	beq.n	8003376 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003348:	b98b      	cbnz	r3, 800336e <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800335a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003362:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800336a:	f7ff bf9f 	b.w	80032ac <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800336e:	4620      	mov	r0, r4
 8003370:	f7ff ff44 	bl	80031fc <UART_AdvFeatureConfig>
 8003374:	e7e9      	b.n	800334a <HAL_UART_Init+0x26>
}
 8003376:	2001      	movs	r0, #1
 8003378:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800337a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800337e:	f000 fe89 	bl	8004094 <HAL_UART_MspInit>
 8003382:	e7d4      	b.n	800332e <HAL_UART_Init+0xa>
}
 8003384:	2001      	movs	r0, #1
 8003386:	4770      	bx	lr

08003388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800338c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800338e:	e003      	b.n	8003398 <LoopCopyDataInit>

08003390 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003392:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003394:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003396:	3104      	adds	r1, #4

08003398 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003398:	480b      	ldr	r0, [pc, #44]	; (80033c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800339c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800339e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80033a0:	d3f6      	bcc.n	8003390 <CopyDataInit>
	ldr	r2, =_sbss
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80033a4:	e002      	b.n	80033ac <LoopFillZerobss>

080033a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80033a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80033a8:	f842 3b04 	str.w	r3, [r2], #4

080033ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <LoopForever+0x16>)
	cmp	r2, r3
 80033ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80033b0:	d3f9      	bcc.n	80033a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033b2:	f7fe f887 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033b6:	f008 fadf 	bl	800b978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033ba:	f000 fc65 	bl	8003c88 <main>

080033be <LoopForever>:

LoopForever:
    b LoopForever
 80033be:	e7fe      	b.n	80033be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033c0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80033c4:	0800ca60 	.word	0x0800ca60
	ldr	r0, =_sdata
 80033c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80033cc:	200000d8 	.word	0x200000d8
	ldr	r2, =_sbss
 80033d0:	200000d8 	.word	0x200000d8
	ldr	r3, = _ebss
 80033d4:	200010b0 	.word	0x200010b0

080033d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033d8:	e7fe      	b.n	80033d8 <ADC1_2_IRQHandler>
	...

080033dc <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80033dc:	4a0b      	ldr	r2, [pc, #44]	; (800340c <_sbrk+0x30>)
{
 80033de:	b508      	push	{r3, lr}
 80033e0:	4603      	mov	r3, r0
	if (heap_end == 0)
 80033e2:	6810      	ldr	r0, [r2, #0]
 80033e4:	b128      	cbz	r0, 80033f2 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80033e6:	4403      	add	r3, r0
 80033e8:	4669      	mov	r1, sp
 80033ea:	428b      	cmp	r3, r1
 80033ec:	d807      	bhi.n	80033fe <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80033ee:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80033f0:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80033f2:	4807      	ldr	r0, [pc, #28]	; (8003410 <_sbrk+0x34>)
 80033f4:	6010      	str	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80033f6:	4403      	add	r3, r0
 80033f8:	4669      	mov	r1, sp
 80033fa:	428b      	cmp	r3, r1
 80033fc:	d9f7      	bls.n	80033ee <_sbrk+0x12>
		errno = ENOMEM;
 80033fe:	f008 fab5 	bl	800b96c <__errno>
 8003402:	230c      	movs	r3, #12
 8003404:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003406:	f04f 30ff 	mov.w	r0, #4294967295
}
 800340a:	bd08      	pop	{r3, pc}
 800340c:	2000010c 	.word	0x2000010c
 8003410:	200010b0 	.word	0x200010b0

08003414 <demoNotif>:
{
    uint8_t       devCnt;
    rfalNfcDevice *dev;
    
    
    if( st == RFAL_NFC_STATE_WAKEUP_MODE )
 8003414:	2803      	cmp	r0, #3
 8003416:	d004      	beq.n	8003422 <demoNotif+0xe>
    {
        platformLog("Wake Up mode started \r\n");
    }
    else if( st == RFAL_NFC_STATE_POLL_TECHDETECT )
 8003418:	280a      	cmp	r0, #10
 800341a:	d005      	beq.n	8003428 <demoNotif+0x14>
    {
        platformLog("Wake Up mode terminated. Polling for devices \r\n");
    }
    else if( st == RFAL_NFC_STATE_POLL_SELECT )
 800341c:	280c      	cmp	r0, #12
 800341e:	d006      	beq.n	800342e <demoNotif+0x1a>
 8003420:	4770      	bx	lr
        platformLog("Wake Up mode started \r\n");
 8003422:	480c      	ldr	r0, [pc, #48]	; (8003454 <demoNotif+0x40>)
 8003424:	f000 bb5e 	b.w	8003ae4 <logUsart>
        platformLog("Wake Up mode terminated. Polling for devices \r\n");
 8003428:	480b      	ldr	r0, [pc, #44]	; (8003458 <demoNotif+0x44>)
 800342a:	f000 bb5b 	b.w	8003ae4 <logUsart>
{
 800342e:	b500      	push	{lr}
 8003430:	b083      	sub	sp, #12
    {
        /* Multiple devices were found, activate first of them */
        rfalNfcGetDevicesFound( &dev, &devCnt );
 8003432:	f10d 0103 	add.w	r1, sp, #3
 8003436:	a801      	add	r0, sp, #4
 8003438:	f002 ff08 	bl	800624c <rfalNfcGetDevicesFound>
        rfalNfcSelect( 0 );
 800343c:	2000      	movs	r0, #0
 800343e:	f002 fef1 	bl	8006224 <rfalNfcSelect>
        
        platformLog("Multiple Tags detected: %d \r\n", devCnt);
 8003442:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8003446:	4805      	ldr	r0, [pc, #20]	; (800345c <demoNotif+0x48>)
 8003448:	f000 fb4c 	bl	8003ae4 <logUsart>
    }
}
 800344c:	b003      	add	sp, #12
 800344e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003452:	bf00      	nop
 8003454:	0800c56c 	.word	0x0800c56c
 8003458:	0800c584 	.word	0x0800c584
 800345c:	0800c5b4 	.word	0x0800c5b4

08003460 <demoP2P>:
 * 
 * 
 *****************************************************************************
 */
void demoP2P( void )
{
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t   *rxLen;
    uint8_t    *rxData;
    ReturnCode err;

    platformLog(" Initalize device .. ");
 8003462:	4830      	ldr	r0, [pc, #192]	; (8003524 <demoP2P+0xc4>)
{
 8003464:	b085      	sub	sp, #20
    platformLog(" Initalize device .. ");
 8003466:	f000 fb3d 	bl	8003ae4 <logUsart>
 */
ReturnCode demoTransceiveBlocking( uint8_t *txBuf, uint16_t txBufSize, uint8_t **rxData, uint16_t **rcvLen, uint32_t fwt )
{
    ReturnCode err;
    
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	482d      	ldr	r0, [pc, #180]	; (8003528 <demoP2P+0xc8>)
 8003472:	ab02      	add	r3, sp, #8
 8003474:	aa03      	add	r2, sp, #12
 8003476:	211a      	movs	r1, #26
 8003478:	f002 ff14 	bl	80062a4 <rfalNfcDataExchangeStart>
    if( err == ERR_NONE )
 800347c:	b120      	cbz	r0, 8003488 <demoP2P+0x28>
        platformLog("failed.");
 800347e:	482b      	ldr	r0, [pc, #172]	; (800352c <demoP2P+0xcc>)
 8003480:	f000 fb30 	bl	8003ae4 <logUsart>
}
 8003484:	b005      	add	sp, #20
 8003486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    {
        do{
            rfalNfcWorker();
 8003488:	f003 f812 	bl	80064b0 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 800348c:	f002 ffd2 	bl	8006434 <rfalNfcDataExchangeGetStatus>
        }
        while( err == ERR_BUSY );
 8003490:	2802      	cmp	r0, #2
 8003492:	d0f9      	beq.n	8003488 <demoP2P+0x28>
    if( err != ERR_NONE )
 8003494:	2800      	cmp	r0, #0
 8003496:	d1f2      	bne.n	800347e <demoP2P+0x1e>
    platformLog("succeeded.\r\n");
 8003498:	4825      	ldr	r0, [pc, #148]	; (8003530 <demoP2P+0xd0>)
 800349a:	f000 fb23 	bl	8003ae4 <logUsart>
    platformLog(" Push NDEF Uri: www.ST.com .. ");
 800349e:	4825      	ldr	r0, [pc, #148]	; (8003534 <demoP2P+0xd4>)
 80034a0:	f000 fb20 	bl	8003ae4 <logUsart>
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 80034a4:	f04f 33ff 	mov.w	r3, #4294967295
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	4823      	ldr	r0, [pc, #140]	; (8003538 <demoP2P+0xd8>)
 80034ac:	ab02      	add	r3, sp, #8
 80034ae:	aa03      	add	r2, sp, #12
 80034b0:	2122      	movs	r1, #34	; 0x22
 80034b2:	f002 fef7 	bl	80062a4 <rfalNfcDataExchangeStart>
    if( err == ERR_NONE )
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d1e1      	bne.n	800347e <demoP2P+0x1e>
            rfalNfcWorker();
 80034ba:	f002 fff9 	bl	80064b0 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 80034be:	f002 ffb9 	bl	8006434 <rfalNfcDataExchangeGetStatus>
        while( err == ERR_BUSY );
 80034c2:	2802      	cmp	r0, #2
 80034c4:	d0f9      	beq.n	80034ba <demoP2P+0x5a>
    if( err != ERR_NONE )
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d1d9      	bne.n	800347e <demoP2P+0x1e>
    platformLog("succeeded.\r\n");
 80034ca:	4819      	ldr	r0, [pc, #100]	; (8003530 <demoP2P+0xd0>)
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 80034cc:	4e1b      	ldr	r6, [pc, #108]	; (800353c <demoP2P+0xdc>)
        platformLog(".");
 80034ce:	4f1c      	ldr	r7, [pc, #112]	; (8003540 <demoP2P+0xe0>)
    platformLog("succeeded.\r\n");
 80034d0:	f000 fb08 	bl	8003ae4 <logUsart>
    platformLog(" Device present, maintaining connection ");
 80034d4:	481b      	ldr	r0, [pc, #108]	; (8003544 <demoP2P+0xe4>)
 80034d6:	f000 fb05 	bl	8003ae4 <logUsart>
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 80034da:	f04f 35ff 	mov.w	r5, #4294967295
 80034de:	9500      	str	r5, [sp, #0]
 80034e0:	ab02      	add	r3, sp, #8
 80034e2:	aa03      	add	r2, sp, #12
 80034e4:	2102      	movs	r1, #2
 80034e6:	4630      	mov	r0, r6
 80034e8:	f002 fedc 	bl	80062a4 <rfalNfcDataExchangeStart>
    if( err == ERR_NONE )
 80034ec:	b150      	cbz	r0, 8003504 <demoP2P+0xa4>
        platformLog(".");
 80034ee:	4814      	ldr	r0, [pc, #80]	; (8003540 <demoP2P+0xe0>)
 80034f0:	f000 faf8 	bl	8003ae4 <logUsart>
        platformDelay(50);
 80034f4:	2032      	movs	r0, #50	; 0x32
 80034f6:	f7fe f853 	bl	80015a0 <HAL_Delay>
    platformLog("\r\n Device removed.\r\n");
 80034fa:	4813      	ldr	r0, [pc, #76]	; (8003548 <demoP2P+0xe8>)
 80034fc:	f000 faf2 	bl	8003ae4 <logUsart>
}
 8003500:	b005      	add	sp, #20
 8003502:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rfalNfcWorker();
 8003504:	f002 ffd4 	bl	80064b0 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 8003508:	f002 ff94 	bl	8006434 <rfalNfcDataExchangeGetStatus>
        while( err == ERR_BUSY );
 800350c:	2802      	cmp	r0, #2
            err = rfalNfcDataExchangeGetStatus();
 800350e:	4604      	mov	r4, r0
        while( err == ERR_BUSY );
 8003510:	d0f8      	beq.n	8003504 <demoP2P+0xa4>
        platformLog(".");
 8003512:	4638      	mov	r0, r7
 8003514:	f000 fae6 	bl	8003ae4 <logUsart>
        platformDelay(50);
 8003518:	2032      	movs	r0, #50	; 0x32
 800351a:	f7fe f841 	bl	80015a0 <HAL_Delay>
    while(err == ERR_NONE) 
 800351e:	2c00      	cmp	r4, #0
 8003520:	d0dd      	beq.n	80034de <demoP2P+0x7e>
 8003522:	e7ea      	b.n	80034fa <demoP2P+0x9a>
 8003524:	0800c5d4 	.word	0x0800c5d4
 8003528:	2000000c 	.word	0x2000000c
 800352c:	0800c5ec 	.word	0x0800c5ec
 8003530:	0800c5f4 	.word	0x0800c5f4
 8003534:	0800c604 	.word	0x0800c604
 8003538:	20000028 	.word	0x20000028
 800353c:	20000114 	.word	0x20000114
 8003540:	0800c650 	.word	0x0800c650
 8003544:	0800c624 	.word	0x0800c624
 8003548:	0800c654 	.word	0x0800c654

0800354c <demoAPDU>:
{
 800354c:	b510      	push	{r4, lr}
 800354e:	b084      	sub	sp, #16
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 8003550:	f04f 33ff 	mov.w	r3, #4294967295
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	4835      	ldr	r0, [pc, #212]	; (800362c <demoAPDU+0xe0>)
 8003558:	ab02      	add	r3, sp, #8
 800355a:	aa03      	add	r2, sp, #12
 800355c:	210d      	movs	r1, #13
 800355e:	f002 fea1 	bl	80062a4 <rfalNfcDataExchangeStart>
    if( err == ERR_NONE )
 8003562:	b158      	cbz	r0, 800357c <demoAPDU+0x30>
    platformLog(" Select NDEF Application: %s Data: %s\r\n", (err != ERR_NONE) ? "FAIL": "OK", hex2Str( rxData, *rxLen) );
 8003564:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8003568:	8819      	ldrh	r1, [r3, #0]
 800356a:	f000 fadd 	bl	8003b28 <hex2Str>
 800356e:	4930      	ldr	r1, [pc, #192]	; (8003630 <demoAPDU+0xe4>)
 8003570:	4602      	mov	r2, r0
 8003572:	4830      	ldr	r0, [pc, #192]	; (8003634 <demoAPDU+0xe8>)
 8003574:	f000 fab6 	bl	8003ae4 <logUsart>
}
 8003578:	b004      	add	sp, #16
 800357a:	bd10      	pop	{r4, pc}
            rfalNfcWorker();
 800357c:	f002 ff98 	bl	80064b0 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 8003580:	f002 ff58 	bl	8006434 <rfalNfcDataExchangeGetStatus>
        while( err == ERR_BUSY );
 8003584:	2802      	cmp	r0, #2
 8003586:	d0f9      	beq.n	800357c <demoAPDU+0x30>
    platformLog(" Select NDEF Application: %s Data: %s\r\n", (err != ERR_NONE) ? "FAIL": "OK", hex2Str( rxData, *rxLen) );
 8003588:	2800      	cmp	r0, #0
 800358a:	d1eb      	bne.n	8003564 <demoAPDU+0x18>
 800358c:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8003590:	8819      	ldrh	r1, [r3, #0]
 8003592:	f000 fac9 	bl	8003b28 <hex2Str>
 8003596:	4928      	ldr	r1, [pc, #160]	; (8003638 <demoAPDU+0xec>)
 8003598:	4602      	mov	r2, r0
 800359a:	4826      	ldr	r0, [pc, #152]	; (8003634 <demoAPDU+0xe8>)
 800359c:	f000 faa2 	bl	8003ae4 <logUsart>
    if( (err == ERR_NONE) && rxData[0] == 0x90 && rxData[1] == 0x00)
 80035a0:	9b03      	ldr	r3, [sp, #12]
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	2a90      	cmp	r2, #144	; 0x90
 80035a6:	d1e7      	bne.n	8003578 <demoAPDU+0x2c>
 80035a8:	785b      	ldrb	r3, [r3, #1]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1e4      	bne.n	8003578 <demoAPDU+0x2c>
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	4821      	ldr	r0, [pc, #132]	; (800363c <demoAPDU+0xf0>)
 80035b6:	ab02      	add	r3, sp, #8
 80035b8:	aa03      	add	r2, sp, #12
 80035ba:	2107      	movs	r1, #7
 80035bc:	f002 fe72 	bl	80062a4 <rfalNfcDataExchangeStart>
    if( err == ERR_NONE )
 80035c0:	bb88      	cbnz	r0, 8003626 <demoAPDU+0xda>
            rfalNfcWorker();
 80035c2:	f002 ff75 	bl	80064b0 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 80035c6:	f002 ff35 	bl	8006434 <rfalNfcDataExchangeGetStatus>
        while( err == ERR_BUSY );
 80035ca:	2802      	cmp	r0, #2
 80035cc:	d0f9      	beq.n	80035c2 <demoAPDU+0x76>
        platformLog(" Select CC: %s Data: %s\r\n", (err != ERR_NONE) ? "FAIL": "OK", hex2Str( rxData, *rxLen) );
 80035ce:	bb50      	cbnz	r0, 8003626 <demoAPDU+0xda>
 80035d0:	4c19      	ldr	r4, [pc, #100]	; (8003638 <demoAPDU+0xec>)
 80035d2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 80035d6:	8819      	ldrh	r1, [r3, #0]
 80035d8:	f000 faa6 	bl	8003b28 <hex2Str>
 80035dc:	4621      	mov	r1, r4
 80035de:	4602      	mov	r2, r0
 80035e0:	4817      	ldr	r0, [pc, #92]	; (8003640 <demoAPDU+0xf4>)
 80035e2:	f000 fa7f 	bl	8003ae4 <logUsart>
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	4815      	ldr	r0, [pc, #84]	; (8003644 <demoAPDU+0xf8>)
 80035ee:	ab02      	add	r3, sp, #8
 80035f0:	aa03      	add	r2, sp, #12
 80035f2:	2105      	movs	r1, #5
 80035f4:	f002 fe56 	bl	80062a4 <rfalNfcDataExchangeStart>
    if( err == ERR_NONE )
 80035f8:	b158      	cbz	r0, 8003612 <demoAPDU+0xc6>
        platformLog(" Read CC: %s Data: %s\r\n", (err != ERR_NONE) ? "FAIL": "OK", hex2Str( rxData, *rxLen) );
 80035fa:	4c0d      	ldr	r4, [pc, #52]	; (8003630 <demoAPDU+0xe4>)
 80035fc:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8003600:	8819      	ldrh	r1, [r3, #0]
 8003602:	f000 fa91 	bl	8003b28 <hex2Str>
 8003606:	4621      	mov	r1, r4
 8003608:	4602      	mov	r2, r0
 800360a:	480f      	ldr	r0, [pc, #60]	; (8003648 <demoAPDU+0xfc>)
 800360c:	f000 fa6a 	bl	8003ae4 <logUsart>
}
 8003610:	e7b2      	b.n	8003578 <demoAPDU+0x2c>
            rfalNfcWorker();
 8003612:	f002 ff4d 	bl	80064b0 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 8003616:	f002 ff0d 	bl	8006434 <rfalNfcDataExchangeGetStatus>
        while( err == ERR_BUSY );
 800361a:	2802      	cmp	r0, #2
 800361c:	d0f9      	beq.n	8003612 <demoAPDU+0xc6>
        platformLog(" Read CC: %s Data: %s\r\n", (err != ERR_NONE) ? "FAIL": "OK", hex2Str( rxData, *rxLen) );
 800361e:	2800      	cmp	r0, #0
 8003620:	d1eb      	bne.n	80035fa <demoAPDU+0xae>
 8003622:	4c05      	ldr	r4, [pc, #20]	; (8003638 <demoAPDU+0xec>)
 8003624:	e7ea      	b.n	80035fc <demoAPDU+0xb0>
        platformLog(" Select CC: %s Data: %s\r\n", (err != ERR_NONE) ? "FAIL": "OK", hex2Str( rxData, *rxLen) );
 8003626:	4c02      	ldr	r4, [pc, #8]	; (8003630 <demoAPDU+0xe4>)
 8003628:	e7d3      	b.n	80035d2 <demoAPDU+0x86>
 800362a:	bf00      	nop
 800362c:	2000004c 	.word	0x2000004c
 8003630:	0800c66c 	.word	0x0800c66c
 8003634:	0800c678 	.word	0x0800c678
 8003638:	0800c674 	.word	0x0800c674
 800363c:	2000005c 	.word	0x2000005c
 8003640:	0800c6a0 	.word	0x0800c6a0
 8003644:	20000064 	.word	0x20000064
 8003648:	0800c6bc 	.word	0x0800c6bc

0800364c <demoIni>:
{
 800364c:	b538      	push	{r3, r4, r5, lr}
    err = rfalNfcInitialize();
 800364e:	f002 fd6b 	bl	8006128 <rfalNfcInitialize>
    if( err == ERR_NONE )
 8003652:	b118      	cbz	r0, 800365c <demoIni+0x10>
    return false;
 8003654:	f04f 0c00 	mov.w	ip, #0
}
 8003658:	4660      	mov	r0, ip
 800365a:	bd38      	pop	{r3, r4, r5, pc}
        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 800365c:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <demoIni+0x6c>)
        discParam.compMode      = RFAL_COMPLIANCE_MODE_NFC;
 800365e:	4c17      	ldr	r4, [pc, #92]	; (80036bc <demoIni+0x70>)
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 8003660:	4d17      	ldr	r5, [pc, #92]	; (80036c0 <demoIni+0x74>)
 8003662:	4603      	mov	r3, r0
        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8003664:	ca07      	ldmia	r2, {r0, r1, r2}
 8003666:	f104 0c0c 	add.w	ip, r4, #12
 800366a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
        discParam.compMode      = RFAL_COMPLIANCE_MODE_NFC;
 800366e:	7123      	strb	r3, [r4, #4]
        discParam.devLimit      = 1U;
 8003670:	f240 1101 	movw	r1, #257	; 0x101
        discParam.techs2Find   |= RFAL_NFC_POLL_TECH_AP2P;
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <demoIni+0x78>)
        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8003676:	f8ac 2000 	strh.w	r2, [ip]
        discParam.devLimit      = 1U;
 800367a:	8161      	strh	r1, [r4, #10]
        discParam.notifyCb             = demoNotif;
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <demoIni+0x7c>)
        discParam.techs2Find   |= RFAL_NFC_POLL_TECH_AP2P;
 800367e:	f8c4 3006 	str.w	r3, [r4, #6]
        discParam.wakeupEnabled        = false;
 8003682:	f44f 7180 	mov.w	r1, #256	; 0x100
        discParam.GBLen         = sizeof(GB);
 8003686:	f44f 7305 	mov.w	r3, #532	; 0x214
        discParam.wakeupEnabled        = false;
 800368a:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
        discParam.notifyCb             = demoNotif;
 800368e:	66e2      	str	r2, [r4, #108]	; 0x6c
        discParam.GBLen         = sizeof(GB);
 8003690:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 8003694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
        state = DEMO_ST_START_DISCOVERY;
 8003696:	f04f 0c01 	mov.w	ip, #1
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 800369a:	f8c4 0016 	str.w	r0, [r4, #22]
 800369e:	6828      	ldr	r0, [r5, #0]
 80036a0:	f8c4 0026 	str.w	r0, [r4, #38]	; 0x26
        state = DEMO_ST_START_DISCOVERY;
 80036a4:	f884 c088 	strb.w	ip, [r4, #136]	; 0x88
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 80036a8:	f8c4 101a 	str.w	r1, [r4, #26]
 80036ac:	f8c4 201e 	str.w	r2, [r4, #30]
 80036b0:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
}
 80036b4:	4660      	mov	r0, ip
 80036b6:	bd38      	pop	{r3, r4, r5, pc}
 80036b8:	0800c6d4 	.word	0x0800c6d4
 80036bc:	20000114 	.word	0x20000114
 80036c0:	0800c374 	.word	0x0800c374
 80036c4:	03e8003f 	.word	0x03e8003f
 80036c8:	08003415 	.word	0x08003415

080036cc <demoCycle>:
{
 80036cc:	b530      	push	{r4, r5, lr}
 80036ce:	b09b      	sub	sp, #108	; 0x6c
    rfalNfcWorker();                                    /* Run RFAL worker periodically */
 80036d0:	f002 feee 	bl	80064b0 <rfalNfcWorker>
    if( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN))
 80036d4:	48be      	ldr	r0, [pc, #760]	; (80039d0 <demoCycle+0x304>)
        discParam.wakeupEnabled = !discParam.wakeupEnabled;    /* enable/disable wakeup */
 80036d6:	4dbf      	ldr	r5, [pc, #764]	; (80039d4 <demoCycle+0x308>)
    if( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN))
 80036d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036dc:	f7fe f920 	bl	8001920 <HAL_GPIO_ReadPin>
 80036e0:	2801      	cmp	r0, #1
 80036e2:	d018      	beq.n	8003716 <demoCycle+0x4a>
        discParam.wakeupEnabled = !discParam.wakeupEnabled;    /* enable/disable wakeup */
 80036e4:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
        platformLog("Toggling Wake Up mode %s\r\n", discParam.wakeupEnabled ? "ON": "OFF");
 80036e8:	4cbb      	ldr	r4, [pc, #748]	; (80039d8 <demoCycle+0x30c>)
 80036ea:	49bc      	ldr	r1, [pc, #752]	; (80039dc <demoCycle+0x310>)
 80036ec:	48bc      	ldr	r0, [pc, #752]	; (80039e0 <demoCycle+0x314>)
        discParam.wakeupEnabled = !discParam.wakeupEnabled;    /* enable/disable wakeup */
 80036ee:	f083 0301 	eor.w	r3, r3, #1
        state = DEMO_ST_START_DISCOVERY;                       /* restart loop          */
 80036f2:	2201      	movs	r2, #1
        platformLog("Toggling Wake Up mode %s\r\n", discParam.wakeupEnabled ? "ON": "OFF");
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf18      	it	ne
 80036f8:	4621      	movne	r1, r4
        state = DEMO_ST_START_DISCOVERY;                       /* restart loop          */
 80036fa:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
        discParam.wakeupEnabled = !discParam.wakeupEnabled;    /* enable/disable wakeup */
 80036fe:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        platformLog("Toggling Wake Up mode %s\r\n", discParam.wakeupEnabled ? "ON": "OFF");
 8003702:	f000 f9ef 	bl	8003ae4 <logUsart>
        while( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN) );
 8003706:	4cb2      	ldr	r4, [pc, #712]	; (80039d0 <demoCycle+0x304>)
 8003708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800370c:	4620      	mov	r0, r4
 800370e:	f7fe f907 	bl	8001920 <HAL_GPIO_ReadPin>
 8003712:	2801      	cmp	r0, #1
 8003714:	d1f8      	bne.n	8003708 <demoCycle+0x3c>
    switch( state )
 8003716:	f895 1088 	ldrb.w	r1, [r5, #136]	; 0x88
 800371a:	2901      	cmp	r1, #1
 800371c:	d007      	beq.n	800372e <demoCycle+0x62>
 800371e:	2902      	cmp	r1, #2
 8003720:	d103      	bne.n	800372a <demoCycle+0x5e>
            if( rfalNfcIsDevActivated( rfalNfcGetState() ) )
 8003722:	f002 fd8d 	bl	8006240 <rfalNfcGetState>
 8003726:	281d      	cmp	r0, #29
 8003728:	d82d      	bhi.n	8003786 <demoCycle+0xba>
}
 800372a:	b01b      	add	sp, #108	; 0x6c
 800372c:	bd30      	pop	{r4, r5, pc}
          platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 800372e:	48ad      	ldr	r0, [pc, #692]	; (80039e4 <demoCycle+0x318>)
 8003730:	2200      	movs	r2, #0
 8003732:	f7fe f8fb 	bl	800192c <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8003736:	2200      	movs	r2, #0
 8003738:	2110      	movs	r1, #16
 800373a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800373e:	f7fe f8f5 	bl	800192c <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8003742:	2200      	movs	r2, #0
 8003744:	2102      	movs	r1, #2
 8003746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374a:	f7fe f8ef 	bl	800192c <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800374e:	48a5      	ldr	r0, [pc, #660]	; (80039e4 <demoCycle+0x318>)
 8003750:	2200      	movs	r2, #0
 8003752:	2110      	movs	r1, #16
 8003754:	f7fe f8ea 	bl	800192c <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8003758:	48a2      	ldr	r0, [pc, #648]	; (80039e4 <demoCycle+0x318>)
 800375a:	2200      	movs	r2, #0
 800375c:	2120      	movs	r1, #32
 800375e:	f7fe f8e5 	bl	800192c <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8003762:	2200      	movs	r2, #0
 8003764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800376c:	f7fe f8de 	bl	800192c <HAL_GPIO_WritePin>
          rfalNfcDeactivate( false );
 8003770:	2000      	movs	r0, #0
 8003772:	f002 fd2b 	bl	80061cc <rfalNfcDeactivate>
          rfalNfcDiscover( &discParam );
 8003776:	489c      	ldr	r0, [pc, #624]	; (80039e8 <demoCycle+0x31c>)
 8003778:	f002 fce4 	bl	8006144 <rfalNfcDiscover>
          state = DEMO_ST_DISCOVERY;
 800377c:	2302      	movs	r3, #2
 800377e:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
}
 8003782:	b01b      	add	sp, #108	; 0x6c
 8003784:	bd30      	pop	{r4, r5, pc}
            if( rfalNfcIsDevActivated( rfalNfcGetState() ) )
 8003786:	f002 fd5b 	bl	8006240 <rfalNfcGetState>
 800378a:	2821      	cmp	r0, #33	; 0x21
 800378c:	d8cd      	bhi.n	800372a <demoCycle+0x5e>
                rfalNfcGetActiveDevice( &nfcDevice );
 800378e:	4897      	ldr	r0, [pc, #604]	; (80039ec <demoCycle+0x320>)
 8003790:	f002 fd72 	bl	8006278 <rfalNfcGetActiveDevice>
                switch( nfcDevice->type )
 8003794:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	2a0c      	cmp	r2, #12
 800379c:	d84c      	bhi.n	8003838 <demoCycle+0x16c>
 800379e:	e8df f012 	tbh	[pc, r2, lsl #1]
 80037a2:	0101      	.short	0x0101
 80037a4:	000d00ea 	.word	0x000d00ea
 80037a8:	007c008b 	.word	0x007c008b
 80037ac:	004b006c 	.word	0x004b006c
 80037b0:	004b004b 	.word	0x004b004b
 80037b4:	0056004b 	.word	0x0056004b
 80037b8:	0056004b 	.word	0x0056004b
                        if( rfalNfcfIsNfcDepSupported( &nfcDevice->dev.nfcf ) )
 80037bc:	78da      	ldrb	r2, [r3, #3]
 80037be:	2a01      	cmp	r2, #1
 80037c0:	d103      	bne.n	80037ca <demoCycle+0xfe>
 80037c2:	791a      	ldrb	r2, [r3, #4]
 80037c4:	2afe      	cmp	r2, #254	; 0xfe
 80037c6:	f000 8169 	beq.w	8003a9c <demoCycle+0x3d0>
                            platformLog("Felica/NFC-F card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 80037ca:	7f19      	ldrb	r1, [r3, #28]
 80037cc:	6998      	ldr	r0, [r3, #24]
 80037ce:	f000 f9ab 	bl	8003b28 <hex2Str>
 80037d2:	4601      	mov	r1, r0
 80037d4:	4886      	ldr	r0, [pc, #536]	; (80039f0 <demoCycle+0x324>)
 80037d6:	f000 f985 	bl	8003ae4 <logUsart>
    rfalNfcfServ               srv = RFAL_NFCF_SERVICECODE_RDWR;
 80037da:	2109      	movs	r1, #9
 80037dc:	f8ad 100e 	strh.w	r1, [sp, #14]
    servBlock.servList  = &srv;                         /* Service Code: NDEF is Read/Writeable  */
 80037e0:	f10d 010e 	add.w	r1, sp, #14
                            demoNfcf( &nfcDevice->dev.nfcf );
 80037e4:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    servBlock.servList  = &srv;                         /* Service Code: NDEF is Read/Writeable  */
 80037e8:	9108      	str	r1, [sp, #32]
    servBlock.blockList = bl;
 80037ea:	a904      	add	r1, sp, #16
    servBlock.numServ   = 1;                            /* Only one Service to be used           */
 80037ec:	2201      	movs	r2, #1
    err = rfalNfcfPollerCheck( nfcfDev->sensfRes.NFCID2, &servBlock, buf, sizeof(buf), &rcvLen);
 80037ee:	ab03      	add	r3, sp, #12
    servBlock.blockList = bl;
 80037f0:	910a      	str	r1, [sp, #40]	; 0x28
    bl[0].conf     = RFAL_NFCF_BLOCKLISTELEM_LEN;       /* Two-byte Block List Element           */     
 80037f2:	2180      	movs	r1, #128	; 0x80
    err = rfalNfcfPollerCheck( nfcfDev->sensfRes.NFCID2, &servBlock, buf, sizeof(buf), &rcvLen);
 80037f4:	9300      	str	r3, [sp, #0]
    servBlock.numServ   = 1;                            /* Only one Service to be used           */
 80037f6:	f88d 201c 	strb.w	r2, [sp, #28]
    servBlock.numBlock  = 1;                            /* Only one block to be used             */
 80037fa:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    bl[0].conf     = RFAL_NFCF_BLOCKLISTELEM_LEN;       /* Two-byte Block List Element           */     
 80037fe:	f88d 1010 	strb.w	r1, [sp, #16]
    bl[0].blockNum = 0x0001;                            /* Block: NDEF Data                      */
 8003802:	f8ad 2012 	strh.w	r2, [sp, #18]
    err = rfalNfcfPollerCheck( nfcfDev->sensfRes.NFCID2, &servBlock, buf, sizeof(buf), &rcvLen);
 8003806:	2339      	movs	r3, #57	; 0x39
 8003808:	3003      	adds	r0, #3
 800380a:	aa0b      	add	r2, sp, #44	; 0x2c
 800380c:	a907      	add	r1, sp, #28
 800380e:	f005 f9f5 	bl	8008bfc <rfalNfcfPollerCheck>
    platformLog(" Check Block: %s Data:  %s \r\n", (err != ERR_NONE) ? "FAIL": "OK", (err != ERR_NONE) ? "" : hex2Str( &buf[1], RFAL_NFCF_BLOCK_LEN) );
 8003812:	2800      	cmp	r0, #0
 8003814:	f040 8129 	bne.w	8003a6a <demoCycle+0x39e>
 8003818:	2110      	movs	r1, #16
 800381a:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 800381e:	f000 f983 	bl	8003b28 <hex2Str>
 8003822:	4974      	ldr	r1, [pc, #464]	; (80039f4 <demoCycle+0x328>)
 8003824:	4602      	mov	r2, r0
 8003826:	4874      	ldr	r0, [pc, #464]	; (80039f8 <demoCycle+0x32c>)
 8003828:	f000 f95c 	bl	8003ae4 <logUsart>
                        platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 800382c:	2201      	movs	r2, #1
 800382e:	2102      	movs	r1, #2
 8003830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003834:	f7fe f87a 	bl	800192c <HAL_GPIO_WritePin>
                rfalNfcDeactivate( false );
 8003838:	2000      	movs	r0, #0
 800383a:	f002 fcc7 	bl	80061cc <rfalNfcDeactivate>
                platformDelay( 500 );
 800383e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003842:	f7fd fead 	bl	80015a0 <HAL_Delay>
                state = DEMO_ST_START_DISCOVERY;
 8003846:	2301      	movs	r3, #1
 8003848:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
}
 800384c:	e76d      	b.n	800372a <demoCycle+0x5e>
                        platformLog("Activated in CE %s mode.\r\n", (nfcDevice->type == RFAL_NFC_POLL_TYPE_NFCA) ? "NFC-A" : "NFC-F");
 800384e:	4b6b      	ldr	r3, [pc, #428]	; (80039fc <demoCycle+0x330>)
 8003850:	496b      	ldr	r1, [pc, #428]	; (8003a00 <demoCycle+0x334>)
 8003852:	486c      	ldr	r0, [pc, #432]	; (8003a04 <demoCycle+0x338>)
 8003854:	2a0a      	cmp	r2, #10
 8003856:	bf18      	it	ne
 8003858:	4619      	movne	r1, r3
 800385a:	f000 f943 	bl	8003ae4 <logUsart>
                        platformLedOn( ((nfcDevice->type == RFAL_NFC_POLL_TYPE_NFCA) ? PLATFORM_LED_A_PORT : PLATFORM_LED_F_PORT),
 800385e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003862:	4860      	ldr	r0, [pc, #384]	; (80039e4 <demoCycle+0x318>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2201      	movs	r2, #1
 8003868:	2b0a      	cmp	r3, #10
 800386a:	bf0e      	itee	eq
 800386c:	4611      	moveq	r1, r2
 800386e:	2102      	movne	r1, #2
 8003870:	f04f 4090 	movne.w	r0, #1207959552	; 0x48000000
 8003874:	f7fe f85a 	bl	800192c <HAL_GPIO_WritePin>
}
 8003878:	e7de      	b.n	8003838 <demoCycle+0x16c>
                        platformLog("NFC Active P2P device found. NFCID3: %s\r\n", hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 800387a:	7f19      	ldrb	r1, [r3, #28]
 800387c:	6998      	ldr	r0, [r3, #24]
 800387e:	f000 f953 	bl	8003b28 <hex2Str>
 8003882:	4601      	mov	r1, r0
 8003884:	4860      	ldr	r0, [pc, #384]	; (8003a08 <demoCycle+0x33c>)
 8003886:	f000 f92d 	bl	8003ae4 <logUsart>
                        platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800388a:	4856      	ldr	r0, [pc, #344]	; (80039e4 <demoCycle+0x318>)
 800388c:	2201      	movs	r2, #1
 800388e:	2120      	movs	r1, #32
 8003890:	f7fe f84c 	bl	800192c <HAL_GPIO_WritePin>
                        demoP2P();
 8003894:	f7ff fde4 	bl	8003460 <demoP2P>
                        break;
 8003898:	e7ce      	b.n	8003838 <demoCycle+0x16c>
                        platformLog("ST25TB card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 800389a:	7f19      	ldrb	r1, [r3, #28]
 800389c:	6998      	ldr	r0, [r3, #24]
 800389e:	f000 f943 	bl	8003b28 <hex2Str>
 80038a2:	4601      	mov	r1, r0
 80038a4:	4859      	ldr	r0, [pc, #356]	; (8003a0c <demoCycle+0x340>)
 80038a6:	f000 f91d 	bl	8003ae4 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80038aa:	2201      	movs	r2, #1
 80038ac:	2110      	movs	r1, #16
 80038ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038b2:	f7fe f83b 	bl	800192c <HAL_GPIO_WritePin>
                        break;
 80038b6:	e7bf      	b.n	8003838 <demoCycle+0x16c>
                            ST_MEMCPY( devUID, nfcDevice->nfcid, nfcDevice->nfcidLen );   /* Copy the UID into local var */
 80038b8:	7f1a      	ldrb	r2, [r3, #28]
 80038ba:	6999      	ldr	r1, [r3, #24]
 80038bc:	a80b      	add	r0, sp, #44	; 0x2c
 80038be:	f008 f88f 	bl	800b9e0 <memcpy>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 80038c2:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
 80038c6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80038ca:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80038ce:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80038d2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80038d6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 80038da:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
 80038de:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 80038e2:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
 80038e6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 80038ea:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
 80038ee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80038f2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                            platformLog("ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 80038f6:	2108      	movs	r1, #8
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 80038f8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80038fc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
                            platformLog("ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 8003900:	a80b      	add	r0, sp, #44	; 0x2c
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 8003902:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                            platformLog("ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 8003906:	f000 f90f 	bl	8003b28 <hex2Str>
 800390a:	4601      	mov	r1, r0
 800390c:	4840      	ldr	r0, [pc, #256]	; (8003a10 <demoCycle+0x344>)
 800390e:	f000 f8e9 	bl	8003ae4 <logUsart>
                            if(strcmp(hex2Str(devUID, RFAL_NFCV_UID_LEN), "E0024800D6407529") == 0)
 8003912:	2108      	movs	r1, #8
 8003914:	a80b      	add	r0, sp, #44	; 0x2c
 8003916:	f000 f907 	bl	8003b28 <hex2Str>
 800391a:	493e      	ldr	r1, [pc, #248]	; (8003a14 <demoCycle+0x348>)
 800391c:	f7fc fc58 	bl	80001d0 <strcmp>
 8003920:	2800      	cmp	r0, #0
 8003922:	f040 8097 	bne.w	8003a54 <demoCycle+0x388>
                            	platformLog("  Utilisateur autorisé\n");
 8003926:	483c      	ldr	r0, [pc, #240]	; (8003a18 <demoCycle+0x34c>)
 8003928:	f000 f8dc 	bl	8003ae4 <logUsart>
                            	HAL_UART_Transmit(&huart2, (uint8_t*)"Utilisateur autoriseTx\r\n", 8, HAL_MAX_DELAY);
 800392c:	493b      	ldr	r1, [pc, #236]	; (8003a1c <demoCycle+0x350>)
 800392e:	483c      	ldr	r0, [pc, #240]	; (8003a20 <demoCycle+0x354>)
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
 8003934:	2208      	movs	r2, #8
 8003936:	f7ff fa2d 	bl	8002d94 <HAL_UART_Transmit>
                            platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800393a:	482a      	ldr	r0, [pc, #168]	; (80039e4 <demoCycle+0x318>)
 800393c:	2201      	movs	r2, #1
 800393e:	2110      	movs	r1, #16
 8003940:	f7fd fff4 	bl	800192c <HAL_GPIO_WritePin>
    uid = nfcvDev->InvRes.UID;
 8003944:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
    err = rfalNfcvPollerReadSingleBlock(RFAL_NFCV_REQ_FLAG_DEFAULT, uid, blockNum, rxBuf, sizeof(rxBuf), &rcvLen);
 8003948:	aa04      	add	r2, sp, #16
 800394a:	2307      	movs	r3, #7
 800394c:	e9cd 3200 	strd	r3, r2, [sp]
 8003950:	3103      	adds	r1, #3
 8003952:	ab07      	add	r3, sp, #28
 8003954:	2201      	movs	r2, #1
 8003956:	2002      	movs	r0, #2
 8003958:	f005 fe36 	bl	80095c8 <rfalNfcvPollerReadSingleBlock>
    platformLog(" Read Block: %s %s\r\n", (err != ERR_NONE) ? "FAIL": "OK Data:", (err != ERR_NONE) ? "" : hex2Str( &rxBuf[1], DEMO_NFCV_BLOCK_LEN));
 800395c:	2800      	cmp	r0, #0
 800395e:	d176      	bne.n	8003a4e <demoCycle+0x382>
 8003960:	2104      	movs	r1, #4
 8003962:	f10d 001d 	add.w	r0, sp, #29
 8003966:	f000 f8df 	bl	8003b28 <hex2Str>
 800396a:	492e      	ldr	r1, [pc, #184]	; (8003a24 <demoCycle+0x358>)
 800396c:	4602      	mov	r2, r0
 800396e:	482e      	ldr	r0, [pc, #184]	; (8003a28 <demoCycle+0x35c>)
 8003970:	f000 f8b8 	bl	8003ae4 <logUsart>
                        break;
 8003974:	e760      	b.n	8003838 <demoCycle+0x16c>
                        platformLog("ISO14443B/NFC-B card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8003976:	7f19      	ldrb	r1, [r3, #28]
 8003978:	6998      	ldr	r0, [r3, #24]
 800397a:	f000 f8d5 	bl	8003b28 <hex2Str>
 800397e:	4601      	mov	r1, r0
 8003980:	482a      	ldr	r0, [pc, #168]	; (8003a2c <demoCycle+0x360>)
 8003982:	f000 f8af 	bl	8003ae4 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8003986:	2201      	movs	r2, #1
 8003988:	2110      	movs	r1, #16
 800398a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398e:	f7fd ffcd 	bl	800192c <HAL_GPIO_WritePin>
                        if( rfalNfcbIsIsoDepSupported( &nfcDevice->dev.nfcb ) )
 8003992:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003996:	7b1b      	ldrb	r3, [r3, #12]
 8003998:	07db      	lsls	r3, r3, #31
 800399a:	f57f af4d 	bpl.w	8003838 <demoCycle+0x16c>
                            demoAPDU();
 800399e:	f7ff fdd5 	bl	800354c <demoAPDU>
 80039a2:	e749      	b.n	8003838 <demoCycle+0x16c>
                        platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80039a4:	2201      	movs	r2, #1
 80039a6:	4611      	mov	r1, r2
 80039a8:	480e      	ldr	r0, [pc, #56]	; (80039e4 <demoCycle+0x318>)
 80039aa:	f7fd ffbf 	bl	800192c <HAL_GPIO_WritePin>
                        switch( nfcDevice->dev.nfca.type )
 80039ae:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80039b2:	785a      	ldrb	r2, [r3, #1]
 80039b4:	2a20      	cmp	r2, #32
 80039b6:	d066      	beq.n	8003a86 <demoCycle+0x3ba>
 80039b8:	d83c      	bhi.n	8003a34 <demoCycle+0x368>
 80039ba:	2a01      	cmp	r2, #1
 80039bc:	d13e      	bne.n	8003a3c <demoCycle+0x370>
                                platformLog("ISO14443A/Topaz (NFC-A T1T) TAG found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 80039be:	7f19      	ldrb	r1, [r3, #28]
 80039c0:	6998      	ldr	r0, [r3, #24]
 80039c2:	f000 f8b1 	bl	8003b28 <hex2Str>
 80039c6:	4601      	mov	r1, r0
 80039c8:	4819      	ldr	r0, [pc, #100]	; (8003a30 <demoCycle+0x364>)
 80039ca:	f000 f88b 	bl	8003ae4 <logUsart>
                                break;
 80039ce:	e733      	b.n	8003838 <demoCycle+0x16c>
 80039d0:	48000800 	.word	0x48000800
 80039d4:	20000114 	.word	0x20000114
 80039d8:	0800c6e0 	.word	0x0800c6e0
 80039dc:	0800c6e4 	.word	0x0800c6e4
 80039e0:	0800c704 	.word	0x0800c704
 80039e4:	48000400 	.word	0x48000400
 80039e8:	20000118 	.word	0x20000118
 80039ec:	200001a0 	.word	0x200001a0
 80039f0:	0800c82c 	.word	0x0800c82c
 80039f4:	0800c674 	.word	0x0800c674
 80039f8:	0800c850 	.word	0x0800c850
 80039fc:	0800c6fc 	.word	0x0800c6fc
 8003a00:	0800c6f4 	.word	0x0800c6f4
 8003a04:	0800c988 	.word	0x0800c988
 8003a08:	0800c95c 	.word	0x0800c95c
 8003a0c:	0800c93c 	.word	0x0800c93c
 8003a10:	0800c870 	.word	0x0800c870
 8003a14:	0800c898 	.word	0x0800c898
 8003a18:	0800c8ac 	.word	0x0800c8ac
 8003a1c:	0800c8c8 	.word	0x0800c8c8
 8003a20:	200003ac 	.word	0x200003ac
 8003a24:	0800c6e8 	.word	0x0800c6e8
 8003a28:	0800c924 	.word	0x0800c924
 8003a2c:	0800c7d8 	.word	0x0800c7d8
 8003a30:	0800c720 	.word	0x0800c720
 8003a34:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003a38:	2a40      	cmp	r2, #64	; 0x40
 8003a3a:	d019      	beq.n	8003a70 <demoCycle+0x3a4>
                                platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8003a3c:	7f19      	ldrb	r1, [r3, #28]
 8003a3e:	6998      	ldr	r0, [r3, #24]
 8003a40:	f000 f872 	bl	8003b28 <hex2Str>
 8003a44:	4601      	mov	r1, r0
 8003a46:	481b      	ldr	r0, [pc, #108]	; (8003ab4 <demoCycle+0x3e8>)
 8003a48:	f000 f84c 	bl	8003ae4 <logUsart>
                                break;
 8003a4c:	e6f4      	b.n	8003838 <demoCycle+0x16c>
    platformLog(" Read Block: %s %s\r\n", (err != ERR_NONE) ? "FAIL": "OK Data:", (err != ERR_NONE) ? "" : hex2Str( &rxBuf[1], DEMO_NFCV_BLOCK_LEN));
 8003a4e:	491a      	ldr	r1, [pc, #104]	; (8003ab8 <demoCycle+0x3ec>)
 8003a50:	4a1a      	ldr	r2, [pc, #104]	; (8003abc <demoCycle+0x3f0>)
 8003a52:	e78c      	b.n	800396e <demoCycle+0x2a2>
                            	platformLog("  Utilisateur non autorisé\n");
 8003a54:	481a      	ldr	r0, [pc, #104]	; (8003ac0 <demoCycle+0x3f4>)
 8003a56:	f000 f845 	bl	8003ae4 <logUsart>
                            	HAL_UART_Transmit(&huart2, (uint8_t*)"Utilisateur non autoriseTx\r\n", 8, HAL_MAX_DELAY);
 8003a5a:	491a      	ldr	r1, [pc, #104]	; (8003ac4 <demoCycle+0x3f8>)
 8003a5c:	481a      	ldr	r0, [pc, #104]	; (8003ac8 <demoCycle+0x3fc>)
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	2208      	movs	r2, #8
 8003a64:	f7ff f996 	bl	8002d94 <HAL_UART_Transmit>
 8003a68:	e767      	b.n	800393a <demoCycle+0x26e>
    platformLog(" Check Block: %s Data:  %s \r\n", (err != ERR_NONE) ? "FAIL": "OK", (err != ERR_NONE) ? "" : hex2Str( &buf[1], RFAL_NFCF_BLOCK_LEN) );
 8003a6a:	4913      	ldr	r1, [pc, #76]	; (8003ab8 <demoCycle+0x3ec>)
 8003a6c:	4a13      	ldr	r2, [pc, #76]	; (8003abc <demoCycle+0x3f0>)
 8003a6e:	e6da      	b.n	8003826 <demoCycle+0x15a>
                                platformLog("NFCA Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8003a70:	7f19      	ldrb	r1, [r3, #28]
 8003a72:	6998      	ldr	r0, [r3, #24]
 8003a74:	f000 f858 	bl	8003b28 <hex2Str>
 8003a78:	4601      	mov	r1, r0
 8003a7a:	4814      	ldr	r0, [pc, #80]	; (8003acc <demoCycle+0x400>)
 8003a7c:	f000 f832 	bl	8003ae4 <logUsart>
                                demoP2P();
 8003a80:	f7ff fcee 	bl	8003460 <demoP2P>
                                break;
 8003a84:	e6d8      	b.n	8003838 <demoCycle+0x16c>
                                platformLog("NFCA Passive ISO-DEP device found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8003a86:	7f19      	ldrb	r1, [r3, #28]
 8003a88:	6998      	ldr	r0, [r3, #24]
 8003a8a:	f000 f84d 	bl	8003b28 <hex2Str>
 8003a8e:	4601      	mov	r1, r0
 8003a90:	480f      	ldr	r0, [pc, #60]	; (8003ad0 <demoCycle+0x404>)
 8003a92:	f000 f827 	bl	8003ae4 <logUsart>
                                demoAPDU();
 8003a96:	f7ff fd59 	bl	800354c <demoAPDU>
                                break;
 8003a9a:	e6cd      	b.n	8003838 <demoCycle+0x16c>
                            platformLog("NFCF Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8003a9c:	7f19      	ldrb	r1, [r3, #28]
 8003a9e:	6998      	ldr	r0, [r3, #24]
 8003aa0:	f000 f842 	bl	8003b28 <hex2Str>
 8003aa4:	4601      	mov	r1, r0
 8003aa6:	480b      	ldr	r0, [pc, #44]	; (8003ad4 <demoCycle+0x408>)
 8003aa8:	f000 f81c 	bl	8003ae4 <logUsart>
                            demoP2P();
 8003aac:	f7ff fcd8 	bl	8003460 <demoP2P>
 8003ab0:	e6bc      	b.n	800382c <demoCycle+0x160>
 8003ab2:	bf00      	nop
 8003ab4:	0800c7b0 	.word	0x0800c7b0
 8003ab8:	0800c66c 	.word	0x0800c66c
 8003abc:	0800ca10 	.word	0x0800ca10
 8003ac0:	0800c8e4 	.word	0x0800c8e4
 8003ac4:	0800c904 	.word	0x0800c904
 8003ac8:	200003ac 	.word	0x200003ac
 8003acc:	0800c784 	.word	0x0800c784
 8003ad0:	0800c754 	.word	0x0800c754
 8003ad4:	0800c800 	.word	0x0800c800

08003ad8 <logUsartInit>:
	* @param	husart : already initalized handle to USART HW
  * @retval none :
  */
void logUsartInit(UART_HandleTypeDef *husart)
{
    pLogUsart = husart;
 8003ad8:	4b01      	ldr	r3, [pc, #4]	; (8003ae0 <logUsartInit+0x8>)
 8003ada:	6018      	str	r0, [r3, #0]
}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	200001a4 	.word	0x200001a4

08003ae4 <logUsart>:

  return HAL_UART_Transmit(pLogUsart, data, dataLen, USART_TIMEOUT);
}

int logUsart(const char* format, ...)
{
 8003ae4:	b40f      	push	{r0, r1, r2, r3}
 8003ae6:	b510      	push	{r4, lr}
 8003ae8:	b0c2      	sub	sp, #264	; 0x108
 8003aea:	ab44      	add	r3, sp, #272	; 0x110
  {  
    #define LOG_BUFFER_SIZE 256
    char buf[LOG_BUFFER_SIZE];
    va_list argptr;
    va_start(argptr, format);
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 8003aec:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 8003af0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(argptr, format);
 8003af4:	9301      	str	r3, [sp, #4]
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 8003af6:	a802      	add	r0, sp, #8
 8003af8:	f007 ffce 	bl	800ba98 <vsniprintf>
 8003afc:	4604      	mov	r4, r0
    va_end(argptr);  
      
    /* */
    logUsartTx((uint8_t*)buf, strlen(buf));
 8003afe:	a802      	add	r0, sp, #8
 8003b00:	f7fc fb70 	bl	80001e4 <strlen>
  if(pLogUsart == 0)
 8003b04:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <logUsart+0x40>)
    logUsartTx((uint8_t*)buf, strlen(buf));
 8003b06:	b282      	uxth	r2, r0
  if(pLogUsart == 0)
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	b120      	cbz	r0, 8003b16 <logUsart+0x32>
  return HAL_UART_Transmit(pLogUsart, data, dataLen, USART_TIMEOUT);
 8003b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b10:	a902      	add	r1, sp, #8
 8003b12:	f7ff f93f 	bl	8002d94 <HAL_UART_Transmit>
  #else
  {
    return 0;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8003b16:	4620      	mov	r0, r4
 8003b18:	b042      	add	sp, #264	; 0x108
 8003b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b1e:	b004      	add	sp, #16
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	200001a4 	.word	0x200001a4

08003b28 <hex2Str>:

/* */

char* hex2Str(unsigned char * data, size_t dataLen)
{
 8003b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #if (USE_LOGGER == LOGGER_ON)
  {
    unsigned char * pin = data;
    const char * hex = "0123456789ABCDEF";
    char * pout = hexStr[hexStrIdx];
 8003b2c:	4d24      	ldr	r5, [pc, #144]	; (8003bc0 <hex2Str+0x98>)
 8003b2e:	792e      	ldrb	r6, [r5, #4]
 8003b30:	f105 0308 	add.w	r3, r5, #8
 8003b34:	eb03 17c6 	add.w	r7, r3, r6, lsl #7
    uint8_t i = 0;
    uint8_t idx = hexStrIdx;
    size_t len;  
      
    if(dataLen == 0)
 8003b38:	b941      	cbnz	r1, 8003b4c <hex2Str+0x24>
 8003b3a:	01f2      	lsls	r2, r6, #7
      *pout++ = hex[(*pin>>4)&0xF];
      *pout++ = hex[(*pin)&0xF];
      *pout = 0;
    }    
    
    hexStrIdx++;
 8003b3c:	3601      	adds	r6, #1
      pout[0] = 0;     
 8003b3e:	5499      	strb	r1, [r3, r2]
    hexStrIdx %= MAX_HEX_STR;
 8003b40:	f006 0603 	and.w	r6, r6, #3
 8003b44:	712e      	strb	r6, [r5, #4]
  #else
  {
    return NULL;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8003b46:	4638      	mov	r0, r7
 8003b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      len = MIN( dataLen , (MAX_HEX_STR_LENGTH / 2) );
 8003b4c:	2940      	cmp	r1, #64	; 0x40
 8003b4e:	bf28      	it	cs
 8003b50:	2140      	movcs	r1, #64	; 0x40
      for(; i < (len - 1); ++i)
 8003b52:	f1b1 0e01 	subs.w	lr, r1, #1
 8003b56:	d030      	beq.n	8003bba <hex2Str+0x92>
 8003b58:	4c1a      	ldr	r4, [pc, #104]	; (8003bc4 <hex2Str+0x9c>)
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	1cba      	adds	r2, r7, #2
    uint8_t i = 0;
 8003b5e:	2300      	movs	r3, #0
          *pout++ = hex[(*pin>>4)&0xF];
 8003b60:	f811 cb01 	ldrb.w	ip, [r1], #1
 8003b64:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
      for(; i < (len - 1); ++i)
 8003b68:	3301      	adds	r3, #1
          *pout++ = hex[(*pin>>4)&0xF];
 8003b6a:	f814 000c 	ldrb.w	r0, [r4, ip]
 8003b6e:	f802 0c02 	strb.w	r0, [r2, #-2]
          *pout++ = hex[(*pin++)&0xF];
 8003b72:	f811 cc01 	ldrb.w	ip, [r1, #-1]
 8003b76:	f00c 0c0f 	and.w	ip, ip, #15
      for(; i < (len - 1); ++i)
 8003b7a:	b2db      	uxtb	r3, r3
          *pout++ = hex[(*pin++)&0xF];
 8003b7c:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8003b80:	f802 cc01 	strb.w	ip, [r2, #-1]
      for(; i < (len - 1); ++i)
 8003b84:	4573      	cmp	r3, lr
 8003b86:	4690      	mov	r8, r2
          *pout++ = hex[(*pin++)&0xF];
 8003b88:	4608      	mov	r0, r1
      for(; i < (len - 1); ++i)
 8003b8a:	f102 0202 	add.w	r2, r2, #2
 8003b8e:	d3e7      	bcc.n	8003b60 <hex2Str+0x38>
      *pout++ = hex[(*pin>>4)&0xF];
 8003b90:	7803      	ldrb	r3, [r0, #0]
 8003b92:	091b      	lsrs	r3, r3, #4
    hexStrIdx++;
 8003b94:	3601      	adds	r6, #1
      *pout++ = hex[(*pin>>4)&0xF];
 8003b96:	5ce3      	ldrb	r3, [r4, r3]
 8003b98:	f888 3000 	strb.w	r3, [r8]
      *pout++ = hex[(*pin)&0xF];
 8003b9c:	7803      	ldrb	r3, [r0, #0]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
    hexStrIdx %= MAX_HEX_STR;
 8003ba2:	f006 0603 	and.w	r6, r6, #3
      *pout++ = hex[(*pin)&0xF];
 8003ba6:	5ce3      	ldrb	r3, [r4, r3]
 8003ba8:	f888 3001 	strb.w	r3, [r8, #1]
      *pout = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f888 3002 	strb.w	r3, [r8, #2]
    hexStrIdx %= MAX_HEX_STR;
 8003bb2:	712e      	strb	r6, [r5, #4]
}
 8003bb4:	4638      	mov	r0, r7
 8003bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bba:	4c02      	ldr	r4, [pc, #8]	; (8003bc4 <hex2Str+0x9c>)
    char * pout = hexStr[hexStrIdx];
 8003bbc:	46b8      	mov	r8, r7
 8003bbe:	e7e7      	b.n	8003b90 <hex2Str+0x68>
 8003bc0:	200001a4 	.word	0x200001a4
 8003bc4:	0800c9a4 	.word	0x0800c9a4

08003bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bc8:	b510      	push	{r4, lr}
 8003bca:	b0ba      	sub	sp, #232	; 0xe8
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 8003bcc:	f7fd fec8 	bl	8001960 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003bd0:	4a2b      	ldr	r2, [pc, #172]	; (8003c80 <SystemClock_Config+0xb8>)
 8003bd2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003bd6:	ed9f 7b26 	vldr	d7, [pc, #152]	; 8003c70 <SystemClock_Config+0xa8>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003bda:	f023 0318 	bic.w	r3, r3, #24
 8003bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003be2:	2414      	movs	r4, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003be4:	2101      	movs	r1, #1
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8003be6:	22b0      	movs	r2, #176	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003be8:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bea:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003bec:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003bf0:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003bf2:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8003bf4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003bf6:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bf8:	f7fd ffa4 	bl	8001b44 <HAL_RCC_OscConfig>
 8003bfc:	b100      	cbz	r0, 8003c00 <SystemClock_Config+0x38>
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003bfe:	e7fe      	b.n	8003bfe <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c00:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8003c78 <SystemClock_Config+0xb0>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2100      	movs	r1, #0
 8003c08:	2000      	movs	r0, #0
 8003c0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c0e:	2102      	movs	r1, #2
 8003c10:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c12:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c14:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c18:	f7fe fa60 	bl	80020dc <HAL_RCC_ClockConfig>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	b100      	cbz	r0, 8003c22 <SystemClock_Config+0x5a>
  while(1)
 8003c20:	e7fe      	b.n	8003c20 <SystemClock_Config+0x58>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c22:	2202      	movs	r2, #2
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c24:	a818      	add	r0, sp, #96	; 0x60
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c26:	9218      	str	r2, [sp, #96]	; 0x60
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c28:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c2a:	f7fe fc2d 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 8003c2e:	b100      	cbz	r0, 8003c32 <SystemClock_Config+0x6a>
  while(1)
 8003c30:	e7fe      	b.n	8003c30 <SystemClock_Config+0x68>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003c32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c36:	f7fd fea3 	bl	8001980 <HAL_PWREx_ControlVoltageScaling>
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	b100      	cbz	r0, 8003c40 <SystemClock_Config+0x78>
  while(1)
 8003c3e:	e7fe      	b.n	8003c3e <SystemClock_Config+0x76>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003c40:	f7fe fae4 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8003c44:	4a0f      	ldr	r2, [pc, #60]	; (8003c84 <SystemClock_Config+0xbc>)
 8003c46:	fba2 2300 	umull	r2, r3, r2, r0
 8003c4a:	0998      	lsrs	r0, r3, #6
 8003c4c:	f7fd fd16 	bl	800167c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003c50:	2004      	movs	r0, #4
 8003c52:	f7fd fd2d 	bl	80016b0 <HAL_SYSTICK_CLKSourceConfig>
  HAL_RCCEx_EnableMSIPLLMode();
 8003c56:	f7fe fe37 	bl	80028c8 <HAL_RCCEx_EnableMSIPLLMode>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c62:	f7fd fcc1 	bl	80015e8 <HAL_NVIC_SetPriority>
}
 8003c66:	b03a      	add	sp, #232	; 0xe8
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	bf00      	nop
 8003c6c:	f3af 8000 	nop.w
 8003c70:	00000001 	.word	0x00000001
 8003c74:	00000000 	.word	0x00000000
 8003c78:	0000000f 	.word	0x0000000f
 8003c7c:	00000000 	.word	0x00000000
 8003c80:	40021000 	.word	0x40021000
 8003c84:	10624dd3 	.word	0x10624dd3

08003c88 <main>:
{
 8003c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8003c8c:	f7fd fc66 	bl	800155c <HAL_Init>
  SystemClock_Config();
 8003c90:	f7ff ff9a 	bl	8003bc8 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c94:	4ba2      	ldr	r3, [pc, #648]	; (8003f20 <main+0x298>)
 8003c96:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003c98:	f040 0004 	orr.w	r0, r0, #4
 8003c9c:	64d8      	str	r0, [r3, #76]	; 0x4c
 8003c9e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003ca0:	f004 0404 	and.w	r4, r4, #4
 8003ca4:	9401      	str	r4, [sp, #4]
 8003ca6:	9c01      	ldr	r4, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ca8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003caa:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003cae:	64dc      	str	r4, [r3, #76]	; 0x4c
 8003cb0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003cb2:	f004 0480 	and.w	r4, r4, #128	; 0x80
 8003cb6:	9402      	str	r4, [sp, #8]
 8003cb8:	9c02      	ldr	r4, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003cbc:	f044 0401 	orr.w	r4, r4, #1
 8003cc0:	64dc      	str	r4, [r3, #76]	; 0x4c
 8003cc2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003cc4:	f004 0401 	and.w	r4, r4, #1
 8003cc8:	9403      	str	r4, [sp, #12]
 8003cca:	9c03      	ldr	r4, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ccc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003cce:	f044 0402 	orr.w	r4, r4, #2
 8003cd2:	64dc      	str	r4, [r3, #76]	; 0x4c
 8003cd4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003cd6:	f004 0402 	and.w	r4, r4, #2
 8003cda:	9404      	str	r4, [sp, #16]
 8003cdc:	9c04      	ldr	r4, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cde:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003ce0:	f044 0408 	orr.w	r4, r4, #8
 8003ce4:	64dc      	str	r4, [r3, #76]	; 0x4c
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  huart2.Instance = USART2;
 8003ce8:	4c8e      	ldr	r4, [pc, #568]	; (8003f24 <main+0x29c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cea:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOA, LED_F_Pin|LED_B_Pin|LED_FIELD_Pin, GPIO_PIN_RESET);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f44f 7189 	mov.w	r1, #274	; 0x112
 8003cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cf8:	9305      	str	r3, [sp, #20]
 8003cfa:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, LED_F_Pin|LED_B_Pin|LED_FIELD_Pin, GPIO_PIN_RESET);
 8003cfc:	f7fd fe16 	bl	800192c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8003d00:	4889      	ldr	r0, [pc, #548]	; (8003f28 <main+0x2a0>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	2171      	movs	r1, #113	; 0x71
 8003d06:	f7fd fe11 	bl	800192c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8003d0a:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <main+0x2a4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d0c:	4888      	ldr	r0, [pc, #544]	; (8003f30 <main+0x2a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8003d10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d14:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = B1_Pin;
 8003d16:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d1c:	f7fd fcda 	bl	80016d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003d20:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003d24:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d26:	4882      	ldr	r0, [pc, #520]	; (8003f30 <main+0x2a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d2a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003d2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d30:	f7fd fcd0 	bl	80016d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IRQ_3911_Pin;
 8003d34:	4b7f      	ldr	r3, [pc, #508]	; (8003f34 <main+0x2ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d36:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = IRQ_3911_Pin;
 8003d38:	2201      	movs	r2, #1
  HAL_GPIO_Init(IRQ_3911_GPIO_Port, &GPIO_InitStruct);
 8003d3a:	a906      	add	r1, sp, #24
 8003d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = IRQ_3911_Pin;
 8003d40:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pin = LED_F_Pin|LED_B_Pin|LED_FIELD_Pin;
 8003d44:	2600      	movs	r6, #0
  HAL_GPIO_Init(IRQ_3911_GPIO_Port, &GPIO_InitStruct);
 8003d46:	f7fd fcc5 	bl	80016d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_F_Pin|LED_B_Pin|LED_FIELD_Pin;
 8003d4a:	2700      	movs	r7, #0
 8003d4c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8003d50:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d52:	a906      	add	r1, sp, #24
 8003d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_F_Pin|LED_B_Pin|LED_FIELD_Pin;
 8003d58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d5c:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d60:	f7fd fcb8 	bl	80016d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin;
 8003d64:	2271      	movs	r2, #113	; 0x71
 8003d66:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d68:	486f      	ldr	r0, [pc, #444]	; (8003f28 <main+0x2a0>)
 8003d6a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin;
 8003d6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d70:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d74:	f7fd fcae 	bl	80016d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8003d78:	f64f 7286 	movw	r2, #65414	; 0xff86
 8003d7c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7e:	486a      	ldr	r0, [pc, #424]	; (8003f28 <main+0x2a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d82:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8003d84:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d88:	f7fd fca4 	bl	80016d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8003d8c:	f44f 421e 	mov.w	r2, #40448	; 0x9e00
 8003d90:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d92:	a906      	add	r1, sp, #24
 8003d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8003d98:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9c:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9e:	f7fd fc99 	bl	80016d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003da2:	2303      	movs	r3, #3
 8003da4:	2204      	movs	r2, #4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003da6:	4864      	ldr	r0, [pc, #400]	; (8003f38 <main+0x2b0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003daa:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003dac:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003db0:	f7fd fc90 	bl	80016d4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003db4:	462a      	mov	r2, r5
 8003db6:	4629      	mov	r1, r5
 8003db8:	2006      	movs	r0, #6
 8003dba:	f7fd fc15 	bl	80015e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003dbe:	2006      	movs	r0, #6
 8003dc0:	f7fd fc50 	bl	8001664 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8003dc4:	495d      	ldr	r1, [pc, #372]	; (8003f3c <main+0x2b4>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dc6:	6265      	str	r5, [r4, #36]	; 0x24
  huart2.Init.BaudRate = 115200;
 8003dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dcc:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dce:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8003dd0:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dd4:	e9c4 5503 	strd	r5, r5, [r4, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dd8:	e9c4 3505 	strd	r3, r5, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ddc:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003de0:	f7ff faa0 	bl	8003324 <HAL_UART_Init>
 8003de4:	b9f0      	cbnz	r0, 8003e24 <main+0x19c>
  hspi1.Instance = SPI1;
 8003de6:	4603      	mov	r3, r0
 8003de8:	4855      	ldr	r0, [pc, #340]	; (8003f40 <main+0x2b8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003dea:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003df2:	e9c4 0220 	strd	r0, r2, [r4, #128]	; 0x80
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003df6:	e9c4 3122 	strd	r3, r1, [r4, #136]	; 0x88
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003dfa:	2201      	movs	r2, #1
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003dfc:	f44f 7000 	mov.w	r0, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003e00:	2118      	movs	r1, #24
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003e02:	e9c4 3224 	strd	r3, r2, [r4, #144]	; 0x90
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003e06:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  hspi1.Init.CRCPolynomial = 7;
 8003e0a:	2207      	movs	r2, #7
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e0c:	f104 0080 	add.w	r0, r4, #128	; 0x80
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e10:	e9c4 3328 	strd	r3, r3, [r4, #160]	; 0xa0
  hspi1.Init.CRCPolynomial = 7;
 8003e14:	e9c4 322a 	strd	r3, r2, [r4, #168]	; 0xa8
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003e18:	e9c4 332c 	strd	r3, r3, [r4, #176]	; 0xb0
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e1c:	f7fe fdc2 	bl	80029a4 <HAL_SPI_Init>
 8003e20:	b108      	cbz	r0, 8003e26 <main+0x19e>
  while(1)
 8003e22:	e7fe      	b.n	8003e22 <main+0x19a>
 8003e24:	e7fe      	b.n	8003e24 <main+0x19c>
  spiInit(&hspi1);
 8003e26:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8003e2a:	f000 f891 	bl	8003f50 <spiInit>
  logUsartInit(&huart2);
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f7ff fe52 	bl	8003ad8 <logUsartInit>
  platformLog("Welcome to X-NUCLEO-NFC05A1\r\n");
 8003e34:	4843      	ldr	r0, [pc, #268]	; (8003f44 <main+0x2bc>)
 8003e36:	f7ff fe55 	bl	8003ae4 <logUsart>
  if( !demoIni() )
 8003e3a:	f7ff fc07 	bl	800364c <demoIni>
 8003e3e:	bb18      	cbnz	r0, 8003e88 <main+0x200>
    platformLog("Initialization failed..\r\n");
 8003e40:	4841      	ldr	r0, [pc, #260]	; (8003f48 <main+0x2c0>)
      platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8003e42:	4c39      	ldr	r4, [pc, #228]	; (8003f28 <main+0x2a0>)
    platformLog("Initialization failed..\r\n");
 8003e44:	f7ff fe4e 	bl	8003ae4 <logUsart>
      platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8003e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e50:	f7fd fd72 	bl	8001938 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8003e54:	4620      	mov	r0, r4
 8003e56:	2101      	movs	r1, #1
 8003e58:	f7fd fd6e 	bl	8001938 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8003e5c:	2110      	movs	r1, #16
 8003e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e62:	f7fd fd69 	bl	8001938 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8003e66:	2102      	movs	r1, #2
 8003e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e6c:	f7fd fd64 	bl	8001938 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8003e70:	4620      	mov	r0, r4
 8003e72:	2110      	movs	r1, #16
 8003e74:	f7fd fd60 	bl	8001938 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8003e78:	4620      	mov	r0, r4
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	f7fd fd5c 	bl	8001938 <HAL_GPIO_TogglePin>
      platformDelay(100);
 8003e80:	2064      	movs	r0, #100	; 0x64
 8003e82:	f7fd fb8d 	bl	80015a0 <HAL_Delay>
    while(1) 
 8003e86:	e7df      	b.n	8003e48 <main+0x1c0>
    platformLog("Initialization succeeded..\r\n");
 8003e88:	4830      	ldr	r0, [pc, #192]	; (8003f4c <main+0x2c4>)
      platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8003e8a:	4d27      	ldr	r5, [pc, #156]	; (8003f28 <main+0x2a0>)
    platformLog("Initialization succeeded..\r\n");
 8003e8c:	f7ff fe2a 	bl	8003ae4 <logUsart>
 8003e90:	2406      	movs	r4, #6
      platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8003e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e9a:	f7fd fd4d 	bl	8001938 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f7fd fd49 	bl	8001938 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8003ea6:	2110      	movs	r1, #16
 8003ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eac:	f7fd fd44 	bl	8001938 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb6:	f7fd fd3f 	bl	8001938 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8003eba:	2110      	movs	r1, #16
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	f7fd fd3b 	bl	8001938 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	2120      	movs	r1, #32
 8003ec6:	f7fd fd37 	bl	8001938 <HAL_GPIO_TogglePin>
      platformDelay(200);
 8003eca:	20c8      	movs	r0, #200	; 0xc8
 8003ecc:	f7fd fb68 	bl	80015a0 <HAL_Delay>
    for (int i = 0; i < 6; i++) 
 8003ed0:	3c01      	subs	r4, #1
 8003ed2:	d1de      	bne.n	8003e92 <main+0x20a>
    platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8003ed4:	4814      	ldr	r0, [pc, #80]	; (8003f28 <main+0x2a0>)
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	4622      	mov	r2, r4
 8003eda:	f7fd fd27 	bl	800192c <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8003ede:	4622      	mov	r2, r4
 8003ee0:	2110      	movs	r1, #16
 8003ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ee6:	f7fd fd21 	bl	800192c <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8003eea:	4622      	mov	r2, r4
 8003eec:	2102      	movs	r1, #2
 8003eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ef2:	f7fd fd1b 	bl	800192c <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8003ef6:	480c      	ldr	r0, [pc, #48]	; (8003f28 <main+0x2a0>)
 8003ef8:	4622      	mov	r2, r4
 8003efa:	2110      	movs	r1, #16
 8003efc:	f7fd fd16 	bl	800192c <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8003f00:	4809      	ldr	r0, [pc, #36]	; (8003f28 <main+0x2a0>)
 8003f02:	4622      	mov	r2, r4
 8003f04:	2120      	movs	r1, #32
 8003f06:	f7fd fd11 	bl	800192c <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f14:	f7fd fd0a 	bl	800192c <HAL_GPIO_WritePin>
    demoCycle();
 8003f18:	f7ff fbd8 	bl	80036cc <demoCycle>
  while (1) 
 8003f1c:	e7fc      	b.n	8003f18 <main+0x290>
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000
 8003f24:	200003ac 	.word	0x200003ac
 8003f28:	48000400 	.word	0x48000400
 8003f2c:	10120000 	.word	0x10120000
 8003f30:	48000800 	.word	0x48000800
 8003f34:	10110000 	.word	0x10110000
 8003f38:	48000c00 	.word	0x48000c00
 8003f3c:	40004400 	.word	0x40004400
 8003f40:	40013000 	.word	0x40013000
 8003f44:	0800c9b8 	.word	0x0800c9b8
 8003f48:	0800c9d8 	.word	0x0800c9d8
 8003f4c:	0800c9f4 	.word	0x0800c9f4

08003f50 <spiInit>:
void spiInit(SPI_HandleTypeDef *hspi)
{
    pSpi = hspi;

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 8003f50:	6802      	ldr	r2, [r0, #0]
    pSpi = hspi;
 8003f52:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <spiInit+0x10>)
 8003f54:	6018      	str	r0, [r3, #0]
    __HAL_SPI_ENABLE(hspi);
 8003f56:	6813      	ldr	r3, [r2, #0]
 8003f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	4770      	bx	lr
 8003f60:	20000494 	.word	0x20000494

08003f64 <spiTxRx>:
{
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
}

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 8003f64:	b570      	push	{r4, r5, r6, lr}
  if(pSpi == 0)
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <spiTxRx+0x4c>)
 8003f68:	681e      	ldr	r6, [r3, #0]
{  
 8003f6a:	b082      	sub	sp, #8
  if(pSpi == 0)
 8003f6c:	b1c6      	cbz	r6, 8003fa0 <spiTxRx+0x3c>
    return HAL_ERROR;
  
  if(length > SPI_BUF_LEN)
 8003f6e:	2a61      	cmp	r2, #97	; 0x61
 8003f70:	4614      	mov	r4, r2
 8003f72:	d815      	bhi.n	8003fa0 <spiTxRx+0x3c>
  {
    return HAL_ERROR;
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 8003f74:	460d      	mov	r5, r1
  {
    memcpy(txBuf, txData, length );
 8003f76:	4601      	mov	r1, r0
  if(txData != NULL)
 8003f78:	b1a8      	cbz	r0, 8003fa6 <spiTxRx+0x42>
    memcpy(txBuf, txData, length );
 8003f7a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8003f7e:	f007 fd2f 	bl	800b9e0 <memcpy>
  else
  {
    memset(txBuf, 0x00, length );
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 8003f82:	490c      	ldr	r1, [pc, #48]	; (8003fb4 <spiTxRx+0x50>)
 8003f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2d00      	cmp	r5, #0
 8003f8c:	bf14      	ite	ne
 8003f8e:	462a      	movne	r2, r5
 8003f90:	460a      	moveq	r2, r1
 8003f92:	4623      	mov	r3, r4
 8003f94:	3164      	adds	r1, #100	; 0x64
 8003f96:	4630      	mov	r0, r6
 8003f98:	f7fe fd70 	bl	8002a7c <HAL_SPI_TransmitReceive>
}
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003fa0:	2001      	movs	r0, #1
}
 8003fa2:	b002      	add	sp, #8
 8003fa4:	bd70      	pop	{r4, r5, r6, pc}
    memset(txBuf, 0x00, length );
 8003fa6:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8003faa:	f007 fd41 	bl	800ba30 <memset>
 8003fae:	e7e8      	b.n	8003f82 <spiTxRx+0x1e>
 8003fb0:	20000494 	.word	0x20000494
 8003fb4:	20000498 	.word	0x20000498

08003fb8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_MspInit+0x8c>)
{
 8003fba:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	661a      	str	r2, [r3, #96]	; 0x60
 8003fc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003fc6:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc8:	f002 0201 	and.w	r2, r2, #1
 8003fcc:	9200      	str	r2, [sp, #0]
 8003fce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fd6:	659a      	str	r2, [r3, #88]	; 0x58
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fe0:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fe4:	f7fd faee 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003fe8:	2200      	movs	r2, #0
 8003fea:	4611      	mov	r1, r2
 8003fec:	f06f 000b 	mvn.w	r0, #11
 8003ff0:	f7fd fafa 	bl	80015e8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	f06f 000a 	mvn.w	r0, #10
 8003ffc:	f7fd faf4 	bl	80015e8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004000:	2200      	movs	r2, #0
 8004002:	4611      	mov	r1, r2
 8004004:	f06f 0009 	mvn.w	r0, #9
 8004008:	f7fd faee 	bl	80015e8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800400c:	2200      	movs	r2, #0
 800400e:	4611      	mov	r1, r2
 8004010:	f06f 0004 	mvn.w	r0, #4
 8004014:	f7fd fae8 	bl	80015e8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004018:	2200      	movs	r2, #0
 800401a:	4611      	mov	r1, r2
 800401c:	f06f 0003 	mvn.w	r0, #3
 8004020:	f7fd fae2 	bl	80015e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004024:	2200      	movs	r2, #0
 8004026:	4611      	mov	r1, r2
 8004028:	f06f 0001 	mvn.w	r0, #1
 800402c:	f7fd fadc 	bl	80015e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004030:	2200      	movs	r2, #0
 8004032:	4611      	mov	r1, r2
 8004034:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004038:	b003      	add	sp, #12
 800403a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800403e:	f7fd bad3 	b.w	80015e8 <HAL_NVIC_SetPriority>
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000

08004048 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_SPI_MspInit+0x48>)
 800404a:	6802      	ldr	r2, [r0, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d000      	beq.n	8004052 <HAL_SPI_MspInit+0xa>
 8004050:	4770      	bx	lr
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004052:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
{
 8004056:	b510      	push	{r4, lr}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004058:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800405a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800405e:	661a      	str	r2, [r3, #96]	; 0x60
 8004060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8004062:	b088      	sub	sp, #32
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004064:	20e0      	movs	r0, #224	; 0xe0
 8004066:	2102      	movs	r1, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800406c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004070:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004072:	2200      	movs	r2, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004074:	2405      	movs	r4, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004076:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004078:	a902      	add	r1, sp, #8
 800407a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800407e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004082:	9406      	str	r4, [sp, #24]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004084:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004086:	f7fd fb25 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800408a:	b008      	add	sp, #32
 800408c:	bd10      	pop	{r4, pc}
 800408e:	bf00      	nop
 8004090:	40013000 	.word	0x40013000

08004094 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <HAL_UART_MspInit+0x48>)
 8004096:	6802      	ldr	r2, [r0, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d000      	beq.n	800409e <HAL_UART_MspInit+0xa>
 800409c:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800409e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
{
 80040a2:	b510      	push	{r4, lr}
    __HAL_RCC_USART2_CLK_ENABLE();
 80040a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80040aa:	659a      	str	r2, [r3, #88]	; 0x58
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 80040ae:	b088      	sub	sp, #32
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040b0:	200c      	movs	r0, #12
 80040b2:	2102      	movs	r1, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 80040b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_USART2_CLK_ENABLE();
 80040bc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040be:	2200      	movs	r2, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040c0:	2407      	movs	r4, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040c2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c4:	a902      	add	r1, sp, #8
 80040c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040ce:	9406      	str	r4, [sp, #24]
    __HAL_RCC_USART2_CLK_ENABLE();
 80040d0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d2:	f7fd faff 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80040d6:	b008      	add	sp, #32
 80040d8:	bd10      	pop	{r4, pc}
 80040da:	bf00      	nop
 80040dc:	40004400 	.word	0x40004400

080040e0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80040e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040e2:	f7fd fa4b 	bl	800157c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80040ea:	f7fd baef 	b.w	80016cc <HAL_SYSTICK_IRQHandler>
 80040ee:	bf00      	nop

080040f0 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 80040f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80040f2:	2001      	movs	r0, #1
 80040f4:	f7fd fc28 	bl	8001948 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  st25r3911Isr();
  /* USER CODE END EXTI0_IRQn 1 */
}
 80040f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  st25r3911Isr();
 80040fc:	f7fd b8ee 	b.w	80012dc <st25r3911Isr>

08004100 <rfalAnalogConfigInitialize>:
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <rfalAnalogConfigInitialize+0x14>)
 8004102:	4805      	ldr	r0, [pc, #20]	; (8004118 <rfalAnalogConfigInitialize+0x18>)
 8004104:	6018      	str	r0, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 8004106:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800410a:	2201      	movs	r2, #1
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 800410c:	8099      	strh	r1, [r3, #4]
  gRfalAnalogConfigMgmt.ready = true;
 800410e:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000560 	.word	0x20000560
 8004118:	0800c388 	.word	0x0800c388

0800411c <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800411c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 8004120:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80041fc <rfalSetAnalogConfig+0xe0>
 8004124:	f898 3006 	ldrb.w	r3, [r8, #6]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d062      	beq.n	80041f2 <rfalSetAnalogConfig+0xd6>
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800412c:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8004130:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 8004134:	f410 4ffe 	tst.w	r0, #32512	; 0x7f00
 8004138:	bf14      	ite	ne
 800413a:	461e      	movne	r6, r3
 800413c:	f04f 36ff 	moveq.w	r6, #4294967295
 8004140:	f010 0f03 	tst.w	r0, #3
 8004144:	bf14      	ite	ne
 8004146:	4603      	movne	r3, r0
 8004148:	2303      	moveq	r3, #3
 800414a:	431e      	orrs	r6, r3
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800414c:	f8d8 2000 	ldr.w	r2, [r8]
                       );
    
    i = *configOffset;
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8004150:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8004154:	4607      	mov	r7, r0
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 8004156:	b2b6      	uxth	r6, r6
    rfalAnalogConfigOffset configOffset = 0;
 8004158:	f04f 0a00 	mov.w	sl, #0
 800415c:	f04f 0904 	mov.w	r9, #4
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8004160:	458a      	cmp	sl, r1
 8004162:	d309      	bcc.n	8004178 <rfalSetAnalogConfig+0x5c>
 8004164:	e03d      	b.n	80041e2 <rfalSetAnalogConfig+0xc6>
            return configTbl[sizeof(rfalAnalogConfigId)];
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 8004166:	7883      	ldrb	r3, [r0, #2]
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 8004168:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 800416c:	f10a 0a03 	add.w	sl, sl, #3
 8004170:	fa1f fa8a 	uxth.w	sl, sl
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8004174:	458a      	cmp	sl, r1
 8004176:	d234      	bcs.n	80041e2 <rfalSetAnalogConfig+0xc6>
        if (configId == (foundConfigId & configIdMaskVal))
 8004178:	f832 300a 	ldrh.w	r3, [r2, sl]
 800417c:	ba5b      	rev16	r3, r3
 800417e:	4033      	ands	r3, r6
 8004180:	429f      	cmp	r7, r3
        configTbl = &currentConfigTbl[i];
 8004182:	eb02 000a 	add.w	r0, r2, sl
        if (configId == (foundConfigId & configIdMaskVal))
 8004186:	d1ee      	bne.n	8004166 <rfalSetAnalogConfig+0x4a>
            return configTbl[sizeof(rfalAnalogConfigId)];
 8004188:	7885      	ldrb	r5, [r0, #2]
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800418a:	f10a 0403 	add.w	r4, sl, #3
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800418e:	2dff      	cmp	r5, #255	; 0xff
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 8004190:	b2a4      	uxth	r4, r4
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 8004192:	d026      	beq.n	80041e2 <rfalSetAnalogConfig+0xc6>
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 8004194:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
 8004198:	fa1f fa8a 	uxth.w	sl, sl
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800419c:	1c4b      	adds	r3, r1, #1
 800419e:	4553      	cmp	r3, sl
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 80041a0:	4414      	add	r4, r2
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 80041a2:	d329      	bcc.n	80041f8 <rfalSetAnalogConfig+0xdc>
        for ( i = 0; i < numConfigSet; i++)
 80041a4:	2d00      	cmp	r5, #0
 80041a6:	d0db      	beq.n	8004160 <rfalSetAnalogConfig+0x44>
 80041a8:	3d01      	subs	r5, #1
 80041aa:	b2ed      	uxtb	r5, r5
 80041ac:	1d23      	adds	r3, r4, #4
 80041ae:	fb19 3505 	smlabb	r5, r9, r5, r3
 80041b2:	e005      	b.n	80041c0 <rfalSetAnalogConfig+0xa4>
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 80041b4:	f007 fa2c 	bl	800b610 <rfalChipChangeTestRegBits>
 80041b8:	b988      	cbnz	r0, 80041de <rfalSetAnalogConfig+0xc2>
        for ( i = 0; i < numConfigSet; i++)
 80041ba:	3404      	adds	r4, #4
 80041bc:	42a5      	cmp	r5, r4
 80041be:	d013      	beq.n	80041e8 <rfalSetAnalogConfig+0xcc>
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 80041c0:	8823      	ldrh	r3, [r4, #0]
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 80041c2:	78e2      	ldrb	r2, [r4, #3]
 80041c4:	78a1      	ldrb	r1, [r4, #2]
 80041c6:	ba5b      	rev16	r3, r3
 80041c8:	fa1f fc83 	uxth.w	ip, r3
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 80041cc:	061b      	lsls	r3, r3, #24
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 80041ce:	f02c 0080 	bic.w	r0, ip, #128	; 0x80
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 80041d2:	d4ef      	bmi.n	80041b4 <rfalSetAnalogConfig+0x98>
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 80041d4:	4660      	mov	r0, ip
 80041d6:	f007 fa15 	bl	800b604 <rfalChipChangeRegBits>
 80041da:	2800      	cmp	r0, #0
 80041dc:	d0ed      	beq.n	80041ba <rfalSetAnalogConfig+0x9e>
} /* rfalSetAnalogConfig() */
 80041de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return retCode;
 80041e2:	2000      	movs	r0, #0
} /* rfalSetAnalogConfig() */
 80041e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 80041e8:	f8d8 2000 	ldr.w	r2, [r8]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 80041ec:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80041f0:	e7b6      	b.n	8004160 <rfalSetAnalogConfig+0x44>
        return ERR_REQUEST;
 80041f2:	2005      	movs	r0, #5
} /* rfalSetAnalogConfig() */
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return ERR_NOMEM;
 80041f8:	2001      	movs	r0, #1
 80041fa:	e7f0      	b.n	80041de <rfalSetAnalogConfig+0xc2>
 80041fc:	20000560 	.word	0x20000560

08004200 <rfalCrcCalculateCcitt>:
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
    uint16_t crc = preloadValue;
    uint16_t index;

    for (index = 0; index < length; index++)
 8004200:	b19a      	cbz	r2, 800422a <rfalCrcCalculateCcitt+0x2a>
 8004202:	3a01      	subs	r2, #1
 8004204:	f101 3cff 	add.w	ip, r1, #4294967295
 8004208:	fa11 f182 	uxtah	r1, r1, r2
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
    uint16_t crc = crcSeed;
    uint8_t  dat = dataByte;
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800420c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8004210:	4043      	eors	r3, r0
    dat ^= (dat << 4);
 8004212:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8004216:	b2db      	uxtb	r3, r3

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 8004218:	091a      	lsrs	r2, r3, #4
 800421a:	ea82 2010 	eor.w	r0, r2, r0, lsr #8
 800421e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    for (index = 0; index < length; index++)
 8004222:	458c      	cmp	ip, r1
    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 8004224:	ea80 00c3 	eor.w	r0, r0, r3, lsl #3
    for (index = 0; index < length; index++)
 8004228:	d1f0      	bne.n	800420c <rfalCrcCalculateCcitt+0xc>
}
 800422a:	4770      	bx	lr

0800422c <iso15693PhyVCDCode1Of4>:
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
    uint16_t a;
    uint8_t* outbuf = outbuffer;

    *outBufLen = 0;
 800422c:	f04f 0c00 	mov.w	ip, #0

    if (maxOutBufLen < 4U) {
 8004230:	2a03      	cmp	r2, #3
    *outBufLen = 0;
 8004232:	f8a3 c000 	strh.w	ip, [r3]
    if (maxOutBufLen < 4U) {
 8004236:	d93b      	bls.n	80042b0 <iso15693PhyVCDCode1Of4+0x84>
    }

    tmp = data;
    for (a = 0; a < 4U; a++)
    {
        switch (tmp & 0x3U)
 8004238:	f000 0203 	and.w	r2, r0, #3
 800423c:	2a02      	cmp	r2, #2
 800423e:	d03f      	beq.n	80042c0 <iso15693PhyVCDCode1Of4+0x94>
 8004240:	2a03      	cmp	r2, #3
 8004242:	d03a      	beq.n	80042ba <iso15693PhyVCDCode1Of4+0x8e>
 8004244:	2a01      	cmp	r2, #1
 8004246:	d035      	beq.n	80042b4 <iso15693PhyVCDCode1Of4+0x88>
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 8004248:	2202      	movs	r2, #2
 800424a:	700a      	strb	r2, [r1, #0]
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
        }
        outbuf++;
        (*outBufLen)++;
 800424c:	f8b3 c000 	ldrh.w	ip, [r3]
 8004250:	f3c0 0281 	ubfx	r2, r0, #2, #2
 8004254:	f10c 0c01 	add.w	ip, ip, #1
        switch (tmp & 0x3U)
 8004258:	2a02      	cmp	r2, #2
        (*outBufLen)++;
 800425a:	f8a3 c000 	strh.w	ip, [r3]
        switch (tmp & 0x3U)
 800425e:	d047      	beq.n	80042f0 <iso15693PhyVCDCode1Of4+0xc4>
 8004260:	2a03      	cmp	r2, #3
 8004262:	d042      	beq.n	80042ea <iso15693PhyVCDCode1Of4+0xbe>
 8004264:	2a01      	cmp	r2, #1
 8004266:	d03d      	beq.n	80042e4 <iso15693PhyVCDCode1Of4+0xb8>
                *outbuf = ISO15693_DAT_00_1_4;
 8004268:	2202      	movs	r2, #2
 800426a:	704a      	strb	r2, [r1, #1]
        (*outBufLen)++;
 800426c:	f8b3 c000 	ldrh.w	ip, [r3]
 8004270:	f3c0 1201 	ubfx	r2, r0, #4, #2
 8004274:	f10c 0c01 	add.w	ip, ip, #1
        switch (tmp & 0x3U)
 8004278:	2a02      	cmp	r2, #2
        (*outBufLen)++;
 800427a:	f8a3 c000 	strh.w	ip, [r3]
        switch (tmp & 0x3U)
 800427e:	d02e      	beq.n	80042de <iso15693PhyVCDCode1Of4+0xb2>
 8004280:	2a03      	cmp	r2, #3
 8004282:	d029      	beq.n	80042d8 <iso15693PhyVCDCode1Of4+0xac>
 8004284:	2a01      	cmp	r2, #1
 8004286:	d024      	beq.n	80042d2 <iso15693PhyVCDCode1Of4+0xa6>
                *outbuf = ISO15693_DAT_00_1_4;
 8004288:	2202      	movs	r2, #2
 800428a:	708a      	strb	r2, [r1, #2]
        (*outBufLen)++;
 800428c:	881a      	ldrh	r2, [r3, #0]
        tmp >>= 2;
 800428e:	0980      	lsrs	r0, r0, #6
        (*outBufLen)++;
 8004290:	3201      	adds	r2, #1
        switch (tmp & 0x3U)
 8004292:	2802      	cmp	r0, #2
        (*outBufLen)++;
 8004294:	801a      	strh	r2, [r3, #0]
        switch (tmp & 0x3U)
 8004296:	d019      	beq.n	80042cc <iso15693PhyVCDCode1Of4+0xa0>
 8004298:	2803      	cmp	r0, #3
 800429a:	d014      	beq.n	80042c6 <iso15693PhyVCDCode1Of4+0x9a>
 800429c:	2801      	cmp	r0, #1
                *outbuf = ISO15693_DAT_00_1_4;
 800429e:	bf14      	ite	ne
 80042a0:	2202      	movne	r2, #2
                *outbuf = ISO15693_DAT_01_1_4;
 80042a2:	2208      	moveq	r2, #8
 80042a4:	70ca      	strb	r2, [r1, #3]
        (*outBufLen)++;
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	3201      	adds	r2, #1
 80042aa:	2000      	movs	r0, #0
 80042ac:	801a      	strh	r2, [r3, #0]
    for (a = 0; a < 4U; a++)
 80042ae:	4770      	bx	lr
        return ERR_NOMEM;
 80042b0:	2001      	movs	r0, #1
    }
    return err;
}
 80042b2:	4770      	bx	lr
                *outbuf = ISO15693_DAT_01_1_4;
 80042b4:	2208      	movs	r2, #8
 80042b6:	700a      	strb	r2, [r1, #0]
                break;
 80042b8:	e7c8      	b.n	800424c <iso15693PhyVCDCode1Of4+0x20>
                *outbuf = ISO15693_DAT_11_1_4;
 80042ba:	2280      	movs	r2, #128	; 0x80
 80042bc:	700a      	strb	r2, [r1, #0]
                break;
 80042be:	e7c5      	b.n	800424c <iso15693PhyVCDCode1Of4+0x20>
                *outbuf = ISO15693_DAT_10_1_4;
 80042c0:	2220      	movs	r2, #32
 80042c2:	700a      	strb	r2, [r1, #0]
                break;
 80042c4:	e7c2      	b.n	800424c <iso15693PhyVCDCode1Of4+0x20>
                *outbuf = ISO15693_DAT_11_1_4;
 80042c6:	2280      	movs	r2, #128	; 0x80
 80042c8:	70ca      	strb	r2, [r1, #3]
                break;
 80042ca:	e7ec      	b.n	80042a6 <iso15693PhyVCDCode1Of4+0x7a>
                *outbuf = ISO15693_DAT_10_1_4;
 80042cc:	2220      	movs	r2, #32
 80042ce:	70ca      	strb	r2, [r1, #3]
                break;
 80042d0:	e7e9      	b.n	80042a6 <iso15693PhyVCDCode1Of4+0x7a>
                *outbuf = ISO15693_DAT_01_1_4;
 80042d2:	2208      	movs	r2, #8
 80042d4:	708a      	strb	r2, [r1, #2]
                break;
 80042d6:	e7d9      	b.n	800428c <iso15693PhyVCDCode1Of4+0x60>
                *outbuf = ISO15693_DAT_11_1_4;
 80042d8:	2280      	movs	r2, #128	; 0x80
 80042da:	708a      	strb	r2, [r1, #2]
                break;
 80042dc:	e7d6      	b.n	800428c <iso15693PhyVCDCode1Of4+0x60>
                *outbuf = ISO15693_DAT_10_1_4;
 80042de:	2220      	movs	r2, #32
 80042e0:	708a      	strb	r2, [r1, #2]
                break;
 80042e2:	e7d3      	b.n	800428c <iso15693PhyVCDCode1Of4+0x60>
                *outbuf = ISO15693_DAT_01_1_4;
 80042e4:	2208      	movs	r2, #8
 80042e6:	704a      	strb	r2, [r1, #1]
                break;
 80042e8:	e7c0      	b.n	800426c <iso15693PhyVCDCode1Of4+0x40>
                *outbuf = ISO15693_DAT_11_1_4;
 80042ea:	2280      	movs	r2, #128	; 0x80
 80042ec:	704a      	strb	r2, [r1, #1]
                break;
 80042ee:	e7bd      	b.n	800426c <iso15693PhyVCDCode1Of4+0x40>
                *outbuf = ISO15693_DAT_10_1_4;
 80042f0:	2220      	movs	r2, #32
 80042f2:	704a      	strb	r2, [r1, #1]
                break;
 80042f4:	e7ba      	b.n	800426c <iso15693PhyVCDCode1Of4+0x40>
 80042f6:	bf00      	nop

080042f8 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 80042f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t a;
    uint8_t* outbuf = outbuffer;

    *outBufLen = 0;

    if (maxOutBufLen < 64U) {
 80042fa:	2a3f      	cmp	r2, #63	; 0x3f
    *outBufLen = 0;
 80042fc:	f04f 0600 	mov.w	r6, #0
 8004300:	801e      	strh	r6, [r3, #0]
    if (maxOutBufLen < 64U) {
 8004302:	d91e      	bls.n	8004342 <iso15693PhyVCDCode1Of256+0x4a>
 8004304:	f101 0c40 	add.w	ip, r1, #64	; 0x40
                break;
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
                break;
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 8004308:	2780      	movs	r7, #128	; 0x80
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 800430a:	2520      	movs	r5, #32
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 800430c:	2408      	movs	r4, #8
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800430e:	f04f 0e02 	mov.w	lr, #2
        switch (tmp)
 8004312:	2803      	cmp	r0, #3
 8004314:	d817      	bhi.n	8004346 <iso15693PhyVCDCode1Of256+0x4e>
 8004316:	e8df f000 	tbb	[pc, r0]
 800431a:	0f11      	.short	0x0f11
 800431c:	020d      	.short	0x020d
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 800431e:	700f      	strb	r7, [r1, #0]
            default:
                *outbuf = 0;
                break;               
        }
        outbuf++;
        (*outBufLen)++;
 8004320:	881a      	ldrh	r2, [r3, #0]
        outbuf++;
 8004322:	3101      	adds	r1, #1
        tmp -= 4U;
 8004324:	3804      	subs	r0, #4
        (*outBufLen)++;
 8004326:	3201      	adds	r2, #1
    for (a = 0; a < 64U; a++)
 8004328:	4561      	cmp	r1, ip
        (*outBufLen)++;
 800432a:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 800432c:	b2c0      	uxtb	r0, r0
    for (a = 0; a < 64U; a++)
 800432e:	d1f0      	bne.n	8004312 <iso15693PhyVCDCode1Of256+0x1a>
 8004330:	2000      	movs	r0, #0
    }

    return err;
}
 8004332:	bdf0      	pop	{r4, r5, r6, r7, pc}
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 8004334:	700d      	strb	r5, [r1, #0]
                break;
 8004336:	e7f3      	b.n	8004320 <iso15693PhyVCDCode1Of256+0x28>
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 8004338:	700c      	strb	r4, [r1, #0]
                break;
 800433a:	e7f1      	b.n	8004320 <iso15693PhyVCDCode1Of256+0x28>
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800433c:	f881 e000 	strb.w	lr, [r1]
                break;
 8004340:	e7ee      	b.n	8004320 <iso15693PhyVCDCode1Of256+0x28>
        return ERR_NOMEM;
 8004342:	2001      	movs	r0, #1
}
 8004344:	bdf0      	pop	{r4, r5, r6, r7, pc}
                *outbuf = 0;
 8004346:	700e      	strb	r6, [r1, #0]
                break;               
 8004348:	e7ea      	b.n	8004320 <iso15693PhyVCDCode1Of256+0x28>
 800434a:	bf00      	nop

0800434c <iso15693PhyConfigure>:
{
 800434c:	4603      	mov	r3, r0
 800434e:	468c      	mov	ip, r1
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 8004350:	6800      	ldr	r0, [r0, #0]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	4a07      	ldr	r2, [pc, #28]	; (8004374 <iso15693PhyConfigure+0x28>)
 8004356:	c203      	stmia	r2!, {r0, r1}
    if ( config->speedMode <= 3U)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4a07      	ldr	r2, [pc, #28]	; (8004378 <iso15693PhyConfigure+0x2c>)
 800435c:	2b03      	cmp	r3, #3
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800435e:	bf9a      	itte	ls
 8004360:	f1c3 0303 	rsbls	r3, r3, #3
 8004364:	b2db      	uxtbls	r3, r3
        stream_config.report_period_length = 3;
 8004366:	2303      	movhi	r3, #3
 8004368:	70d3      	strb	r3, [r2, #3]
}
 800436a:	2000      	movs	r0, #0
    *needed_stream_config = &stream_config;
 800436c:	f8cc 2000 	str.w	r2, [ip]
}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000568 	.word	0x20000568
 8004378:	2000006c 	.word	0x2000006c

0800437c <iso15693VCDCode>:
{
 800437c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004380:	ed2d 8b02 	vpush	{d8}
 8004384:	b085      	sub	sp, #20
    crc_len = (uint8_t)((sendCrc)?2:0);
 8004386:	2a00      	cmp	r2, #0
{
 8004388:	9e15      	ldr	r6, [sp, #84]	; 0x54
    crc_len = (uint8_t)((sendCrc)?2:0);
 800438a:	9200      	str	r2, [sp, #0]
{
 800438c:	460f      	mov	r7, r1
    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800438e:	4a94      	ldr	r2, [pc, #592]	; (80045e0 <iso15693VCDCode+0x264>)
{
 8004390:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 8004394:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004396:	f8bd 4050 	ldrh.w	r4, [sp, #80]	; 0x50
    *actOutBufSize = 0;
 800439a:	f04f 0100 	mov.w	r1, #0
 800439e:	8031      	strh	r1, [r6, #0]
    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 80043a0:	7811      	ldrb	r1, [r2, #0]
    crc_len = (uint8_t)((sendCrc)?2:0);
 80043a2:	bf14      	ite	ne
 80043a4:	2202      	movne	r2, #2
 80043a6:	2200      	moveq	r2, #0
{
 80043a8:	4683      	mov	fp, r0
                  + ((length + (uint16_t)crc_len) * 4U)
 80043aa:	443a      	add	r2, r7
{
 80043ac:	e9dd 0811 	ldrd	r0, r8, [sp, #68]	; 0x44
    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 80043b0:	2900      	cmp	r1, #0
 80043b2:	d15c      	bne.n	800446e <iso15693VCDCode+0xf2>
                  + 1U) /* EOF */
 80043b4:	0092      	lsls	r2, r2, #2
 80043b6:	3202      	adds	r2, #2
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 80043b8:	2c04      	cmp	r4, #4
        *subbit_total_length = (
 80043ba:	8002      	strh	r2, [r0, #0]
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 80043bc:	d95f      	bls.n	800447e <iso15693VCDCode+0x102>
    if (length == 0U)
 80043be:	2f00      	cmp	r7, #0
 80043c0:	f040 80b1 	bne.w	8004526 <iso15693VCDCode+0x1aa>
        txFunc = iso15693PhyVCDCode1Of4;
 80043c4:	f8df a21c 	ldr.w	sl, [pc, #540]	; 80045e4 <iso15693VCDCode+0x268>
        *subbit_total_length = 1;
 80043c8:	2301      	movs	r3, #1
 80043ca:	8003      	strh	r3, [r0, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 80043cc:	f8b8 1000 	ldrh.w	r1, [r8]
 80043d0:	9b00      	ldr	r3, [sp, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80af 	beq.w	8004536 <iso15693VCDCode+0x1ba>
 80043d8:	f1b9 0f00 	cmp.w	r9, #0
 80043dc:	f040 80b3 	bne.w	8004546 <iso15693VCDCode+0x1ca>
 80043e0:	1cbb      	adds	r3, r7, #2
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 80043e2:	463a      	mov	r2, r7
 80043e4:	e9cd b300 	strd	fp, r3, [sp]
 80043e8:	469b      	mov	fp, r3
 80043ea:	464f      	mov	r7, r9
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 80043ec:	4559      	cmp	r1, fp
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 80043ee:	4691      	mov	r9, r2
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 80043f0:	464a      	mov	r2, r9
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 80043f2:	d22e      	bcs.n	8004452 <iso15693VCDCode+0xd6>
        if (0U==crc)
 80043f4:	b947      	cbnz	r7, 8004408 <iso15693VCDCode+0x8c>
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 80043f6:	9900      	ldr	r1, [sp, #0]
 80043f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80043fc:	f7ff ff00 	bl	8004200 <rfalCrcCalculateCcitt>
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 8004400:	f8b8 1000 	ldrh.w	r1, [r8]
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8004404:	43c0      	mvns	r0, r0
 8004406:	b287      	uxth	r7, r0
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 8004408:	eba1 0109 	sub.w	r1, r1, r9
 800440c:	f101 0310 	add.w	r3, r1, #16
 8004410:	eb0d 0103 	add.w	r1, sp, r3
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 8004414:	0a3b      	lsrs	r3, r7, #8
 8004416:	f88d 300d 	strb.w	r3, [sp, #13]
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800441a:	f88d 700c 	strb.w	r7, [sp, #12]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800441e:	4622      	mov	r2, r4
 8004420:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8004424:	f10d 030e 	add.w	r3, sp, #14
 8004428:	4629      	mov	r1, r5
 800442a:	47d0      	blx	sl
        (*actOutBufSize) += filled_size;
 800442c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8004430:	8832      	ldrh	r2, [r6, #0]
        outputBufSize -= filled_size;
 8004432:	1ae4      	subs	r4, r4, r3
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 8004434:	441d      	add	r5, r3
        (*actOutBufSize) += filled_size;
 8004436:	4413      	add	r3, r2
        outputBufSize -= filled_size;
 8004438:	b2a4      	uxth	r4, r4
        (*actOutBufSize) += filled_size;
 800443a:	8033      	strh	r3, [r6, #0]
        if (err == ERR_NONE) {
 800443c:	2800      	cmp	r0, #0
 800443e:	d17c      	bne.n	800453a <iso15693VCDCode+0x1be>
            (*offset)++;
 8004440:	f8b8 1000 	ldrh.w	r1, [r8]
 8004444:	3101      	adds	r1, #1
 8004446:	b289      	uxth	r1, r1
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 8004448:	4559      	cmp	r1, fp
            (*offset)++;
 800444a:	f8a8 1000 	strh.w	r1, [r8]
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800444e:	464a      	mov	r2, r9
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 8004450:	d3d0      	bcc.n	80043f4 <iso15693VCDCode+0x78>
            || (sendCrc && (*offset == (length + 2U))))
 8004452:	9b01      	ldr	r3, [sp, #4]
 8004454:	4299      	cmp	r1, r3
 8004456:	d170      	bne.n	800453a <iso15693VCDCode+0x1be>
        *outputBuf = eof; 
 8004458:	2304      	movs	r3, #4
 800445a:	702b      	strb	r3, [r5, #0]
        (*actOutBufSize)++;
 800445c:	8833      	ldrh	r3, [r6, #0]
    return err;
 800445e:	2000      	movs	r0, #0
        (*actOutBufSize)++;
 8004460:	3301      	adds	r3, #1
 8004462:	8033      	strh	r3, [r6, #0]
}
 8004464:	b005      	add	sp, #20
 8004466:	ecbd 8b02 	vpop	{d8}
 800446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  + 1U) /* EOF */
 800446e:	0192      	lsls	r2, r2, #6
 8004470:	3202      	adds	r2, #2
        *subbit_total_length = (
 8004472:	8002      	strh	r2, [r0, #0]
        if (*offset != 0U)
 8004474:	f8b8 1000 	ldrh.w	r1, [r8]
 8004478:	b139      	cbz	r1, 800448a <iso15693VCDCode+0x10e>
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800447a:	2c3f      	cmp	r4, #63	; 0x3f
 800447c:	d828      	bhi.n	80044d0 <iso15693VCDCode+0x154>
            return ERR_NOMEM;
 800447e:	2001      	movs	r0, #1
}
 8004480:	b005      	add	sp, #20
 8004482:	ecbd 8b02 	vpop	{d8}
 8004486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800448a:	2c40      	cmp	r4, #64	; 0x40
 800448c:	d9f7      	bls.n	800447e <iso15693VCDCode+0x102>
    if (length == 0U)
 800448e:	2f00      	cmp	r7, #0
 8004490:	f000 80a2 	beq.w	80045d8 <iso15693VCDCode+0x25c>
        txFunc = iso15693PhyVCDCode1Of256;
 8004494:	f8df a150 	ldr.w	sl, [pc, #336]	; 80045e8 <iso15693VCDCode+0x26c>
        sof = ISO15693_DAT_SOF_1_256;
 8004498:	2281      	movs	r2, #129	; 0x81
    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800449a:	b16b      	cbz	r3, 80044b8 <iso15693VCDCode+0x13c>
 800449c:	f1b9 0f00 	cmp.w	r9, #0
 80044a0:	d10a      	bne.n	80044b8 <iso15693VCDCode+0x13c>
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 80044a2:	f89b 3000 	ldrb.w	r3, [fp]
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	f043 0302 	orr.w	r3, r3, #2
 80044ae:	f88b 3000 	strb.w	r3, [fp]
    if ((length != 0U) && (0U == *offset))
 80044b2:	f8b8 1000 	ldrh.w	r1, [r8]
 80044b6:	b981      	cbnz	r1, 80044da <iso15693VCDCode+0x15e>
        *outputBuf = sof; 
 80044b8:	f805 2b01 	strb.w	r2, [r5], #1
        (*actOutBufSize)++;
 80044bc:	8833      	ldrh	r3, [r6, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	8033      	strh	r3, [r6, #0]
    while ((*offset < length) && (err == ERR_NONE))
 80044c2:	f8b8 1000 	ldrh.w	r1, [r8]
        outputBufSize--;
 80044c6:	3c01      	subs	r4, #1
    while ((*offset < length) && (err == ERR_NONE))
 80044c8:	428f      	cmp	r7, r1
        outputBufSize--;
 80044ca:	b2a4      	uxth	r4, r4
    while ((*offset < length) && (err == ERR_NONE))
 80044cc:	d808      	bhi.n	80044e0 <iso15693VCDCode+0x164>
 80044ce:	e77f      	b.n	80043d0 <iso15693VCDCode+0x54>
    if (length == 0U)
 80044d0:	2f00      	cmp	r7, #0
 80044d2:	f000 8081 	beq.w	80045d8 <iso15693VCDCode+0x25c>
        txFunc = iso15693PhyVCDCode1Of256;
 80044d6:	f8df a110 	ldr.w	sl, [pc, #272]	; 80045e8 <iso15693VCDCode+0x26c>
    while ((*offset < length) && (err == ERR_NONE))
 80044da:	428f      	cmp	r7, r1
 80044dc:	f67f af78 	bls.w	80043d0 <iso15693VCDCode+0x54>
 80044e0:	9513      	str	r5, [sp, #76]	; 0x4c
 80044e2:	4655      	mov	r5, sl
 80044e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80044e8:	460b      	mov	r3, r1
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 80044ea:	4622      	mov	r2, r4
 80044ec:	f81b 0003 	ldrb.w	r0, [fp, r3]
 80044f0:	4651      	mov	r1, sl
 80044f2:	f10d 030e 	add.w	r3, sp, #14
 80044f6:	47a8      	blx	r5
        (*actOutBufSize) += filled_size;
 80044f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80044fc:	8832      	ldrh	r2, [r6, #0]
        outputBufSize -= filled_size;
 80044fe:	1ae4      	subs	r4, r4, r3
        (*actOutBufSize) += filled_size;
 8004500:	441a      	add	r2, r3
 8004502:	8032      	strh	r2, [r6, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 8004504:	449a      	add	sl, r3
        outputBufSize -= filled_size;
 8004506:	b2a4      	uxth	r4, r4
        if (err == ERR_NONE) {
 8004508:	b9b8      	cbnz	r0, 800453a <iso15693VCDCode+0x1be>
            (*offset)++;
 800450a:	f8b8 3000 	ldrh.w	r3, [r8]
 800450e:	3301      	adds	r3, #1
 8004510:	b29b      	uxth	r3, r3
    while ((*offset < length) && (err == ERR_NONE))
 8004512:	42bb      	cmp	r3, r7
            (*offset)++;
 8004514:	f8a8 3000 	strh.w	r3, [r8]
    while ((*offset < length) && (err == ERR_NONE))
 8004518:	d3e7      	bcc.n	80044ea <iso15693VCDCode+0x16e>
 800451a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 800451e:	4619      	mov	r1, r3
 8004520:	46aa      	mov	sl, r5
 8004522:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004524:	e754      	b.n	80043d0 <iso15693VCDCode+0x54>
    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 8004526:	f8b8 1000 	ldrh.w	r1, [r8]
        txFunc = iso15693PhyVCDCode1Of4;
 800452a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80045e4 <iso15693VCDCode+0x268>
    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800452e:	2900      	cmp	r1, #0
 8004530:	d1d3      	bne.n	80044da <iso15693VCDCode+0x15e>
        sof = ISO15693_DAT_SOF_1_4;
 8004532:	2221      	movs	r2, #33	; 0x21
 8004534:	e7b1      	b.n	800449a <iso15693VCDCode+0x11e>
    if ((!sendCrc && (*offset == length))
 8004536:	42b9      	cmp	r1, r7
 8004538:	d08e      	beq.n	8004458 <iso15693VCDCode+0xdc>
        return ERR_AGAIN;
 800453a:	200d      	movs	r0, #13
}
 800453c:	b005      	add	sp, #20
 800453e:	ecbd 8b02 	vpop	{d8}
 8004542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8004546:	f10b 0301 	add.w	r3, fp, #1
 800454a:	ee08 3a10 	vmov	s16, r3
 800454e:	1cbb      	adds	r3, r7, #2
 8004550:	f107 3bff 	add.w	fp, r7, #4294967295
 8004554:	e9cd a300 	strd	sl, r3, [sp]
 8004558:	469a      	mov	sl, r3
 800455a:	463a      	mov	r2, r7
    uint16_t crc = 0;
 800455c:	f04f 0900 	mov.w	r9, #0
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8004560:	fa1f fb8b 	uxth.w	fp, fp
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 8004564:	4551      	cmp	r1, sl
 8004566:	464f      	mov	r7, r9
 8004568:	9513      	str	r5, [sp, #76]	; 0x4c
 800456a:	4691      	mov	r9, r2
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800456c:	465a      	mov	r2, fp
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800456e:	d231      	bcs.n	80045d4 <iso15693VCDCode+0x258>
        if (0U==crc)
 8004570:	b947      	cbnz	r7, 8004584 <iso15693VCDCode+0x208>
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8004572:	ee18 1a10 	vmov	r1, s16
 8004576:	f24e 0012 	movw	r0, #57362	; 0xe012
 800457a:	f7ff fe41 	bl	8004200 <rfalCrcCalculateCcitt>
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800457e:	f8b8 1000 	ldrh.w	r1, [r8]
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8004582:	4607      	mov	r7, r0
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 8004584:	eba1 0109 	sub.w	r1, r1, r9
 8004588:	f101 0310 	add.w	r3, r1, #16
 800458c:	eb0d 0103 	add.w	r1, sp, r3
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 8004590:	0a3b      	lsrs	r3, r7, #8
 8004592:	f88d 300d 	strb.w	r3, [sp, #13]
        transbuf[0] = (uint8_t)(crc & 0xffU);
 8004596:	f88d 700c 	strb.w	r7, [sp, #12]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800459a:	4622      	mov	r2, r4
 800459c:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 80045a0:	9d00      	ldr	r5, [sp, #0]
 80045a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80045a4:	f10d 030e 	add.w	r3, sp, #14
 80045a8:	47a8      	blx	r5
        (*actOutBufSize) += filled_size;
 80045aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 80045ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80045b0:	441a      	add	r2, r3
 80045b2:	9213      	str	r2, [sp, #76]	; 0x4c
        (*actOutBufSize) += filled_size;
 80045b4:	8832      	ldrh	r2, [r6, #0]
        outputBufSize -= filled_size;
 80045b6:	1ae4      	subs	r4, r4, r3
        (*actOutBufSize) += filled_size;
 80045b8:	4413      	add	r3, r2
        outputBufSize -= filled_size;
 80045ba:	b2a4      	uxth	r4, r4
        (*actOutBufSize) += filled_size;
 80045bc:	8033      	strh	r3, [r6, #0]
        if (err == ERR_NONE) {
 80045be:	2800      	cmp	r0, #0
 80045c0:	d1bb      	bne.n	800453a <iso15693VCDCode+0x1be>
            (*offset)++;
 80045c2:	f8b8 1000 	ldrh.w	r1, [r8]
 80045c6:	3101      	adds	r1, #1
 80045c8:	b289      	uxth	r1, r1
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 80045ca:	4551      	cmp	r1, sl
            (*offset)++;
 80045cc:	f8a8 1000 	strh.w	r1, [r8]
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 80045d0:	465a      	mov	r2, fp
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 80045d2:	d3cd      	bcc.n	8004570 <iso15693VCDCode+0x1f4>
 80045d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80045d6:	e73c      	b.n	8004452 <iso15693VCDCode+0xd6>
        txFunc = iso15693PhyVCDCode1Of256;
 80045d8:	f8df a00c 	ldr.w	sl, [pc, #12]	; 80045e8 <iso15693VCDCode+0x26c>
 80045dc:	e6f4      	b.n	80043c8 <iso15693VCDCode+0x4c>
 80045de:	bf00      	nop
 80045e0:	20000568 	.word	0x20000568
 80045e4:	0800422d 	.word	0x0800422d
 80045e8:	080042f9 	.word	0x080042f9

080045ec <iso15693VICCDecode>:
{
 80045ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f0:	4698      	mov	r8, r3
    *bitsBeforeCol = 0;
 80045f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
{
 80045f4:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 80045f8:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
    *bitsBeforeCol = 0;
 80045fc:	f04f 0900 	mov.w	r9, #0
 8004600:	f8a3 9000 	strh.w	r9, [r3]
    *outBufPos = 0;
 8004604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004606:	f8a3 9000 	strh.w	r9, [r3]
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800460a:	7803      	ldrb	r3, [r0, #0]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2b17      	cmp	r3, #23
 8004612:	f040 80b9 	bne.w	8004788 <iso15693VICCDecode+0x19c>
    if (outBufLen == 0U)
 8004616:	f1b8 0f00 	cmp.w	r8, #0
 800461a:	d102      	bne.n	8004622 <iso15693VICCDecode+0x36>
        return ERR_NONE;
 800461c:	2000      	movs	r0, #0
}
 800461e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ST_MEMSET(outBuf,0,outBufLen);
 8004622:	4615      	mov	r5, r2
 8004624:	468a      	mov	sl, r1
 8004626:	4604      	mov	r4, r0
 8004628:	4642      	mov	r2, r8
 800462a:	4649      	mov	r1, r9
 800462c:	4628      	mov	r0, r5
 800462e:	f007 f9ff 	bl	800ba30 <memset>
    if (inBufLen == 0U)
 8004632:	f1ba 0f00 	cmp.w	sl, #0
 8004636:	d078      	beq.n	800472a <iso15693VICCDecode+0x13e>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 8004638:	ea4f 00ca 	mov.w	r0, sl, lsl #3
    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800463c:	f04f 0c05 	mov.w	ip, #5
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 8004640:	3802      	subs	r0, #2
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 8004642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
    bp = 0;
 8004646:	4649      	mov	r1, r9
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 8004648:	4663      	mov	r3, ip
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800464a:	f04f 0b01 	mov.w	fp, #1
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800464e:	3301      	adds	r3, #1
 8004650:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 8004654:	ea4f 09dc 	mov.w	r9, ip, lsr #3
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 8004658:	f814 800e 	ldrb.w	r8, [r4, lr]
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800465c:	f814 e009 	ldrb.w	lr, [r4, r9]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	fa48 f303 	asr.w	r3, r8, r3
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	f003 0802 	and.w	r8, r3, #2
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800466e:	f00c 0307 	and.w	r3, ip, #7
 8004672:	fa4e f303 	asr.w	r3, lr, r3
 8004676:	f003 0301 	and.w	r3, r3, #1
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800467a:	ea43 0308 	orr.w	r3, r3, r8
        if (1U == man)
 800467e:	2b01      	cmp	r3, #1
 8004680:	d056      	beq.n	8004730 <iso15693VICCDecode+0x144>
        if (2U == man)
 8004682:	2b02      	cmp	r3, #2
 8004684:	d170      	bne.n	8004768 <iso15693VICCDecode+0x17c>
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 8004686:	ea4f 08d1 	mov.w	r8, r1, lsr #3
 800468a:	f001 0e07 	and.w	lr, r1, #7
 800468e:	f815 a008 	ldrb.w	sl, [r5, r8]
            bp++;
 8004692:	3101      	adds	r1, #1
 8004694:	b289      	uxth	r1, r1
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 8004696:	fa0b fe0e 	lsl.w	lr, fp, lr
 800469a:	ea4e 0e0a 	orr.w	lr, lr, sl
        if ((bp%8U) == 0U)
 800469e:	f011 0f07 	tst.w	r1, #7
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 80046a2:	f805 e008 	strb.w	lr, [r5, r8]
        if ((bp%8U) == 0U)
 80046a6:	f001 0807 	and.w	r8, r1, #7
 80046aa:	d148      	bne.n	800473e <iso15693VICCDecode+0x152>
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 80046ac:	f814 e009 	ldrb.w	lr, [r4, r9]
 80046b0:	f00e 0ee0 	and.w	lr, lr, #224	; 0xe0
 80046b4:	f1be 0fa0 	cmp.w	lr, #160	; 0xa0
 80046b8:	d00b      	beq.n	80046d2 <iso15693VICCDecode+0xe6>
        if ( ((0U == man) || (3U == man)) && !isEOF )
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d15b      	bne.n	8004776 <iso15693VICCDecode+0x18a>
            if (bp >= ignoreBits)
 80046be:	428e      	cmp	r6, r1
 80046c0:	d85d      	bhi.n	800477e <iso15693VICCDecode+0x192>
    *outBufPos = (bp / 8U);
 80046c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046c4:	08cb      	lsrs	r3, r1, #3
 80046c6:	8013      	strh	r3, [r2, #0]
    *bitsBeforeCol = bp;
 80046c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                err = ERR_RF_COLLISION;
 80046ca:	201d      	movs	r0, #29
    *bitsBeforeCol = bp;
 80046cc:	8019      	strh	r1, [r3, #0]
}
 80046ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 80046d2:	f109 0901 	add.w	r9, r9, #1
 80046d6:	f814 e009 	ldrb.w	lr, [r4, r9]
 80046da:	f1be 0f03 	cmp.w	lr, #3
 80046de:	d1ec      	bne.n	80046ba <iso15693VICCDecode+0xce>
        if ( ((0U == man) || (3U == man)) && !isEOF )
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d038      	beq.n	8004756 <iso15693VICCDecode+0x16a>
    *outBufPos = (bp / 8U);
 80046e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046e6:	08cb      	lsrs	r3, r1, #3
 80046e8:	8013      	strh	r3, [r2, #0]
    *bitsBeforeCol = bp;
 80046ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046ec:	8019      	strh	r1, [r3, #0]
    if ((bp%8U) != 0U)
 80046ee:	4613      	mov	r3, r2
    if (*outBufPos > 2U)
 80046f0:	881a      	ldrh	r2, [r3, #0]
 80046f2:	2a02      	cmp	r2, #2
 80046f4:	d919      	bls.n	800472a <iso15693VICCDecode+0x13e>
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 80046f6:	2f00      	cmp	r7, #0
 80046f8:	d149      	bne.n	800478e <iso15693VICCDecode+0x1a2>
 80046fa:	3a02      	subs	r2, #2
 80046fc:	b292      	uxth	r2, r2
 80046fe:	4629      	mov	r1, r5
 8004700:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004704:	f7ff fd7c 	bl	8004200 <rfalCrcCalculateCcitt>
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8004708:	43c0      	mvns	r0, r0
 800470a:	b280      	uxth	r0, r0
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800470c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	441d      	add	r5, r3
 8004712:	b2c2      	uxtb	r2, r0
 8004714:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004718:	4291      	cmp	r1, r2
 800471a:	d106      	bne.n	800472a <iso15693VICCDecode+0x13e>
 800471c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004720:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8004724:	4283      	cmp	r3, r0
 8004726:	f43f af79 	beq.w	800461c <iso15693VICCDecode+0x30>
            err = ERR_CRC;
 800472a:	2015      	movs	r0, #21
}
 800472c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bp++;
 8004730:	3101      	adds	r1, #1
 8004732:	b289      	uxth	r1, r1
        if ((bp%8U) == 0U)
 8004734:	f011 0f07 	tst.w	r1, #7
 8004738:	f001 0807 	and.w	r8, r1, #7
 800473c:	d0b6      	beq.n	80046ac <iso15693VICCDecode+0xc0>
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800473e:	428a      	cmp	r2, r1
 8004740:	d909      	bls.n	8004756 <iso15693VICCDecode+0x16a>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 8004742:	f10c 0c02 	add.w	ip, ip, #2
 8004746:	fa1f fc8c 	uxth.w	ip, ip
 800474a:	4584      	cmp	ip, r0
 800474c:	4663      	mov	r3, ip
 800474e:	f4ff af7e 	bcc.w	800464e <iso15693VICCDecode+0x62>
 8004752:	f001 0807 	and.w	r8, r1, #7
    *outBufPos = (bp / 8U);
 8004756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004758:	08cb      	lsrs	r3, r1, #3
 800475a:	8013      	strh	r3, [r2, #0]
    *bitsBeforeCol = bp;
 800475c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800475e:	8019      	strh	r1, [r3, #0]
    if ((bp%8U) != 0U)
 8004760:	f1b8 0f00 	cmp.w	r8, #0
 8004764:	d1e1      	bne.n	800472a <iso15693VICCDecode+0x13e>
 8004766:	e7c2      	b.n	80046ee <iso15693VICCDecode+0x102>
        if ((bp%8U) == 0U)
 8004768:	f011 0f07 	tst.w	r1, #7
 800476c:	f001 0807 	and.w	r8, r1, #7
 8004770:	d09e      	beq.n	80046b0 <iso15693VICCDecode+0xc4>
        if ( ((0U == man) || (3U == man)) && !isEOF )
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0a3      	beq.n	80046be <iso15693VICCDecode+0xd2>
 8004776:	2b03      	cmp	r3, #3
 8004778:	d1e1      	bne.n	800473e <iso15693VICCDecode+0x152>
            if (bp >= ignoreBits)
 800477a:	428e      	cmp	r6, r1
 800477c:	d9a1      	bls.n	80046c2 <iso15693VICCDecode+0xd6>
                bp++;
 800477e:	3101      	adds	r1, #1
 8004780:	b289      	uxth	r1, r1
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 8004782:	428a      	cmp	r2, r1
 8004784:	d8dd      	bhi.n	8004742 <iso15693VICCDecode+0x156>
 8004786:	e7e4      	b.n	8004752 <iso15693VICCDecode+0x166>
		return ERR_FRAMING;
 8004788:	2009      	movs	r0, #9
}
 800478a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800478e:	3a02      	subs	r2, #2
 8004790:	b292      	uxth	r2, r2
 8004792:	4629      	mov	r1, r5
 8004794:	f24e 0012 	movw	r0, #57362	; 0xe012
 8004798:	f7ff fd32 	bl	8004200 <rfalCrcCalculateCcitt>
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800479c:	e7b6      	b.n	800470c <iso15693VICCDecode+0x120>
 800479e:	bf00      	nop

080047a0 <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 80047a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    
    do
    {
        bitrateFound = true;
        
        (*dsi) = RFAL_BR_106;
 80047a4:	2400      	movs	r4, #0
        (*dri) = RFAL_BR_106;
        
        /* Digital 1.0  5.6.2.5 & 11.6.2.14: A received RFU value of b4 = 1b MUST be interpreted as if b7 to b1 ? 0000000b (only 106 kbits/s in both direction) */
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 80047a6:	f011 0a08 	ands.w	sl, r1, #8
        (*dsi) = RFAL_BR_106;
 80047aa:	7014      	strb	r4, [r2, #0]
        (*dri) = RFAL_BR_106;
 80047ac:	701c      	strb	r4, [r3, #0]
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 80047ae:	d141      	bne.n	8004834 <rfalIsoDepCalcBitRate+0x94>
 80047b0:	2803      	cmp	r0, #3
 80047b2:	d83f      	bhi.n	8004834 <rfalIsoDepCalcBitRate+0x94>
 80047b4:	f011 0c40 	ands.w	ip, r1, #64	; 0x40
 80047b8:	f001 0420 	and.w	r4, r1, #32
 80047bc:	f001 0510 	and.w	r5, r1, #16
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80047c0:	f001 0907 	and.w	r9, r1, #7
 80047c4:	f3c1 0680 	ubfx	r6, r1, #2, #1
 80047c8:	f001 0701 	and.w	r7, r1, #1
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 80047cc:	fa4f fe81 	sxtb.w	lr, r1
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80047d0:	f001 0870 	and.w	r8, r1, #112	; 0x70
 80047d4:	d130      	bne.n	8004838 <rfalIsoDepCalcBitRate+0x98>
 80047d6:	f1be 0f00 	cmp.w	lr, #0
 80047da:	f280 8145 	bge.w	8004a68 <rfalIsoDepCalcBitRate+0x2c8>
 80047de:	f001 0102 	and.w	r1, r1, #2
 80047e2:	2f00      	cmp	r7, #0
 80047e4:	d15d      	bne.n	80048a2 <rfalIsoDepCalcBitRate+0x102>
 80047e6:	2e00      	cmp	r6, #0
 80047e8:	f040 8203 	bne.w	8004bf2 <rfalIsoDepCalcBitRate+0x452>
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80047ec:	f04f 0e02 	mov.w	lr, #2
        {   
            (*dsi) = MIN((*dsi), (*dri));
            (*dri) = (*dsi);
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 80047f0:	f04f 0c10 	mov.w	ip, #16
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80047f4:	b114      	cbz	r4, 80047fc <rfalIsoDepCalcBitRate+0x5c>
 80047f6:	2801      	cmp	r0, #1
 80047f8:	f200 80e0 	bhi.w	80049bc <rfalIsoDepCalcBitRate+0x21c>
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	f000 80df 	beq.w	80049c0 <rfalIsoDepCalcBitRate+0x220>
 8004802:	2800      	cmp	r0, #0
 8004804:	f040 8245 	bne.w	8004c92 <rfalIsoDepCalcBitRate+0x4f2>
            (*dsi) = MIN((*dsi), (*dri));
 8004808:	781f      	ldrb	r7, [r3, #0]
 800480a:	7810      	ldrb	r0, [r2, #0]
 800480c:	42b8      	cmp	r0, r7
 800480e:	bf28      	it	cs
 8004810:	4638      	movcs	r0, r7
 8004812:	7010      	strb	r0, [r2, #0]
            (*dri) = (*dsi);
 8004814:	7018      	strb	r0, [r3, #0]
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8004816:	b168      	cbz	r0, 8004834 <rfalIsoDepCalcBitRate+0x94>
 8004818:	1e47      	subs	r7, r0, #1
 800481a:	fa0c fa07 	lsl.w	sl, ip, r7
 800481e:	ea1a 0f08 	tst.w	sl, r8
 8004822:	d003      	beq.n	800482c <rfalIsoDepCalcBitRate+0x8c>
 8004824:	fa29 f707 	lsr.w	r7, r9, r7
 8004828:	07ff      	lsls	r7, r7, #31
 800482a:	d403      	bmi.n	8004834 <rfalIsoDepCalcBitRate+0x94>
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 800482c:	2803      	cmp	r0, #3
        (*dsi) = RFAL_BR_106;
 800482e:	7016      	strb	r6, [r2, #0]
        (*dri) = RFAL_BR_106;
 8004830:	701e      	strb	r6, [r3, #0]
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8004832:	d9df      	bls.n	80047f4 <rfalIsoDepCalcBitRate+0x54>
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
            }
        }
    } while (!(bitrateFound));
    
}
 8004834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004838:	f1be 0f00 	cmp.w	lr, #0
 800483c:	f280 80e2 	bge.w	8004a04 <rfalIsoDepCalcBitRate+0x264>
 8004840:	f001 0102 	and.w	r1, r1, #2
 8004844:	2f00      	cmp	r7, #0
 8004846:	f040 8082 	bne.w	800494e <rfalIsoDepCalcBitRate+0x1ae>
 800484a:	2e00      	cmp	r6, #0
 800484c:	f040 81a4 	bne.w	8004b98 <rfalIsoDepCalcBitRate+0x3f8>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004850:	f04f 0e02 	mov.w	lr, #2
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8004854:	f04f 0c10 	mov.w	ip, #16
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004858:	2803      	cmp	r0, #3
 800485a:	f000 80a4 	beq.w	80049a6 <rfalIsoDepCalcBitRate+0x206>
 800485e:	b114      	cbz	r4, 8004866 <rfalIsoDepCalcBitRate+0xc6>
 8004860:	2802      	cmp	r0, #2
 8004862:	f000 80a0 	beq.w	80049a6 <rfalIsoDepCalcBitRate+0x206>
 8004866:	2d00      	cmp	r5, #0
 8004868:	f000 809f 	beq.w	80049aa <rfalIsoDepCalcBitRate+0x20a>
 800486c:	2800      	cmp	r0, #0
 800486e:	f040 8215 	bne.w	8004c9c <rfalIsoDepCalcBitRate+0x4fc>
            (*dsi) = MIN((*dsi), (*dri));
 8004872:	781f      	ldrb	r7, [r3, #0]
 8004874:	7810      	ldrb	r0, [r2, #0]
 8004876:	42b8      	cmp	r0, r7
 8004878:	bf28      	it	cs
 800487a:	4638      	movcs	r0, r7
 800487c:	7010      	strb	r0, [r2, #0]
            (*dri) = (*dsi);
 800487e:	7018      	strb	r0, [r3, #0]
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8004880:	2800      	cmp	r0, #0
 8004882:	d0d7      	beq.n	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004884:	1e47      	subs	r7, r0, #1
 8004886:	fa0c fa07 	lsl.w	sl, ip, r7
 800488a:	ea1a 0f08 	tst.w	sl, r8
 800488e:	d003      	beq.n	8004898 <rfalIsoDepCalcBitRate+0xf8>
 8004890:	fa29 f707 	lsr.w	r7, r9, r7
 8004894:	07ff      	lsls	r7, r7, #31
 8004896:	d4cd      	bmi.n	8004834 <rfalIsoDepCalcBitRate+0x94>
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8004898:	2803      	cmp	r0, #3
        (*dsi) = RFAL_BR_106;
 800489a:	7016      	strb	r6, [r2, #0]
        (*dri) = RFAL_BR_106;
 800489c:	701e      	strb	r6, [r3, #0]
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 800489e:	d9db      	bls.n	8004858 <rfalIsoDepCalcBitRate+0xb8>
 80048a0:	e7c8      	b.n	8004834 <rfalIsoDepCalcBitRate+0x94>
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 80048a2:	f04f 0e10 	mov.w	lr, #16
 80048a6:	2e00      	cmp	r6, #0
 80048a8:	d141      	bne.n	800492e <rfalIsoDepCalcBitRate+0x18e>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80048aa:	b114      	cbz	r4, 80048b2 <rfalIsoDepCalcBitRate+0x112>
 80048ac:	2801      	cmp	r0, #1
 80048ae:	f200 8090 	bhi.w	80049d2 <rfalIsoDepCalcBitRate+0x232>
 80048b2:	2d00      	cmp	r5, #0
 80048b4:	f000 8091 	beq.w	80049da <rfalIsoDepCalcBitRate+0x23a>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	f040 81e8 	bne.w	8004c8e <rfalIsoDepCalcBitRate+0x4ee>
            (*dsi) = MIN((*dsi), (*dri));
 80048be:	f893 c000 	ldrb.w	ip, [r3]
 80048c2:	7810      	ldrb	r0, [r2, #0]
 80048c4:	4560      	cmp	r0, ip
 80048c6:	bf28      	it	cs
 80048c8:	4660      	movcs	r0, ip
 80048ca:	7010      	strb	r0, [r2, #0]
            (*dri) = (*dsi);
 80048cc:	7018      	strb	r0, [r3, #0]
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d0b0      	beq.n	8004834 <rfalIsoDepCalcBitRate+0x94>
 80048d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80048d6:	fa0e fa0c 	lsl.w	sl, lr, ip
 80048da:	ea1a 0f08 	tst.w	sl, r8
 80048de:	d004      	beq.n	80048ea <rfalIsoDepCalcBitRate+0x14a>
 80048e0:	fa29 fc0c 	lsr.w	ip, r9, ip
 80048e4:	f01c 0f01 	tst.w	ip, #1
 80048e8:	d1a4      	bne.n	8004834 <rfalIsoDepCalcBitRate+0x94>
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 80048ea:	2803      	cmp	r0, #3
        (*dsi) = RFAL_BR_106;
 80048ec:	7016      	strb	r6, [r2, #0]
        (*dri) = RFAL_BR_106;
 80048ee:	701e      	strb	r6, [r3, #0]
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 80048f0:	d9db      	bls.n	80048aa <rfalIsoDepCalcBitRate+0x10a>
 80048f2:	e79f      	b.n	8004834 <rfalIsoDepCalcBitRate+0x94>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80048f4:	b30d      	cbz	r5, 800493a <rfalIsoDepCalcBitRate+0x19a>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f040 81dc 	bne.w	8004cb4 <rfalIsoDepCalcBitRate+0x514>
            (*dsi) = MIN((*dsi), (*dri));
 80048fc:	7816      	ldrb	r6, [r2, #0]
 80048fe:	7818      	ldrb	r0, [r3, #0]
 8004900:	42b0      	cmp	r0, r6
 8004902:	bf28      	it	cs
 8004904:	4630      	movcs	r0, r6
 8004906:	7010      	strb	r0, [r2, #0]
            (*dri) = (*dsi);
 8004908:	7018      	strb	r0, [r3, #0]
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 800490a:	2800      	cmp	r0, #0
 800490c:	d092      	beq.n	8004834 <rfalIsoDepCalcBitRate+0x94>
 800490e:	1e46      	subs	r6, r0, #1
 8004910:	fa0e fa06 	lsl.w	sl, lr, r6
 8004914:	ea1a 0f08 	tst.w	sl, r8
 8004918:	d003      	beq.n	8004922 <rfalIsoDepCalcBitRate+0x182>
 800491a:	fa29 f606 	lsr.w	r6, r9, r6
 800491e:	07f6      	lsls	r6, r6, #31
 8004920:	d488      	bmi.n	8004834 <rfalIsoDepCalcBitRate+0x94>
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8004922:	2803      	cmp	r0, #3
        (*dsi) = RFAL_BR_106;
 8004924:	f882 c000 	strb.w	ip, [r2]
        (*dri) = RFAL_BR_106;
 8004928:	f883 c000 	strb.w	ip, [r3]
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 800492c:	d882      	bhi.n	8004834 <rfalIsoDepCalcBitRate+0x94>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800492e:	2c00      	cmp	r4, #0
 8004930:	d0e0      	beq.n	80048f4 <rfalIsoDepCalcBitRate+0x154>
 8004932:	2801      	cmp	r0, #1
 8004934:	d9de      	bls.n	80048f4 <rfalIsoDepCalcBitRate+0x154>
 8004936:	2602      	movs	r6, #2
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004938:	7016      	strb	r6, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800493a:	2803      	cmp	r0, #3
 800493c:	d005      	beq.n	800494a <rfalIsoDepCalcBitRate+0x1aa>
 800493e:	b109      	cbz	r1, 8004944 <rfalIsoDepCalcBitRate+0x1a4>
 8004940:	2802      	cmp	r0, #2
 8004942:	d002      	beq.n	800494a <rfalIsoDepCalcBitRate+0x1aa>
 8004944:	2800      	cmp	r0, #0
 8004946:	d0d9      	beq.n	80048fc <rfalIsoDepCalcBitRate+0x15c>
 8004948:	4638      	mov	r0, r7
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 800494a:	7018      	strb	r0, [r3, #0]
                break;
 800494c:	e7d6      	b.n	80048fc <rfalIsoDepCalcBitRate+0x15c>
 800494e:	2e00      	cmp	r6, #0
 8004950:	f000 80ef 	beq.w	8004b32 <rfalIsoDepCalcBitRate+0x392>
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8004954:	f04f 0c10 	mov.w	ip, #16
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004958:	2803      	cmp	r0, #3
 800495a:	f000 8195 	beq.w	8004c88 <rfalIsoDepCalcBitRate+0x4e8>
 800495e:	b10c      	cbz	r4, 8004964 <rfalIsoDepCalcBitRate+0x1c4>
 8004960:	2802      	cmp	r0, #2
 8004962:	d044      	beq.n	80049ee <rfalIsoDepCalcBitRate+0x24e>
 8004964:	2d00      	cmp	r5, #0
 8004966:	d044      	beq.n	80049f2 <rfalIsoDepCalcBitRate+0x252>
 8004968:	2800      	cmp	r0, #0
 800496a:	f040 81a0 	bne.w	8004cae <rfalIsoDepCalcBitRate+0x50e>
            (*dsi) = MIN((*dsi), (*dri));
 800496e:	781e      	ldrb	r6, [r3, #0]
 8004970:	7810      	ldrb	r0, [r2, #0]
 8004972:	42b0      	cmp	r0, r6
 8004974:	bf28      	it	cs
 8004976:	4630      	movcs	r0, r6
 8004978:	7010      	strb	r0, [r2, #0]
            (*dri) = (*dsi);
 800497a:	7018      	strb	r0, [r3, #0]
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 800497c:	2800      	cmp	r0, #0
 800497e:	f43f af59 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004982:	1e46      	subs	r6, r0, #1
 8004984:	fa0c fe06 	lsl.w	lr, ip, r6
 8004988:	ea1e 0f08 	tst.w	lr, r8
 800498c:	d004      	beq.n	8004998 <rfalIsoDepCalcBitRate+0x1f8>
 800498e:	fa29 f606 	lsr.w	r6, r9, r6
 8004992:	07f6      	lsls	r6, r6, #31
 8004994:	f53f af4e 	bmi.w	8004834 <rfalIsoDepCalcBitRate+0x94>
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8004998:	2803      	cmp	r0, #3
        (*dsi) = RFAL_BR_106;
 800499a:	f882 a000 	strb.w	sl, [r2]
        (*dri) = RFAL_BR_106;
 800499e:	f883 a000 	strb.w	sl, [r3]
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 80049a2:	d9d9      	bls.n	8004958 <rfalIsoDepCalcBitRate+0x1b8>
 80049a4:	e746      	b.n	8004834 <rfalIsoDepCalcBitRate+0x94>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80049a6:	4607      	mov	r7, r0
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80049a8:	7017      	strb	r7, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80049aa:	2900      	cmp	r1, #0
 80049ac:	f43f af61 	beq.w	8004872 <rfalIsoDepCalcBitRate+0xd2>
 80049b0:	2801      	cmp	r0, #1
 80049b2:	f67f af5e 	bls.w	8004872 <rfalIsoDepCalcBitRate+0xd2>
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80049b6:	f883 e000 	strb.w	lr, [r3]
                break;
 80049ba:	e75a      	b.n	8004872 <rfalIsoDepCalcBitRate+0xd2>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80049bc:	2702      	movs	r7, #2
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80049be:	7017      	strb	r7, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80049c0:	2900      	cmp	r1, #0
 80049c2:	f43f af21 	beq.w	8004808 <rfalIsoDepCalcBitRate+0x68>
 80049c6:	2801      	cmp	r0, #1
 80049c8:	f67f af1e 	bls.w	8004808 <rfalIsoDepCalcBitRate+0x68>
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80049cc:	f883 e000 	strb.w	lr, [r3]
                break;
 80049d0:	e71a      	b.n	8004808 <rfalIsoDepCalcBitRate+0x68>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80049d2:	f04f 0c02 	mov.w	ip, #2
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80049d6:	f882 c000 	strb.w	ip, [r2]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80049da:	b111      	cbz	r1, 80049e2 <rfalIsoDepCalcBitRate+0x242>
 80049dc:	2801      	cmp	r0, #1
 80049de:	f200 8137 	bhi.w	8004c50 <rfalIsoDepCalcBitRate+0x4b0>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	f43f af6b 	beq.w	80048be <rfalIsoDepCalcBitRate+0x11e>
 80049e8:	4638      	mov	r0, r7
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80049ea:	7018      	strb	r0, [r3, #0]
                break;
 80049ec:	e767      	b.n	80048be <rfalIsoDepCalcBitRate+0x11e>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80049ee:	4606      	mov	r6, r0
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80049f0:	7016      	strb	r6, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80049f2:	b111      	cbz	r1, 80049fa <rfalIsoDepCalcBitRate+0x25a>
 80049f4:	2801      	cmp	r0, #1
 80049f6:	f200 8128 	bhi.w	8004c4a <rfalIsoDepCalcBitRate+0x4aa>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d0b7      	beq.n	800496e <rfalIsoDepCalcBitRate+0x1ce>
 80049fe:	4638      	mov	r0, r7
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004a00:	7018      	strb	r0, [r3, #0]
                break;
 8004a02:	e7b4      	b.n	800496e <rfalIsoDepCalcBitRate+0x1ce>
 8004a04:	2f00      	cmp	r7, #0
 8004a06:	d17c      	bne.n	8004b02 <rfalIsoDepCalcBitRate+0x362>
 8004a08:	b9ae      	cbnz	r6, 8004a36 <rfalIsoDepCalcBitRate+0x296>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004a0a:	2803      	cmp	r0, #3
 8004a0c:	f000 812d 	beq.w	8004c6a <rfalIsoDepCalcBitRate+0x4ca>
 8004a10:	b114      	cbz	r4, 8004a18 <rfalIsoDepCalcBitRate+0x278>
 8004a12:	2802      	cmp	r0, #2
 8004a14:	f000 8129 	beq.w	8004c6a <rfalIsoDepCalcBitRate+0x4ca>
 8004a18:	b125      	cbz	r5, 8004a24 <rfalIsoDepCalcBitRate+0x284>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	f43f af0a 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004a20:	2401      	movs	r4, #1
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004a22:	7014      	strb	r4, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004a24:	078d      	lsls	r5, r1, #30
 8004a26:	f57f af05 	bpl.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004a2a:	2801      	cmp	r0, #1
 8004a2c:	f67f af02 	bls.w	8004834 <rfalIsoDepCalcBitRate+0x94>
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004a30:	2202      	movs	r2, #2
 8004a32:	701a      	strb	r2, [r3, #0]
                break;
 8004a34:	e6fe      	b.n	8004834 <rfalIsoDepCalcBitRate+0x94>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004a36:	2803      	cmp	r0, #3
 8004a38:	d008      	beq.n	8004a4c <rfalIsoDepCalcBitRate+0x2ac>
 8004a3a:	b10c      	cbz	r4, 8004a40 <rfalIsoDepCalcBitRate+0x2a0>
 8004a3c:	2802      	cmp	r0, #2
 8004a3e:	d005      	beq.n	8004a4c <rfalIsoDepCalcBitRate+0x2ac>
 8004a40:	b145      	cbz	r5, 8004a54 <rfalIsoDepCalcBitRate+0x2b4>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	f43f aef6 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004a48:	2401      	movs	r4, #1
 8004a4a:	e000      	b.n	8004a4e <rfalIsoDepCalcBitRate+0x2ae>
 8004a4c:	4604      	mov	r4, r0
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004a4e:	2803      	cmp	r0, #3
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004a50:	7014      	strb	r4, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004a52:	d006      	beq.n	8004a62 <rfalIsoDepCalcBitRate+0x2c2>
 8004a54:	078e      	lsls	r6, r1, #30
 8004a56:	f57f aeed 	bpl.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004a5a:	2801      	cmp	r0, #1
 8004a5c:	f67f aeea 	bls.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004a60:	2002      	movs	r0, #2
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004a62:	7018      	strb	r0, [r3, #0]
}
 8004a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a68:	b9d7      	cbnz	r7, 8004aa0 <rfalIsoDepCalcBitRate+0x300>
 8004a6a:	b936      	cbnz	r6, 8004a7a <rfalIsoDepCalcBitRate+0x2da>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004a6c:	2c00      	cmp	r4, #0
 8004a6e:	d0d3      	beq.n	8004a18 <rfalIsoDepCalcBitRate+0x278>
 8004a70:	2801      	cmp	r0, #1
 8004a72:	d9d1      	bls.n	8004a18 <rfalIsoDepCalcBitRate+0x278>
 8004a74:	2402      	movs	r4, #2
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004a76:	7014      	strb	r4, [r2, #0]
                break;
 8004a78:	e7d4      	b.n	8004a24 <rfalIsoDepCalcBitRate+0x284>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004a7a:	b114      	cbz	r4, 8004a82 <rfalIsoDepCalcBitRate+0x2e2>
 8004a7c:	2801      	cmp	r0, #1
 8004a7e:	f200 80fd 	bhi.w	8004c7c <rfalIsoDepCalcBitRate+0x4dc>
 8004a82:	b125      	cbz	r5, 8004a8e <rfalIsoDepCalcBitRate+0x2ee>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	f43f aed5 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004a8a:	2401      	movs	r4, #1
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004a8c:	7014      	strb	r4, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004a8e:	2803      	cmp	r0, #3
 8004a90:	d0e7      	beq.n	8004a62 <rfalIsoDepCalcBitRate+0x2c2>
 8004a92:	078c      	lsls	r4, r1, #30
 8004a94:	f57f aece 	bpl.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004a98:	2802      	cmp	r0, #2
 8004a9a:	f47f aecb 	bne.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004a9e:	e7e0      	b.n	8004a62 <rfalIsoDepCalcBitRate+0x2c2>
 8004aa0:	b986      	cbnz	r6, 8004ac4 <rfalIsoDepCalcBitRate+0x324>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004aa2:	b114      	cbz	r4, 8004aaa <rfalIsoDepCalcBitRate+0x30a>
 8004aa4:	2801      	cmp	r0, #1
 8004aa6:	f200 80e3 	bhi.w	8004c70 <rfalIsoDepCalcBitRate+0x4d0>
 8004aaa:	b125      	cbz	r5, 8004ab6 <rfalIsoDepCalcBitRate+0x316>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	f43f aec1 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004ab2:	463c      	mov	r4, r7
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004ab4:	7014      	strb	r4, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004ab6:	0789      	lsls	r1, r1, #30
 8004ab8:	d418      	bmi.n	8004aec <rfalIsoDepCalcBitRate+0x34c>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	f43f aeba 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004ac0:	701f      	strb	r7, [r3, #0]
                break;
 8004ac2:	e6b7      	b.n	8004834 <rfalIsoDepCalcBitRate+0x94>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004ac4:	b114      	cbz	r4, 8004acc <rfalIsoDepCalcBitRate+0x32c>
 8004ac6:	2801      	cmp	r0, #1
 8004ac8:	f200 80d5 	bhi.w	8004c76 <rfalIsoDepCalcBitRate+0x4d6>
 8004acc:	b125      	cbz	r5, 8004ad8 <rfalIsoDepCalcBitRate+0x338>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	f43f aeb0 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004ad4:	463c      	mov	r4, r7
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004ad6:	7014      	strb	r4, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004ad8:	2803      	cmp	r0, #3
 8004ada:	d0c2      	beq.n	8004a62 <rfalIsoDepCalcBitRate+0x2c2>
 8004adc:	078a      	lsls	r2, r1, #30
 8004ade:	d40a      	bmi.n	8004af6 <rfalIsoDepCalcBitRate+0x356>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	f43f aea7 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004ae6:	4638      	mov	r0, r7
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004ae8:	7018      	strb	r0, [r3, #0]
                break;
 8004aea:	e7bb      	b.n	8004a64 <rfalIsoDepCalcBitRate+0x2c4>
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004aec:	2801      	cmp	r0, #1
 8004aee:	d9e4      	bls.n	8004aba <rfalIsoDepCalcBitRate+0x31a>
 8004af0:	2702      	movs	r7, #2
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004af2:	701f      	strb	r7, [r3, #0]
                break;
 8004af4:	e69e      	b.n	8004834 <rfalIsoDepCalcBitRate+0x94>
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004af6:	2801      	cmp	r0, #1
 8004af8:	d8b2      	bhi.n	8004a60 <rfalIsoDepCalcBitRate+0x2c0>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	f43f ae9a 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004b00:	e7f1      	b.n	8004ae6 <rfalIsoDepCalcBitRate+0x346>
 8004b02:	b946      	cbnz	r6, 8004b16 <rfalIsoDepCalcBitRate+0x376>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004b04:	2803      	cmp	r0, #3
 8004b06:	d003      	beq.n	8004b10 <rfalIsoDepCalcBitRate+0x370>
 8004b08:	2c00      	cmp	r4, #0
 8004b0a:	d0ce      	beq.n	8004aaa <rfalIsoDepCalcBitRate+0x30a>
 8004b0c:	2802      	cmp	r0, #2
 8004b0e:	d1cc      	bne.n	8004aaa <rfalIsoDepCalcBitRate+0x30a>
 8004b10:	4604      	mov	r4, r0
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004b12:	7014      	strb	r4, [r2, #0]
                break;
 8004b14:	e7cf      	b.n	8004ab6 <rfalIsoDepCalcBitRate+0x316>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004b16:	2803      	cmp	r0, #3
 8004b18:	f000 80a0 	beq.w	8004c5c <rfalIsoDepCalcBitRate+0x4bc>
 8004b1c:	b114      	cbz	r4, 8004b24 <rfalIsoDepCalcBitRate+0x384>
 8004b1e:	2802      	cmp	r0, #2
 8004b20:	f000 809c 	beq.w	8004c5c <rfalIsoDepCalcBitRate+0x4bc>
 8004b24:	2d00      	cmp	r5, #0
 8004b26:	d0d9      	beq.n	8004adc <rfalIsoDepCalcBitRate+0x33c>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	f43f ae83 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004b2e:	463c      	mov	r4, r7
 8004b30:	e095      	b.n	8004c5e <rfalIsoDepCalcBitRate+0x4be>
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8004b32:	f04f 0e10 	mov.w	lr, #16
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004b36:	2803      	cmp	r0, #3
 8004b38:	d023      	beq.n	8004b82 <rfalIsoDepCalcBitRate+0x3e2>
 8004b3a:	b10c      	cbz	r4, 8004b40 <rfalIsoDepCalcBitRate+0x3a0>
 8004b3c:	2802      	cmp	r0, #2
 8004b3e:	d020      	beq.n	8004b82 <rfalIsoDepCalcBitRate+0x3e2>
 8004b40:	b315      	cbz	r5, 8004b88 <rfalIsoDepCalcBitRate+0x3e8>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	f040 80a8 	bne.w	8004c98 <rfalIsoDepCalcBitRate+0x4f8>
            (*dsi) = MIN((*dsi), (*dri));
 8004b48:	f893 c000 	ldrb.w	ip, [r3]
 8004b4c:	7810      	ldrb	r0, [r2, #0]
 8004b4e:	4560      	cmp	r0, ip
 8004b50:	bf28      	it	cs
 8004b52:	4660      	movcs	r0, ip
 8004b54:	7010      	strb	r0, [r2, #0]
            (*dri) = (*dsi);
 8004b56:	7018      	strb	r0, [r3, #0]
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	f43f ae6b 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004b5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8004b62:	fa0e fa0c 	lsl.w	sl, lr, ip
 8004b66:	ea1a 0f08 	tst.w	sl, r8
 8004b6a:	d005      	beq.n	8004b78 <rfalIsoDepCalcBitRate+0x3d8>
 8004b6c:	fa29 fc0c 	lsr.w	ip, r9, ip
 8004b70:	f01c 0f01 	tst.w	ip, #1
 8004b74:	f47f ae5e 	bne.w	8004834 <rfalIsoDepCalcBitRate+0x94>
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8004b78:	2803      	cmp	r0, #3
        (*dsi) = RFAL_BR_106;
 8004b7a:	7016      	strb	r6, [r2, #0]
        (*dri) = RFAL_BR_106;
 8004b7c:	701e      	strb	r6, [r3, #0]
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8004b7e:	d9da      	bls.n	8004b36 <rfalIsoDepCalcBitRate+0x396>
 8004b80:	e658      	b.n	8004834 <rfalIsoDepCalcBitRate+0x94>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004b82:	4684      	mov	ip, r0
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004b84:	f882 c000 	strb.w	ip, [r2]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004b88:	b109      	cbz	r1, 8004b8e <rfalIsoDepCalcBitRate+0x3ee>
 8004b8a:	2801      	cmp	r0, #1
 8004b8c:	d863      	bhi.n	8004c56 <rfalIsoDepCalcBitRate+0x4b6>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d0da      	beq.n	8004b48 <rfalIsoDepCalcBitRate+0x3a8>
 8004b92:	4638      	mov	r0, r7
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004b94:	7018      	strb	r0, [r3, #0]
                break;
 8004b96:	e7d7      	b.n	8004b48 <rfalIsoDepCalcBitRate+0x3a8>
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8004b98:	f04f 0c10 	mov.w	ip, #16
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004b9c:	2803      	cmp	r0, #3
 8004b9e:	d070      	beq.n	8004c82 <rfalIsoDepCalcBitRate+0x4e2>
 8004ba0:	b10c      	cbz	r4, 8004ba6 <rfalIsoDepCalcBitRate+0x406>
 8004ba2:	2802      	cmp	r0, #2
 8004ba4:	d01c      	beq.n	8004be0 <rfalIsoDepCalcBitRate+0x440>
 8004ba6:	b1ed      	cbz	r5, 8004be4 <rfalIsoDepCalcBitRate+0x444>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d17d      	bne.n	8004ca8 <rfalIsoDepCalcBitRate+0x508>
            (*dsi) = MIN((*dsi), (*dri));
 8004bac:	781e      	ldrb	r6, [r3, #0]
 8004bae:	7810      	ldrb	r0, [r2, #0]
 8004bb0:	42b0      	cmp	r0, r6
 8004bb2:	bf28      	it	cs
 8004bb4:	4630      	movcs	r0, r6
 8004bb6:	7010      	strb	r0, [r2, #0]
            (*dri) = (*dsi);
 8004bb8:	7018      	strb	r0, [r3, #0]
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	f43f ae3a 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004bc0:	1e46      	subs	r6, r0, #1
 8004bc2:	fa0c fe06 	lsl.w	lr, ip, r6
 8004bc6:	ea1e 0f08 	tst.w	lr, r8
 8004bca:	d004      	beq.n	8004bd6 <rfalIsoDepCalcBitRate+0x436>
 8004bcc:	fa29 f606 	lsr.w	r6, r9, r6
 8004bd0:	07f6      	lsls	r6, r6, #31
 8004bd2:	f53f ae2f 	bmi.w	8004834 <rfalIsoDepCalcBitRate+0x94>
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8004bd6:	2803      	cmp	r0, #3
        (*dsi) = RFAL_BR_106;
 8004bd8:	7017      	strb	r7, [r2, #0]
        (*dri) = RFAL_BR_106;
 8004bda:	701f      	strb	r7, [r3, #0]
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8004bdc:	d9de      	bls.n	8004b9c <rfalIsoDepCalcBitRate+0x3fc>
 8004bde:	e629      	b.n	8004834 <rfalIsoDepCalcBitRate+0x94>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004be0:	4606      	mov	r6, r0
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004be2:	7016      	strb	r6, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004be4:	2900      	cmp	r1, #0
 8004be6:	d0e1      	beq.n	8004bac <rfalIsoDepCalcBitRate+0x40c>
 8004be8:	2801      	cmp	r0, #1
 8004bea:	d9df      	bls.n	8004bac <rfalIsoDepCalcBitRate+0x40c>
 8004bec:	2002      	movs	r0, #2
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004bee:	7018      	strb	r0, [r3, #0]
                break;
 8004bf0:	e7dc      	b.n	8004bac <rfalIsoDepCalcBitRate+0x40c>
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8004bf2:	f04f 0c10 	mov.w	ip, #16
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004bf6:	b10c      	cbz	r4, 8004bfc <rfalIsoDepCalcBitRate+0x45c>
 8004bf8:	2801      	cmp	r0, #1
 8004bfa:	d81c      	bhi.n	8004c36 <rfalIsoDepCalcBitRate+0x496>
 8004bfc:	b1ed      	cbz	r5, 8004c3a <rfalIsoDepCalcBitRate+0x49a>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d14f      	bne.n	8004ca2 <rfalIsoDepCalcBitRate+0x502>
            (*dsi) = MIN((*dsi), (*dri));
 8004c02:	781e      	ldrb	r6, [r3, #0]
 8004c04:	7810      	ldrb	r0, [r2, #0]
 8004c06:	42b0      	cmp	r0, r6
 8004c08:	bf28      	it	cs
 8004c0a:	4630      	movcs	r0, r6
 8004c0c:	7010      	strb	r0, [r2, #0]
            (*dri) = (*dsi);
 8004c0e:	7018      	strb	r0, [r3, #0]
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8004c10:	2800      	cmp	r0, #0
 8004c12:	f43f ae0f 	beq.w	8004834 <rfalIsoDepCalcBitRate+0x94>
 8004c16:	1e46      	subs	r6, r0, #1
 8004c18:	fa0c fe06 	lsl.w	lr, ip, r6
 8004c1c:	ea1e 0f08 	tst.w	lr, r8
 8004c20:	d004      	beq.n	8004c2c <rfalIsoDepCalcBitRate+0x48c>
 8004c22:	fa29 f606 	lsr.w	r6, r9, r6
 8004c26:	07f6      	lsls	r6, r6, #31
 8004c28:	f53f ae04 	bmi.w	8004834 <rfalIsoDepCalcBitRate+0x94>
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8004c2c:	2803      	cmp	r0, #3
        (*dsi) = RFAL_BR_106;
 8004c2e:	7017      	strb	r7, [r2, #0]
        (*dri) = RFAL_BR_106;
 8004c30:	701f      	strb	r7, [r3, #0]
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8004c32:	d9e0      	bls.n	8004bf6 <rfalIsoDepCalcBitRate+0x456>
 8004c34:	e5fe      	b.n	8004834 <rfalIsoDepCalcBitRate+0x94>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c36:	2602      	movs	r6, #2
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c38:	7016      	strb	r6, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c3a:	2803      	cmp	r0, #3
 8004c3c:	d003      	beq.n	8004c46 <rfalIsoDepCalcBitRate+0x4a6>
 8004c3e:	2900      	cmp	r1, #0
 8004c40:	d0df      	beq.n	8004c02 <rfalIsoDepCalcBitRate+0x462>
 8004c42:	2802      	cmp	r0, #2
 8004c44:	d1dd      	bne.n	8004c02 <rfalIsoDepCalcBitRate+0x462>
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c46:	7018      	strb	r0, [r3, #0]
                break;
 8004c48:	e7db      	b.n	8004c02 <rfalIsoDepCalcBitRate+0x462>
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c4a:	2002      	movs	r0, #2
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c4c:	7018      	strb	r0, [r3, #0]
                break;
 8004c4e:	e68e      	b.n	800496e <rfalIsoDepCalcBitRate+0x1ce>
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c50:	2002      	movs	r0, #2
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c52:	7018      	strb	r0, [r3, #0]
                break;
 8004c54:	e633      	b.n	80048be <rfalIsoDepCalcBitRate+0x11e>
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c56:	2002      	movs	r0, #2
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c58:	7018      	strb	r0, [r3, #0]
                break;
 8004c5a:	e775      	b.n	8004b48 <rfalIsoDepCalcBitRate+0x3a8>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c5c:	4604      	mov	r4, r0
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c5e:	2803      	cmp	r0, #3
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c60:	7014      	strb	r4, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c62:	f47f af3b 	bne.w	8004adc <rfalIsoDepCalcBitRate+0x33c>
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c66:	7018      	strb	r0, [r3, #0]
                break;
 8004c68:	e6fc      	b.n	8004a64 <rfalIsoDepCalcBitRate+0x2c4>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c6a:	4604      	mov	r4, r0
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c6c:	7014      	strb	r4, [r2, #0]
                break;
 8004c6e:	e6d9      	b.n	8004a24 <rfalIsoDepCalcBitRate+0x284>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c70:	2402      	movs	r4, #2
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c72:	7014      	strb	r4, [r2, #0]
                break;
 8004c74:	e71f      	b.n	8004ab6 <rfalIsoDepCalcBitRate+0x316>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c76:	2402      	movs	r4, #2
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c78:	7014      	strb	r4, [r2, #0]
                break;
 8004c7a:	e72d      	b.n	8004ad8 <rfalIsoDepCalcBitRate+0x338>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c7c:	2402      	movs	r4, #2
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c7e:	7014      	strb	r4, [r2, #0]
                break;
 8004c80:	e705      	b.n	8004a8e <rfalIsoDepCalcBitRate+0x2ee>
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c82:	7010      	strb	r0, [r2, #0]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c84:	7018      	strb	r0, [r3, #0]
                break;
 8004c86:	e791      	b.n	8004bac <rfalIsoDepCalcBitRate+0x40c>
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c88:	7010      	strb	r0, [r2, #0]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c8a:	7018      	strb	r0, [r3, #0]
                break;
 8004c8c:	e66f      	b.n	800496e <rfalIsoDepCalcBitRate+0x1ce>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c8e:	46bc      	mov	ip, r7
 8004c90:	e6a1      	b.n	80049d6 <rfalIsoDepCalcBitRate+0x236>
 8004c92:	2701      	movs	r7, #1
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c94:	7017      	strb	r7, [r2, #0]
                break;
 8004c96:	e693      	b.n	80049c0 <rfalIsoDepCalcBitRate+0x220>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004c98:	46bc      	mov	ip, r7
 8004c9a:	e773      	b.n	8004b84 <rfalIsoDepCalcBitRate+0x3e4>
 8004c9c:	2701      	movs	r7, #1
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004c9e:	7017      	strb	r7, [r2, #0]
                break;
 8004ca0:	e683      	b.n	80049aa <rfalIsoDepCalcBitRate+0x20a>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004ca2:	2601      	movs	r6, #1
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004ca4:	7016      	strb	r6, [r2, #0]
                break;
 8004ca6:	e7c8      	b.n	8004c3a <rfalIsoDepCalcBitRate+0x49a>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004ca8:	2601      	movs	r6, #1
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004caa:	7016      	strb	r6, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004cac:	e79a      	b.n	8004be4 <rfalIsoDepCalcBitRate+0x444>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004cae:	463e      	mov	r6, r7
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004cb0:	7016      	strb	r6, [r2, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004cb2:	e69e      	b.n	80049f2 <rfalIsoDepCalcBitRate+0x252>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8004cb4:	463e      	mov	r6, r7
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8004cb6:	7016      	strb	r6, [r2, #0]
                break;
 8004cb8:	e63f      	b.n	800493a <rfalIsoDepCalcBitRate+0x19a>
 8004cba:	bf00      	nop

08004cbc <isoDepTx>:
{
 8004cbc:	b570      	push	{r4, r5, r6, lr}
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 8004cbe:	4c33      	ldr	r4, [pc, #204]	; (8004d8c <isoDepTx+0xd0>)
{
 8004cc0:	b084      	sub	sp, #16
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 8004cc2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
{
 8004cc6:	9d08      	ldr	r5, [sp, #32]
    if ( infLen > 0U )
 8004cc8:	b123      	cbz	r3, 8004cd4 <isoDepTx+0x18>
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 8004cca:	f894 c027 	ldrb.w	ip, [r4, #39]	; 0x27
 8004cce:	1a51      	subs	r1, r2, r1
 8004cd0:	4561      	cmp	r1, ip
 8004cd2:	d34c      	bcc.n	8004d6e <isoDepTx+0xb2>
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8004cd4:	78e1      	ldrb	r1, [r4, #3]
 8004cd6:	2900      	cmp	r1, #0
 8004cd8:	d035      	beq.n	8004d46 <isoDepTx+0x8a>
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8004cda:	f894 c004 	ldrb.w	ip, [r4, #4]
 8004cde:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8004ce2:	f040 0008 	orr.w	r0, r0, #8
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8004ce6:	d037      	beq.n	8004d58 <isoDepTx+0x9c>
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 8004ce8:	7ca1      	ldrb	r1, [r4, #18]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8004cea:	f040 0e04 	orr.w	lr, r0, #4
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 8004cee:	b119      	cbz	r1, 8004cf8 <isoDepTx+0x3c>
 8004cf0:	f000 01e2 	and.w	r1, r0, #226	; 0xe2
 8004cf4:	2902      	cmp	r1, #2
 8004cf6:	d03d      	beq.n	8004d74 <isoDepTx+0xb8>
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 8004cf8:	f802 cc01 	strb.w	ip, [r2, #-1]
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 8004cfc:	78e1      	ldrb	r1, [r4, #3]
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 8004cfe:	1e50      	subs	r0, r2, #1
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 8004d00:	b1e1      	cbz	r1, 8004d3c <isoDepTx+0x80>
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 8004d02:	f800 1c01 	strb.w	r1, [r0, #-1]
 8004d06:	3801      	subs	r0, #1
    *(--txBlock)      = computedPcb;               /* PCB always present */
 8004d08:	f800 ec01 	strb.w	lr, [r0, #-1]
 8004d0c:	3801      	subs	r0, #1
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 8004d0e:	1a12      	subs	r2, r2, r0
 8004d10:	1899      	adds	r1, r3, r2
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 8004d12:	8a23      	ldrh	r3, [r4, #16]
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 8004d14:	b289      	uxth	r1, r1
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 8004d16:	3b02      	subs	r3, #2
 8004d18:	4299      	cmp	r1, r3
 8004d1a:	d82e      	bhi.n	8004d7a <isoDepTx+0xbe>
    return rfalTransceiveBlockingTx( txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 8004d1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	7862      	ldrb	r2, [r4, #1]
 8004d22:	8be3      	ldrh	r3, [r4, #30]
 8004d24:	2a01      	cmp	r2, #1
 8004d26:	bf08      	it	eq
 8004d28:	f04f 35ff 	moveq.w	r5, #4294967295
 8004d2c:	69a2      	ldr	r2, [r4, #24]
 8004d2e:	9502      	str	r5, [sp, #8]
 8004d30:	2400      	movs	r4, #0
 8004d32:	9401      	str	r4, [sp, #4]
 8004d34:	f005 fe56 	bl	800a9e4 <rfalTransceiveBlockingTx>
}
 8004d38:	b004      	add	sp, #16
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 8004d3c:	f894 6038 	ldrb.w	r6, [r4, #56]	; 0x38
 8004d40:	2e00      	cmp	r6, #0
 8004d42:	d0e1      	beq.n	8004d08 <isoDepTx+0x4c>
 8004d44:	e7dd      	b.n	8004d02 <isoDepTx+0x46>
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8004d46:	f894 6038 	ldrb.w	r6, [r4, #56]	; 0x38
 8004d4a:	2e00      	cmp	r6, #0
 8004d4c:	d1c5      	bne.n	8004cda <isoDepTx+0x1e>
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8004d4e:	f894 c004 	ldrb.w	ip, [r4, #4]
 8004d52:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8004d56:	d1c7      	bne.n	8004ce8 <isoDepTx+0x2c>
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 8004d58:	7ca6      	ldrb	r6, [r4, #18]
 8004d5a:	b11e      	cbz	r6, 8004d64 <isoDepTx+0xa8>
 8004d5c:	f000 06e2 	and.w	r6, r0, #226	; 0xe2
 8004d60:	2e02      	cmp	r6, #2
 8004d62:	d00d      	beq.n	8004d80 <isoDepTx+0xc4>
 8004d64:	4686      	mov	lr, r0
 8004d66:	4610      	mov	r0, r2
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 8004d68:	2900      	cmp	r1, #0
 8004d6a:	d1ca      	bne.n	8004d02 <isoDepTx+0x46>
 8004d6c:	e7e6      	b.n	8004d3c <isoDepTx+0x80>
            return ERR_NOMEM;
 8004d6e:	2001      	movs	r0, #1
}
 8004d70:	b004      	add	sp, #16
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 8004d74:	f040 0e14 	orr.w	lr, r0, #20
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 8004d78:	e7be      	b.n	8004cf8 <isoDepTx+0x3c>
        return ERR_NOTSUPP;
 8004d7a:	2018      	movs	r0, #24
}
 8004d7c:	b004      	add	sp, #16
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 8004d80:	f040 0e10 	orr.w	lr, r0, #16
 8004d84:	4610      	mov	r0, r2
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 8004d86:	2900      	cmp	r1, #0
 8004d88:	d1bb      	bne.n	8004d02 <isoDepTx+0x46>
 8004d8a:	e7d7      	b.n	8004d3c <isoDepTx+0x80>
 8004d8c:	20000570 	.word	0x20000570

08004d90 <isoDepHandleControlMsg>:
{
 8004d90:	b570      	push	{r4, r5, r6, lr}
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 8004d92:	4a54      	ldr	r2, [pc, #336]	; (8004ee4 <isoDepHandleControlMsg+0x154>)
 8004d94:	e9d2 3502 	ldrd	r3, r5, [r2, #8]
{
 8004d98:	b086      	sub	sp, #24
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 8004d9a:	2400      	movs	r4, #0
    switch( controlMsg )
 8004d9c:	2802      	cmp	r0, #2
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 8004d9e:	9405      	str	r4, [sp, #20]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 8004da0:	eb03 0405 	add.w	r4, r3, r5
    switch( controlMsg )
 8004da4:	d038      	beq.n	8004e18 <isoDepHandleControlMsg+0x88>
 8004da6:	2803      	cmp	r0, #3
 8004da8:	d027      	beq.n	8004dfa <isoDepHandleControlMsg+0x6a>
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 8004daa:	7993      	ldrb	r3, [r2, #6]
 8004dac:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    switch( controlMsg )
 8004db0:	2801      	cmp	r0, #1
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 8004db2:	f103 0001 	add.w	r0, r3, #1
 8004db6:	7190      	strb	r0, [r2, #6]
    switch( controlMsg )
 8004db8:	d008      	beq.n	8004dcc <isoDepHandleControlMsg+0x3c>
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 8004dba:	4299      	cmp	r1, r3
 8004dbc:	f0c0 8081 	bcc.w	8004ec2 <isoDepHandleControlMsg+0x132>
            pcb = isoDep_PCBRACK( gIsoDep.blockNumber );
 8004dc0:	7893      	ldrb	r3, [r2, #2]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	f043 03a2 	orr.w	r3, r3, #162	; 0xa2
            break;
 8004dca:	e007      	b.n	8004ddc <isoDepHandleControlMsg+0x4c>
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 8004dcc:	4299      	cmp	r1, r3
 8004dce:	f0c0 8087 	bcc.w	8004ee0 <isoDepHandleControlMsg+0x150>
            pcb = isoDep_PCBRNAK( gIsoDep.blockNumber );            
 8004dd2:	7893      	ldrb	r3, [r2, #2]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	f043 03b2 	orr.w	r3, r3, #178	; 0xb2
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8004ddc:	78d5      	ldrb	r5, [r2, #3]
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 8004dde:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    return isoDepTx( pcb, ctrlMsgBuf, &ctrlMsgBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 8004de2:	2100      	movs	r1, #0
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8004de4:	2d00      	cmp	r5, #0
 8004de6:	d03a      	beq.n	8004e5e <isoDepHandleControlMsg+0xce>
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8004de8:	7910      	ldrb	r0, [r2, #4]
 8004dea:	28ff      	cmp	r0, #255	; 0xff
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8004dec:	f043 0308 	orr.w	r3, r3, #8
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8004df0:	d13d      	bne.n	8004e6e <isoDepHandleControlMsg+0xde>
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 8004df2:	f10d 0c16 	add.w	ip, sp, #22
 8004df6:	4660      	mov	r0, ip
 8004df8:	e045      	b.n	8004e86 <isoDepHandleControlMsg+0xf6>
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 8004dfa:	79d3      	ldrb	r3, [r2, #7]
 8004dfc:	1c59      	adds	r1, r3, #1
 8004dfe:	71d1      	strb	r1, [r2, #7]
 8004e00:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
 8004e04:	4299      	cmp	r1, r3
 8004e06:	d35c      	bcc.n	8004ec2 <isoDepHandleControlMsg+0x132>
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 8004e08:	7853      	ldrb	r3, [r2, #1]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d166      	bne.n	8004edc <isoDepHandleControlMsg+0x14c>
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 8004e0e:	7010      	strb	r0, [r2, #0]
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 8004e10:	f44f 348c 	mov.w	r4, #71680	; 0x11800
            pcb = ISODEP_PCB_SDSL;
 8004e14:	23c2      	movs	r3, #194	; 0xc2
 8004e16:	e7e1      	b.n	8004ddc <isoDepHandleControlMsg+0x4c>
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 8004e18:	79d0      	ldrb	r0, [r2, #7]
 8004e1a:	f892 6041 	ldrb.w	r6, [r2, #65]	; 0x41
 8004e1e:	f100 0c01 	add.w	ip, r0, #1
 8004e22:	4286      	cmp	r6, r0
 8004e24:	f882 c007 	strb.w	ip, [r2, #7]
 8004e28:	d34b      	bcc.n	8004ec2 <isoDepHandleControlMsg+0x132>
            if( ! isoDep_isWTXMValid(param) )
 8004e2a:	1e48      	subs	r0, r1, #1
 8004e2c:	283a      	cmp	r0, #58	; 0x3a
 8004e2e:	d848      	bhi.n	8004ec2 <isoDepHandleControlMsg+0x132>
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 8004e30:	7850      	ldrb	r0, [r2, #1]
 8004e32:	b938      	cbnz	r0, 8004e44 <isoDepHandleControlMsg+0xb4>
                fwtTemp = (gIsoDep.fwt * param);
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
                fwtTemp += gIsoDep.dFwt;
 8004e38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e3c:	bf94      	ite	ls
 8004e3e:	18ec      	addls	r4, r5, r3
 8004e40:	f105 6480 	addhi.w	r4, r5, #67108864	; 0x4000000
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 8004e44:	f892 0027 	ldrb.w	r0, [r2, #39]	; 0x27
            ctrlMsgBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 8004e48:	f88d 1016 	strb.w	r1, [sp, #22]
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 8004e4c:	23f2      	movs	r3, #242	; 0xf2
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 8004e4e:	2802      	cmp	r0, #2
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 8004e50:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 8004e54:	d83b      	bhi.n	8004ece <isoDepHandleControlMsg+0x13e>
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8004e56:	78d5      	ldrb	r5, [r2, #3]
    return isoDepTx( pcb, ctrlMsgBuf, &ctrlMsgBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 8004e58:	2101      	movs	r1, #1
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8004e5a:	2d00      	cmp	r5, #0
 8004e5c:	d1c4      	bne.n	8004de8 <isoDepHandleControlMsg+0x58>
 8004e5e:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
 8004e62:	b108      	cbz	r0, 8004e68 <isoDepHandleControlMsg+0xd8>
 8004e64:	f043 0308 	orr.w	r3, r3, #8
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8004e68:	7910      	ldrb	r0, [r2, #4]
 8004e6a:	28ff      	cmp	r0, #255	; 0xff
 8004e6c:	d032      	beq.n	8004ed4 <isoDepHandleControlMsg+0x144>
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 8004e6e:	f88d 0015 	strb.w	r0, [sp, #21]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8004e72:	f043 0304 	orr.w	r3, r3, #4
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 8004e76:	f10d 0015 	add.w	r0, sp, #21
 8004e7a:	f10d 0c16 	add.w	ip, sp, #22
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 8004e7e:	b915      	cbnz	r5, 8004e86 <isoDepHandleControlMsg+0xf6>
 8004e80:	f892 6038 	ldrb.w	r6, [r2, #56]	; 0x38
 8004e84:	b116      	cbz	r6, 8004e8c <isoDepHandleControlMsg+0xfc>
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 8004e86:	f800 5c01 	strb.w	r5, [r0, #-1]
 8004e8a:	3801      	subs	r0, #1
    *(--txBlock)      = computedPcb;               /* PCB always present */
 8004e8c:	f800 3c01 	strb.w	r3, [r0, #-1]
 8004e90:	3801      	subs	r0, #1
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 8004e92:	8a13      	ldrh	r3, [r2, #16]
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 8004e94:	ebac 0c00 	sub.w	ip, ip, r0
 8004e98:	4461      	add	r1, ip
 8004e9a:	b289      	uxth	r1, r1
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 8004e9c:	3b02      	subs	r3, #2
 8004e9e:	4299      	cmp	r1, r3
 8004ea0:	d812      	bhi.n	8004ec8 <isoDepHandleControlMsg+0x138>
    return rfalTransceiveBlockingTx( txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 8004ea2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	7855      	ldrb	r5, [r2, #1]
 8004ea8:	8bd3      	ldrh	r3, [r2, #30]
 8004eaa:	6992      	ldr	r2, [r2, #24]
 8004eac:	2d01      	cmp	r5, #1
 8004eae:	bf08      	it	eq
 8004eb0:	f04f 34ff 	moveq.w	r4, #4294967295
 8004eb4:	9402      	str	r4, [sp, #8]
 8004eb6:	2400      	movs	r4, #0
 8004eb8:	9401      	str	r4, [sp, #4]
 8004eba:	f005 fd93 	bl	800a9e4 <rfalTransceiveBlockingTx>
}
 8004ebe:	b006      	add	sp, #24
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
                return ERR_PROTO;
 8004ec2:	200b      	movs	r0, #11
}
 8004ec4:	b006      	add	sp, #24
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
        return ERR_NOTSUPP;
 8004ec8:	2018      	movs	r0, #24
}
 8004eca:	b006      	add	sp, #24
 8004ecc:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_NOMEM;
 8004ece:	2001      	movs	r0, #1
}
 8004ed0:	b006      	add	sp, #24
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 8004ed4:	f10d 0c16 	add.w	ip, sp, #22
 8004ed8:	4660      	mov	r0, ip
 8004eda:	e7d1      	b.n	8004e80 <isoDepHandleControlMsg+0xf0>
            pcb = ISODEP_PCB_SDSL;
 8004edc:	23c2      	movs	r3, #194	; 0xc2
 8004ede:	e77d      	b.n	8004ddc <isoDepHandleControlMsg+0x4c>
                return ERR_TIMEOUT;
 8004ee0:	2004      	movs	r0, #4
 8004ee2:	e7ec      	b.n	8004ebe <isoDepHandleControlMsg+0x12e>
 8004ee4:	20000570 	.word	0x20000570

08004ee8 <isoDepDataExchangePCD.part.0>:
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
 8004ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    gIsoDep.SFGTTimer = 0;
 8004eec:	4d92      	ldr	r5, [pc, #584]	; (8005138 <isoDepDataExchangePCD.part.0+0x250>)
    switch( gIsoDep.state )
 8004eee:	782b      	ldrb	r3, [r5, #0]
    gIsoDep.SFGTTimer = 0;
 8004ef0:	2400      	movs	r4, #0
    switch( gIsoDep.state )
 8004ef2:	2b01      	cmp	r3, #1
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
 8004ef4:	b083      	sub	sp, #12
    gIsoDep.SFGTTimer = 0;
 8004ef6:	63ec      	str	r4, [r5, #60]	; 0x3c
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
 8004ef8:	4607      	mov	r7, r0
 8004efa:	460e      	mov	r6, r1
    switch( gIsoDep.state )
 8004efc:	d024      	beq.n	8004f48 <isoDepDataExchangePCD.part.0+0x60>
 8004efe:	d91f      	bls.n	8004f40 <isoDepDataExchangePCD.part.0+0x58>
 8004f00:	3b02      	subs	r3, #2
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d81b      	bhi.n	8004f3e <isoDepDataExchangePCD.part.0+0x56>
            ret = rfalGetTransceiveStatus();
 8004f06:	f005 febf 	bl	800ac88 <rfalGetTransceiveStatus>
 8004f0a:	4604      	mov	r4, r0
            switch( ret )
 8004f0c:	2828      	cmp	r0, #40	; 0x28
 8004f0e:	d817      	bhi.n	8004f40 <isoDepDataExchangePCD.part.0+0x58>
 8004f10:	e8df f000 	tbb	[pc, r0]
 8004f14:	1616163e 	.word	0x1616163e
 8004f18:	16161630 	.word	0x16161630
 8004f1c:	16163016 	.word	0x16163016
 8004f20:	16161616 	.word	0x16161616
 8004f24:	16161616 	.word	0x16161616
 8004f28:	16163016 	.word	0x16163016
 8004f2c:	30161616 	.word	0x30161616
 8004f30:	16161616 	.word	0x16161616
 8004f34:	16161616 	.word	0x16161616
 8004f38:	16161616 	.word	0x16161616
 8004f3c:	30          	.byte	0x30
 8004f3d:	00          	.byte	0x00
    switch( gIsoDep.state )
 8004f3e:	240c      	movs	r4, #12
}
 8004f40:	4620      	mov	r0, r4
 8004f42:	b003      	add	sp, #12
 8004f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 8004f48:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
 8004f4c:	78a8      	ldrb	r0, [r5, #2]
 8004f4e:	6969      	ldr	r1, [r5, #20]
 8004f50:	f895 2020 	ldrb.w	r2, [r5, #32]
 8004f54:	4423      	add	r3, r4
 8004f56:	f000 0001 	and.w	r0, r0, #1
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	8bab      	ldrh	r3, [r5, #28]
 8004f60:	f040 0002 	orr.w	r0, r0, #2
 8004f64:	f7ff feaa 	bl	8004cbc <isoDepTx>
            switch( ret )
 8004f68:	4604      	mov	r4, r0
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d1e8      	bne.n	8004f40 <isoDepDataExchangePCD.part.0+0x58>
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	702b      	strb	r3, [r5, #0]
                  break;
 8004f72:	e7c8      	b.n	8004f06 <isoDepDataExchangePCD.part.0+0x1e>
                    if( gIsoDep.isRxChaining )
 8004f74:	7ce9      	ldrb	r1, [r5, #19]
 8004f76:	2900      	cmp	r1, #0
 8004f78:	d148      	bne.n	800500c <isoDepDataExchangePCD.part.0+0x124>
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 8004f7a:	7828      	ldrb	r0, [r5, #0]
 8004f7c:	2803      	cmp	r0, #3
 8004f7e:	d000      	beq.n	8004f82 <isoDepDataExchangePCD.part.0+0x9a>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8004f80:	2001      	movs	r0, #1
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 8004f82:	f7ff ff05 	bl	8004d90 <isoDepHandleControlMsg>
 8004f86:	4604      	mov	r4, r0
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d1d9      	bne.n	8004f40 <isoDepDataExchangePCD.part.0+0x58>
                            return ERR_BUSY;
 8004f8c:	2402      	movs	r4, #2
 8004f8e:	e7d7      	b.n	8004f40 <isoDepDataExchangePCD.part.0+0x58>
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 8004f90:	883b      	ldrh	r3, [r7, #0]
 8004f92:	3307      	adds	r3, #7
 8004f94:	08db      	lsrs	r3, r3, #3
 8004f96:	803b      	strh	r3, [r7, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 8004f98:	f895 c027 	ldrb.w	ip, [r5, #39]	; 0x27
 8004f9c:	4563      	cmp	r3, ip
 8004f9e:	fa1f f88c 	uxth.w	r8, ip
 8004fa2:	d32d      	bcc.n	8005000 <isoDepDataExchangePCD.part.0+0x118>
 8004fa4:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d92a      	bls.n	8005000 <isoDepDataExchangePCD.part.0+0x118>
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 8004faa:	f895 e044 	ldrb.w	lr, [r5, #68]	; 0x44
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 8004fae:	69a8      	ldr	r0, [r5, #24]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 8004fb0:	f1be 0f01 	cmp.w	lr, #1
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 8004fb4:	7802      	ldrb	r2, [r0, #0]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 8004fb6:	d025      	beq.n	8005004 <isoDepDataExchangePCD.part.0+0x11c>
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 8004fb8:	78e9      	ldrb	r1, [r5, #3]
 8004fba:	b9d1      	cbnz	r1, 8004ff2 <isoDepDataExchangePCD.part.0+0x10a>
            if( isoDep_PCBisSBlock(rxPCB) )
 8004fbc:	f002 01c7 	and.w	r1, r2, #199	; 0xc7
 8004fc0:	29c2      	cmp	r1, #194	; 0xc2
 8004fc2:	d026      	beq.n	8005012 <isoDepDataExchangePCD.part.0+0x12a>
            else if( isoDep_PCBisRBlock(rxPCB) )
 8004fc4:	f002 01e6 	and.w	r1, r2, #230	; 0xe6
 8004fc8:	29a2      	cmp	r1, #162	; 0xa2
 8004fca:	d042      	beq.n	8005052 <isoDepDataExchangePCD.part.0+0x16a>
            else if( isoDep_PCBisIBlock(rxPCB) )
 8004fcc:	f002 01e2 	and.w	r1, r2, #226	; 0xe2
 8004fd0:	2902      	cmp	r1, #2
 8004fd2:	d115      	bne.n	8005000 <isoDepDataExchangePCD.part.0+0x118>
                if( isoDep_PCBisChaining(rxPCB) )
 8004fd4:	f012 0110 	ands.w	r1, r2, #16
 8004fd8:	d050      	beq.n	800507c <isoDepDataExchangePCD.part.0+0x194>
                    gIsoDep.isRxChaining = true;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	74eb      	strb	r3, [r5, #19]
                    *outIsChaining       = true;
 8004fde:	7033      	strb	r3, [r6, #0]
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8004fe0:	78ab      	ldrb	r3, [r5, #2]
 8004fe2:	f002 0201 	and.w	r2, r2, #1
 8004fe6:	429a      	cmp	r2, r3
    gIsoDep.cntIRetrys   = 0;
 8004fe8:	f04f 0100 	mov.w	r1, #0
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8004fec:	d067      	beq.n	80050be <isoDepDataExchangePCD.part.0+0x1d6>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 8004fee:	4608      	mov	r0, r1
 8004ff0:	e7c7      	b.n	8004f82 <isoDepDataExchangePCD.part.0+0x9a>
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 8004ff2:	f012 0f08 	tst.w	r2, #8
 8004ff6:	d003      	beq.n	8005000 <isoDepDataExchangePCD.part.0+0x118>
 8004ff8:	f890 9001 	ldrb.w	r9, [r0, #1]
 8004ffc:	4589      	cmp	r9, r1
 8004ffe:	d0dd      	beq.n	8004fbc <isoDepDataExchangePCD.part.0+0xd4>
                return ERR_PROTO;
 8005000:	240b      	movs	r4, #11
 8005002:	e79d      	b.n	8004f40 <isoDepDataExchangePCD.part.0+0x58>
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 8005004:	f012 0f0c 	tst.w	r2, #12
 8005008:	d0d6      	beq.n	8004fb8 <isoDepDataExchangePCD.part.0+0xd0>
 800500a:	e7f9      	b.n	8005000 <isoDepDataExchangePCD.part.0+0x118>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800500c:	2100      	movs	r1, #0
 800500e:	4608      	mov	r0, r1
 8005010:	e7b7      	b.n	8004f82 <isoDepDataExchangePCD.part.0+0x9a>
                if( isoDep_PCBisSWTX(rxPCB) )
 8005012:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8005016:	2af2      	cmp	r2, #242	; 0xf2
 8005018:	d03a      	beq.n	8005090 <isoDepDataExchangePCD.part.0+0x1a8>
                if( isoDep_PCBisSDeselect(rxPCB) )
 800501a:	2ac2      	cmp	r2, #194	; 0xc2
 800501c:	d1f0      	bne.n	8005000 <isoDepDataExchangePCD.part.0+0x118>
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 800501e:	782b      	ldrb	r3, [r5, #0]
 8005020:	2b03      	cmp	r3, #3
 8005022:	d1ed      	bne.n	8005000 <isoDepDataExchangePCD.part.0+0x118>
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 8005024:	2140      	movs	r1, #64	; 0x40
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 8005026:	2210      	movs	r2, #16
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 8005028:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 800502c:	2101      	movs	r1, #1
    gIsoDep.rxLen        = NULL;
 800502e:	2300      	movs	r3, #0
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 8005030:	612a      	str	r2, [r5, #16]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 8005032:	846a      	strh	r2, [r5, #34]	; 0x22
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 8005034:	f885 1027 	strb.w	r1, [r5, #39]	; 0x27
    gIsoDep.state        = ISODEP_ST_IDLE;
 8005038:	22ff      	movs	r2, #255	; 0xff
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 800503a:	4940      	ldr	r1, [pc, #256]	; (800513c <isoDepDataExchangePCD.part.0+0x254>)
    gIsoDep.rxLen        = NULL;
 800503c:	62eb      	str	r3, [r5, #44]	; 0x2c
    gIsoDep.state        = ISODEP_ST_IDLE;
 800503e:	e9c5 3200 	strd	r3, r2, [r5]
    gIsoDep.rxBuf        = NULL;
 8005042:	61ab      	str	r3, [r5, #24]
    gIsoDep.lastDID00    = false;
 8005044:	872b      	strh	r3, [r5, #56]	; 0x38
    gIsoDep.isWait4WTX   = false;
 8005046:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 800504a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 800504e:	6429      	str	r1, [r5, #64]	; 0x40
                        return ERR_NONE;
 8005050:	e776      	b.n	8004f40 <isoDepDataExchangePCD.part.0+0x58>
                if( isoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 8005052:	f002 03f6 	and.w	r3, r2, #246	; 0xf6
 8005056:	2ba2      	cmp	r3, #162	; 0xa2
 8005058:	d1d2      	bne.n	8005000 <isoDepDataExchangePCD.part.0+0x118>
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 800505a:	78ab      	ldrb	r3, [r5, #2]
 800505c:	f002 0201 	and.w	r2, r2, #1
 8005060:	429a      	cmp	r2, r3
 8005062:	d021      	beq.n	80050a8 <isoDepDataExchangePCD.part.0+0x1c0>
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 8005064:	796b      	ldrb	r3, [r5, #5]
 8005066:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 800506a:	1c59      	adds	r1, r3, #1
 800506c:	429a      	cmp	r2, r3
 800506e:	7169      	strb	r1, [r5, #5]
 8005070:	d9c6      	bls.n	8005000 <isoDepDataExchangePCD.part.0+0x118>
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 8005072:	2200      	movs	r2, #0
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 8005074:	2301      	movs	r3, #1
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 8005076:	71aa      	strb	r2, [r5, #6]
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 8005078:	702b      	strb	r3, [r5, #0]
 800507a:	e787      	b.n	8004f8c <isoDepDataExchangePCD.part.0+0xa4>
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800507c:	78ae      	ldrb	r6, [r5, #2]
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 800507e:	74e9      	strb	r1, [r5, #19]
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8005080:	f002 0201 	and.w	r2, r2, #1
 8005084:	42b2      	cmp	r2, r6
 8005086:	d038      	beq.n	80050fa <isoDepDataExchangePCD.part.0+0x212>
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 8005088:	f1be 0f02 	cmp.w	lr, #2
 800508c:	d1b8      	bne.n	8005000 <isoDepDataExchangePCD.part.0+0x118>
 800508e:	e777      	b.n	8004f80 <isoDepDataExchangePCD.part.0+0x98>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, isoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 8005090:	f810 100c 	ldrb.w	r1, [r0, ip]
 8005094:	2002      	movs	r0, #2
 8005096:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800509a:	f7ff fe79 	bl	8004d90 <isoDepHandleControlMsg>
 800509e:	4604      	mov	r4, r0
 80050a0:	2800      	cmp	r0, #0
 80050a2:	f47f af4d 	bne.w	8004f40 <isoDepDataExchangePCD.part.0+0x58>
 80050a6:	e771      	b.n	8004f8c <isoDepDataExchangePCD.part.0+0xa4>
                        if( !gIsoDep.isTxChaining )
 80050a8:	7cab      	ldrb	r3, [r5, #18]
                        gIsoDep.blockNumber = isoDep_PCBNextBN( gIsoDep.blockNumber );
 80050aa:	f082 0201 	eor.w	r2, r2, #1
 80050ae:	70aa      	strb	r2, [r5, #2]
                        if( !gIsoDep.isTxChaining )
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0a5      	beq.n	8005000 <isoDepDataExchangePCD.part.0+0x118>
    gIsoDep.cntIRetrys   = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	f8a5 3005 	strh.w	r3, [r5, #5]
    gIsoDep.cntSRetrys   = 0;
 80050ba:	71eb      	strb	r3, [r5, #7]
                        return ERR_NONE;  /* This block has been transmitted */
 80050bc:	e740      	b.n	8004f40 <isoDepDataExchangePCD.part.0+0x58>
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 80050be:	f082 0201 	eor.w	r2, r2, #1
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 80050c2:	4608      	mov	r0, r1
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 80050c4:	70aa      	strb	r2, [r5, #2]
    gIsoDep.cntIRetrys   = 0;
 80050c6:	f8a5 1005 	strh.w	r1, [r5, #5]
    gIsoDep.cntSRetrys   = 0;
 80050ca:	71e9      	strb	r1, [r5, #7]
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 80050cc:	f7ff fe60 	bl	8004d90 <isoDepHandleControlMsg>
 80050d0:	4604      	mov	r4, r0
 80050d2:	2800      	cmp	r0, #0
 80050d4:	f47f af34 	bne.w	8004f40 <isoDepDataExchangePCD.part.0+0x58>
                        *outActRxLen -= gIsoDep.hdrLen;
 80050d8:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
 80050dc:	883a      	ldrh	r2, [r7, #0]
 80050de:	1a52      	subs	r2, r2, r1
 80050e0:	b292      	uxth	r2, r2
 80050e2:	803a      	strh	r2, [r7, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 80050e4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80050e8:	4299      	cmp	r1, r3
 80050ea:	d000      	beq.n	80050ee <isoDepDataExchangePCD.part.0+0x206>
 80050ec:	b9ea      	cbnz	r2, 800512a <isoDepDataExchangePCD.part.0+0x242>
    gIsoDep.cntIRetrys   = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	f8a5 3005 	strh.w	r3, [r5, #5]
    gIsoDep.cntSRetrys   = 0;
 80050f4:	71eb      	strb	r3, [r5, #7]
                        return ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 80050f6:	240d      	movs	r4, #13
 80050f8:	e722      	b.n	8004f40 <isoDepDataExchangePCD.part.0+0x58>
                    *outActRxLen -= gIsoDep.hdrLen;
 80050fa:	eba3 0308 	sub.w	r3, r3, r8
                    isoDep_ToggleBN( gIsoDep.blockNumber );
 80050fe:	f082 0201 	eor.w	r2, r2, #1
 8005102:	70aa      	strb	r2, [r5, #2]
                    *outActRxLen -= gIsoDep.hdrLen;
 8005104:	b29a      	uxth	r2, r3
 8005106:	803a      	strh	r2, [r7, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8005108:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800510c:	459c      	cmp	ip, r3
 800510e:	d000      	beq.n	8005112 <isoDepDataExchangePCD.part.0+0x22a>
 8005110:	b92a      	cbnz	r2, 800511e <isoDepDataExchangePCD.part.0+0x236>
                    gIsoDep.state = ISODEP_ST_IDLE;
 8005112:	2300      	movs	r3, #0
 8005114:	702b      	strb	r3, [r5, #0]
    gIsoDep.cntIRetrys   = 0;
 8005116:	f8a5 3005 	strh.w	r3, [r5, #5]
    gIsoDep.cntSRetrys   = 0;
 800511a:	71eb      	strb	r3, [r5, #7]
                    return ERR_NONE;
 800511c:	e710      	b.n	8004f40 <isoDepDataExchangePCD.part.0+0x58>
                        ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 800511e:	eb00 010c 	add.w	r1, r0, ip
 8005122:	4418      	add	r0, r3
 8005124:	f006 fc6a 	bl	800b9fc <memmove>
 8005128:	e7f3      	b.n	8005112 <isoDepDataExchangePCD.part.0+0x22a>
                            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 800512a:	69a8      	ldr	r0, [r5, #24]
 800512c:	4401      	add	r1, r0
 800512e:	4418      	add	r0, r3
 8005130:	f006 fc64 	bl	800b9fc <memmove>
 8005134:	e7db      	b.n	80050ee <isoDepDataExchangePCD.part.0+0x206>
 8005136:	bf00      	nop
 8005138:	20000570 	.word	0x20000570
 800513c:	01030302 	.word	0x01030302

08005140 <rfalIsoDepInitialize>:
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <rfalIsoDepInitialize+0x34>)
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 8005142:	480d      	ldr	r0, [pc, #52]	; (8005178 <rfalIsoDepInitialize+0x38>)
 8005144:	6418      	str	r0, [r3, #64]	; 0x40
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 8005146:	2110      	movs	r1, #16
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 8005148:	f04f 0c40 	mov.w	ip, #64	; 0x40
    gIsoDep.rxLen        = NULL;
 800514c:	2200      	movs	r2, #0
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 800514e:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 8005152:	6119      	str	r1, [r3, #16]
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 8005154:	f04f 0c01 	mov.w	ip, #1
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 8005158:	8459      	strh	r1, [r3, #34]	; 0x22
    gIsoDep.state        = ISODEP_ST_IDLE;
 800515a:	21ff      	movs	r1, #255	; 0xff
 800515c:	e9c3 2100 	strd	r2, r1, [r3]
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 8005160:	f883 c027 	strb.w	ip, [r3, #39]	; 0x27
    gIsoDep.rxLen        = NULL;
 8005164:	62da      	str	r2, [r3, #44]	; 0x2c
    gIsoDep.rxBuf        = NULL;
 8005166:	619a      	str	r2, [r3, #24]
    gIsoDep.lastDID00    = false;
 8005168:	871a      	strh	r2, [r3, #56]	; 0x38
    gIsoDep.isWait4WTX   = false;
 800516a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 800516e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8005172:	4770      	bx	lr
 8005174:	20000570 	.word	0x20000570
 8005178:	01030302 	.word	0x01030302

0800517c <rfalIsoDepDeselect>:
{
 800517c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( (gIsoDep.rxLen == NULL) || (gIsoDep.rxBuf == NULL) )
 8005180:	4c5d      	ldr	r4, [pc, #372]	; (80052f8 <rfalIsoDepDeselect+0x17c>)
 8005182:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
{
 8005184:	b087      	sub	sp, #28
    if( (gIsoDep.rxLen == NULL) || (gIsoDep.rxBuf == NULL) )
 8005186:	2b00      	cmp	r3, #0
 8005188:	d057      	beq.n	800523a <rfalIsoDepDeselect+0xbe>
 800518a:	69a3      	ldr	r3, [r4, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d054      	beq.n	800523a <rfalIsoDepDeselect+0xbe>
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 8005190:	79e3      	ldrb	r3, [r4, #7]
 8005192:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 8005196:	2000      	movs	r0, #0
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	4299      	cmp	r1, r3
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 800519c:	9005      	str	r0, [sp, #20]
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 800519e:	71e2      	strb	r2, [r4, #7]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 80051a0:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 80051a4:	f0c0 80a2 	bcc.w	80052ec <rfalIsoDepDeselect+0x170>
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 80051a8:	7861      	ldrb	r1, [r4, #1]
 80051aa:	2900      	cmp	r1, #0
 80051ac:	d04f      	beq.n	800524e <rfalIsoDepDeselect+0xd2>
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 80051ae:	4402      	add	r2, r0
    return isoDepTx( pcb, ctrlMsgBuf, &ctrlMsgBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 80051b0:	9200      	str	r2, [sp, #0]
 80051b2:	2300      	movs	r3, #0
 80051b4:	f10d 0216 	add.w	r2, sp, #22
 80051b8:	a905      	add	r1, sp, #20
 80051ba:	20c2      	movs	r0, #194	; 0xc2
 80051bc:	f7ff fd7e 	bl	8004cbc <isoDepTx>
    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ));
 80051c0:	4606      	mov	r6, r0
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d167      	bne.n	8005296 <rfalIsoDepDeselect+0x11a>
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 80051c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 80051c8:	2a00      	cmp	r2, #0
 80051ca:	f000 808a 	beq.w	80052e2 <rfalIsoDepDeselect+0x166>
 80051ce:	4d4b      	ldr	r5, [pc, #300]	; (80052fc <rfalIsoDepDeselect+0x180>)
 80051d0:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
    *outIsChaining = false;
 80051d4:	4680      	mov	r8, r0
 80051d6:	f04f 0902 	mov.w	r9, #2
 80051da:	e024      	b.n	8005226 <rfalIsoDepDeselect+0xaa>
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 80051dc:	f884 9027 	strb.w	r9, [r4, #39]	; 0x27
 80051e0:	2103      	movs	r1, #3
 80051e2:	2302      	movs	r3, #2
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 80051e4:	7920      	ldrb	r0, [r4, #4]
 80051e6:	28ff      	cmp	r0, #255	; 0xff
 80051e8:	bf1c      	itt	ne
 80051ea:	f884 1027 	strbne.w	r1, [r4, #39]	; 0x27
 80051ee:	460b      	movne	r3, r1
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 80051f0:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80051f4:	4299      	cmp	r1, r3
 80051f6:	d32f      	bcc.n	8005258 <rfalIsoDepDeselect+0xdc>
 80051f8:	f894 1020 	ldrb.w	r1, [r4, #32]
 80051fc:	4299      	cmp	r1, r3
 80051fe:	d32b      	bcc.n	8005258 <rfalIsoDepDeselect+0xdc>
    if(gIsoDep.SFGTTimer != 0U)
 8005200:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005202:	2800      	cmp	r0, #0
 8005204:	d14b      	bne.n	800529e <rfalIsoDepDeselect+0x122>
 8005206:	a905      	add	r1, sp, #20
 8005208:	4610      	mov	r0, r2
 800520a:	f7ff fe6d 	bl	8004ee8 <isoDepDataExchangePCD.part.0>
 800520e:	4606      	mov	r6, r0
        rfalWorker();
 8005210:	f005 fd44 	bl	800ac9c <rfalWorker>
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 8005214:	2f00      	cmp	r7, #0
 8005216:	d04d      	beq.n	80052b4 <rfalIsoDepDeselect+0x138>
 8005218:	2e02      	cmp	r6, #2
 800521a:	d121      	bne.n	8005260 <rfalIsoDepDeselect+0xe4>
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 800521c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 800521e:	3d01      	subs	r5, #1
 8005220:	3f01      	subs	r7, #1
 8005222:	2a00      	cmp	r2, #0
 8005224:	d05e      	beq.n	80052e4 <rfalIsoDepDeselect+0x168>
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 8005226:	78e1      	ldrb	r1, [r4, #3]
    *outIsChaining = false;
 8005228:	f88d 8014 	strb.w	r8, [sp, #20]
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 800522c:	2301      	movs	r3, #1
 800522e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 8005232:	2900      	cmp	r1, #0
 8005234:	d1d2      	bne.n	80051dc <rfalIsoDepDeselect+0x60>
 8005236:	2102      	movs	r1, #2
 8005238:	e7d4      	b.n	80051e4 <rfalIsoDepDeselect+0x68>
        gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 800523a:	4b31      	ldr	r3, [pc, #196]	; (8005300 <rfalIsoDepDeselect+0x184>)
 800523c:	62e3      	str	r3, [r4, #44]	; 0x2c
        gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN;
 800523e:	2104      	movs	r1, #4
        gIsoDep.rxBuf       = gIsoDep.ctrlRxBuf;
 8005240:	1f58      	subs	r0, r3, #5
        gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8005242:	f240 2202 	movw	r2, #514	; 0x202
        gIsoDep.rxBuf       = gIsoDep.ctrlRxBuf;
 8005246:	61a0      	str	r0, [r4, #24]
        gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN;
 8005248:	83e1      	strh	r1, [r4, #30]
        gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800524a:	8422      	strh	r2, [r4, #32]
 800524c:	e7a0      	b.n	8005190 <rfalIsoDepDeselect+0x14>
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 800524e:	2303      	movs	r3, #3
 8005250:	7023      	strb	r3, [r4, #0]
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 8005252:	f44f 328c 	mov.w	r2, #71680	; 0x11800
 8005256:	e7ab      	b.n	80051b0 <rfalIsoDepDeselect+0x34>
        rfalWorker();
 8005258:	f005 fd20 	bl	800ac9c <rfalWorker>
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 800525c:	1e7d      	subs	r5, r7, #1
        return ERR_PARAM;
 800525e:	2607      	movs	r6, #7
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 8005260:	4928      	ldr	r1, [pc, #160]	; (8005304 <rfalIsoDepDeselect+0x188>)
 8005262:	6421      	str	r1, [r4, #64]	; 0x40
    gIsoDep.rxLen        = NULL;
 8005264:	2300      	movs	r3, #0
    gIsoDep.state        = ISODEP_ST_IDLE;
 8005266:	21ff      	movs	r1, #255	; 0xff
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 8005268:	2210      	movs	r2, #16
    gIsoDep.state        = ISODEP_ST_IDLE;
 800526a:	e9c4 3100 	strd	r3, r1, [r4]
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 800526e:	2d00      	cmp	r5, #0
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 8005270:	f04f 0040 	mov.w	r0, #64	; 0x40
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 8005274:	6122      	str	r2, [r4, #16]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 8005276:	8462      	strh	r2, [r4, #34]	; 0x22
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 8005278:	f04f 0201 	mov.w	r2, #1
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 800527c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 8005280:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    gIsoDep.rxLen        = NULL;
 8005284:	62e3      	str	r3, [r4, #44]	; 0x2c
    gIsoDep.rxBuf        = NULL;
 8005286:	61a3      	str	r3, [r4, #24]
    gIsoDep.lastDID00    = false;
 8005288:	8723      	strh	r3, [r4, #56]	; 0x38
    gIsoDep.isWait4WTX   = false;
 800528a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 800528e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 8005292:	bf08      	it	eq
 8005294:	2604      	moveq	r6, #4
}
 8005296:	4630      	mov	r0, r6
 8005298:	b007      	add	sp, #28
 800529a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) )
 800529e:	9203      	str	r2, [sp, #12]
 80052a0:	f7fc f908 	bl	80014b4 <timerIsExpired>
 80052a4:	9a03      	ldr	r2, [sp, #12]
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d1ad      	bne.n	8005206 <rfalIsoDepDeselect+0x8a>
        rfalWorker();
 80052aa:	f005 fcf7 	bl	800ac9c <rfalWorker>
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 80052ae:	2f00      	cmp	r7, #0
 80052b0:	d1b4      	bne.n	800521c <rfalIsoDepDeselect+0xa0>
            return ERR_BUSY;
 80052b2:	2602      	movs	r6, #2
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 80052b4:	2140      	movs	r1, #64	; 0x40
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 80052b6:	2210      	movs	r2, #16
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 80052b8:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 80052bc:	2101      	movs	r1, #1
    gIsoDep.rxLen        = NULL;
 80052be:	2300      	movs	r3, #0
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 80052c0:	6122      	str	r2, [r4, #16]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 80052c2:	8462      	strh	r2, [r4, #34]	; 0x22
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 80052c4:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
    gIsoDep.state        = ISODEP_ST_IDLE;
 80052c8:	22ff      	movs	r2, #255	; 0xff
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 80052ca:	490e      	ldr	r1, [pc, #56]	; (8005304 <rfalIsoDepDeselect+0x188>)
    gIsoDep.rxLen        = NULL;
 80052cc:	62e3      	str	r3, [r4, #44]	; 0x2c
    gIsoDep.state        = ISODEP_ST_IDLE;
 80052ce:	e9c4 3200 	strd	r3, r2, [r4]
    gIsoDep.rxBuf        = NULL;
 80052d2:	61a3      	str	r3, [r4, #24]
    gIsoDep.lastDID00    = false;
 80052d4:	8723      	strh	r3, [r4, #56]	; 0x38
    gIsoDep.isWait4WTX   = false;
 80052d6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 80052da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 80052de:	6421      	str	r1, [r4, #64]	; 0x40
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 80052e0:	e7d9      	b.n	8005296 <rfalIsoDepDeselect+0x11a>
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 80052e2:	4d06      	ldr	r5, [pc, #24]	; (80052fc <rfalIsoDepDeselect+0x180>)
        rfalWorker();
 80052e4:	f005 fcda 	bl	800ac9c <rfalWorker>
        return ERR_PARAM;
 80052e8:	2607      	movs	r6, #7
 80052ea:	e7b9      	b.n	8005260 <rfalIsoDepDeselect+0xe4>
                return ERR_PROTO;
 80052ec:	260b      	movs	r6, #11
}
 80052ee:	4630      	mov	r0, r6
 80052f0:	b007      	add	sp, #28
 80052f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052f6:	bf00      	nop
 80052f8:	20000570 	.word	0x20000570
 80052fc:	0ffffffe 	.word	0x0ffffffe
 8005300:	200005ba 	.word	0x200005ba
 8005304:	01030302 	.word	0x01030302

08005308 <rfalIsoDepStartTransceive>:
{
 8005308:	b084      	sub	sp, #16
 800530a:	b430      	push	{r4, r5}
 800530c:	ac02      	add	r4, sp, #8
 800530e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    gIsoDep.txBuf        = param.txBuf->prologue;
 8005312:	4b22      	ldr	r3, [pc, #136]	; (800539c <rfalIsoDepStartTransceive+0x94>)
 8005314:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8005318:	6158      	str	r0, [r3, #20]
    gIsoDep.isTxChaining = param.isTxChaining;
 800531a:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800531e:	7498      	strb	r0, [r3, #18]
    gIsoDep.rxBuf        = param.rxBuf->prologue;
 8005320:	9804      	ldr	r0, [sp, #16]
 8005322:	6198      	str	r0, [r3, #24]
    gIsoDep.txBufInfPos  = (uint8_t)((uint32_t)param.txBuf->inf - (uint32_t)param.txBuf->prologue);
 8005324:	f240 3003 	movw	r0, #771	; 0x303
 8005328:	8418      	strh	r0, [r3, #32]
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 800532a:	f240 1003 	movw	r0, #259	; 0x103
 800532e:	83d8      	strh	r0, [r3, #30]
    gIsoDep.rxLen        = param.rxLen;
 8005330:	9805      	ldr	r0, [sp, #20]
    gIsoDep.fwt          = param.FWT;
 8005332:	9a07      	ldr	r2, [sp, #28]
    gIsoDep.rxLen        = param.rxLen;
 8005334:	62d8      	str	r0, [r3, #44]	; 0x2c
    gIsoDep.dFwt         = param.dFWT;
 8005336:	9808      	ldr	r0, [sp, #32]
    gIsoDep.fwt          = param.FWT;
 8005338:	609a      	str	r2, [r3, #8]
    gIsoDep.dFwt         = param.dFWT;
 800533a:	60d8      	str	r0, [r3, #12]
    gIsoDep.fsx          = param.FSx;
 800533c:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 8005340:	7858      	ldrb	r0, [r3, #1]
    gIsoDep.fsx          = param.FSx;
 8005342:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 8005344:	29ff      	cmp	r1, #255	; 0xff
    gIsoDep.did          = param.DID;
 8005346:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 800534a:	bf08      	it	eq
 800534c:	8c59      	ldrheq	r1, [r3, #34]	; 0x22
    gIsoDep.txBufLen     = param.txBufLen;
 800534e:	f8bd 400c 	ldrh.w	r4, [sp, #12]
    gIsoDep.rxChaining   = param.isRxChaining;
 8005352:	9d06      	ldr	r5, [sp, #24]
    gIsoDep.did          = param.DID;
 8005354:	70da      	strb	r2, [r3, #3]
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 8005356:	2801      	cmp	r0, #1
    gIsoDep.isRxChaining  = false;
 8005358:	f04f 0200 	mov.w	r2, #0
    gIsoDep.rxChaining   = param.isRxChaining;
 800535c:	631d      	str	r5, [r3, #48]	; 0x30
    gIsoDep.txBufLen     = param.txBufLen;
 800535e:	839c      	strh	r4, [r3, #28]
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 8005360:	8459      	strh	r1, [r3, #34]	; 0x22
    gIsoDep.isRxChaining  = false;
 8005362:	74da      	strb	r2, [r3, #19]
    gIsoDep.cntIRetrys   = 0;
 8005364:	f8a3 2005 	strh.w	r2, [r3, #5]
    gIsoDep.cntSRetrys   = 0;
 8005368:	71da      	strb	r2, [r3, #7]
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 800536a:	d005      	beq.n	8005378 <rfalIsoDepStartTransceive+0x70>
    gIsoDep.state = ISODEP_ST_PCD_TX;
 800536c:	2201      	movs	r2, #1
 800536e:	701a      	strb	r2, [r3, #0]
}
 8005370:	bc30      	pop	{r4, r5}
 8005372:	2000      	movs	r0, #0
 8005374:	b004      	add	sp, #16
 8005376:	4770      	bx	lr
       if(gIsoDep.txBufLen > 0U)
 8005378:	b154      	cbz	r4, 8005390 <rfalIsoDepStartTransceive+0x88>
           if( !gIsoDep.isWait4WTX )
 800537a:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800537e:	b92a      	cbnz	r2, 800538c <rfalIsoDepStartTransceive+0x84>
               gIsoDep.state = ISODEP_ST_PICC_TX;
 8005380:	2208      	movs	r2, #8
 8005382:	701a      	strb	r2, [r3, #0]
}
 8005384:	bc30      	pop	{r4, r5}
 8005386:	2000      	movs	r0, #0
 8005388:	b004      	add	sp, #16
 800538a:	4770      	bx	lr
               gIsoDep.isTxPending = true;
 800538c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
       gIsoDep.state = ISODEP_ST_PICC_RX;
 8005390:	2206      	movs	r2, #6
 8005392:	701a      	strb	r2, [r3, #0]
}
 8005394:	bc30      	pop	{r4, r5}
 8005396:	2000      	movs	r0, #0
 8005398:	b004      	add	sp, #16
 800539a:	4770      	bx	lr
 800539c:	20000570 	.word	0x20000570

080053a0 <rfalIsoDepGetTransceiveStatus>:
{
 80053a0:	b538      	push	{r3, r4, r5, lr}
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 80053a2:	4b1a      	ldr	r3, [pc, #104]	; (800540c <rfalIsoDepGetTransceiveStatus+0x6c>)
 80053a4:	785a      	ldrb	r2, [r3, #1]
 80053a6:	2a01      	cmp	r2, #1
 80053a8:	d026      	beq.n	80053f8 <rfalIsoDepGetTransceiveStatus+0x58>
        return isoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 80053aa:	e9d3 540b 	ldrd	r5, r4, [r3, #44]	; 0x2c
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 80053ae:	b32d      	cbz	r5, 80053fc <rfalIsoDepGetTransceiveStatus+0x5c>
 80053b0:	b324      	cbz	r4, 80053fc <rfalIsoDepGetTransceiveStatus+0x5c>
    *outIsChaining = false;
 80053b2:	2200      	movs	r2, #0
 80053b4:	7022      	strb	r2, [r4, #0]
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 80053b6:	78d9      	ldrb	r1, [r3, #3]
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 80053be:	b9b1      	cbnz	r1, 80053ee <rfalIsoDepGetTransceiveStatus+0x4e>
 80053c0:	2102      	movs	r1, #2
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 80053c2:	7918      	ldrb	r0, [r3, #4]
 80053c4:	28ff      	cmp	r0, #255	; 0xff
 80053c6:	bf1c      	itt	ne
 80053c8:	f883 1027 	strbne.w	r1, [r3, #39]	; 0x27
 80053cc:	460a      	movne	r2, r1
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 80053ce:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 80053d2:	4291      	cmp	r1, r2
 80053d4:	d312      	bcc.n	80053fc <rfalIsoDepGetTransceiveStatus+0x5c>
 80053d6:	f893 1020 	ldrb.w	r1, [r3, #32]
 80053da:	4291      	cmp	r1, r2
 80053dc:	d30e      	bcc.n	80053fc <rfalIsoDepGetTransceiveStatus+0x5c>
    if(gIsoDep.SFGTTimer != 0U)
 80053de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80053e0:	b970      	cbnz	r0, 8005400 <rfalIsoDepGetTransceiveStatus+0x60>
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
}
 80053e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ea:	f7ff bd7d 	b.w	8004ee8 <isoDepDataExchangePCD.part.0>
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 80053f4:	2103      	movs	r1, #3
 80053f6:	e7e4      	b.n	80053c2 <rfalIsoDepGetTransceiveStatus+0x22>
        return ERR_NOTSUPP;
 80053f8:	2018      	movs	r0, #24
}
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
        return ERR_PARAM;
 80053fc:	2007      	movs	r0, #7
}
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
        if( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) )
 8005400:	f7fc f858 	bl	80014b4 <timerIsExpired>
 8005404:	2800      	cmp	r0, #0
 8005406:	d1ec      	bne.n	80053e2 <rfalIsoDepGetTransceiveStatus+0x42>
            return ERR_BUSY;
 8005408:	2002      	movs	r0, #2
}
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	20000570 	.word	0x20000570

08005410 <rfalIsoDepATTRIB>:
{
 8005410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005412:	b091      	sub	sp, #68	; 0x44
 8005414:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005416:	f89d c058 	ldrb.w	ip, [sp, #88]	; 0x58
 800541a:	f89d e05c 	ldrb.w	lr, [sp, #92]	; 0x5c
 800541e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8005422:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8005426:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8005428:	2d00      	cmp	r5, #0
 800542a:	d03c      	beq.n	80054a6 <rfalIsoDepATTRIB+0x96>
 800542c:	2c00      	cmp	r4, #0
 800542e:	d03a      	beq.n	80054a6 <rfalIsoDepATTRIB+0x96>
 8005430:	2a03      	cmp	r2, #3
 8005432:	d838      	bhi.n	80054a6 <rfalIsoDepATTRIB+0x96>
 8005434:	2b03      	cmp	r3, #3
 8005436:	d836      	bhi.n	80054a6 <rfalIsoDepATTRIB+0x96>
 8005438:	2e0e      	cmp	r6, #14
 800543a:	d834      	bhi.n	80054a6 <rfalIsoDepATTRIB+0x96>
    attribCmd.Param.PARAM1 = PARAM1;
 800543c:	f88d 1019 	strb.w	r1, [sp, #25]
    attribCmd.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8005440:	0119      	lsls	r1, r3, #4
 8005442:	ea41 1382 	orr.w	r3, r1, r2, lsl #6
 8005446:	f00c 0c0f 	and.w	ip, ip, #15
 800544a:	ea43 030c 	orr.w	r3, r3, ip
 800544e:	f88d 301a 	strb.w	r3, [sp, #26]
    ST_MEMCPY(attribCmd.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 8005452:	6803      	ldr	r3, [r0, #0]
 8005454:	f8cd 3015 	str.w	r3, [sp, #21]
    attribCmd.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 8005458:	231d      	movs	r3, #29
 800545a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 800545e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    attribCmd.Param.PARAM3 = PARAM3;
 8005460:	f88d e01b 	strb.w	lr, [sp, #27]
    attribCmd.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 8005464:	f88d 601c 	strb.w	r6, [sp, #28]
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 8005468:	b103      	cbz	r3, 800546c <rfalIsoDepATTRIB+0x5c>
 800546a:	b9ff      	cbnz	r7, 80054ac <rfalIsoDepATTRIB+0x9c>
        ST_MEMCPY(attribCmd.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 800546c:	2f20      	cmp	r7, #32
 800546e:	bf28      	it	cs
 8005470:	2720      	movcs	r7, #32
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&attribCmd, (RFAL_ISODEP_ATTRIB_HDR_LEN + MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)attribRes, sizeof(rfalIsoDepAttribRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8005472:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005474:	2300      	movs	r3, #0
 8005476:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800547a:	3709      	adds	r7, #9
 800547c:	f10d 0312 	add.w	r3, sp, #18
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	b2f9      	uxtb	r1, r7
 8005484:	2321      	movs	r3, #33	; 0x21
 8005486:	462a      	mov	r2, r5
 8005488:	a805      	add	r0, sp, #20
 800548a:	f005 fb53 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    *attribResLen = (uint8_t)rcvLen;
 800548e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8005492:	7023      	strb	r3, [r4, #0]
    if( ret == ERR_NONE )
 8005494:	b940      	cbnz	r0, 80054a8 <rfalIsoDepATTRIB+0x98>
        if( (rcvLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((attribRes->mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID) )
 8005496:	b19b      	cbz	r3, 80054c0 <rfalIsoDepATTRIB+0xb0>
 8005498:	782b      	ldrb	r3, [r5, #0]
 800549a:	f003 030f 	and.w	r3, r3, #15
           return ERR_PROTO;
 800549e:	429e      	cmp	r6, r3
 80054a0:	bf18      	it	ne
 80054a2:	200b      	movne	r0, #11
 80054a4:	e000      	b.n	80054a8 <rfalIsoDepATTRIB+0x98>
        return ERR_NONE;
 80054a6:	2000      	movs	r0, #0
}
 80054a8:	b011      	add	sp, #68	; 0x44
 80054aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ST_MEMCPY(attribCmd.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 80054ac:	2f20      	cmp	r7, #32
 80054ae:	bf28      	it	cs
 80054b0:	2720      	movcs	r7, #32
 80054b2:	4619      	mov	r1, r3
 80054b4:	463a      	mov	r2, r7
 80054b6:	f10d 001d 	add.w	r0, sp, #29
 80054ba:	f006 fa91 	bl	800b9e0 <memcpy>
 80054be:	e7d8      	b.n	8005472 <rfalIsoDepATTRIB+0x62>
           return ERR_PROTO;
 80054c0:	200b      	movs	r0, #11
 80054c2:	e7f1      	b.n	80054a8 <rfalIsoDepATTRIB+0x98>

080054c4 <rfalIsoDepPollAHandleActivation>:
{
 80054c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c8:	b08d      	sub	sp, #52	; 0x34
 80054ca:	e9cd 0105 	strd	r0, r1, [sp, #20]
 80054ce:	9207      	str	r2, [sp, #28]
    if( isoDepDev == NULL )
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8155 	beq.w	8005780 <rfalIsoDepPollAHandleActivation+0x2bc>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 80054d6:	460c      	mov	r4, r1
    RATSretries = gIsoDep.maxRetriesRATS;
 80054d8:	4fb4      	ldr	r7, [pc, #720]	; (80057ac <rfalIsoDepPollAHandleActivation+0x2e8>)
 80054da:	4605      	mov	r5, r0
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 80054dc:	f004 080f 	and.w	r8, r4, #15
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 80054e0:	2002      	movs	r0, #2
 80054e2:	461e      	mov	r6, r3
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 80054e4:	ea48 1805 	orr.w	r8, r8, r5, lsl #4
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 80054e8:	f005 f9d6 	bl	800a898 <rfalSetErrorHandling>
    RATSretries = gIsoDep.maxRetriesRATS;
 80054ec:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 80054f0:	fa5f f888 	uxtb.w	r8, r8
 80054f4:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 80054f8:	f04f 0ae0 	mov.w	sl, #224	; 0xe0
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 80054fc:	f04f 0b00 	mov.w	fp, #0
 8005500:	4bab      	ldr	r3, [pc, #684]	; (80057b0 <rfalIsoDepPollAHandleActivation+0x2ec>)
 8005502:	f8cd 9000 	str.w	r9, [sp]
 8005506:	e9cd b301 	strd	fp, r3, [sp, #4]
 800550a:	4632      	mov	r2, r6
 800550c:	2314      	movs	r3, #20
 800550e:	2102      	movs	r1, #2
 8005510:	a80a      	add	r0, sp, #40	; 0x28
    ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 8005512:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 8005516:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800551a:	f005 fb0b 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    if( ret == ERR_NONE )
 800551e:	4605      	mov	r5, r0
 8005520:	2800      	cmp	r0, #0
 8005522:	d15e      	bne.n	80055e2 <rfalIsoDepPollAHandleActivation+0x11e>
        if( (rcvLen < RFAL_ISODEP_ATS_MIN_LEN) || (rcvLen > RFAL_ISODEP_ATS_MAX_LEN) || (ats->TL != rcvLen) )
 8005524:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8005528:	1e53      	subs	r3, r2, #1
 800552a:	2b13      	cmp	r3, #19
 800552c:	d86d      	bhi.n	800560a <rfalIsoDepPollAHandleActivation+0x146>
 800552e:	7833      	ldrb	r3, [r6, #0]
 8005530:	4293      	cmp	r3, r2
 8005532:	d16a      	bne.n	800560a <rfalIsoDepPollAHandleActivation+0x146>
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8005534:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005538:	2b01      	cmp	r3, #1
 800553a:	9b05      	ldr	r3, [sp, #20]
 800553c:	d07b      	beq.n	8005636 <rfalIsoDepPollAHandleActivation+0x172>
 800553e:	2b08      	cmp	r3, #8
 8005540:	bf28      	it	cs
 8005542:	2308      	movcs	r3, #8
    switch( fsi )
 8005544:	3b01      	subs	r3, #1
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b0b      	cmp	r3, #11
 800554a:	bf96      	itet	ls
 800554c:	4999      	ldrls	r1, [pc, #612]	; (80057b4 <rfalIsoDepPollAHandleActivation+0x2f0>)
{
 800554e:	2310      	movhi	r3, #16
 8005550:	f831 3013 	ldrhls.w	r3, [r1, r3, lsl #1]
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8005554:	847b      	strh	r3, [r7, #34]	; 0x22
        *atsLen = (uint8_t)rcvLen;
 8005556:	7532      	strb	r2, [r6, #20]
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 8005558:	f897 0044 	ldrb.w	r0, [r7, #68]	; 0x44
 800555c:	2801      	cmp	r0, #1
 800555e:	f040 8121 	bne.w	80057a4 <rfalIsoDepPollAHandleActivation+0x2e0>
        platformDelay(1);
 8005562:	f7fc f81d 	bl	80015a0 <HAL_Delay>
    if( isoDepDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 8005566:	7831      	ldrb	r1, [r6, #0]
    isoDepDev->info.SFGI = 0;
 8005568:	2300      	movs	r3, #0
    isoDepDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 800556a:	2404      	movs	r4, #4
    isoDepDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 800556c:	2002      	movs	r0, #2
    if( isoDepDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 800556e:	2901      	cmp	r1, #1
    isoDepDev->info.SFGI = 0;
 8005570:	63b3      	str	r3, [r6, #56]	; 0x38
    isoDepDev->info.MBL  = 0;
 8005572:	6473      	str	r3, [r6, #68]	; 0x44
    isoDepDev->info.DSI  = RFAL_BR_106;
 8005574:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
    isoDepDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 8005578:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    isoDepDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 800557c:	f886 0040 	strb.w	r0, [r6, #64]	; 0x40
    if( isoDepDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 8005580:	f106 0248 	add.w	r2, r6, #72	; 0x48
 8005584:	d95b      	bls.n	800563e <rfalIsoDepPollAHandleActivation+0x17a>
        isoDepDev->info.FSxI = (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 8005586:	f896 c001 	ldrb.w	ip, [r6, #1]
 800558a:	f00c 030f 	and.w	r3, ip, #15
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 800558e:	f01c 0f10 	tst.w	ip, #16
        isoDepDev->info.FSxI = (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 8005592:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 8005596:	f040 80f9 	bne.w	800578c <rfalIsoDepPollAHandleActivation+0x2c8>
 800559a:	2403      	movs	r4, #3
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 800559c:	f01c 0f20 	tst.w	ip, #32
 80055a0:	f040 80e5 	bne.w	800576e <rfalIsoDepPollAHandleActivation+0x2aa>
    isoDepDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 80055a4:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80055a6:	4604      	mov	r4, r0
 80055a8:	b2ca      	uxtb	r2, r1
    if (tmpSFGI > ISODEP_SFGI_MAX)
    {
        tmpSFGI = ISODEP_SFGI_MIN;
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
 80055aa:	3a01      	subs	r2, #1
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 80055ac:	f01c 0f40 	tst.w	ip, #64	; 0x40
    if (tmpSFGI != ISODEP_SFGI_MIN)
 80055b0:	b2d2      	uxtb	r2, r2
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 80055b2:	d047      	beq.n	8005644 <rfalIsoDepPollAHandleActivation+0x180>
            isoDepDev->info.supAdFt = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 80055b4:	5d30      	ldrb	r0, [r6, r4]
 80055b6:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80055ba:	f886 004e 	strb.w	r0, [r6, #78]	; 0x4e
            isoDepDev->info.supDID  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 80055be:	5d30      	ldrb	r0, [r6, r4]
 80055c0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80055c4:	f886 004c 	strb.w	r0, [r6, #76]	; 0x4c
            isoDepDev->info.supNAD  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 80055c8:	5d30      	ldrb	r0, [r6, r4]
 80055ca:	f000 0001 	and.w	r0, r0, #1
 80055ce:	f886 004d 	strb.w	r0, [r6, #77]	; 0x4d
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 80055d2:	f897 0044 	ldrb.w	r0, [r7, #68]	; 0x44
 80055d6:	2801      	cmp	r0, #1
 80055d8:	d138      	bne.n	800564c <rfalIsoDepPollAHandleActivation+0x188>
 80055da:	2b0c      	cmp	r3, #12
 80055dc:	bf28      	it	cs
 80055de:	230c      	movcs	r3, #12
 80055e0:	e037      	b.n	8005652 <rfalIsoDepPollAHandleActivation+0x18e>
        *atsLen = (uint8_t)rcvLen;
 80055e2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80055e6:	7533      	strb	r3, [r6, #20]
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 80055e8:	f897 0044 	ldrb.w	r0, [r7, #68]	; 0x44
 80055ec:	2801      	cmp	r0, #1
 80055ee:	d006      	beq.n	80055fe <rfalIsoDepPollAHandleActivation+0x13a>
        platformDelay(1);
 80055f0:	2001      	movs	r0, #1
 80055f2:	f7fb ffd5 	bl	80015a0 <HAL_Delay>
    while( ((RATSretries--) != 0U) && (ret != ERR_NONE) );
 80055f6:	b1bc      	cbz	r4, 8005628 <rfalIsoDepPollAHandleActivation+0x164>
 80055f8:	3c01      	subs	r4, #1
 80055fa:	b2e4      	uxtb	r4, r4
 80055fc:	e780      	b.n	8005500 <rfalIsoDepPollAHandleActivation+0x3c>
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 80055fe:	2d04      	cmp	r5, #4
 8005600:	d0f7      	beq.n	80055f2 <rfalIsoDepPollAHandleActivation+0x12e>
}
 8005602:	4628      	mov	r0, r5
 8005604:	b00d      	add	sp, #52	; 0x34
 8005606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 800560a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800560e:	2b01      	cmp	r3, #1
 8005610:	d104      	bne.n	800561c <rfalIsoDepPollAHandleActivation+0x158>
 8005612:	250b      	movs	r5, #11
}
 8005614:	4628      	mov	r0, r5
 8005616:	b00d      	add	sp, #52	; 0x34
 8005618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        platformDelay(1);
 800561c:	2001      	movs	r0, #1
 800561e:	f7fb ffbf 	bl	80015a0 <HAL_Delay>
    while( ((RATSretries--) != 0U) && (ret != ERR_NONE) );
 8005622:	2c00      	cmp	r4, #0
 8005624:	d1e8      	bne.n	80055f8 <rfalIsoDepPollAHandleActivation+0x134>
 8005626:	250b      	movs	r5, #11
        if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 8005628:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800562c:	2b02      	cmp	r3, #2
 800562e:	d1e8      	bne.n	8005602 <rfalIsoDepPollAHandleActivation+0x13e>
            rfalIsoDepDeselect();
 8005630:	f7ff fda4 	bl	800517c <rfalIsoDepDeselect>
 8005634:	e7e5      	b.n	8005602 <rfalIsoDepPollAHandleActivation+0x13e>
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8005636:	2b0c      	cmp	r3, #12
 8005638:	bf28      	it	cs
 800563a:	230c      	movcs	r3, #12
 800563c:	e782      	b.n	8005544 <rfalIsoDepPollAHandleActivation+0x80>
 800563e:	4619      	mov	r1, r3
 8005640:	22ff      	movs	r2, #255	; 0xff
 8005642:	4603      	mov	r3, r0
 8005644:	f897 0044 	ldrb.w	r0, [r7, #68]	; 0x44
 8005648:	2801      	cmp	r0, #1
 800564a:	d0c6      	beq.n	80055da <rfalIsoDepPollAHandleActivation+0x116>
 800564c:	2b08      	cmp	r3, #8
 800564e:	bf28      	it	cs
 8005650:	2308      	movcs	r3, #8
    switch( fsi )
 8005652:	3b01      	subs	r3, #1
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b0b      	cmp	r3, #11
 8005658:	bf96      	itet	ls
 800565a:	4856      	ldrls	r0, [pc, #344]	; (80057b4 <rfalIsoDepPollAHandleActivation+0x2f0>)
 800565c:	2310      	movhi	r3, #16
 800565e:	f830 3013 	ldrhls.w	r3, [r0, r3, lsl #1]
    isoDepDev->info.FSx  = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 8005662:	f8a6 3042 	strh.w	r3, [r6, #66]	; 0x42
    if (tmpSFGI != ISODEP_SFGI_MIN)
 8005666:	2a0d      	cmp	r2, #13
 8005668:	d87e      	bhi.n	8005768 <rfalIsoDepPollAHandleActivation+0x2a4>
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 800566a:	4a53      	ldr	r2, [pc, #332]	; (80057b8 <rfalIsoDepPollAHandleActivation+0x2f4>)
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 800566c:	b2c9      	uxtb	r1, r1
 800566e:	f44f 538c 	mov.w	r3, #4480	; 0x1180
 8005672:	408b      	lsls	r3, r1
    return (rfalConv1fcToMs(sfgt) + 1U);
 8005674:	fba2 2303 	umull	r2, r3, r2, r3
 8005678:	0b1b      	lsrs	r3, r3, #12
 800567a:	3301      	adds	r3, #1
    isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 800567c:	b298      	uxth	r0, r3
    isoDepDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 800567e:	63f3      	str	r3, [r6, #60]	; 0x3c
    isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 8005680:	f7fb ff12 	bl	80014a8 <timerCalculateTimer>
 8005684:	63f8      	str	r0, [r7, #60]	; 0x3c
    isoDepDev->info.FWT  = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 8005686:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
    if( tmpFWI > ISODEP_FWI_MAX )
 800568a:	2b0e      	cmp	r3, #14
 800568c:	d869      	bhi.n	8005762 <rfalIsoDepPollAHandleActivation+0x29e>
    result = ((uint32_t)1U << (tmpFWI + 12U));
 800568e:	330c      	adds	r3, #12
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2201      	movs	r2, #1
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
    isoDepDev->info.FWT  = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 8005698:	6333      	str	r3, [r6, #48]	; 0x30
    isoDepDev->info.DID = ( (isoDepDev->info.supDID) ? DID : RFAL_ISODEP_NO_DID);
 800569a:	f896 304c 	ldrb.w	r3, [r6, #76]	; 0x4c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	9b06      	ldr	r3, [sp, #24]
 80056a2:	bf08      	it	eq
 80056a4:	2300      	moveq	r3, #0
    isoDepDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 80056a6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    isoDepDev->info.DID = ( (isoDepDev->info.supDID) ? DID : RFAL_ISODEP_NO_DID);
 80056aa:	f886 304a 	strb.w	r3, [r6, #74]	; 0x4a
    if( (isoDepDev->info.DSI != RFAL_BR_106) || (isoDepDev->info.DRI != RFAL_BR_106) )
 80056ae:	f8b6 3048 	ldrh.w	r3, [r6, #72]	; 0x48
    isoDepDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 80056b2:	6372      	str	r2, [r6, #52]	; 0x34
    isoDepDev->info.NAD = RFAL_ISODEP_NO_NAD;
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	f886 204b 	strb.w	r2, [r6, #75]	; 0x4b
    if( (isoDepDev->info.DSI != RFAL_BR_106) || (isoDepDev->info.DRI != RFAL_BR_106) )
 80056ba:	b9ab      	cbnz	r3, 80056e8 <rfalIsoDepPollAHandleActivation+0x224>
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 80056bc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    gIsoDep.fsx    = isoDepDev->info.FSx;
 80056c0:	f8b6 2042 	ldrh.w	r2, [r6, #66]	; 0x42
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 80056c4:	9805      	ldr	r0, [sp, #20]
    gIsoDep.fsx    = isoDepDev->info.FSx;
 80056c6:	823a      	strh	r2, [r7, #16]
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d05b      	beq.n	8005784 <rfalIsoDepPollAHandleActivation+0x2c0>
 80056cc:	2808      	cmp	r0, #8
 80056ce:	bf28      	it	cs
 80056d0:	2008      	movcs	r0, #8
    switch( fsi )
 80056d2:	1e43      	subs	r3, r0, #1
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b0b      	cmp	r3, #11
 80056d8:	bf96      	itet	ls
 80056da:	4a36      	ldrls	r2, [pc, #216]	; (80057b4 <rfalIsoDepPollAHandleActivation+0x2f0>)
    isoDepDev->info.DID = ( (isoDepDev->info.supDID) ? DID : RFAL_ISODEP_NO_DID);
 80056dc:	2310      	movhi	r3, #16
 80056de:	f832 3013 	ldrhls.w	r3, [r2, r3, lsl #1]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 80056e2:	847b      	strh	r3, [r7, #34]	; 0x22
    return ERR_NONE;
 80056e4:	e78d      	b.n	8005602 <rfalIsoDepPollAHandleActivation+0x13e>
        while( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) ) { /* MISRA 15.6: mandatory brackets */ };
 80056e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80056e8:	f7fb fee4 	bl	80014b4 <timerIsExpired>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d0fa      	beq.n	80056e6 <rfalIsoDepPollAHandleActivation+0x222>
        ret = rfalIsoDepPPS( isoDepDev->info.DID, isoDepDev->info.DSI, isoDepDev->info.DRI, &ppsRes );
 80056f0:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 80056f4:	2903      	cmp	r1, #3
 80056f6:	d830      	bhi.n	800575a <rfalIsoDepPollAHandleActivation+0x296>
        ret = rfalIsoDepPPS( isoDepDev->info.DID, isoDepDev->info.DSI, isoDepDev->info.DRI, &ppsRes );
 80056f8:	f896 3049 	ldrb.w	r3, [r6, #73]	; 0x49
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d82c      	bhi.n	800575a <rfalIsoDepPollAHandleActivation+0x296>
        ret = rfalIsoDepPPS( isoDepDev->info.DID, isoDepDev->info.DSI, isoDepDev->info.DRI, &ppsRes );
 8005700:	f896 204a 	ldrb.w	r2, [r6, #74]	; 0x4a
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8005704:	2a0e      	cmp	r2, #14
 8005706:	d828      	bhi.n	800575a <rfalIsoDepPollAHandleActivation+0x296>
    ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 8005708:	f062 022f 	orn	r2, r2, #47	; 0x2f
    ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 800570c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 8005710:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8005714:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <rfalIsoDepPollAHandleActivation+0x2ec>)
    ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 8005716:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800571a:	2300      	movs	r3, #0
 800571c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005720:	a90a      	add	r1, sp, #40	; 0x28
    ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8005722:	2311      	movs	r3, #17
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8005724:	9100      	str	r1, [sp, #0]
    ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8005726:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800572a:	4648      	mov	r0, r9
 800572c:	2301      	movs	r3, #1
 800572e:	aa09      	add	r2, sp, #36	; 0x24
 8005730:	2103      	movs	r1, #3
 8005732:	f005 f9ff 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    if( ret == ERR_NONE )
 8005736:	b980      	cbnz	r0, 800575a <rfalIsoDepPollAHandleActivation+0x296>
        if( (rcvLen != RFAL_ISODEP_PPS_RES_LEN) || (ppsRes->PPSS != ppsReq.PPSS) )
 8005738:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10c      	bne.n	800575a <rfalIsoDepPollAHandleActivation+0x296>
 8005740:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8005744:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8005748:	429a      	cmp	r2, r3
 800574a:	d106      	bne.n	800575a <rfalIsoDepPollAHandleActivation+0x296>
            rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 800574c:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
 8005750:	f896 0049 	ldrb.w	r0, [r6, #73]	; 0x49
 8005754:	f005 f870 	bl	800a838 <rfalSetBitRate>
 8005758:	e7b0      	b.n	80056bc <rfalIsoDepPollAHandleActivation+0x1f8>
            isoDepDev->info.DSI = RFAL_BR_106;
 800575a:	2300      	movs	r3, #0
 800575c:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
 8005760:	e7ac      	b.n	80056bc <rfalIsoDepPollAHandleActivation+0x1f8>
 8005762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005766:	e797      	b.n	8005698 <rfalIsoDepPollAHandleActivation+0x1d4>
 8005768:	2301      	movs	r3, #1
 800576a:	4618      	mov	r0, r3
 800576c:	e787      	b.n	800567e <rfalIsoDepPollAHandleActivation+0x1ba>
            isoDepDev->info.SFGI  = ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++];
 800576e:	5c31      	ldrb	r1, [r6, r0]
            isoDepDev->info.FWI   = (uint8_t)((isoDepDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 8005770:	f001 020f 	and.w	r2, r1, #15
 8005774:	0909      	lsrs	r1, r1, #4
 8005776:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
            isoDepDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 800577a:	63b2      	str	r2, [r6, #56]	; 0x38
 800577c:	4611      	mov	r1, r2
 800577e:	e714      	b.n	80055aa <rfalIsoDepPollAHandleActivation+0xe6>
        return ERR_PARAM;
 8005780:	2507      	movs	r5, #7
 8005782:	e73e      	b.n	8005602 <rfalIsoDepPollAHandleActivation+0x13e>
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8005784:	280c      	cmp	r0, #12
 8005786:	bf28      	it	cs
 8005788:	200c      	movcs	r0, #12
 800578a:	e7a2      	b.n	80056d2 <rfalIsoDepPollAHandleActivation+0x20e>
            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++], &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 800578c:	9807      	ldr	r0, [sp, #28]
 800578e:	78b1      	ldrb	r1, [r6, #2]
 8005790:	f106 0349 	add.w	r3, r6, #73	; 0x49
 8005794:	f7ff f804 	bl	80047a0 <rfalIsoDepCalcBitRate>
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 8005798:	f896 c001 	ldrb.w	ip, [r6, #1]
    isoDepDev->info.FSx  = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 800579c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80057a0:	2003      	movs	r0, #3
 80057a2:	e6fb      	b.n	800559c <rfalIsoDepPollAHandleActivation+0xd8>
        platformDelay(1);
 80057a4:	2001      	movs	r0, #1
 80057a6:	f7fb fefb 	bl	80015a0 <HAL_Delay>
    while( ((RATSretries--) != 0U) && (ret != ERR_NONE) );
 80057aa:	e6dc      	b.n	8005566 <rfalIsoDepPollAHandleActivation+0xa2>
 80057ac:	20000570 	.word	0x20000570
 80057b0:	00046780 	.word	0x00046780
 80057b4:	0800c52c 	.word	0x0800c52c
 80057b8:	4d542005 	.word	0x4d542005

080057bc <rfalIsoDepPollBHandleActivation>:
{
 80057bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	b08b      	sub	sp, #44	; 0x2c
 80057c2:	4692      	mov	sl, r2
 80057c4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80057c6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 80057c8:	7b32      	ldrb	r2, [r6, #12]
{
 80057ca:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 80057ce:	9009      	str	r0, [sp, #36]	; 0x24
 80057d0:	4699      	mov	r9, r3
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 80057d2:	0913      	lsrs	r3, r2, #4
    if( tmpFWI > ISODEP_FWI_MAX )
 80057d4:	2b0f      	cmp	r3, #15
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 80057d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
{
 80057da:	460f      	mov	r7, r1
    result = ((uint32_t)1U << (tmpFWI + 12U));
 80057dc:	bf1d      	ittte	ne
 80057de:	330c      	addne	r3, #12
 80057e0:	2101      	movne	r1, #1
 80057e2:	fa01 f303 	lslne.w	r3, r1, r3
 80057e6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
    isoDepDev->info.FWT     = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 80057ea:	6323      	str	r3, [r4, #48]	; 0x30
    isoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 80057ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80057f0:	6363      	str	r3, [r4, #52]	; 0x34
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 80057f2:	7b73      	ldrb	r3, [r6, #13]
 80057f4:	091b      	lsrs	r3, r3, #4
    if (tmpSFGI > ISODEP_SFGI_MAX)
 80057f6:	2b0f      	cmp	r3, #15
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 80057f8:	63a3      	str	r3, [r4, #56]	; 0x38
    if (tmpSFGI > ISODEP_SFGI_MAX)
 80057fa:	d002      	beq.n	8005802 <rfalIsoDepPollBHandleActivation+0x46>
    if (tmpSFGI != ISODEP_SFGI_MIN)
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f040 809d 	bne.w	800593c <rfalIsoDepPollBHandleActivation+0x180>
 8005802:	2301      	movs	r3, #1
    isoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 8005804:	63e3      	str	r3, [r4, #60]	; 0x3c
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 8005806:	7af3      	ldrb	r3, [r6, #11]
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8005808:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8005988 <rfalIsoDepPollBHandleActivation+0x1cc>
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8005812:	f898 1044 	ldrb.w	r1, [r8, #68]	; 0x44
 8005816:	2901      	cmp	r1, #1
 8005818:	f000 809a 	beq.w	8005950 <rfalIsoDepPollBHandleActivation+0x194>
 800581c:	2b08      	cmp	r3, #8
 800581e:	bf28      	it	cs
 8005820:	2308      	movcs	r3, #8
    switch( fsi )
 8005822:	3b01      	subs	r3, #1
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b0b      	cmp	r3, #11
 8005828:	bf98      	it	ls
 800582a:	4955      	ldrls	r1, [pc, #340]	; (8005980 <rfalIsoDepPollBHandleActivation+0x1c4>)
    isoDepDev->info.DID     = DID;
 800582c:	f884 704a 	strb.w	r7, [r4, #74]	; 0x4a
 8005830:	bf94      	ite	ls
 8005832:	f831 3013 	ldrhls.w	r3, [r1, r3, lsl #1]
 8005836:	2310      	movhi	r3, #16
    isoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 8005838:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 800583c:	f002 0301 	and.w	r3, r2, #1
    isoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 8005840:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8005844:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 8005848:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    if( (DID != RFAL_ISODEP_NO_DID) && (!isoDepDev->info.supDID) )
 800584c:	b117      	cbz	r7, 8005854 <rfalIsoDepPollBHandleActivation+0x98>
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8090 	beq.w	8005974 <rfalIsoDepPollBHandleActivation+0x1b8>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8005854:	2002      	movs	r0, #2
 8005856:	f005 f81f 	bl	800a898 <rfalSetErrorHandling>
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 800585a:	f898 3044 	ldrb.w	r3, [r8, #68]	; 0x44
 800585e:	2b01      	cmp	r3, #1
 8005860:	d07a      	beq.n	8005958 <rfalIsoDepPollBHandleActivation+0x19c>
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 8005862:	7af0      	ldrb	r0, [r6, #11]
 8005864:	f3c0 0041 	ubfx	r0, r0, #1, #2
 8005868:	f003 f870 	bl	800894c <rfalNfcbTR2ToFDT>
 800586c:	f005 f81a 	bl	800a8a4 <rfalSetFDTPoll>
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 8005870:	7ab1      	ldrb	r1, [r6, #10]
 8005872:	4650      	mov	r0, sl
 8005874:	f104 0349 	add.w	r3, r4, #73	; 0x49
 8005878:	f104 0248 	add.w	r2, r4, #72	; 0x48
 800587c:	f7fe ff90 	bl	80047a0 <rfalIsoDepCalcBitRate>
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8005880:	7b33      	ldrb	r3, [r6, #12]
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 8005882:	f898 1044 	ldrb.w	r1, [r8, #68]	; 0x44
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8005886:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800588a:	f013 0f08 	tst.w	r3, #8
 800588e:	bf08      	it	eq
 8005890:	f04f 0900 	moveq.w	r9, #0
 8005894:	2901      	cmp	r1, #1
 8005896:	bf18      	it	ne
 8005898:	7af1      	ldrbne	r1, [r6, #11]
 800589a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800589e:	f8cd b010 	str.w	fp, [sp, #16]
 80058a2:	bf18      	it	ne
 80058a4:	f001 0107 	andne.w	r1, r1, #7
 80058a8:	9101      	str	r1, [sp, #4]
 80058aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80058ac:	9406      	str	r4, [sp, #24]
 80058ae:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80058b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058b4:	9100      	str	r1, [sp, #0]
 80058b6:	1cb0      	adds	r0, r6, #2
 80058b8:	e9d4 650c 	ldrd	r6, r5, [r4, #48]	; 0x30
 80058bc:	442e      	add	r6, r5
 80058be:	9605      	str	r6, [sp, #20]
 80058c0:	f104 0621 	add.w	r6, r4, #33	; 0x21
 80058c4:	9607      	str	r6, [sp, #28]
 80058c6:	4649      	mov	r1, r9
 80058c8:	f7ff fda2 	bl	8005410 <rfalIsoDepATTRIB>
    if( ret == ERR_NONE )
 80058cc:	4606      	mov	r6, r0
 80058ce:	b1e0      	cbz	r0, 800590a <rfalIsoDepPollBHandleActivation+0x14e>
        isoDepDev->info.DSI = RFAL_BR_106;
 80058d0:	2300      	movs	r3, #0
 80058d2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 80058d6:	f898 3044 	ldrb.w	r3, [r8, #68]	; 0x44
    gIsoDep.fsx    = isoDepDev->info.FSx;
 80058da:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 80058de:	9d09      	ldr	r5, [sp, #36]	; 0x24
    gIsoDep.fsx    = isoDepDev->info.FSx;
 80058e0:	f8a8 2010 	strh.w	r2, [r8, #16]
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d03c      	beq.n	8005962 <rfalIsoDepPollBHandleActivation+0x1a6>
 80058e8:	2d08      	cmp	r5, #8
 80058ea:	bf28      	it	cs
 80058ec:	2508      	movcs	r5, #8
    switch( fsi )
 80058ee:	3d01      	subs	r5, #1
 80058f0:	b2ed      	uxtb	r5, r5
 80058f2:	2d0b      	cmp	r5, #11
 80058f4:	bf9a      	itte	ls
 80058f6:	4b22      	ldrls	r3, [pc, #136]	; (8005980 <rfalIsoDepPollBHandleActivation+0x1c4>)
 80058f8:	f833 3015 	ldrhls.w	r3, [r3, r5, lsl #1]
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 80058fc:	2310      	movhi	r3, #16
}
 80058fe:	4630      	mov	r0, r6
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8005900:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
}
 8005904:	b00b      	add	sp, #44	; 0x2c
 8005906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( (isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID )
 800590a:	7823      	ldrb	r3, [r4, #0]
 800590c:	f003 020f 	and.w	r2, r3, #15
 8005910:	4297      	cmp	r7, r2
 8005912:	d12a      	bne.n	800596a <rfalIsoDepPollBHandleActivation+0x1ae>
        if( mbli > 0U)
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	d005      	beq.n	8005924 <rfalIsoDepPollBHandleActivation+0x168>
            isoDepDev->info.MBL = (isoDepDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 8005918:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800591c:	3b01      	subs	r3, #1
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	6463      	str	r3, [r4, #68]	; 0x44
        rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 8005924:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8005928:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800592c:	f004 ff84 	bl	800a838 <rfalSetBitRate>
        isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 8005930:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8005932:	f7fb fdb9 	bl	80014a8 <timerCalculateTimer>
 8005936:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
 800593a:	e7cc      	b.n	80058d6 <rfalIsoDepPollBHandleActivation+0x11a>
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 800593c:	f44f 518c 	mov.w	r1, #4480	; 0x1180
    return (rfalConv1fcToMs(sfgt) + 1U);
 8005940:	4810      	ldr	r0, [pc, #64]	; (8005984 <rfalIsoDepPollBHandleActivation+0x1c8>)
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 8005942:	fa01 f303 	lsl.w	r3, r1, r3
    return (rfalConv1fcToMs(sfgt) + 1U);
 8005946:	fba0 1303 	umull	r1, r3, r0, r3
 800594a:	0b1b      	lsrs	r3, r3, #12
 800594c:	3301      	adds	r3, #1
 800594e:	e759      	b.n	8005804 <rfalIsoDepPollBHandleActivation+0x48>
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8005950:	2b0c      	cmp	r3, #12
 8005952:	bf28      	it	cs
 8005954:	230c      	movcs	r3, #12
 8005956:	e764      	b.n	8005822 <rfalIsoDepPollBHandleActivation+0x66>
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 8005958:	f641 207c 	movw	r0, #6780	; 0x1a7c
 800595c:	f004 ffa2 	bl	800a8a4 <rfalSetFDTPoll>
 8005960:	e786      	b.n	8005870 <rfalIsoDepPollBHandleActivation+0xb4>
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8005962:	2d0c      	cmp	r5, #12
 8005964:	bf28      	it	cs
 8005966:	250c      	movcs	r5, #12
 8005968:	e7c1      	b.n	80058ee <rfalIsoDepPollBHandleActivation+0x132>
            return ERR_PROTO;
 800596a:	260b      	movs	r6, #11
}
 800596c:	4630      	mov	r0, r6
 800596e:	b00b      	add	sp, #44	; 0x2c
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ERR_PARAM;
 8005974:	2607      	movs	r6, #7
}
 8005976:	4630      	mov	r0, r6
 8005978:	b00b      	add	sp, #44	; 0x2c
 800597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597e:	bf00      	nop
 8005980:	0800c52c 	.word	0x0800c52c
 8005984:	4d542005 	.word	0x4d542005
 8005988:	20000570 	.word	0x20000570

0800598c <rfalNfcPollCollResolution>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollCollResolution( void )
{
 800598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NO_WARNING(err);
    NO_WARNING(devCnt);
    NO_WARNING(i);
    
    /* Check if device limit has been reached */
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 8005990:	4cc2      	ldr	r4, [pc, #776]	; (8005c9c <rfalNfcPollCollResolution+0x310>)
 8005992:	f894 22e8 	ldrb.w	r2, [r4, #744]	; 0x2e8
 8005996:	7ca3      	ldrb	r3, [r4, #18]
{
 8005998:	b09e      	sub	sp, #120	; 0x78
    devCnt = 0;
 800599a:	2000      	movs	r0, #0
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 800599c:	429a      	cmp	r2, r3
    devCnt = 0;
 800599e:	f88d 0007 	strb.w	r0, [sp, #7]
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 80059a2:	f080 8175 	bcs.w	8005c90 <rfalNfcPollCollResolution+0x304>
    
    /*******************************************************************************/
    /* NFC-A Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCA
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 80059a6:	8860      	ldrh	r0, [r4, #2]
 80059a8:	07c1      	lsls	r1, r0, #31
 80059aa:	d503      	bpl.n	80059b4 <rfalNfcPollCollResolution+0x28>
 80059ac:	88a3      	ldrh	r3, [r4, #4]
 80059ae:	07da      	lsls	r2, r3, #31
 80059b0:	f100 8176 	bmi.w	8005ca0 <rfalNfcPollCollResolution+0x314>
    
    /*******************************************************************************/
    /* NFC-B Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 80059b4:	0783      	lsls	r3, r0, #30
 80059b6:	d419      	bmi.n	80059ec <rfalNfcPollCollResolution+0x60>
    
    /*******************************************************************************/
    /* NFC-F Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCF
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 80059b8:	0746      	lsls	r6, r0, #29
 80059ba:	d503      	bpl.n	80059c4 <rfalNfcPollCollResolution+0x38>
 80059bc:	88a3      	ldrh	r3, [r4, #4]
 80059be:	075d      	lsls	r5, r3, #29
 80059c0:	f100 823f 	bmi.w	8005e42 <rfalNfcPollCollResolution+0x4b6>
    
    /*******************************************************************************/
    /* NFC-V Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCV
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 80059c4:	0701      	lsls	r1, r0, #28
 80059c6:	f140 80cb 	bpl.w	8005b60 <rfalNfcPollCollResolution+0x1d4>
 80059ca:	88a3      	ldrh	r3, [r4, #4]
 80059cc:	071a      	lsls	r2, r3, #28
 80059ce:	f140 80c7 	bpl.w	8005b60 <rfalNfcPollCollResolution+0x1d4>
    {
        rfalNfcvListenDevice nfcvDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 80059d2:	f023 0308 	bic.w	r3, r3, #8
 80059d6:	80a3      	strh	r3, [r4, #4]
        
        EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                                /* Initialize RFAL for NFC-V */
 80059d8:	f003 fca2 	bl	8009320 <rfalNfcvPollerInitialize>
 80059dc:	4603      	mov	r3, r0
 80059de:	2800      	cmp	r0, #0
 80059e0:	f000 8301 	beq.w	8005fe6 <rfalNfcPollCollResolution+0x65a>
        return ERR_BUSY;
    }
#endif /* RFAL_FEATURE_ST25TB */
    
    return ERR_NONE;                                                                  /* All technologies have been performed */
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	b01e      	add	sp, #120	; 0x78
 80059e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 80059ec:	88a3      	ldrh	r3, [r4, #4]
 80059ee:	079f      	lsls	r7, r3, #30
 80059f0:	d5e2      	bpl.n	80059b8 <rfalNfcPollCollResolution+0x2c>
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 80059f2:	f023 0302 	bic.w	r3, r3, #2
 80059f6:	80a3      	strh	r3, [r4, #4]
        EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                                /* Initialize RFAL for NFC-B */
 80059f8:	f002 fee8 	bl	80087cc <rfalNfcbPollerInitialize>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d1f0      	bne.n	80059e4 <rfalNfcPollCollResolution+0x58>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8005a02:	f004 ff71 	bl	800a8e8 <rfalFieldOnAndStartGT>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d1eb      	bne.n	80059e4 <rfalNfcPollCollResolution+0x58>
        err = rfalNfcbPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt );
 8005a0c:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
 8005a10:	7ca1      	ldrb	r1, [r4, #18]
 8005a12:	7b20      	ldrb	r0, [r4, #12]
 8005a14:	1ac9      	subs	r1, r1, r3
 8005a16:	aa02      	add	r2, sp, #8
 8005a18:	f10d 0307 	add.w	r3, sp, #7
 8005a1c:	b2c9      	uxtb	r1, r1
 8005a1e:	f002 ff83 	bl	8008928 <rfalNfcbPollerCollisionResolution>
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8005a22:	2800      	cmp	r0, #0
 8005a24:	f040 809a 	bne.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
 8005a28:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8005a2c:	2e00      	cmp	r6, #0
 8005a2e:	f000 8095 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005a32:	f894 72e8 	ldrb.w	r7, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005a36:	ab02      	add	r3, sp, #8
 8005a38:	cb07      	ldmia	r3!, {r0, r1, r2}
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005a3a:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
 8005a3e:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8005a42:	f04f 0c01 	mov.w	ip, #1
                gNfcDev.devCnt++;
 8005a46:	1c7d      	adds	r5, r7, #1
 8005a48:	b2ed      	uxtb	r5, r5
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005a4a:	f8ce 2099 	str.w	r2, [lr, #153]	; 0x99
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8005a4e:	4566      	cmp	r6, ip
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005a50:	881a      	ldrh	r2, [r3, #0]
 8005a52:	789b      	ldrb	r3, [r3, #2]
                gNfcDev.devCnt++;
 8005a54:	f884 52e8 	strb.w	r5, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005a58:	f88e c090 	strb.w	ip, [lr, #144]	; 0x90
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005a5c:	f8ce 0091 	str.w	r0, [lr, #145]	; 0x91
 8005a60:	f8ce 1095 	str.w	r1, [lr, #149]	; 0x95
 8005a64:	f8ae 209d 	strh.w	r2, [lr, #157]	; 0x9d
 8005a68:	f88e 309f 	strb.w	r3, [lr, #159]	; 0x9f
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8005a6c:	d076      	beq.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005a6e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8005a72:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005a76:	f8dd 1017 	ldr.w	r1, [sp, #23]
 8005a7a:	f8c3 1091 	str.w	r1, [r3, #145]	; 0x91
 8005a7e:	f8dd 101b 	ldr.w	r1, [sp, #27]
 8005a82:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
 8005a86:	f8dd 101f 	ldr.w	r1, [sp, #31]
 8005a8a:	f8c3 1099 	str.w	r1, [r3, #153]	; 0x99
                gNfcDev.devCnt++;
 8005a8e:	1cba      	adds	r2, r7, #2
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005a90:	f8bd 1023 	ldrh.w	r1, [sp, #35]	; 0x23
 8005a94:	f8a3 109d 	strh.w	r1, [r3, #157]	; 0x9d
                gNfcDev.devCnt++;
 8005a98:	b2d2      	uxtb	r2, r2
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005a9a:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005a9e:	f883 c090 	strb.w	ip, [r3, #144]	; 0x90
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8005aa2:	2e02      	cmp	r6, #2
                gNfcDev.devCnt++;
 8005aa4:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005aa8:	f883 109f 	strb.w	r1, [r3, #159]	; 0x9f
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8005aac:	d056      	beq.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005aae:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005ab2:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005ab6:	f8dd 1026 	ldr.w	r1, [sp, #38]	; 0x26
 8005aba:	f8c3 1091 	str.w	r1, [r3, #145]	; 0x91
 8005abe:	f8dd 102a 	ldr.w	r1, [sp, #42]	; 0x2a
 8005ac2:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
 8005ac6:	f8dd 102e 	ldr.w	r1, [sp, #46]	; 0x2e
 8005aca:	f8c3 1099 	str.w	r1, [r3, #153]	; 0x99
                gNfcDev.devCnt++;
 8005ace:	1cfa      	adds	r2, r7, #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005ad0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8005ad4:	f8a3 109d 	strh.w	r1, [r3, #157]	; 0x9d
                gNfcDev.devCnt++;
 8005ad8:	b2d2      	uxtb	r2, r2
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005ada:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005ade:	f883 c090 	strb.w	ip, [r3, #144]	; 0x90
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8005ae2:	2e03      	cmp	r6, #3
                gNfcDev.devCnt++;
 8005ae4:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005ae8:	f883 109f 	strb.w	r1, [r3, #159]	; 0x9f
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8005aec:	d036      	beq.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005aee:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005af2:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005af6:	f8dd 2035 	ldr.w	r2, [sp, #53]	; 0x35
 8005afa:	f8dd 1039 	ldr.w	r1, [sp, #57]	; 0x39
 8005afe:	f8c3 2091 	str.w	r2, [r3, #145]	; 0x91
 8005b02:	f8bd 2041 	ldrh.w	r2, [sp, #65]	; 0x41
 8005b06:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d
 8005b0a:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
                gNfcDev.devCnt++;
 8005b0e:	1d3a      	adds	r2, r7, #4
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005b10:	f8dd 103d 	ldr.w	r1, [sp, #61]	; 0x3d
 8005b14:	f8c3 1099 	str.w	r1, [r3, #153]	; 0x99
                gNfcDev.devCnt++;
 8005b18:	b2d2      	uxtb	r2, r2
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005b1a:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005b1e:	f883 c090 	strb.w	ip, [r3, #144]	; 0x90
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8005b22:	2e04      	cmp	r6, #4
                gNfcDev.devCnt++;
 8005b24:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005b28:	f883 109f 	strb.w	r1, [r3, #159]	; 0x9f
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8005b2c:	d016      	beq.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005b2e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005b32:	ad11      	add	r5, sp, #68	; 0x44
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005b34:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005b38:	cd07      	ldmia	r5!, {r0, r1, r2}
 8005b3a:	f8c3 0091 	str.w	r0, [r3, #145]	; 0x91
 8005b3e:	8828      	ldrh	r0, [r5, #0]
 8005b40:	f8a3 009d 	strh.w	r0, [r3, #157]	; 0x9d
                gNfcDev.devCnt++;
 8005b44:	3705      	adds	r7, #5
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005b46:	78a8      	ldrb	r0, [r5, #2]
                gNfcDev.devCnt++;
 8005b48:	f884 72e8 	strb.w	r7, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8005b4c:	f883 c090 	strb.w	ip, [r3, #144]	; 0x90
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8005b50:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
 8005b54:	f8c3 2099 	str.w	r2, [r3, #153]	; 0x99
 8005b58:	f883 009f 	strb.w	r0, [r3, #159]	; 0x9f
        return ERR_BUSY;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e741      	b.n	80059e4 <rfalNfcPollCollResolution+0x58>
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 8005b60:	f010 0320 	ands.w	r3, r0, #32
 8005b64:	f43f af3e 	beq.w	80059e4 <rfalNfcPollCollResolution+0x58>
 8005b68:	88a2      	ldrh	r2, [r4, #4]
 8005b6a:	f012 0320 	ands.w	r3, r2, #32
 8005b6e:	f43f af39 	beq.w	80059e4 <rfalNfcPollCollResolution+0x58>
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 8005b72:	f022 0220 	bic.w	r2, r2, #32
 8005b76:	80a2      	strh	r2, [r4, #4]
        rfalSt25tbPollerInitialize();                                                 /* Initialize RFAL for ST25TB */
 8005b78:	f005 fd50 	bl	800b61c <rfalSt25tbPollerInitialize>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8005b7c:	f004 feb4 	bl	800a8e8 <rfalFieldOnAndStartGT>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2800      	cmp	r0, #0
 8005b84:	f47f af2e 	bne.w	80059e4 <rfalNfcPollCollResolution+0x58>
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 8005b88:	7ca0      	ldrb	r0, [r4, #18]
 8005b8a:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
 8005b8e:	1ac0      	subs	r0, r0, r3
 8005b90:	f10d 0207 	add.w	r2, sp, #7
 8005b94:	a902      	add	r1, sp, #8
 8005b96:	b2c0      	uxtb	r0, r0
 8005b98:	f005 fd6e 	bl	800b678 <rfalSt25tbPollerCollisionResolution>
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d1dd      	bne.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
 8005ba0:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8005ba4:	2d00      	cmp	r5, #0
 8005ba6:	d0d9      	beq.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005ba8:	f894 62e8 	ldrb.w	r6, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005bac:	ab02      	add	r3, sp, #8
 8005bae:	cb03      	ldmia	r3!, {r0, r1}
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005bb0:	ebc6 1c06 	rsb	ip, r6, r6, lsl #4
 8005bb4:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
                gNfcDev.devCnt++;
 8005bb8:	1c72      	adds	r2, r6, #1
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	f8cc 0091 	str.w	r0, [ip, #145]	; 0x91
                gNfcDev.devCnt++;
 8005bc0:	b2d2      	uxtb	r2, r2
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005bc2:	2704      	movs	r7, #4
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005bc4:	2d01      	cmp	r5, #1
                gNfcDev.devCnt++;
 8005bc6:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005bca:	f88c 7090 	strb.w	r7, [ip, #144]	; 0x90
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005bce:	f8cc 1095 	str.w	r1, [ip, #149]	; 0x95
 8005bd2:	f8ac 3099 	strh.w	r3, [ip, #153]	; 0x99
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005bd6:	d0c1      	beq.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005bd8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005bdc:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005be0:	f8dd 1012 	ldr.w	r1, [sp, #18]
 8005be4:	f8c3 1091 	str.w	r1, [r3, #145]	; 0x91
                gNfcDev.devCnt++;
 8005be8:	1cb2      	adds	r2, r6, #2
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005bea:	f8dd 1016 	ldr.w	r1, [sp, #22]
 8005bee:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
                gNfcDev.devCnt++;
 8005bf2:	b2d2      	uxtb	r2, r2
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005bf4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005bf8:	f883 7090 	strb.w	r7, [r3, #144]	; 0x90
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005bfc:	2d02      	cmp	r5, #2
                gNfcDev.devCnt++;
 8005bfe:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c02:	f8a3 1099 	strh.w	r1, [r3, #153]	; 0x99
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005c06:	d0a9      	beq.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c08:	f10d 0c1c 	add.w	ip, sp, #28
 8005c0c:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005c10:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005c14:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
                gNfcDev.devCnt++;
 8005c18:	1cf2      	adds	r2, r6, #3
 8005c1a:	b2d2      	uxtb	r2, r2
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c1c:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005c20:	2d03      	cmp	r5, #3
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c22:	f8bc 1000 	ldrh.w	r1, [ip]
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005c26:	f883 7090 	strb.w	r7, [r3, #144]	; 0x90
                gNfcDev.devCnt++;
 8005c2a:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c2e:	f8c3 0091 	str.w	r0, [r3, #145]	; 0x91
 8005c32:	f8a3 1099 	strh.w	r1, [r3, #153]	; 0x99
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005c36:	d091      	beq.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005c38:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005c3c:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c40:	f8dd 1026 	ldr.w	r1, [sp, #38]	; 0x26
 8005c44:	f8c3 1091 	str.w	r1, [r3, #145]	; 0x91
                gNfcDev.devCnt++;
 8005c48:	19f2      	adds	r2, r6, r7
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c4a:	f8dd 102a 	ldr.w	r1, [sp, #42]	; 0x2a
 8005c4e:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
                gNfcDev.devCnt++;
 8005c52:	b2d2      	uxtb	r2, r2
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c54:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005c58:	f883 7090 	strb.w	r7, [r3, #144]	; 0x90
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005c5c:	42bd      	cmp	r5, r7
                gNfcDev.devCnt++;
 8005c5e:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c62:	f8a3 1099 	strh.w	r1, [r3, #153]	; 0x99
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005c66:	f43f af79 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c6a:	ad0c      	add	r5, sp, #48	; 0x30
 8005c6c:	cd03      	ldmia	r5!, {r0, r1}
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005c6e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005c72:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
                gNfcDev.devCnt++;
 8005c76:	3605      	adds	r6, #5
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c78:	882a      	ldrh	r2, [r5, #0]
                gNfcDev.devCnt++;
 8005c7a:	f884 62e8 	strb.w	r6, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8005c7e:	f883 7090 	strb.w	r7, [r3, #144]	; 0x90
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8005c82:	f8c3 0091 	str.w	r0, [r3, #145]	; 0x91
 8005c86:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
 8005c8a:	f8a3 2099 	strh.w	r2, [r3, #153]	; 0x99
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005c8e:	e765      	b.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
        return ERR_NONE;
 8005c90:	4603      	mov	r3, r0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	b01e      	add	sp, #120	; 0x78
 8005c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200005f8 	.word	0x200005f8
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 8005ca0:	f023 0301 	bic.w	r3, r3, #1
 8005ca4:	80a3      	strh	r3, [r4, #4]
        EXIT_ON_ERR( err, rfalNfcaPollerInitialize());                                /* Initialize RFAL for NFC-A */
 8005ca6:	f002 f855 	bl	8007d54 <rfalNfcaPollerInitialize>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2800      	cmp	r0, #0
 8005cae:	f47f ae99 	bne.w	80059e4 <rfalNfcPollCollResolution+0x58>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8005cb2:	f004 fe19 	bl	800a8e8 <rfalFieldOnAndStartGT>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f47f ae93 	bne.w	80059e4 <rfalNfcPollCollResolution+0x58>
        err = rfalNfcaPollerFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt );
 8005cbe:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
 8005cc2:	7ca1      	ldrb	r1, [r4, #18]
 8005cc4:	7b20      	ldrb	r0, [r4, #12]
 8005cc6:	1ac9      	subs	r1, r1, r3
 8005cc8:	aa02      	add	r2, sp, #8
 8005cca:	f10d 0307 	add.w	r3, sp, #7
 8005cce:	b2c9      	uxtb	r1, r1
 8005cd0:	f002 fa72 	bl	80081b8 <rfalNfcaPollerFullCollisionResolution>
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8005cd4:	4684      	mov	ip, r0
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	f47f af40 	bne.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
 8005cdc:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8005ce0:	2f00      	cmp	r7, #0
 8005ce2:	f43f af3b 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8005ce6:	f894 82e8 	ldrb.w	r8, [r4, #744]	; 0x2e8
 8005cea:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 8005cee:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005cf2:	f10d 0e08 	add.w	lr, sp, #8
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8005cf6:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005cfa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
                gNfcDev.devCnt++;
 8005cfe:	f108 0501 	add.w	r5, r8, #1
 8005d02:	b2ed      	uxtb	r5, r5
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005d04:	f8c6 0091 	str.w	r0, [r6, #145]	; 0x91
 8005d08:	f8c6 309d 	str.w	r3, [r6, #157]	; 0x9d
 8005d0c:	f8de 0000 	ldr.w	r0, [lr]
 8005d10:	f8be 3004 	ldrh.w	r3, [lr, #4]
                gNfcDev.devCnt++;
 8005d14:	f884 52e8 	strb.w	r5, [r4, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8005d18:	2f01      	cmp	r7, #1
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005d1a:	f8c6 1095 	str.w	r1, [r6, #149]	; 0x95
 8005d1e:	f8c6 2099 	str.w	r2, [r6, #153]	; 0x99
 8005d22:	f8c6 00a1 	str.w	r0, [r6, #161]	; 0xa1
 8005d26:	f8a6 30a5 	strh.w	r3, [r6, #165]	; 0xa5
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8005d2a:	f43f af17 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8005d2e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8005d32:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005d36:	f8dd 201e 	ldr.w	r2, [sp, #30]
 8005d3a:	f8c3 2091 	str.w	r2, [r3, #145]	; 0x91
 8005d3e:	f8dd 2022 	ldr.w	r2, [sp, #34]	; 0x22
 8005d42:	f8c3 2095 	str.w	r2, [r3, #149]	; 0x95
 8005d46:	f8dd 2026 	ldr.w	r2, [sp, #38]	; 0x26
 8005d4a:	f8c3 2099 	str.w	r2, [r3, #153]	; 0x99
 8005d4e:	f8dd 202a 	ldr.w	r2, [sp, #42]	; 0x2a
 8005d52:	f8c3 209d 	str.w	r2, [r3, #157]	; 0x9d
                gNfcDev.devCnt++;
 8005d56:	f108 0502 	add.w	r5, r8, #2
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005d5a:	f8dd 202e 	ldr.w	r2, [sp, #46]	; 0x2e
 8005d5e:	f8c3 20a1 	str.w	r2, [r3, #161]	; 0xa1
                gNfcDev.devCnt++;
 8005d62:	b2ed      	uxtb	r5, r5
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005d64:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8005d68:	f883 c090 	strb.w	ip, [r3, #144]	; 0x90
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8005d6c:	2f02      	cmp	r7, #2
                gNfcDev.devCnt++;
 8005d6e:	f884 52e8 	strb.w	r5, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005d72:	f8a3 20a5 	strh.w	r2, [r3, #165]	; 0xa5
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8005d76:	f43f aef1 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8005d7a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8005d7e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
                gNfcDev.devCnt++;
 8005d82:	f108 0603 	add.w	r6, r8, #3
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8005d86:	f885 c090 	strb.w	ip, [r5, #144]	; 0x90
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005d8a:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 8005d8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
                gNfcDev.devCnt++;
 8005d92:	b2f6      	uxtb	r6, r6
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005d94:	f8c5 0091 	str.w	r0, [r5, #145]	; 0x91
 8005d98:	f8c5 309d 	str.w	r3, [r5, #157]	; 0x9d
 8005d9c:	f8dc 0000 	ldr.w	r0, [ip]
 8005da0:	f8bc 3004 	ldrh.w	r3, [ip, #4]
                gNfcDev.devCnt++;
 8005da4:	f884 62e8 	strb.w	r6, [r4, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8005da8:	2f03      	cmp	r7, #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005daa:	f8c5 1095 	str.w	r1, [r5, #149]	; 0x95
 8005dae:	f8c5 2099 	str.w	r2, [r5, #153]	; 0x99
 8005db2:	f8c5 00a1 	str.w	r0, [r5, #161]	; 0xa1
 8005db6:	f8a5 30a5 	strh.w	r3, [r5, #165]	; 0xa5
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8005dba:	f43f aecf 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8005dbe:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8005dc2:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005dc6:	f8dd 204a 	ldr.w	r2, [sp, #74]	; 0x4a
 8005dca:	f8c3 2091 	str.w	r2, [r3, #145]	; 0x91
 8005dce:	f8dd 204e 	ldr.w	r2, [sp, #78]	; 0x4e
 8005dd2:	f8c3 2095 	str.w	r2, [r3, #149]	; 0x95
 8005dd6:	f8dd 2052 	ldr.w	r2, [sp, #82]	; 0x52
 8005dda:	f8c3 2099 	str.w	r2, [r3, #153]	; 0x99
 8005dde:	f8dd 2056 	ldr.w	r2, [sp, #86]	; 0x56
 8005de2:	f8c3 209d 	str.w	r2, [r3, #157]	; 0x9d
                gNfcDev.devCnt++;
 8005de6:	f108 0504 	add.w	r5, r8, #4
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005dea:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
 8005dee:	f8c3 20a1 	str.w	r2, [r3, #161]	; 0xa1
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8005df2:	2100      	movs	r1, #0
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005df4:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8005df8:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
                gNfcDev.devCnt++;
 8005dfc:	b2ed      	uxtb	r5, r5
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8005dfe:	2f04      	cmp	r7, #4
                gNfcDev.devCnt++;
 8005e00:	f884 52e8 	strb.w	r5, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005e04:	f8a3 20a5 	strh.w	r2, [r3, #165]	; 0xa5
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8005e08:	f43f aea8 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8005e0c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8005e10:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005e14:	ae18      	add	r6, sp, #96	; 0x60
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8005e16:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005e1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
                gNfcDev.devCnt++;
 8005e1c:	f108 0805 	add.w	r8, r8, #5
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005e20:	f8c5 0091 	str.w	r0, [r5, #145]	; 0x91
 8005e24:	f8c5 1095 	str.w	r1, [r5, #149]	; 0x95
 8005e28:	6830      	ldr	r0, [r6, #0]
 8005e2a:	88b1      	ldrh	r1, [r6, #4]
                gNfcDev.devCnt++;
 8005e2c:	f884 82e8 	strb.w	r8, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8005e30:	f8c5 2099 	str.w	r2, [r5, #153]	; 0x99
 8005e34:	f8c5 309d 	str.w	r3, [r5, #157]	; 0x9d
 8005e38:	f8c5 00a1 	str.w	r0, [r5, #161]	; 0xa1
 8005e3c:	f8a5 10a5 	strh.w	r1, [r5, #165]	; 0xa5
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8005e40:	e68c      	b.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8005e42:	f023 0304 	bic.w	r3, r3, #4
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));           /* Initialize RFAL for NFC-F */
 8005e46:	7ce0      	ldrb	r0, [r4, #19]
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8005e48:	80a3      	strh	r3, [r4, #4]
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));           /* Initialize RFAL for NFC-F */
 8005e4a:	f002 fe2d 	bl	8008aa8 <rfalNfcfPollerInitialize>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2800      	cmp	r0, #0
 8005e52:	f47f adc7 	bne.w	80059e4 <rfalNfcPollCollResolution+0x58>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8005e56:	f004 fd47 	bl	800a8e8 <rfalFieldOnAndStartGT>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	f47f adc1 	bne.w	80059e4 <rfalNfcPollCollResolution+0x58>
        err = rfalNfcfPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt );
 8005e62:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
 8005e66:	7ca1      	ldrb	r1, [r4, #18]
 8005e68:	7b20      	ldrb	r0, [r4, #12]
 8005e6a:	1ac9      	subs	r1, r1, r3
 8005e6c:	aa02      	add	r2, sp, #8
 8005e6e:	f10d 0307 	add.w	r3, sp, #7
 8005e72:	b2c9      	uxtb	r1, r1
 8005e74:	f002 fe50 	bl	8008b18 <rfalNfcfPollerCollisionResolution>
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	f47f ae6f 	bne.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
 8005e7e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8005e82:	2f00      	cmp	r7, #0
 8005e84:	f43f ae6a 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005e88:	f10d 0c08 	add.w	ip, sp, #8
 8005e8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8005e90:	f894 62e8 	ldrb.w	r6, [r4, #744]	; 0x2e8
 8005e94:	ebc6 1806 	rsb	r8, r6, r6, lsl #4
 8005e98:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
                gNfcDev.devCnt++;
 8005e9c:	1c75      	adds	r5, r6, #1
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005e9e:	f8c8 309d 	str.w	r3, [r8, #157]	; 0x9d
 8005ea2:	f8bc 3000 	ldrh.w	r3, [ip]
 8005ea6:	f8a8 30a1 	strh.w	r3, [r8, #161]	; 0xa1
                gNfcDev.devCnt++;
 8005eaa:	b2ed      	uxtb	r5, r5
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005eac:	f89c 3002 	ldrb.w	r3, [ip, #2]
                gNfcDev.devCnt++;
 8005eb0:	f884 52e8 	strb.w	r5, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8005eb4:	f04f 0e02 	mov.w	lr, #2
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005eb8:	2f01      	cmp	r7, #1
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8005eba:	f888 e090 	strb.w	lr, [r8, #144]	; 0x90
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005ebe:	f8c8 0091 	str.w	r0, [r8, #145]	; 0x91
 8005ec2:	f8c8 1095 	str.w	r1, [r8, #149]	; 0x95
 8005ec6:	f8c8 2099 	str.w	r2, [r8, #153]	; 0x99
 8005eca:	f888 30a3 	strb.w	r3, [r8, #163]	; 0xa3
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005ece:	f43f ae45 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8005ed2:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8005ed6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005eda:	f8dd 101b 	ldr.w	r1, [sp, #27]
 8005ede:	f8c3 1091 	str.w	r1, [r3, #145]	; 0x91
 8005ee2:	f8dd 101f 	ldr.w	r1, [sp, #31]
 8005ee6:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
 8005eea:	f8dd 1023 	ldr.w	r1, [sp, #35]	; 0x23
 8005eee:	f8c3 1099 	str.w	r1, [r3, #153]	; 0x99
 8005ef2:	f8dd 1027 	ldr.w	r1, [sp, #39]	; 0x27
 8005ef6:	f8c3 109d 	str.w	r1, [r3, #157]	; 0x9d
                gNfcDev.devCnt++;
 8005efa:	eb06 020e 	add.w	r2, r6, lr
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005efe:	f8bd 102b 	ldrh.w	r1, [sp, #43]	; 0x2b
 8005f02:	f8a3 10a1 	strh.w	r1, [r3, #161]	; 0xa1
                gNfcDev.devCnt++;
 8005f06:	b2d2      	uxtb	r2, r2
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005f08:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8005f0c:	f883 e090 	strb.w	lr, [r3, #144]	; 0x90
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005f10:	4577      	cmp	r7, lr
                gNfcDev.devCnt++;
 8005f12:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005f16:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005f1a:	f43f ae1f 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8005f1e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005f22:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005f26:	f8dd 102e 	ldr.w	r1, [sp, #46]	; 0x2e
 8005f2a:	f8c3 1091 	str.w	r1, [r3, #145]	; 0x91
 8005f2e:	f8dd 1032 	ldr.w	r1, [sp, #50]	; 0x32
 8005f32:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
 8005f36:	f8dd 1036 	ldr.w	r1, [sp, #54]	; 0x36
 8005f3a:	f8c3 1099 	str.w	r1, [r3, #153]	; 0x99
 8005f3e:	f8dd 103a 	ldr.w	r1, [sp, #58]	; 0x3a
 8005f42:	f8c3 109d 	str.w	r1, [r3, #157]	; 0x9d
                gNfcDev.devCnt++;
 8005f46:	1cf2      	adds	r2, r6, #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005f48:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 8005f4c:	f8a3 10a1 	strh.w	r1, [r3, #161]	; 0xa1
                gNfcDev.devCnt++;
 8005f50:	b2d2      	uxtb	r2, r2
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005f52:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8005f56:	f883 e090 	strb.w	lr, [r3, #144]	; 0x90
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005f5a:	2f03      	cmp	r7, #3
                gNfcDev.devCnt++;
 8005f5c:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005f60:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005f64:	f43f adfa 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8005f68:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005f6c:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005f70:	f8dd 2041 	ldr.w	r2, [sp, #65]	; 0x41
 8005f74:	f8c3 2091 	str.w	r2, [r3, #145]	; 0x91
 8005f78:	f8bd 2051 	ldrh.w	r2, [sp, #81]	; 0x51
 8005f7c:	f8a3 20a1 	strh.w	r2, [r3, #161]	; 0xa1
 8005f80:	f8dd 2045 	ldr.w	r2, [sp, #69]	; 0x45
 8005f84:	f8c3 2095 	str.w	r2, [r3, #149]	; 0x95
 8005f88:	f8dd 2049 	ldr.w	r2, [sp, #73]	; 0x49
 8005f8c:	f8c3 2099 	str.w	r2, [r3, #153]	; 0x99
                gNfcDev.devCnt++;
 8005f90:	1d35      	adds	r5, r6, #4
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005f92:	f8dd 204d 	ldr.w	r2, [sp, #77]	; 0x4d
 8005f96:	f8c3 209d 	str.w	r2, [r3, #157]	; 0x9d
                gNfcDev.devCnt++;
 8005f9a:	b2ed      	uxtb	r5, r5
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005f9c:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8005fa0:	f883 e090 	strb.w	lr, [r3, #144]	; 0x90
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005fa4:	2f04      	cmp	r7, #4
                gNfcDev.devCnt++;
 8005fa6:	f884 52e8 	strb.w	r5, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005faa:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005fae:	f43f add5 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005fb2:	af15      	add	r7, sp, #84	; 0x54
 8005fb4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8005fb6:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8005fba:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
                gNfcDev.devCnt++;
 8005fbe:	3605      	adds	r6, #5
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005fc0:	f8c5 1095 	str.w	r1, [r5, #149]	; 0x95
 8005fc4:	8839      	ldrh	r1, [r7, #0]
 8005fc6:	f8a5 10a1 	strh.w	r1, [r5, #161]	; 0xa1
 8005fca:	78b9      	ldrb	r1, [r7, #2]
                gNfcDev.devCnt++;
 8005fcc:	f884 62e8 	strb.w	r6, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8005fd0:	f885 e090 	strb.w	lr, [r5, #144]	; 0x90
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8005fd4:	f8c5 0091 	str.w	r0, [r5, #145]	; 0x91
 8005fd8:	f8c5 2099 	str.w	r2, [r5, #153]	; 0x99
 8005fdc:	f8c5 309d 	str.w	r3, [r5, #157]	; 0x9d
 8005fe0:	f885 10a3 	strb.w	r1, [r5, #163]	; 0xa3
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8005fe4:	e5ba      	b.n	8005b5c <rfalNfcPollCollResolution+0x1d0>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8005fe6:	f004 fc7f 	bl	800a8e8 <rfalFieldOnAndStartGT>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2800      	cmp	r0, #0
 8005fee:	f47f acf9 	bne.w	80059e4 <rfalNfcPollCollResolution+0x58>
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 8005ff2:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
 8005ff6:	7ca1      	ldrb	r1, [r4, #18]
 8005ff8:	1ac9      	subs	r1, r1, r3
 8005ffa:	b2c9      	uxtb	r1, r1
 8005ffc:	f10d 0307 	add.w	r3, sp, #7
 8006000:	aa02      	add	r2, sp, #8
 8006002:	f003 f9cf 	bl	80093a4 <rfalNfcvPollerCollisionResolution>
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8006006:	2800      	cmp	r0, #0
 8006008:	f47f ada8 	bne.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
 800600c:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8006010:	2e00      	cmp	r6, #0
 8006012:	f43f ada3 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8006016:	ab02      	add	r3, sp, #8
 8006018:	cb07      	ldmia	r3!, {r0, r1, r2}
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 800601a:	f894 72e8 	ldrb.w	r7, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 800601e:	781b      	ldrb	r3, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 8006020:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
 8006024:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
                gNfcDev.devCnt++;
 8006028:	1c7d      	adds	r5, r7, #1
 800602a:	b2ed      	uxtb	r5, r5
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 800602c:	f04f 0c03 	mov.w	ip, #3
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8006030:	2e01      	cmp	r6, #1
                gNfcDev.devCnt++;
 8006032:	f884 52e8 	strb.w	r5, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 8006036:	f88e c090 	strb.w	ip, [lr, #144]	; 0x90
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 800603a:	f8ce 0091 	str.w	r0, [lr, #145]	; 0x91
 800603e:	f8ce 1095 	str.w	r1, [lr, #149]	; 0x95
 8006042:	f8ce 2099 	str.w	r2, [lr, #153]	; 0x99
 8006046:	f88e 309d 	strb.w	r3, [lr, #157]	; 0x9d
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 800604a:	f43f ad87 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 800604e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8006052:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8006056:	f8dd 1015 	ldr.w	r1, [sp, #21]
 800605a:	f8c3 1091 	str.w	r1, [r3, #145]	; 0x91
 800605e:	f8dd 1019 	ldr.w	r1, [sp, #25]
 8006062:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
                gNfcDev.devCnt++;
 8006066:	1cba      	adds	r2, r7, #2
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8006068:	f8dd 101d 	ldr.w	r1, [sp, #29]
 800606c:	f8c3 1099 	str.w	r1, [r3, #153]	; 0x99
                gNfcDev.devCnt++;
 8006070:	b2d2      	uxtb	r2, r2
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8006072:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 8006076:	f883 c090 	strb.w	ip, [r3, #144]	; 0x90
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 800607a:	2e02      	cmp	r6, #2
                gNfcDev.devCnt++;
 800607c:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8006080:	f883 109d 	strb.w	r1, [r3, #157]	; 0x9d
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8006084:	f43f ad6a 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 8006088:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800608c:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8006090:	f8dd 1022 	ldr.w	r1, [sp, #34]	; 0x22
 8006094:	f8c3 1091 	str.w	r1, [r3, #145]	; 0x91
 8006098:	f8dd 1026 	ldr.w	r1, [sp, #38]	; 0x26
 800609c:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
                gNfcDev.devCnt++;
 80060a0:	eb07 020c 	add.w	r2, r7, ip
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80060a4:	f8dd 102a 	ldr.w	r1, [sp, #42]	; 0x2a
 80060a8:	f8c3 1099 	str.w	r1, [r3, #153]	; 0x99
                gNfcDev.devCnt++;
 80060ac:	b2d2      	uxtb	r2, r2
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80060ae:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 80060b2:	f883 c090 	strb.w	ip, [r3, #144]	; 0x90
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80060b6:	4566      	cmp	r6, ip
                gNfcDev.devCnt++;
 80060b8:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80060bc:	f883 109d 	strb.w	r1, [r3, #157]	; 0x9d
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80060c0:	f43f ad4c 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 80060c4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80060c8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80060cc:	f8dd 302f 	ldr.w	r3, [sp, #47]	; 0x2f
 80060d0:	f8c2 3091 	str.w	r3, [r2, #145]	; 0x91
 80060d4:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 80060d8:	f8dd 1033 	ldr.w	r1, [sp, #51]	; 0x33
 80060dc:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
                gNfcDev.devCnt++;
 80060e0:	1d3b      	adds	r3, r7, #4
 80060e2:	b2db      	uxtb	r3, r3
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80060e4:	f8c2 1095 	str.w	r1, [r2, #149]	; 0x95
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80060e8:	2e04      	cmp	r6, #4
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80060ea:	f8dd 1037 	ldr.w	r1, [sp, #55]	; 0x37
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 80060ee:	f882 c090 	strb.w	ip, [r2, #144]	; 0x90
                gNfcDev.devCnt++;
 80060f2:	f884 32e8 	strb.w	r3, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80060f6:	f8c2 1099 	str.w	r1, [r2, #153]	; 0x99
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80060fa:	f43f ad2f 	beq.w	8005b5c <rfalNfcPollCollResolution+0x1d0>
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80060fe:	ad0f      	add	r5, sp, #60	; 0x3c
 8006100:	cd07      	ldmia	r5!, {r0, r1, r2}
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 8006102:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8006106:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
                gNfcDev.devCnt++;
 800610a:	3705      	adds	r7, #5
 800610c:	f884 72e8 	strb.w	r7, [r4, #744]	; 0x2e8
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8006110:	782c      	ldrb	r4, [r5, #0]
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 8006112:	f883 c090 	strb.w	ip, [r3, #144]	; 0x90
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8006116:	f8c3 0091 	str.w	r0, [r3, #145]	; 0x91
 800611a:	f8c3 1095 	str.w	r1, [r3, #149]	; 0x95
 800611e:	f8c3 2099 	str.w	r2, [r3, #153]	; 0x99
 8006122:	f883 409d 	strb.w	r4, [r3, #157]	; 0x9d
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8006126:	e519      	b.n	8005b5c <rfalNfcPollCollResolution+0x1d0>

08006128 <rfalNfcInitialize>:
{
 8006128:	b510      	push	{r4, lr}
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 800612a:	4c05      	ldr	r4, [pc, #20]	; (8006140 <rfalNfcInitialize+0x18>)
 800612c:	2300      	movs	r3, #0
 800612e:	7023      	strb	r3, [r4, #0]
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 8006130:	f7fd ffe6 	bl	8004100 <rfalAnalogConfigInitialize>
    EXIT_ON_ERR( err, rfalInitialize() );      /* Initialize RFAL */
 8006134:	f004 fa48 	bl	800a5c8 <rfalInitialize>
 8006138:	b908      	cbnz	r0, 800613e <rfalNfcInitialize+0x16>
    gNfcDev.state = RFAL_NFC_STATE_IDLE;         /* Go to initialized */
 800613a:	2301      	movs	r3, #1
 800613c:	7023      	strb	r3, [r4, #0]
}
 800613e:	bd10      	pop	{r4, pc}
 8006140:	200005f8 	.word	0x200005f8

08006144 <rfalNfcDiscover>:
{
 8006144:	b510      	push	{r4, lr}
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 8006146:	4c1f      	ldr	r4, [pc, #124]	; (80061c4 <rfalNfcDiscover+0x80>)
 8006148:	7823      	ldrb	r3, [r4, #0]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d130      	bne.n	80061b0 <rfalNfcDiscover+0x6c>
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 800614e:	4601      	mov	r1, r0
 8006150:	b150      	cbz	r0, 8006168 <rfalNfcDiscover+0x24>
 8006152:	7983      	ldrb	r3, [r0, #6]
 8006154:	3b01      	subs	r3, #1
 8006156:	2b04      	cmp	r3, #4
 8006158:	d806      	bhi.n	8006168 <rfalNfcDiscover+0x24>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 800615a:	8843      	ldrh	r3, [r0, #2]
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 800615c:	075a      	lsls	r2, r3, #29
 800615e:	d505      	bpl.n	800616c <rfalNfcDiscover+0x28>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8006160:	79c2      	ldrb	r2, [r0, #7]
 8006162:	3a01      	subs	r2, #1
 8006164:	2a01      	cmp	r2, #1
 8006166:	d901      	bls.n	800616c <rfalNfcDiscover+0x28>
        return ERR_PARAM;
 8006168:	2007      	movs	r0, #7
}
 800616a:	bd10      	pop	{r4, pc}
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 800616c:	06db      	lsls	r3, r3, #27
 800616e:	d421      	bmi.n	80061b4 <rfalNfcDiscover+0x70>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 8006170:	f891 3042 	ldrb.w	r3, [r1, #66]	; 0x42
 8006174:	2b30      	cmp	r3, #48	; 0x30
 8006176:	d8f7      	bhi.n	8006168 <rfalNfcDiscover+0x24>
    gNfcDev.activeDev       = NULL;
 8006178:	2300      	movs	r3, #0
    gNfcDev.discRestart     = true;
 800617a:	f04f 0c01 	mov.w	ip, #1
    gNfcDev.disc            = *disParams;
 800617e:	4812      	ldr	r0, [pc, #72]	; (80061c8 <rfalNfcDiscover+0x84>)
    gNfcDev.activeDev       = NULL;
 8006180:	60a3      	str	r3, [r4, #8]
    gNfcDev.disc            = *disParams;
 8006182:	2284      	movs	r2, #132	; 0x84
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 8006184:	8063      	strh	r3, [r4, #2]
    gNfcDev.devCnt          = 0;
 8006186:	f884 32e8 	strb.w	r3, [r4, #744]	; 0x2e8
    gNfcDev.discRestart     = true;
 800618a:	f884 c2f2 	strb.w	ip, [r4, #754]	; 0x2f2
    gNfcDev.disc            = *disParams;
 800618e:	f005 fc27 	bl	800b9e0 <memcpy>
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 8006192:	89e3      	ldrh	r3, [r4, #14]
 8006194:	0898      	lsrs	r0, r3, #2
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 8006196:	f343 038d 	sbfx	r3, r3, #2, #14
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 800619a:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 800619e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061a2:	4318      	orrs	r0, r3
 80061a4:	f8c4 02f4 	str.w	r0, [r4, #756]	; 0x2f4
    if( gNfcDev.lmMask != 0U )
 80061a8:	b948      	cbnz	r0, 80061be <rfalNfcDiscover+0x7a>
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 80061aa:	2302      	movs	r3, #2
 80061ac:	7023      	strb	r3, [r4, #0]
}
 80061ae:	bd10      	pop	{r4, pc}
        return ERR_WRONG_STATE;
 80061b0:	2021      	movs	r0, #33	; 0x21
}
 80061b2:	bd10      	pop	{r4, pc}
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 80061b4:	f891 3043 	ldrb.w	r3, [r1, #67]	; 0x43
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d9d9      	bls.n	8006170 <rfalNfcDiscover+0x2c>
 80061bc:	e7d4      	b.n	8006168 <rfalNfcDiscover+0x24>
        return ERR_NOTSUPP;
 80061be:	2018      	movs	r0, #24
}
 80061c0:	bd10      	pop	{r4, pc}
 80061c2:	bf00      	nop
 80061c4:	200005f8 	.word	0x200005f8
 80061c8:	20000604 	.word	0x20000604

080061cc <rfalNfcDeactivate>:
{
 80061cc:	b510      	push	{r4, lr}
    if( gNfcDev.state <= RFAL_NFC_STATE_IDLE )
 80061ce:	4c14      	ldr	r4, [pc, #80]	; (8006220 <rfalNfcDeactivate+0x54>)
 80061d0:	7823      	ldrb	r3, [r4, #0]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d922      	bls.n	800621c <rfalNfcDeactivate+0x50>
    if( discovery == true )
 80061d6:	b130      	cbz	r0, 80061e6 <rfalNfcDeactivate+0x1a>
        gNfcDev.discRestart = discovery;
 80061d8:	2201      	movs	r2, #1
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 80061da:	2322      	movs	r3, #34	; 0x22
        gNfcDev.discRestart = discovery;
 80061dc:	f884 22f2 	strb.w	r2, [r4, #754]	; 0x2f2
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 80061e0:	7023      	strb	r3, [r4, #0]
    return ERR_NONE;
 80061e2:	2000      	movs	r0, #0
}
 80061e4:	bd10      	pop	{r4, pc}
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 80061e6:	68a3      	ldr	r3, [r4, #8]
 80061e8:	b15b      	cbz	r3, 8006202 <rfalNfcDeactivate+0x36>
    {
        switch( gNfcDev.activeDev->rfInterface )
 80061ea:	7f5b      	ldrb	r3, [r3, #29]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d012      	beq.n	8006216 <rfalNfcDeactivate+0x4a>
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d004      	beq.n	80061fe <rfalNfcDeactivate+0x32>
 80061f4:	b12b      	cbz	r3, 8006202 <rfalNfcDeactivate+0x36>
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 80061f6:	2301      	movs	r3, #1
 80061f8:	7023      	strb	r3, [r4, #0]
    return ERR_NONE;
 80061fa:	2000      	movs	r0, #0
}
 80061fc:	bd10      	pop	{r4, pc}
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                rfalNfcDepRLS();                                                      /* Send a Release to device */
 80061fe:	f000 ff57 	bl	80070b0 <rfalNfcDepRLS>
                return ERR_REQUEST;
        }
    }
    
    #if RFAL_FEATURE_WAKEUP_MODE
        rfalWakeUpModeStop();
 8006202:	f005 f9df 	bl	800b5c4 <rfalWakeUpModeStop>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
    
    #if RFAL_FEATURE_LISTEN_MODE
        rfalListenStop();
    #else
        rfalFieldOff();
 8006206:	f004 fbb3 	bl	800a970 <rfalFieldOff>
    #endif
    
    gNfcDev.activeDev = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	60a3      	str	r3, [r4, #8]
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 800620e:	2301      	movs	r3, #1
 8006210:	7023      	strb	r3, [r4, #0]
    return ERR_NONE;
 8006212:	2000      	movs	r0, #0
 8006214:	e7f2      	b.n	80061fc <rfalNfcDeactivate+0x30>
                rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 8006216:	f7fe ffb1 	bl	800517c <rfalIsoDepDeselect>
                break;
 800621a:	e7f2      	b.n	8006202 <rfalNfcDeactivate+0x36>
        return ERR_WRONG_STATE;
 800621c:	2021      	movs	r0, #33	; 0x21
}
 800621e:	bd10      	pop	{r4, pc}
 8006220:	200005f8 	.word	0x200005f8

08006224 <rfalNfcSelect>:
    if( gNfcDev.state != RFAL_NFC_STATE_POLL_SELECT )
 8006224:	4b05      	ldr	r3, [pc, #20]	; (800623c <rfalNfcSelect+0x18>)
 8006226:	781a      	ldrb	r2, [r3, #0]
 8006228:	2a0c      	cmp	r2, #12
 800622a:	d104      	bne.n	8006236 <rfalNfcSelect+0x12>
    gNfcDev.state     = RFAL_NFC_STATE_POLL_ACTIVATION;
 800622c:	220d      	movs	r2, #13
    gNfcDev.selDevIdx = devIdx;
 800622e:	71d8      	strb	r0, [r3, #7]
    gNfcDev.state     = RFAL_NFC_STATE_POLL_ACTIVATION;
 8006230:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 8006232:	2000      	movs	r0, #0
 8006234:	4770      	bx	lr
        return ERR_WRONG_STATE;
 8006236:	2021      	movs	r0, #33	; 0x21
}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	200005f8 	.word	0x200005f8

08006240 <rfalNfcGetState>:
    return gNfcDev.state;
 8006240:	4b01      	ldr	r3, [pc, #4]	; (8006248 <rfalNfcGetState+0x8>)
}
 8006242:	7818      	ldrb	r0, [r3, #0]
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	200005f8 	.word	0x200005f8

0800624c <rfalNfcGetDevicesFound>:
    if( gNfcDev.state < RFAL_NFC_STATE_POLL_SELECT )
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <rfalNfcGetDevicesFound+0x28>)
 800624e:	f893 c000 	ldrb.w	ip, [r3]
 8006252:	f1bc 0f0b 	cmp.w	ip, #11
{
 8006256:	4602      	mov	r2, r0
    if( gNfcDev.state < RFAL_NFC_STATE_POLL_SELECT )
 8006258:	d908      	bls.n	800626c <rfalNfcGetDevicesFound+0x20>
    if( (devList == NULL) || (devCnt == NULL) )
 800625a:	b148      	cbz	r0, 8006270 <rfalNfcGetDevicesFound+0x24>
 800625c:	b141      	cbz	r1, 8006270 <rfalNfcGetDevicesFound+0x24>
    *devCnt  = gNfcDev.devCnt;
 800625e:	f893 02e8 	ldrb.w	r0, [r3, #744]	; 0x2e8
 8006262:	7008      	strb	r0, [r1, #0]
    *devList = gNfcDev.devList;
 8006264:	3390      	adds	r3, #144	; 0x90
    return ERR_NONE;
 8006266:	2000      	movs	r0, #0
    *devList = gNfcDev.devList;
 8006268:	6013      	str	r3, [r2, #0]
    return ERR_NONE;
 800626a:	4770      	bx	lr
        return ERR_WRONG_STATE;
 800626c:	2021      	movs	r0, #33	; 0x21
 800626e:	4770      	bx	lr
        return ERR_PARAM;
 8006270:	2007      	movs	r0, #7
}
 8006272:	4770      	bx	lr
 8006274:	200005f8 	.word	0x200005f8

08006278 <rfalNfcGetActiveDevice>:
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 8006278:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <rfalNfcGetActiveDevice+0x28>)
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	2a1d      	cmp	r2, #29
 800627e:	d90a      	bls.n	8006296 <rfalNfcGetActiveDevice+0x1e>
    if( dev == NULL )
 8006280:	b158      	cbz	r0, 800629a <rfalNfcGetActiveDevice+0x22>
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 8006282:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
 8006286:	b122      	cbz	r2, 8006292 <rfalNfcGetActiveDevice+0x1a>
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	b113      	cbz	r3, 8006292 <rfalNfcGetActiveDevice+0x1a>
    *dev = gNfcDev.activeDev;
 800628c:	6003      	str	r3, [r0, #0]
    return ERR_NONE;
 800628e:	2000      	movs	r0, #0
 8006290:	4770      	bx	lr
        return ERR_REQUEST;
 8006292:	2005      	movs	r0, #5
}
 8006294:	4770      	bx	lr
        return ERR_WRONG_STATE;
 8006296:	2021      	movs	r0, #33	; 0x21
 8006298:	4770      	bx	lr
        return ERR_PARAM;
 800629a:	2007      	movs	r0, #7
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	200005f8 	.word	0x200005f8

080062a4 <rfalNfcDataExchangeStart>:
{
 80062a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 80062a6:	4c5e      	ldr	r4, [pc, #376]	; (8006420 <rfalNfcDataExchangeStart+0x17c>)
 80062a8:	f894 c000 	ldrb.w	ip, [r4]
 80062ac:	f1bc 0f1d 	cmp.w	ip, #29
{
 80062b0:	b093      	sub	sp, #76	; 0x4c
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 80062b2:	d90f      	bls.n	80062d4 <rfalNfcDataExchangeStart+0x30>
 80062b4:	68a5      	ldr	r5, [r4, #8]
 80062b6:	b16d      	cbz	r5, 80062d4 <rfalNfcDataExchangeStart+0x30>
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 80062b8:	f1bc 0f1e 	cmp.w	ip, #30
 80062bc:	460f      	mov	r7, r1
 80062be:	4616      	mov	r6, r2
 80062c0:	d00b      	beq.n	80062da <rfalNfcDataExchangeStart+0x36>
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 80062c2:	7f6a      	ldrb	r2, [r5, #29]
 80062c4:	2a01      	cmp	r2, #1
 80062c6:	d06a      	beq.n	800639e <rfalNfcDataExchangeStart+0xfa>
 80062c8:	2a02      	cmp	r2, #2
 80062ca:	d03c      	beq.n	8006346 <rfalNfcDataExchangeStart+0xa2>
 80062cc:	b1ea      	cbz	r2, 800630a <rfalNfcDataExchangeStart+0x66>
 80062ce:	2007      	movs	r0, #7
}
 80062d0:	b013      	add	sp, #76	; 0x4c
 80062d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_WRONG_STATE;
 80062d4:	2021      	movs	r0, #33	; 0x21
}
 80062d6:	b013      	add	sp, #76	; 0x4c
 80062d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 80062da:	782a      	ldrb	r2, [r5, #0]
 80062dc:	3a0a      	subs	r2, #10
 80062de:	2a05      	cmp	r2, #5
 80062e0:	d8ef      	bhi.n	80062c2 <rfalNfcDataExchangeStart+0x1e>
            if( txDataLen > 0U )
 80062e2:	2900      	cmp	r1, #0
 80062e4:	d1f6      	bne.n	80062d4 <rfalNfcDataExchangeStart+0x30>
            *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 80062e6:	f204 42fe 	addw	r2, r4, #1278	; 0x4fe
 80062ea:	601a      	str	r2, [r3, #0]
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 80062ec:	7f6a      	ldrb	r2, [r5, #29]
 80062ee:	2a01      	cmp	r2, #1
 80062f0:	f000 8082 	beq.w	80063f8 <rfalNfcDataExchangeStart+0x154>
                                  ((gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_NFCDEP) ? gNfcDev.rxBuf.nfcDepBuf.inf : gNfcDev.rxBuf.rfBuf) );
 80062f4:	f504 6380 	add.w	r3, r4, #1024	; 0x400
 80062f8:	f204 34fb 	addw	r4, r4, #1019	; 0x3fb
 80062fc:	2a02      	cmp	r2, #2
 80062fe:	bf08      	it	eq
 8006300:	461c      	moveq	r4, r3
            return ERR_NONE;
 8006302:	2000      	movs	r0, #0
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 8006304:	6034      	str	r4, [r6, #0]
}
 8006306:	b013      	add	sp, #76	; 0x4c
 8006308:	bdf0      	pop	{r4, r5, r6, r7, pc}
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800630a:	920e      	str	r2, [sp, #56]	; 0x38
 800630c:	4a45      	ldr	r2, [pc, #276]	; (8006424 <rfalNfcDataExchangeStart+0x180>)
                *rxData = (uint8_t*)gNfcDev.rxBuf.rfBuf;
 800630e:	6032      	str	r2, [r6, #0]
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8006310:	920b      	str	r2, [sp, #44]	; 0x2c
 8006312:	f202 1203 	addw	r2, r2, #259	; 0x103
                *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 8006316:	601a      	str	r2, [r3, #0]
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8006318:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800631a:	9009      	str	r0, [sp, #36]	; 0x24
 800631c:	00f9      	lsls	r1, r7, #3
 800631e:	930f      	str	r3, [sp, #60]	; 0x3c
                err = rfalStartTransceive( &ctx );
 8006320:	a809      	add	r0, sp, #36	; 0x24
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8006322:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8006326:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 800632a:	920d      	str	r2, [sp, #52]	; 0x34
 800632c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                err = rfalStartTransceive( &ctx );
 8006330:	f004 fb3a 	bl	800a9a8 <rfalStartTransceive>
        if( err == ERR_NONE )
 8006334:	2800      	cmp	r0, #0
 8006336:	d1ce      	bne.n	80062d6 <rfalNfcDataExchangeStart+0x32>
            gNfcDev.dataExErr = ERR_BUSY;
 8006338:	2202      	movs	r2, #2
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800633a:	231f      	movs	r3, #31
            gNfcDev.dataExErr = ERR_BUSY;
 800633c:	f8a4 22f0 	strh.w	r2, [r4, #752]	; 0x2f0
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 8006340:	7023      	strb	r3, [r4, #0]
}
 8006342:	b013      	add	sp, #76	; 0x4c
 8006344:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if( txDataLen > 0U)
 8006346:	2f00      	cmp	r7, #0
 8006348:	d161      	bne.n	800640e <rfalNfcDataExchangeStart+0x16a>
                nfcDepTxRx.DID          = RFAL_NFCDEP_DID_KEEP;
 800634a:	22ff      	movs	r2, #255	; 0xff
 800634c:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
                nfcDepTxRx.FSx          = rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) );
 8006350:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
                nfcDepTxRx.dFWT         = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 8006354:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8006356:	910f      	str	r1, [sp, #60]	; 0x3c
                nfcDepTxRx.FSx          = rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) );
 8006358:	f3c2 1201 	ubfx	r2, r2, #4, #2
 800635c:	3201      	adds	r2, #1
 800635e:	0192      	lsls	r2, r2, #6
 8006360:	2afd      	cmp	r2, #253	; 0xfd
 8006362:	bf94      	ite	ls
 8006364:	b292      	uxthls	r2, r2
 8006366:	22fe      	movhi	r2, #254	; 0xfe
                nfcDepTxRx.FWT          = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 8006368:	6ea9      	ldr	r1, [r5, #104]	; 0x68
                nfcDepTxRx.FSx          = rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) );
 800636a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
                nfcDepTxRx.txBuf        = &gNfcDev.txBuf.nfcDepBuf;
 800636e:	4a2e      	ldr	r2, [pc, #184]	; (8006428 <rfalNfcDataExchangeStart+0x184>)
                nfcDepTxRx.FWT          = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 8006370:	910e      	str	r1, [sp, #56]	; 0x38
                nfcDepTxRx.isTxChaining = false;
 8006372:	2100      	movs	r1, #0
 8006374:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
                nfcDepTxRx.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 8006378:	f202 1103 	addw	r1, r2, #259	; 0x103
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.inf;
 800637c:	f502 7084 	add.w	r0, r2, #264	; 0x108
                nfcDepTxRx.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 8006380:	910b      	str	r1, [sp, #44]	; 0x2c
                nfcDepTxRx.rxLen        = &gNfcDev.rxLen;
 8006382:	f202 2106 	addw	r1, r2, #518	; 0x206
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.inf;
 8006386:	6030      	str	r0, [r6, #0]
                nfcDepTxRx.txBuf        = &gNfcDev.txBuf.nfcDepBuf;
 8006388:	9209      	str	r2, [sp, #36]	; 0x24
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 800638a:	6019      	str	r1, [r3, #0]
                nfcDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 800638c:	3a05      	subs	r2, #5
                err = rfalNfcDepStartTransceive( &nfcDepTxRx );                          
 800638e:	a809      	add	r0, sp, #36	; 0x24
                nfcDepTxRx.txBufLen     = txDataLen;
 8006390:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
                nfcDepTxRx.rxLen        = &gNfcDev.rxLen;
 8006394:	910c      	str	r1, [sp, #48]	; 0x30
                nfcDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 8006396:	920d      	str	r2, [sp, #52]	; 0x34
                err = rfalNfcDepStartTransceive( &nfcDepTxRx );                          
 8006398:	f000 ff8e 	bl	80072b8 <rfalNfcDepStartTransceive>
                break;
 800639c:	e7ca      	b.n	8006334 <rfalNfcDataExchangeStart+0x90>
                if( txDataLen > 0U )
 800639e:	bb77      	cbnz	r7, 80063fe <rfalNfcDataExchangeStart+0x15a>
                isoDepTxRx.DID          = RFAL_ISODEP_NO_DID;
 80063a0:	2100      	movs	r1, #0
 80063a2:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
                isoDepTxRx.FSx          = gNfcDev.activeDev->proto.isoDep.info.FSx;
 80063a6:	f8b5 0062 	ldrh.w	r0, [r5, #98]	; 0x62
                isoDepTxRx.txBuf        = &gNfcDev.txBuf.isoDepBuf;
 80063aa:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <rfalNfcDataExchangeStart+0x184>)
                isoDepTxRx.FSx          = gNfcDev.activeDev->proto.isoDep.info.FSx;
 80063ac:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
                isoDepTxRx.dFWT         = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 80063b0:	6d68      	ldr	r0, [r5, #84]	; 0x54
 80063b2:	900f      	str	r0, [sp, #60]	; 0x3c
                isoDepTxRx.FWT          = gNfcDev.activeDev->proto.isoDep.info.FWT;
 80063b4:	6d28      	ldr	r0, [r5, #80]	; 0x50
                isoDepTxRx.isTxChaining = false;
 80063b6:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
                isoDepTxRx.rxBuf        = &gNfcDev.rxBuf.isoDepBuf;
 80063ba:	f202 1103 	addw	r1, r2, #259	; 0x103
                isoDepTxRx.FWT          = gNfcDev.activeDev->proto.isoDep.info.FWT;
 80063be:	900e      	str	r0, [sp, #56]	; 0x38
                isoDepTxRx.txBuf        = &gNfcDev.txBuf.isoDepBuf;
 80063c0:	9209      	str	r2, [sp, #36]	; 0x24
                isoDepTxRx.rxBuf        = &gNfcDev.rxBuf.isoDepBuf;
 80063c2:	910b      	str	r1, [sp, #44]	; 0x2c
                isoDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 80063c4:	1f50      	subs	r0, r2, #5
                isoDepTxRx.rxLen        = &gNfcDev.rxLen;
 80063c6:	f202 2106 	addw	r1, r2, #518	; 0x206
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.inf;
 80063ca:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80063ce:	6032      	str	r2, [r6, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 80063d0:	6019      	str	r1, [r3, #0]
                isoDepTxRx.ourFSx       = RFAL_ISODEP_FSX_KEEP;
 80063d2:	23ff      	movs	r3, #255	; 0xff
                isoDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 80063d4:	900d      	str	r0, [sp, #52]	; 0x34
                isoDepTxRx.ourFSx       = RFAL_ISODEP_FSX_KEEP;
 80063d6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                err = rfalIsoDepStartTransceive( isoDepTxRx );
 80063da:	ae0d      	add	r6, sp, #52	; 0x34
                isoDepTxRx.rxLen        = &gNfcDev.rxLen;
 80063dc:	910c      	str	r1, [sp, #48]	; 0x30
                err = rfalIsoDepStartTransceive( isoDepTxRx );
 80063de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80063e0:	466d      	mov	r5, sp
                isoDepTxRx.txBufLen     = txDataLen;
 80063e2:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
                err = rfalIsoDepStartTransceive( isoDepTxRx );
 80063e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063e8:	6833      	ldr	r3, [r6, #0]
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	af09      	add	r7, sp, #36	; 0x24
 80063ee:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80063f2:	f7fe ff89 	bl	8005308 <rfalIsoDepStartTransceive>
                break;
 80063f6:	e79d      	b.n	8006334 <rfalNfcDataExchangeStart+0x90>
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 80063f8:	f204 34fe 	addw	r4, r4, #1022	; 0x3fe
 80063fc:	e781      	b.n	8006302 <rfalNfcDataExchangeStart+0x5e>
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.isoDepBuf.inf, txData, txDataLen );
 80063fe:	4601      	mov	r1, r0
 8006400:	463a      	mov	r2, r7
 8006402:	480a      	ldr	r0, [pc, #40]	; (800642c <rfalNfcDataExchangeStart+0x188>)
 8006404:	9307      	str	r3, [sp, #28]
 8006406:	f005 faeb 	bl	800b9e0 <memcpy>
 800640a:	9b07      	ldr	r3, [sp, #28]
 800640c:	e7c8      	b.n	80063a0 <rfalNfcDataExchangeStart+0xfc>
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.nfcDepBuf.inf, txData, txDataLen );
 800640e:	4601      	mov	r1, r0
 8006410:	463a      	mov	r2, r7
 8006412:	4807      	ldr	r0, [pc, #28]	; (8006430 <rfalNfcDataExchangeStart+0x18c>)
 8006414:	9307      	str	r3, [sp, #28]
 8006416:	f005 fae3 	bl	800b9e0 <memcpy>
 800641a:	9b07      	ldr	r3, [sp, #28]
 800641c:	e795      	b.n	800634a <rfalNfcDataExchangeStart+0xa6>
 800641e:	bf00      	nop
 8006420:	200005f8 	.word	0x200005f8
 8006424:	200009f3 	.word	0x200009f3
 8006428:	200008f0 	.word	0x200008f0
 800642c:	200008f3 	.word	0x200008f3
 8006430:	200008f5 	.word	0x200008f5

08006434 <rfalNfcDataExchangeGetStatus>:
{
 8006434:	b510      	push	{r4, lr}
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 8006436:	4c1d      	ldr	r4, [pc, #116]	; (80064ac <rfalNfcDataExchangeGetStatus+0x78>)
 8006438:	7823      	ldrb	r3, [r4, #0]
 800643a:	2b1e      	cmp	r3, #30
 800643c:	d00a      	beq.n	8006454 <rfalNfcDataExchangeGetStatus+0x20>
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 800643e:	2b17      	cmp	r3, #23
 8006440:	d01c      	beq.n	800647c <rfalNfcDataExchangeGetStatus+0x48>
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE)  )
 8006442:	2b1f      	cmp	r3, #31
 8006444:	d001      	beq.n	800644a <rfalNfcDataExchangeGetStatus+0x16>
 8006446:	2b21      	cmp	r3, #33	; 0x21
 8006448:	d11b      	bne.n	8006482 <rfalNfcDataExchangeGetStatus+0x4e>
    if( gNfcDev.dataExErr == ERR_BUSY )
 800644a:	f8b4 02f0 	ldrh.w	r0, [r4, #752]	; 0x2f0
 800644e:	2802      	cmp	r0, #2
 8006450:	d009      	beq.n	8006466 <rfalNfcDataExchangeGetStatus+0x32>
}
 8006452:	bd10      	pop	{r4, pc}
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 8006454:	221f      	movs	r2, #31
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 8006456:	68a3      	ldr	r3, [r4, #8]
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 8006458:	7022      	strb	r2, [r4, #0]
        gNfcDev.dataExErr = ERR_BUSY;
 800645a:	2102      	movs	r1, #2
 800645c:	f8a4 12f0 	strh.w	r1, [r4, #752]	; 0x2f0
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 8006460:	781a      	ldrb	r2, [r3, #0]
 8006462:	2a0c      	cmp	r2, #12
 8006464:	d00f      	beq.n	8006486 <rfalNfcDataExchangeGetStatus+0x52>
        switch( gNfcDev.activeDev->rfInterface )
 8006466:	68a3      	ldr	r3, [r4, #8]
 8006468:	7f5b      	ldrb	r3, [r3, #29]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d019      	beq.n	80064a2 <rfalNfcDataExchangeGetStatus+0x6e>
 800646e:	2b02      	cmp	r3, #2
 8006470:	d014      	beq.n	800649c <rfalNfcDataExchangeGetStatus+0x68>
 8006472:	b173      	cbz	r3, 8006492 <rfalNfcDataExchangeGetStatus+0x5e>
                gNfcDev.dataExErr = ERR_PARAM;
 8006474:	2007      	movs	r0, #7
 8006476:	f8a4 02f0 	strh.w	r0, [r4, #752]	; 0x2f0
}
 800647a:	bd10      	pop	{r4, pc}
        return gNfcDev.dataExErr;                                /* ERR_SLEEP_REQ */
 800647c:	f8b4 02f0 	ldrh.w	r0, [r4, #752]	; 0x2f0
}
 8006480:	bd10      	pop	{r4, pc}
        return ERR_WRONG_STATE;
 8006482:	2021      	movs	r0, #33	; 0x21
}
 8006484:	bd10      	pop	{r4, pc}
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 8006486:	7f58      	ldrb	r0, [r3, #29]
 8006488:	2800      	cmp	r0, #0
 800648a:	d1ec      	bne.n	8006466 <rfalNfcDataExchangeGetStatus+0x32>
                gNfcDev.dataExErr = rfalNfcDepGetTransceiveStatus();
 800648c:	f8a4 02f0 	strh.w	r0, [r4, #752]	; 0x2f0
}
 8006490:	bd10      	pop	{r4, pc}
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 8006492:	f004 fbf9 	bl	800ac88 <rfalGetTransceiveStatus>
 8006496:	f8a4 02f0 	strh.w	r0, [r4, #752]	; 0x2f0
}
 800649a:	bd10      	pop	{r4, pc}
                gNfcDev.dataExErr = rfalNfcDepGetTransceiveStatus();
 800649c:	f000 ff52 	bl	8007344 <rfalNfcDepGetTransceiveStatus>
 80064a0:	e7f4      	b.n	800648c <rfalNfcDataExchangeGetStatus+0x58>
                gNfcDev.dataExErr = rfalIsoDepGetTransceiveStatus();
 80064a2:	f7fe ff7d 	bl	80053a0 <rfalIsoDepGetTransceiveStatus>
 80064a6:	f8a4 02f0 	strh.w	r0, [r4, #752]	; 0x2f0
}
 80064aa:	bd10      	pop	{r4, pc}
 80064ac:	200005f8 	.word	0x200005f8

080064b0 <rfalNfcWorker>:
{
 80064b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    switch( gNfcDev.state )
 80064b4:	4c97      	ldr	r4, [pc, #604]	; (8006714 <rfalNfcWorker+0x264>)
{
 80064b6:	b08d      	sub	sp, #52	; 0x34
    rfalWorker();                                                                     /* Execute RFAL process  */
 80064b8:	f004 fbf0 	bl	800ac9c <rfalWorker>
    switch( gNfcDev.state )
 80064bc:	7825      	ldrb	r5, [r4, #0]
 80064be:	1eab      	subs	r3, r5, #2
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d81b      	bhi.n	80064fc <rfalNfcWorker+0x4c>
 80064c4:	e8df f003 	tbb	[pc, r3]
 80064c8:	1a1a5639 	.word	0x1a1a5639
 80064cc:	1a1a1a1a 	.word	0x1a1a1a1a
 80064d0:	921a1162 	.word	0x921a1162
 80064d4:	1a1a1a1a 	.word	0x1a1a1a1a
 80064d8:	1a871a1a 	.word	0x1a871a1a
 80064dc:	1a1a1a1a 	.word	0x1a1a1a1a
 80064e0:	1a1a1a1a 	.word	0x1a1a1a1a
 80064e4:	1a1aa91a 	.word	0x1a1aa91a
 80064e8:	1d          	.byte	0x1d
 80064e9:	00          	.byte	0x00
            err = rfalNfcPollCollResolution();                                        /* Resolve any eventual collision                       */
 80064ea:	f7ff fa4f 	bl	800598c <rfalNfcPollCollResolution>
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 80064ee:	2802      	cmp	r0, #2
 80064f0:	d004      	beq.n	80064fc <rfalNfcWorker+0x4c>
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 80064f2:	2800      	cmp	r0, #0
 80064f4:	f000 8112 	beq.w	800671c <rfalNfcWorker+0x26c>
                gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;                          /* If Activation failed, restart loop */
 80064f8:	2322      	movs	r3, #34	; 0x22
 80064fa:	7023      	strb	r3, [r4, #0]
}
 80064fc:	b00d      	add	sp, #52	; 0x34
 80064fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gNfcDev.activeDev != NULL )
 8006502:	68a3      	ldr	r3, [r4, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 80fd 	beq.w	8006704 <rfalNfcWorker+0x254>
        switch( gNfcDev.activeDev->rfInterface )
 800650a:	7f5b      	ldrb	r3, [r3, #29]
 800650c:	2b01      	cmp	r3, #1
 800650e:	f000 8253 	beq.w	80069b8 <rfalNfcWorker+0x508>
 8006512:	2b02      	cmp	r3, #2
 8006514:	f000 80f4 	beq.w	8006700 <rfalNfcWorker+0x250>
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80f3 	beq.w	8006704 <rfalNfcWorker+0x254>
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 800651e:	f894 22f2 	ldrb.w	r2, [r4, #754]	; 0x2f2
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 8006522:	6f63      	ldr	r3, [r4, #116]	; 0x74
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 8006524:	2a00      	cmp	r2, #0
 8006526:	bf14      	ite	ne
 8006528:	2002      	movne	r0, #2
 800652a:	2001      	moveq	r0, #1
 800652c:	7020      	strb	r0, [r4, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0e4      	beq.n	80064fc <rfalNfcWorker+0x4c>
}
 8006532:	b00d      	add	sp, #52	; 0x34
 8006534:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 8006538:	4718      	bx	r3
            if( gNfcDev.disc.wakeupEnabled )
 800653a:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
            gNfcDev.techs2do    = gNfcDev.disc.techs2Find;
 800653e:	89e0      	ldrh	r0, [r4, #14]
 8006540:	80a0      	strh	r0, [r4, #4]
            gNfcDev.devCnt      = 0;
 8006542:	2300      	movs	r3, #0
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 8006544:	210a      	movs	r1, #10
            gNfcDev.devCnt      = 0;
 8006546:	f884 32e8 	strb.w	r3, [r4, #744]	; 0x2e8
            gNfcDev.selDevIdx   = 0;
 800654a:	71e3      	strb	r3, [r4, #7]
            gNfcDev.techsFound  = RFAL_NFC_TECH_NONE;
 800654c:	8063      	strh	r3, [r4, #2]
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 800654e:	7021      	strb	r1, [r4, #0]
            if( gNfcDev.disc.wakeupEnabled )
 8006550:	2a00      	cmp	r2, #0
 8006552:	d0d3      	beq.n	80064fc <rfalNfcWorker+0x4c>
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 8006554:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8006558:	486f      	ldr	r0, [pc, #444]	; (8006718 <rfalNfcWorker+0x268>)
 800655a:	2b00      	cmp	r3, #0
 800655c:	bf18      	it	ne
 800655e:	2000      	movne	r0, #0
 8006560:	f004 fef2 	bl	800b348 <rfalWakeUpModeStart>
                if( err == ERR_NONE )
 8006564:	2800      	cmp	r0, #0
 8006566:	d1c9      	bne.n	80064fc <rfalNfcWorker+0x4c>
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 8006568:	6f63      	ldr	r3, [r4, #116]	; 0x74
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 800656a:	2003      	movs	r0, #3
 800656c:	7020      	strb	r0, [r4, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1df      	bne.n	8006532 <rfalNfcWorker+0x82>
 8006572:	e7c3      	b.n	80064fc <rfalNfcWorker+0x4c>
            if( rfalWakeUpModeHasWoke() )
 8006574:	f005 f81c 	bl	800b5b0 <rfalWakeUpModeHasWoke>
 8006578:	2800      	cmp	r0, #0
 800657a:	d0bf      	beq.n	80064fc <rfalNfcWorker+0x4c>
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 800657c:	f005 f822 	bl	800b5c4 <rfalWakeUpModeStop>
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 8006580:	6f63      	ldr	r3, [r4, #116]	; 0x74
                gNfcDev.state = RFAL_NFC_STATE_POLL_TECHDETECT;                       /* Go to Technology detection     */
 8006582:	200a      	movs	r0, #10
 8006584:	7020      	strb	r0, [r4, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1d3      	bne.n	8006532 <rfalNfcWorker+0x82>
 800658a:	e7b7      	b.n	80064fc <rfalNfcWorker+0x4c>
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 800658c:	8a20      	ldrh	r0, [r4, #16]
 800658e:	f7fa ff8b 	bl	80014a8 <timerCalculateTimer>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 8006592:	89e3      	ldrh	r3, [r4, #14]
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 8006594:	f8c4 02ec 	str.w	r0, [r4, #748]	; 0x2ec
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 8006598:	06df      	lsls	r7, r3, #27
 800659a:	d503      	bpl.n	80065a4 <rfalNfcWorker+0xf4>
 800659c:	88a1      	ldrh	r1, [r4, #4]
 800659e:	06ce      	lsls	r6, r1, #27
 80065a0:	f100 80d9 	bmi.w	8006756 <rfalNfcWorker+0x2a6>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 80065a4:	07d8      	lsls	r0, r3, #31
 80065a6:	d550      	bpl.n	800664a <rfalNfcWorker+0x19a>
 80065a8:	88a2      	ldrh	r2, [r4, #4]
 80065aa:	07d1      	lsls	r1, r2, #31
 80065ac:	d54d      	bpl.n	800664a <rfalNfcWorker+0x19a>
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 80065ae:	f022 0201 	bic.w	r2, r2, #1
 80065b2:	80a2      	strh	r2, [r4, #4]
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 80065b4:	f001 fbce 	bl	8007d54 <rfalNfcaPollerInitialize>
 80065b8:	4606      	mov	r6, r0
 80065ba:	b928      	cbnz	r0, 80065c8 <rfalNfcWorker+0x118>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 80065bc:	f004 f994 	bl	800a8e8 <rfalFieldOnAndStartGT>
 80065c0:	4606      	mov	r6, r0
 80065c2:	2800      	cmp	r0, #0
 80065c4:	f000 829f 	beq.w	8006b06 <rfalNfcWorker+0x656>
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 80065c8:	2e02      	cmp	r6, #2
 80065ca:	d097      	beq.n	80064fc <rfalNfcWorker+0x4c>
                    rfalFieldOff();
 80065cc:	f004 f9d0 	bl	800a970 <rfalFieldOff>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_TECHDETECT;                 /* Nothing found as poller, go to listener */
 80065d0:	2314      	movs	r3, #20
 80065d2:	7023      	strb	r3, [r4, #0]
                    break;
 80065d4:	e792      	b.n	80064fc <rfalNfcWorker+0x4c>
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 80065d6:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 80065da:	f7fa ff6b 	bl	80014b4 <timerIsExpired>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d08c      	beq.n	80064fc <rfalNfcWorker+0x4c>
                    rfalFieldOff();
 80065e2:	f004 f9c5 	bl	800a970 <rfalFieldOff>
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 80065e6:	2302      	movs	r3, #2
 80065e8:	7023      	strb	r3, [r4, #0]
                break;
 80065ea:	e787      	b.n	80064fc <rfalNfcWorker+0x4c>
            if( rfalNfcPollActivation( gNfcDev.selDevIdx ) != ERR_NONE )              /* Activate selected device           */
 80065ec:	79e5      	ldrb	r5, [r4, #7]
    if( devIt > gNfcDev.devCnt )
 80065ee:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
 80065f2:	42ab      	cmp	r3, r5
 80065f4:	d380      	bcc.n	80064f8 <rfalNfcWorker+0x48>
    switch( gNfcDev.devList[devIt].type )
 80065f6:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 80065fa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80065fe:	012f      	lsls	r7, r5, #4
 8006600:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006604:	2b05      	cmp	r3, #5
 8006606:	f63f af77 	bhi.w	80064f8 <rfalNfcWorker+0x48>
 800660a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800660e:	0100      	.short	0x0100
 8006610:	015801a6 	.word	0x015801a6
 8006614:	013c014d 	.word	0x013c014d
 8006618:	01c6      	.short	0x01c6
            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 800661a:	f7ff ff0b 	bl	8006434 <rfalNfcDataExchangeGetStatus>
            if( gNfcDev.dataExErr != ERR_BUSY )                                       /* If Dataexchange has terminated */
 800661e:	f8b4 32f0 	ldrh.w	r3, [r4, #752]	; 0x2f0
 8006622:	2b02      	cmp	r3, #2
 8006624:	f43f af6a 	beq.w	80064fc <rfalNfcWorker+0x4c>
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8006628:	6f62      	ldr	r2, [r4, #116]	; 0x74
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 800662a:	2021      	movs	r0, #33	; 0x21
 800662c:	7020      	strb	r0, [r4, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800662e:	b112      	cbz	r2, 8006636 <rfalNfcWorker+0x186>
 8006630:	4790      	blx	r2
            if( gNfcDev.dataExErr == ERR_SLEEP_REQ )                                  /* Check if Listen mode has to go to Sleep */
 8006632:	f8b4 32f0 	ldrh.w	r3, [r4, #752]	; 0x2f0
 8006636:	2b20      	cmp	r3, #32
 8006638:	f47f af60 	bne.w	80064fc <rfalNfcWorker+0x4c>
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800663c:	6f63      	ldr	r3, [r4, #116]	; 0x74
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 800663e:	2017      	movs	r0, #23
 8006640:	7020      	strb	r0, [r4, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8006642:	2b00      	cmp	r3, #0
 8006644:	f47f af75 	bne.w	8006532 <rfalNfcWorker+0x82>
 8006648:	e758      	b.n	80064fc <rfalNfcWorker+0x4c>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 800664a:	079a      	lsls	r2, r3, #30
 800664c:	d51c      	bpl.n	8006688 <rfalNfcWorker+0x1d8>
 800664e:	88a2      	ldrh	r2, [r4, #4]
 8006650:	0797      	lsls	r7, r2, #30
 8006652:	d519      	bpl.n	8006688 <rfalNfcWorker+0x1d8>
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 8006654:	f022 0202 	bic.w	r2, r2, #2
 8006658:	80a2      	strh	r2, [r4, #4]
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                           /* Initialize RFAL for NFC-B */
 800665a:	f002 f8b7 	bl	80087cc <rfalNfcbPollerInitialize>
 800665e:	4606      	mov	r6, r0
 8006660:	2800      	cmp	r0, #0
 8006662:	d1b1      	bne.n	80065c8 <rfalNfcWorker+0x118>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 8006664:	f004 f940 	bl	800a8e8 <rfalFieldOnAndStartGT>
 8006668:	4606      	mov	r6, r0
 800666a:	2800      	cmp	r0, #0
 800666c:	d1ac      	bne.n	80065c8 <rfalNfcWorker+0x118>
            err = rfalNfcbPollerTechnologyDetection( gNfcDev.disc.compMode, &sensbRes, &sensbResLen ); /* Poll for NFC-B devices */
 800666e:	7b20      	ldrb	r0, [r4, #12]
 8006670:	aa05      	add	r2, sp, #20
 8006672:	a906      	add	r1, sp, #24
 8006674:	f002 f910 	bl	8008898 <rfalNfcbPollerTechnologyDetection>
            if( err == ERR_NONE )
 8006678:	2800      	cmp	r0, #0
 800667a:	f47f af3f 	bne.w	80064fc <rfalNfcWorker+0x4c>
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 800667e:	8863      	ldrh	r3, [r4, #2]
 8006680:	f043 0302 	orr.w	r3, r3, #2
 8006684:	8063      	strh	r3, [r4, #2]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8006686:	e739      	b.n	80064fc <rfalNfcWorker+0x4c>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 8006688:	075e      	lsls	r6, r3, #29
 800668a:	d51a      	bpl.n	80066c2 <rfalNfcWorker+0x212>
 800668c:	88a2      	ldrh	r2, [r4, #4]
 800668e:	0755      	lsls	r5, r2, #29
 8006690:	d517      	bpl.n	80066c2 <rfalNfcWorker+0x212>
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8006692:	f022 0204 	bic.w	r2, r2, #4
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );          /* Initialize RFAL for NFC-F */
 8006696:	7ce0      	ldrb	r0, [r4, #19]
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8006698:	80a2      	strh	r2, [r4, #4]
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );          /* Initialize RFAL for NFC-F */
 800669a:	f002 fa05 	bl	8008aa8 <rfalNfcfPollerInitialize>
 800669e:	4606      	mov	r6, r0
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d191      	bne.n	80065c8 <rfalNfcWorker+0x118>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 80066a4:	f004 f920 	bl	800a8e8 <rfalFieldOnAndStartGT>
 80066a8:	4606      	mov	r6, r0
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d18c      	bne.n	80065c8 <rfalNfcWorker+0x118>
        err = rfalNfcfPollerCheckPresence();                                          /* Poll for NFC-F devices */
 80066ae:	f002 fa1d 	bl	8008aec <rfalNfcfPollerCheckPresence>
        if( err == ERR_NONE )
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f47f af22 	bne.w	80064fc <rfalNfcWorker+0x4c>
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 80066b8:	8863      	ldrh	r3, [r4, #2]
 80066ba:	f043 0304 	orr.w	r3, r3, #4
 80066be:	8063      	strh	r3, [r4, #2]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 80066c0:	e71c      	b.n	80064fc <rfalNfcWorker+0x4c>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 80066c2:	0718      	lsls	r0, r3, #28
 80066c4:	d539      	bpl.n	800673a <rfalNfcWorker+0x28a>
 80066c6:	88a2      	ldrh	r2, [r4, #4]
 80066c8:	0711      	lsls	r1, r2, #28
 80066ca:	d536      	bpl.n	800673a <rfalNfcWorker+0x28a>
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 80066cc:	f022 0208 	bic.w	r2, r2, #8
 80066d0:	80a2      	strh	r2, [r4, #4]
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                               /* Initialize RFAL for NFC-V */
 80066d2:	f002 fe25 	bl	8009320 <rfalNfcvPollerInitialize>
 80066d6:	4606      	mov	r6, r0
 80066d8:	2800      	cmp	r0, #0
 80066da:	f47f af75 	bne.w	80065c8 <rfalNfcWorker+0x118>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 80066de:	f004 f903 	bl	800a8e8 <rfalFieldOnAndStartGT>
 80066e2:	4606      	mov	r6, r0
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f47f af6f 	bne.w	80065c8 <rfalNfcWorker+0x118>
            err = rfalNfcvPollerCheckPresence( &invRes );                                 /* Poll for NFC-V devices */
 80066ea:	a806      	add	r0, sp, #24
 80066ec:	f002 fe32 	bl	8009354 <rfalNfcvPollerCheckPresence>
            if( err == ERR_NONE )
 80066f0:	2800      	cmp	r0, #0
 80066f2:	f47f af03 	bne.w	80064fc <rfalNfcWorker+0x4c>
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 80066f6:	8863      	ldrh	r3, [r4, #2]
 80066f8:	f043 0308 	orr.w	r3, r3, #8
 80066fc:	8063      	strh	r3, [r4, #2]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 80066fe:	e6fd      	b.n	80064fc <rfalNfcWorker+0x4c>
                rfalNfcDepRLS();                                                      /* Send a Release to device */
 8006700:	f000 fcd6 	bl	80070b0 <rfalNfcDepRLS>
        rfalWakeUpModeStop();
 8006704:	f004 ff5e 	bl	800b5c4 <rfalWakeUpModeStop>
        rfalFieldOff();
 8006708:	f004 f932 	bl	800a970 <rfalFieldOff>
    gNfcDev.activeDev = NULL;
 800670c:	2300      	movs	r3, #0
 800670e:	60a3      	str	r3, [r4, #8]
    return ERR_NONE;
 8006710:	e705      	b.n	800651e <rfalNfcWorker+0x6e>
 8006712:	bf00      	nop
 8006714:	200005f8 	.word	0x200005f8
 8006718:	20000672 	.word	0x20000672
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 800671c:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
 8006720:	2b00      	cmp	r3, #0
 8006722:	f43f aee9 	beq.w	80064f8 <rfalNfcWorker+0x48>
                if( gNfcDev.devCnt > 1U )
 8006726:	2b01      	cmp	r3, #1
 8006728:	f000 8149 	beq.w	80069be <rfalNfcWorker+0x50e>
                    if( gNfcDev.disc.notifyCb != NULL )
 800672c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 8145 	beq.w	80069be <rfalNfcWorker+0x50e>
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 8006734:	200c      	movs	r0, #12
 8006736:	7020      	strb	r0, [r4, #0]
                        gNfcDev.disc.notifyCb( gNfcDev.state );
 8006738:	e6fb      	b.n	8006532 <rfalNfcWorker+0x82>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 800673a:	069b      	lsls	r3, r3, #26
 800673c:	d503      	bpl.n	8006746 <rfalNfcWorker+0x296>
 800673e:	88a3      	ldrh	r3, [r4, #4]
 8006740:	069a      	lsls	r2, r3, #26
 8006742:	f100 8176 	bmi.w	8006a32 <rfalNfcWorker+0x582>
                if( ( err != ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 8006746:	8863      	ldrh	r3, [r4, #2]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f43f af3f 	beq.w	80065cc <rfalNfcWorker+0x11c>
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 800674e:	220b      	movs	r2, #11
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 8006750:	80a3      	strh	r3, [r4, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 8006752:	7022      	strb	r2, [r4, #0]
 8006754:	e6d2      	b.n	80064fc <rfalNfcWorker+0x4c>
        EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 8006756:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 800675a:	f021 0310 	bic.w	r3, r1, #16
        EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 800675e:	2009      	movs	r0, #9
 8006760:	4611      	mov	r1, r2
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 8006762:	80a3      	strh	r3, [r4, #4]
        EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 8006764:	f003 ff90 	bl	800a688 <rfalSetMode>
 8006768:	4606      	mov	r6, r0
 800676a:	2800      	cmp	r0, #0
 800676c:	f47f af2c 	bne.w	80065c8 <rfalNfcWorker+0x118>
        rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8006770:	2001      	movs	r0, #1
 8006772:	f004 f891 	bl	800a898 <rfalSetErrorHandling>
        rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 8006776:	2040      	movs	r0, #64	; 0x40
 8006778:	f004 f8a0 	bl	800a8bc <rfalSetFDTListen>
        rfalSetFDTPoll( RFAL_TIMING_NONE );
 800677c:	4630      	mov	r0, r6
 800677e:	f004 f891 	bl	800a8a4 <rfalSetFDTPoll>
        rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 8006782:	48d4      	ldr	r0, [pc, #848]	; (8006ad4 <rfalNfcWorker+0x624>)
 8006784:	f004 f8a4 	bl	800a8d0 <rfalSetGT>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                     /* Turns the Field On and starts GT timer */
 8006788:	f004 f8ae 	bl	800a8e8 <rfalFieldOnAndStartGT>
 800678c:	4606      	mov	r6, r0
 800678e:	2800      	cmp	r0, #0
 8006790:	f47f af1a 	bne.w	80065c8 <rfalNfcWorker+0x118>
    if( rfalNfcIsRemDevListener( device->type ) )
 8006794:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8006798:	2b05      	cmp	r3, #5
 800679a:	f200 81c0 	bhi.w	8006b1e <rfalNfcWorker+0x66e>
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 800679e:	4fce      	ldr	r7, [pc, #824]	; (8006ad8 <rfalNfcWorker+0x628>)
        initParam.GBLen     = gNfcDev.disc.GBLen;
 80067a0:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 80067a4:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	f1a7 037f 	sub.w	r3, r7, #127	; 0x7f
 80067ae:	bf04      	itt	eq
 80067b0:	463b      	moveq	r3, r7
 80067b2:	2508      	moveq	r5, #8
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 80067b4:	f44f 7140 	mov.w	r1, #768	; 0x300
        initParam.commMode  = commMode;
 80067b8:	f640 6201 	movw	r2, #3585	; 0xe01
 80067bc:	9307      	str	r3, [sp, #28]
        initParam.GB        = gNfcDev.disc.GB;
 80067be:	f1a7 0375 	sub.w	r3, r7, #117	; 0x75
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 80067c2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 80067c6:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 80067ca:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        initParam.commMode  = commMode;
 80067ce:	f8ad 2018 	strh.w	r2, [sp, #24]
 80067d2:	f88d 5020 	strb.w	r5, [sp, #32]
        initParam.GB        = gNfcDev.disc.GB;
 80067d6:	930a      	str	r3, [sp, #40]	; 0x28
        rfalNfcDepInitialize();
 80067d8:	f000 fb06 	bl	8006de8 <rfalNfcDepInitialize>
        return rfalNfcDepInitiatorHandleActivation( &initParam, RFAL_BR_424, &device->proto.nfcDep );
 80067dc:	f107 021d 	add.w	r2, r7, #29
 80067e0:	2102      	movs	r1, #2
 80067e2:	a806      	add	r0, sp, #24
 80067e4:	f000 fcd6 	bl	8007194 <rfalNfcDepInitiatorHandleActivation>
        if( err == ERR_NONE )
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f040 8198 	bne.w	8006b1e <rfalNfcWorker+0x66e>
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 80067ee:	8863      	ldrh	r3, [r4, #2]
            gNfcDev.devCnt++;
 80067f0:	f894 22e8 	ldrb.w	r2, [r4, #744]	; 0x2e8
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 80067f4:	f043 0310 	orr.w	r3, r3, #16
            gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 80067f8:	2005      	movs	r0, #5
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 80067fa:	2102      	movs	r1, #2
            gNfcDev.devCnt++;
 80067fc:	3201      	adds	r2, #1
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 80067fe:	8063      	strh	r3, [r4, #2]
            gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 8006800:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 8006804:	f884 10ad 	strb.w	r1, [r4, #173]	; 0xad
            gNfcDev.devCnt++;
 8006808:	f884 22e8 	strb.w	r2, [r4, #744]	; 0x2e8
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 800680c:	e79f      	b.n	800674e <rfalNfcWorker+0x29e>
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 800680e:	eba7 0805 	sub.w	r8, r7, r5
 8006812:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
            rfalNfcaPollerInitialize();
 8006816:	f001 fa9d 	bl	8007d54 <rfalNfcaPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 800681a:	f898 30a6 	ldrb.w	r3, [r8, #166]	; 0xa6
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 8120 	bne.w	8006a64 <rfalNfcWorker+0x5b4>
 8006824:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 8006828:	00f6      	lsls	r6, r6, #3
                EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); /* Select specific device  */
 800682a:	f106 0396 	add.w	r3, r6, #150	; 0x96
 800682e:	eb04 0903 	add.w	r9, r4, r3
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 8006832:	1b7a      	subs	r2, r7, r5
 8006834:	eb04 08c2 	add.w	r8, r4, r2, lsl #3
 8006838:	00d2      	lsls	r2, r2, #3
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 800683a:	f898 3091 	ldrb.w	r3, [r8, #145]	; 0x91
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 800683e:	f898 1095 	ldrb.w	r1, [r8, #149]	; 0x95
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 8006842:	f8c8 90a8 	str.w	r9, [r8, #168]	; 0xa8
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 8006846:	2b20      	cmp	r3, #32
 8006848:	f888 10ac 	strb.w	r1, [r8, #172]	; 0xac
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 800684c:	f000 814a 	beq.w	8006ae4 <rfalNfcWorker+0x634>
 8006850:	f200 80ba 	bhi.w	80069c8 <rfalNfcWorker+0x518>
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8153 	beq.w	8006b00 <rfalNfcWorker+0x650>
 800685a:	2b01      	cmp	r3, #1
 800685c:	f47f ae4c 	bne.w	80064f8 <rfalNfcWorker+0x48>
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 8006860:	f106 03a2 	add.w	r3, r6, #162	; 0xa2
 8006864:	4423      	add	r3, r4
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 8006866:	4422      	add	r2, r4
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 8006868:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 800686c:	2304      	movs	r3, #4
 800686e:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 8006872:	3690      	adds	r6, #144	; 0x90
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 8006874:	6f63      	ldr	r3, [r4, #116]	; 0x74
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 8006876:	4426      	add	r6, r4
            gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 8006878:	201e      	movs	r0, #30
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 800687a:	60a6      	str	r6, [r4, #8]
            gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 800687c:	7020      	strb	r0, [r4, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 800687e:	2b00      	cmp	r3, #0
 8006880:	f47f ae57 	bne.w	8006532 <rfalNfcWorker+0x82>
 8006884:	e63a      	b.n	80064fc <rfalNfcWorker+0x4c>
            rfalSt25tbPollerInitialize();
 8006886:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 800688a:	00f6      	lsls	r6, r6, #3
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 800688c:	1b7d      	subs	r5, r7, r5
            rfalSt25tbPollerInitialize();
 800688e:	f004 fec5 	bl	800b61c <rfalSt25tbPollerInitialize>
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 8006892:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8006896:	f106 0392 	add.w	r3, r6, #146	; 0x92
 800689a:	4423      	add	r3, r4
 800689c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 80068a0:	2308      	movs	r3, #8
 80068a2:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
            break;
 80068a6:	e7e4      	b.n	8006872 <rfalNfcWorker+0x3c2>
            rfalNfcvPollerInitialize();
 80068a8:	f002 fd3a 	bl	8009320 <rfalNfcvPollerInitialize>
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 80068ac:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 80068b0:	00f6      	lsls	r6, r6, #3
 80068b2:	1b7d      	subs	r5, r7, r5
 80068b4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80068b8:	f106 0393 	add.w	r3, r6, #147	; 0x93
 80068bc:	e7ed      	b.n	800689a <rfalNfcWorker+0x3ea>
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 80068be:	7ce0      	ldrb	r0, [r4, #19]
 80068c0:	f002 f8f2 	bl	8008aa8 <rfalNfcfPollerInitialize>
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 80068c4:	1b7b      	subs	r3, r7, r5
 80068c6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80068ca:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80068ce:	2a01      	cmp	r2, #1
 80068d0:	d1ec      	bne.n	80068ac <rfalNfcWorker+0x3fc>
 80068d2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80068d6:	2bfe      	cmp	r3, #254	; 0xfe
 80068d8:	d1e8      	bne.n	80068ac <rfalNfcWorker+0x3fc>
    if( rfalNfcIsRemDevListener( device->type ) )
 80068da:	2378      	movs	r3, #120	; 0x78
 80068dc:	fb03 4205 	mla	r2, r3, r5, r4
 80068e0:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
 80068e4:	2a05      	cmp	r2, #5
 80068e6:	f63f ae07 	bhi.w	80064f8 <rfalNfcWorker+0x48>
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 80068ea:	2a02      	cmp	r2, #2
 80068ec:	f000 8121 	beq.w	8006b32 <rfalNfcWorker+0x682>
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 80068f0:	4b7a      	ldr	r3, [pc, #488]	; (8006adc <rfalNfcWorker+0x62c>)
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 80068f2:	210a      	movs	r1, #10
        initParam.GBLen     = gNfcDev.disc.GBLen;
 80068f4:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 80068f8:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
 80068fc:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 8006900:	2200      	movs	r2, #0
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8006902:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006906:	f88d 1020 	strb.w	r1, [sp, #32]
 800690a:	9307      	str	r3, [sp, #28]
        initParam.GB        = gNfcDev.disc.GB;
 800690c:	4974      	ldr	r1, [pc, #464]	; (8006ae0 <rfalNfcWorker+0x630>)
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 800690e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
        initParam.commMode  = commMode;
 8006912:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8006916:	00f6      	lsls	r6, r6, #3
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 8006918:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800691c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        initParam.GB        = gNfcDev.disc.GB;
 8006920:	910a      	str	r1, [sp, #40]	; 0x28
        initParam.commMode  = commMode;
 8006922:	f8ad 3018 	strh.w	r3, [sp, #24]
        rfalNfcDepInitialize();
 8006926:	f000 fa5f 	bl	8006de8 <rfalNfcDepInitialize>
        return rfalNfcDepInitiatorHandleActivation( &initParam, RFAL_BR_424, &device->proto.nfcDep );
 800692a:	f106 02b0 	add.w	r2, r6, #176	; 0xb0
 800692e:	4422      	add	r2, r4
 8006930:	2102      	movs	r1, #2
 8006932:	a806      	add	r0, sp, #24
 8006934:	f000 fc2e 	bl	8007194 <rfalNfcDepInitiatorHandleActivation>
                EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8006938:	2800      	cmp	r0, #0
 800693a:	f47f addd 	bne.w	80064f8 <rfalNfcWorker+0x48>
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 800693e:	2378      	movs	r3, #120	; 0x78
 8006940:	fb03 f505 	mul.w	r5, r3, r5
 8006944:	1962      	adds	r2, r4, r5
 8006946:	f106 03b2 	add.w	r3, r6, #178	; 0xb2
 800694a:	4423      	add	r3, r4
 800694c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8006950:	f240 230a 	movw	r3, #522	; 0x20a
 8006954:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
                break;
 8006958:	e78b      	b.n	8006872 <rfalNfcWorker+0x3c2>
            rfalNfcbPollerInitialize();
 800695a:	f001 ff37 	bl	80087cc <rfalNfcbPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is in Sleep */
 800695e:	1b7b      	subs	r3, r7, r5
 8006960:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006964:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8006968:	2b00      	cmp	r3, #0
 800696a:	f040 80ac 	bne.w	8006ac6 <rfalNfcWorker+0x616>
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 800696e:	1b7f      	subs	r7, r7, r5
 8006970:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8006974:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 8006978:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800697c:	00ee      	lsls	r6, r5, #3
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 800697e:	f106 0293 	add.w	r2, r6, #147	; 0x93
 8006982:	4422      	add	r2, r4
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 8006984:	2104      	movs	r1, #4
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 8006986:	f013 0301 	ands.w	r3, r3, #1
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 800698a:	f887 10ac 	strb.w	r1, [r7, #172]	; 0xac
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 800698e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 8006992:	d17f      	bne.n	8006a94 <rfalNfcWorker+0x5e4>
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 8006994:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            break;
 8006998:	e76b      	b.n	8006872 <rfalNfcWorker+0x3c2>
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 800699a:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 800699e:	00f6      	lsls	r6, r6, #3
 80069a0:	1b7b      	subs	r3, r7, r5
 80069a2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80069a6:	f106 02b2 	add.w	r2, r6, #178	; 0xb2
 80069aa:	4422      	add	r2, r4
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 80069ac:	210a      	movs	r1, #10
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 80069ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 80069b2:	f883 10ac 	strb.w	r1, [r3, #172]	; 0xac
            break;
 80069b6:	e75c      	b.n	8006872 <rfalNfcWorker+0x3c2>
                rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 80069b8:	f7fe fbe0 	bl	800517c <rfalIsoDepDeselect>
                break;
 80069bc:	e6a2      	b.n	8006704 <rfalNfcWorker+0x254>
                gNfcDev.selDevIdx = 0U;
 80069be:	2200      	movs	r2, #0
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 80069c0:	230d      	movs	r3, #13
                gNfcDev.selDevIdx = 0U;
 80069c2:	71e2      	strb	r2, [r4, #7]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 80069c4:	7023      	strb	r3, [r4, #0]
 80069c6:	e599      	b.n	80064fc <rfalNfcWorker+0x4c>
 80069c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069cc:	2b40      	cmp	r3, #64	; 0x40
 80069ce:	f47f ad93 	bne.w	80064f8 <rfalNfcWorker+0x48>
    if( rfalNfcIsRemDevListener( device->type ) )
 80069d2:	f898 3090 	ldrb.w	r3, [r8, #144]	; 0x90
 80069d6:	2b05      	cmp	r3, #5
 80069d8:	f63f ad8e 	bhi.w	80064f8 <rfalNfcWorker+0x48>
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 80069dc:	2b02      	cmp	r3, #2
 80069de:	f000 80a3 	beq.w	8006b28 <rfalNfcWorker+0x678>
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 80069e2:	4b3e      	ldr	r3, [pc, #248]	; (8006adc <rfalNfcWorker+0x62c>)
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 80069e4:	220a      	movs	r2, #10
 80069e6:	9307      	str	r3, [sp, #28]
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 80069e8:	2300      	movs	r3, #0
 80069ea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 80069ee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 80069f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80069f6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        initParam.GB        = gNfcDev.disc.GB;
 80069fa:	4b39      	ldr	r3, [pc, #228]	; (8006ae0 <rfalNfcWorker+0x630>)
 80069fc:	930a      	str	r3, [sp, #40]	; 0x28
        initParam.GBLen     = gNfcDev.disc.GBLen;
 80069fe:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8006a02:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        initParam.commMode  = commMode;
 8006a06:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8006a0a:	f88d 2020 	strb.w	r2, [sp, #32]
 8006a0e:	f8ad 3018 	strh.w	r3, [sp, #24]
        rfalNfcDepInitialize();
 8006a12:	f000 f9e9 	bl	8006de8 <rfalNfcDepInitialize>
        return rfalNfcDepInitiatorHandleActivation( &initParam, RFAL_BR_424, &device->proto.nfcDep );
 8006a16:	f106 02b0 	add.w	r2, r6, #176	; 0xb0
 8006a1a:	4422      	add	r2, r4
 8006a1c:	2102      	movs	r1, #2
 8006a1e:	a806      	add	r0, sp, #24
 8006a20:	f000 fbb8 	bl	8007194 <rfalNfcDepInitiatorHandleActivation>
                    EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8006a24:	2800      	cmp	r0, #0
 8006a26:	f47f ad67 	bne.w	80064f8 <rfalNfcWorker+0x48>
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8006a2a:	1b7d      	subs	r5, r7, r5
 8006a2c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8006a30:	e789      	b.n	8006946 <rfalNfcWorker+0x496>
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 8006a32:	f023 0320 	bic.w	r3, r3, #32
 8006a36:	80a3      	strh	r3, [r4, #4]
        EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                             /* Initialize RFAL for NFC-V */
 8006a38:	f004 fdf0 	bl	800b61c <rfalSt25tbPollerInitialize>
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f47f adc2 	bne.w	80065c8 <rfalNfcWorker+0x118>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 8006a44:	f003 ff50 	bl	800a8e8 <rfalFieldOnAndStartGT>
 8006a48:	4606      	mov	r6, r0
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	f47f adbc 	bne.w	80065c8 <rfalNfcWorker+0x118>
        err = rfalSt25tbPollerCheckPresence( NULL );                                  /* Poll for ST25TB devices */
 8006a50:	f004 fde6 	bl	800b620 <rfalSt25tbPollerCheckPresence>
        if( err == ERR_NONE )
 8006a54:	2800      	cmp	r0, #0
 8006a56:	f47f ae76 	bne.w	8006746 <rfalNfcWorker+0x296>
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 8006a5a:	8863      	ldrh	r3, [r4, #2]
 8006a5c:	f043 0320 	orr.w	r3, r3, #32
 8006a60:	8063      	strh	r3, [r4, #2]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8006a62:	e674      	b.n	800674e <rfalNfcWorker+0x29e>
                EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes ) ); /* Wake up all cards  */
 8006a64:	a906      	add	r1, sp, #24
 8006a66:	2052      	movs	r0, #82	; 0x52
 8006a68:	f001 f98e 	bl	8007d88 <rfalNfcaPollerCheckPresence>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f47f ad43 	bne.w	80064f8 <rfalNfcWorker+0x48>
                EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); /* Select specific device  */
 8006a72:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 8006a76:	00f6      	lsls	r6, r6, #3
 8006a78:	f106 0396 	add.w	r3, r6, #150	; 0x96
 8006a7c:	eb04 0903 	add.w	r9, r4, r3
 8006a80:	f898 1095 	ldrb.w	r1, [r8, #149]	; 0x95
 8006a84:	aa05      	add	r2, sp, #20
 8006a86:	4648      	mov	r0, r9
 8006a88:	f001 fc8a 	bl	80083a0 <rfalNfcaPollerSelect>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	f43f aed0 	beq.w	8006832 <rfalNfcWorker+0x382>
 8006a92:	e531      	b.n	80064f8 <rfalNfcWorker+0x48>
                rfalIsoDepInitialize();
 8006a94:	f7fe fb54 	bl	8005140 <rfalIsoDepInitialize>
                EXIT_ON_ERR( err, rfalIsoDepPollBHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 8006a98:	f106 02b0 	add.w	r2, r6, #176	; 0xb0
 8006a9c:	f106 0191 	add.w	r1, r6, #145	; 0x91
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4422      	add	r2, r4
 8006aa4:	4421      	add	r1, r4
 8006aa6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8006aaa:	9100      	str	r1, [sp, #0]
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	2008      	movs	r0, #8
 8006ab4:	f7fe fe82 	bl	80057bc <rfalIsoDepPollBHandleActivation>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	f47f ad1d 	bne.w	80064f8 <rfalNfcWorker+0x48>
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
                break;
 8006ac4:	e6d5      	b.n	8006872 <rfalNfcWorker+0x3c2>
                rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen );
 8006ac6:	ab05      	add	r3, sp, #20
 8006ac8:	aa06      	add	r2, sp, #24
 8006aca:	2100      	movs	r1, #0
 8006acc:	2008      	movs	r0, #8
 8006ace:	f001 fe9b 	bl	8008808 <rfalNfcbPollerCheckPresence>
 8006ad2:	e74c      	b.n	800696e <rfalNfcWorker+0x4be>
 8006ad4:	00063510 	.word	0x00063510
 8006ad8:	2000068b 	.word	0x2000068b
 8006adc:	2000060c 	.word	0x2000060c
 8006ae0:	20000616 	.word	0x20000616
                    rfalIsoDepInitialize();
 8006ae4:	f7fe fb2c 	bl	8005140 <rfalIsoDepInitialize>
                    EXIT_ON_ERR( err, rfalIsoDepPollAHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, &gNfcDev.devList[devIt].proto.isoDep ) );
 8006ae8:	f106 03b0 	add.w	r3, r6, #176	; 0xb0
 8006aec:	4423      	add	r3, r4
 8006aee:	2202      	movs	r2, #2
 8006af0:	2100      	movs	r1, #0
 8006af2:	2008      	movs	r0, #8
 8006af4:	f7fe fce6 	bl	80054c4 <rfalIsoDepPollAHandleActivation>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	f47f acfd 	bne.w	80064f8 <rfalNfcWorker+0x48>
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 8006afe:	2301      	movs	r3, #1
 8006b00:	f888 30ad 	strb.w	r3, [r8, #173]	; 0xad
                    break;
 8006b04:	e6b5      	b.n	8006872 <rfalNfcWorker+0x3c2>
            err = rfalNfcaPollerTechnologyDetection( gNfcDev.disc.compMode, &sensRes );/* Poll for NFC-A devices */
 8006b06:	7b20      	ldrb	r0, [r4, #12]
 8006b08:	a906      	add	r1, sp, #24
 8006b0a:	f001 f955 	bl	8007db8 <rfalNfcaPollerTechnologyDetection>
            if( err == ERR_NONE )
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	f47f acf4 	bne.w	80064fc <rfalNfcWorker+0x4c>
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 8006b14:	8863      	ldrh	r3, [r4, #2]
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	8063      	strh	r3, [r4, #2]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8006b1c:	e4ee      	b.n	80064fc <rfalNfcWorker+0x4c>
}
 8006b1e:	b00d      	add	sp, #52	; 0x34
 8006b20:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        rfalFieldOff();
 8006b24:	f003 bf24 	b.w	800a970 <rfalFieldOff>
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 8006b28:	f106 0393 	add.w	r3, r6, #147	; 0x93
 8006b2c:	4423      	add	r3, r4
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8006b2e:	2208      	movs	r2, #8
 8006b30:	e759      	b.n	80069e6 <rfalNfcWorker+0x536>
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 8006b32:	fb03 4305 	mla	r3, r3, r5, r4
 8006b36:	3393      	adds	r3, #147	; 0x93
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8006b38:	2108      	movs	r1, #8
 8006b3a:	e6db      	b.n	80068f4 <rfalNfcWorker+0x444>

08006b3c <nfcipTx>:
}


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 8006b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 8006b44:	2900      	cmp	r1, #0
 8006b46:	d067      	beq.n	8006c18 <nfcipTx+0xdc>
    }
    

    payloadBuf = paylBuf;                                               /* MISRA 17.8: Use intermediate variable */
    
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 8006b48:	4604      	mov	r4, r0
 8006b4a:	b983      	cbnz	r3, 8006b6e <nfcipTx+0x32>
    {
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 8006b4c:	1d4d      	adds	r5, r1, #5
    pfb      = pfbData;                                                 /* MISRA 17.8: Use intermediate variable */
    
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
        
    
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8006b4e:	4e67      	ldr	r6, [pc, #412]	; (8006cec <nfcipTx+0x1b0>)
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 8006b50:	22ff      	movs	r2, #255	; 0xff
 8006b52:	f886 2053 	strb.w	r2, [r6, #83]	; 0x53
    
    /*******************************************************************************/
    /* Compute outgoing NFCIP message                                              */
    /*******************************************************************************/
    switch( cmd )
 8006b56:	1ea2      	subs	r2, r4, #2
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8006b58:	f886 4052 	strb.w	r4, [r6, #82]	; 0x52
    switch( cmd )
 8006b5c:	2a09      	cmp	r2, #9
 8006b5e:	d87e      	bhi.n	8006c5e <nfcipTx+0x122>
 8006b60:	e8df f002 	tbb	[pc, r2]
 8006b64:	2b2b2b5d 	.word	0x2b2b2b5d
 8006b68:	09093030 	.word	0x09093030
 8006b6c:	0909      	.short	0x0909
 8006b6e:	4615      	mov	r5, r2
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 8006b70:	2a00      	cmp	r2, #0
 8006b72:	d1ec      	bne.n	8006b4e <nfcipTx+0x12>
 8006b74:	e7ea      	b.n	8006b4c <nfcipTx+0x10>
        case NFCIP_CMD_RLS_RES:
        case NFCIP_CMD_DSL_REQ:
        case NFCIP_CMD_DSL_RES:
            
            /* Digital 1.0 - 14.8.1.1 & 14.9.1.1 & 14.10.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8006b76:	78f2      	ldrb	r2, [r6, #3]
 8006b78:	2a00      	cmp	r2, #0
 8006b7a:	d062      	beq.n	8006c42 <nfcipTx+0x106>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8006b7c:	f805 2c01 	strb.w	r2, [r5, #-1]
 8006b80:	1e68      	subs	r0, r5, #1
    }
    
    /*******************************************************************************/
    /* Prepend Header                                                              */
    /*******************************************************************************/    
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 8006b82:	f800 4c01 	strb.w	r4, [r0, #-1]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8006b86:	f004 0401 	and.w	r4, r4, #1
 8006b8a:	3c2c      	subs	r4, #44	; 0x2c
 8006b8c:	f800 4c02 	strb.w	r4, [r0, #-2]
 8006b90:	3802      	subs	r0, #2
        
    
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8006b92:	1a29      	subs	r1, r5, r0
    
    
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8006b94:	f8b6 205c 	ldrh.w	r2, [r6, #92]	; 0x5c
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8006b98:	440b      	add	r3, r1
 8006b9a:	b299      	uxth	r1, r3
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8006b9c:	428a      	cmp	r2, r1
 8006b9e:	d34b      	bcc.n	8006c38 <nfcipTx+0xfc>


/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 8006ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ba2:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 8006ba4:	9400      	str	r4, [sp, #0]
 8006ba6:	2304      	movs	r3, #4
 8006ba8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006bac:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
 8006bb0:	6e72      	ldr	r2, [r6, #100]	; 0x64
 8006bb2:	f003 ff17 	bl	800a9e4 <rfalTransceiveBlockingTx>
}
 8006bb6:	b007      	add	sp, #28
 8006bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 8006bba:	78f2      	ldrb	r2, [r6, #3]
 8006bbc:	f805 2c01 	strb.w	r2, [r5, #-1]
 8006bc0:	1e68      	subs	r0, r5, #1
            break;
 8006bc2:	e7de      	b.n	8006b82 <nfcipTx+0x46>
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 8006bc4:	78f2      	ldrb	r2, [r6, #3]
 8006bc6:	b10a      	cbz	r2, 8006bcc <nfcipTx+0x90>
 8006bc8:	f04c 0c04 	orr.w	ip, ip, #4
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 8006bcc:	7931      	ldrb	r1, [r6, #4]
 8006bce:	b109      	cbz	r1, 8006bd4 <nfcipTx+0x98>
 8006bd0:	f04c 0c08 	orr.w	ip, ip, #8
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 8006bd4:	f896 005e 	ldrb.w	r0, [r6, #94]	; 0x5e
 8006bd8:	b110      	cbz	r0, 8006be0 <nfcipTx+0xa4>
 8006bda:	f01c 0fe0 	tst.w	ip, #224	; 0xe0
 8006bde:	d032      	beq.n	8006c46 <nfcipTx+0x10a>
            if( !nfcip_PFBisSATN(pfb) )
 8006be0:	f00c 00f0 	and.w	r0, ip, #240	; 0xf0
 8006be4:	2880      	cmp	r0, #128	; 0x80
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 8006be6:	f886 c053 	strb.w	ip, [r6, #83]	; 0x53
            if( !nfcip_PFBisSATN(pfb) )
 8006bea:	d001      	beq.n	8006bf0 <nfcipTx+0xb4>
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 8006bec:	f886 c054 	strb.w	ip, [r6, #84]	; 0x54
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 8006bf0:	b329      	cbz	r1, 8006c3e <nfcipTx+0x102>
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 8006bf2:	f805 1c01 	strb.w	r1, [r5, #-1]
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8006bf6:	78f2      	ldrb	r2, [r6, #3]
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 8006bf8:	1e68      	subs	r0, r5, #1
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8006bfa:	b112      	cbz	r2, 8006c02 <nfcipTx+0xc6>
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8006bfc:	f800 2c01 	strb.w	r2, [r0, #-1]
 8006c00:	3801      	subs	r0, #1
            *(--txBlock) = pfb;                                                          /* PFB */
 8006c02:	f800 cc01 	strb.w	ip, [r0, #-1]
 8006c06:	3801      	subs	r0, #1
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1ba      	bne.n	8006b82 <nfcipTx+0x46>
 8006c0c:	78b2      	ldrb	r2, [r6, #2]
 8006c0e:	0752      	lsls	r2, r2, #29
 8006c10:	d5b7      	bpl.n	8006b82 <nfcipTx+0x46>
 8006c12:	f01c 0fe0 	tst.w	ip, #224	; 0xe0
 8006c16:	d1b4      	bne.n	8006b82 <nfcipTx+0x46>
        return ERR_PARAM;
 8006c18:	2007      	movs	r0, #7
}
 8006c1a:	b007      	add	sp, #28
 8006c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 8006c1e:	2200      	movs	r2, #0
 8006c20:	602a      	str	r2, [r5, #0]
 8006c22:	606a      	str	r2, [r5, #4]
 8006c24:	812a      	strh	r2, [r5, #8]
 8006c26:	7c72      	ldrb	r2, [r6, #17]
 8006c28:	b992      	cbnz	r2, 8006c50 <nfcipTx+0x114>
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 8006c2a:	78f2      	ldrb	r2, [r6, #3]
 8006c2c:	f805 2c01 	strb.w	r2, [r5, #-1]
 8006c30:	330a      	adds	r3, #10
 8006c32:	1e68      	subs	r0, r5, #1
            break;
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	e7a4      	b.n	8006b82 <nfcipTx+0x46>
        return ERR_NOTSUPP;
 8006c38:	2018      	movs	r0, #24
}
 8006c3a:	b007      	add	sp, #28
 8006c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c3e:	4628      	mov	r0, r5
 8006c40:	e7db      	b.n	8006bfa <nfcipTx+0xbe>
 8006c42:	4628      	mov	r0, r5
 8006c44:	e79d      	b.n	8006b82 <nfcipTx+0x46>
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 8006c46:	f04c 0c10 	orr.w	ip, ip, #16
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 8006c4a:	f886 c053 	strb.w	ip, [r6, #83]	; 0x53
            if( !nfcip_PFBisSATN(pfb) )
 8006c4e:	e7cd      	b.n	8006bec <nfcipTx+0xb0>
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 8006c50:	4927      	ldr	r1, [pc, #156]	; (8006cf0 <nfcipTx+0x1b4>)
 8006c52:	9305      	str	r3, [sp, #20]
 8006c54:	4628      	mov	r0, r5
 8006c56:	f004 fec3 	bl	800b9e0 <memcpy>
 8006c5a:	9b05      	ldr	r3, [sp, #20]
 8006c5c:	e7e5      	b.n	8006c2a <nfcipTx+0xee>
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 8006c5e:	2200      	movs	r2, #0
 8006c60:	602a      	str	r2, [r5, #0]
 8006c62:	606a      	str	r2, [r5, #4]
 8006c64:	812a      	strh	r2, [r5, #8]
 8006c66:	7c72      	ldrb	r2, [r6, #17]
 8006c68:	b9ba      	cbnz	r2, 8006c9a <nfcipTx+0x15e>
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 8006c6a:	78f2      	ldrb	r2, [r6, #3]
 8006c6c:	72aa      	strb	r2, [r5, #10]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 8006c6e:	7972      	ldrb	r2, [r6, #5]
 8006c70:	72ea      	strb	r2, [r5, #11]
            if( cmd == NFCIP_CMD_ATR_RES )
 8006c72:	2c01      	cmp	r4, #1
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 8006c74:	79b2      	ldrb	r2, [r6, #6]
 8006c76:	732a      	strb	r2, [r5, #12]
            if( cmd == NFCIP_CMD_ATR_RES )
 8006c78:	d016      	beq.n	8006ca8 <nfcipTx+0x16c>
 8006c7a:	200e      	movs	r0, #14
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	210d      	movs	r1, #13
            if( gNfcip.cfg.gbLen > 0U)
 8006c80:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
 8006c84:	b9ba      	cbnz	r2, 8006cb6 <nfcipTx+0x17a>
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 8006c86:	f896 2043 	ldrb.w	r2, [r6, #67]	; 0x43
 8006c8a:	0112      	lsls	r2, r2, #4
 8006c8c:	443b      	add	r3, r7
 8006c8e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006c92:	546a      	strb	r2, [r5, r1]
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 8006c94:	b29b      	uxth	r3, r3
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 8006c96:	4628      	mov	r0, r5
 8006c98:	e773      	b.n	8006b82 <nfcipTx+0x46>
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 8006c9a:	4915      	ldr	r1, [pc, #84]	; (8006cf0 <nfcipTx+0x1b4>)
 8006c9c:	9305      	str	r3, [sp, #20]
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f004 fe9e 	bl	800b9e0 <memcpy>
 8006ca4:	9b05      	ldr	r3, [sp, #20]
 8006ca6:	e7e0      	b.n	8006c6a <nfcipTx+0x12e>
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 8006ca8:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 8006cac:	736a      	strb	r2, [r5, #13]
 8006cae:	200f      	movs	r0, #15
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	210e      	movs	r1, #14
 8006cb4:	e7e4      	b.n	8006c80 <nfcipTx+0x144>
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 8006cb6:	f896 2043 	ldrb.w	r2, [r6, #67]	; 0x43
 8006cba:	9305      	str	r3, [sp, #20]
 8006cbc:	0112      	lsls	r2, r2, #4
 8006cbe:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006cc2:	f042 0202 	orr.w	r2, r2, #2
 8006cc6:	546a      	strb	r2, [r5, r1]
                ST_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 8006cc8:	4428      	add	r0, r5
 8006cca:	490a      	ldr	r1, [pc, #40]	; (8006cf4 <nfcipTx+0x1b8>)
 8006ccc:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
 8006cd0:	f004 fe86 	bl	800b9e0 <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 8006cd4:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 8006cd8:	9b05      	ldr	r3, [sp, #20]
                txBufIt += gNfcip.cfg.gbLen;
 8006cda:	443a      	add	r2, r7
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 8006cdc:	1c91      	adds	r1, r2, #2
 8006cde:	b289      	uxth	r1, r1
 8006ce0:	2940      	cmp	r1, #64	; 0x40
 8006ce2:	d899      	bhi.n	8006c18 <nfcipTx+0xdc>
 8006ce4:	4413      	add	r3, r2
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	4628      	mov	r0, r5
 8006cea:	e74a      	b.n	8006b82 <nfcipTx+0x46>
 8006cec:	20000af8 	.word	0x20000af8
 8006cf0:	20000aff 	.word	0x20000aff
 8006cf4:	20000b0a 	.word	0x20000b0a

08006cf8 <nfcipDEPControlMsg>:
{
 8006cf8:	b530      	push	{r4, r5, lr}
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8006cfa:	4a3a      	ldr	r2, [pc, #232]	; (8006de4 <nfcipDEPControlMsg+0xec>)
 8006cfc:	7813      	ldrb	r3, [r2, #0]
 8006cfe:	2b01      	cmp	r3, #1
{
 8006d00:	b08b      	sub	sp, #44	; 0x2c
 8006d02:	468c      	mov	ip, r1
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8006d04:	d03c      	beq.n	8006d80 <nfcipDEPControlMsg+0x88>
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8006d06:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8006d0a:	2b90      	cmp	r3, #144	; 0x90
 8006d0c:	d04c      	beq.n	8006da8 <nfcipDEPControlMsg+0xb0>
 8006d0e:	e9d2 4112 	ldrd	r4, r1, [r2, #72]	; 0x48
 8006d12:	f04f 0ed4 	mov.w	lr, #212	; 0xd4
 8006d16:	440c      	add	r4, r1
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8006d18:	f04f 0c06 	mov.w	ip, #6
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 8006d1c:	78d5      	ldrb	r5, [r2, #3]
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8006d1e:	f882 c052 	strb.w	ip, [r2, #82]	; 0x52
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 8006d22:	2d00      	cmp	r5, #0
 8006d24:	d146      	bne.n	8006db4 <nfcipDEPControlMsg+0xbc>
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 8006d26:	7911      	ldrb	r1, [r2, #4]
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	d049      	beq.n	8006dc0 <nfcipDEPControlMsg+0xc8>
 8006d2c:	f040 0008 	orr.w	r0, r0, #8
            if( !nfcip_PFBisSATN(pfb) )
 8006d30:	2b80      	cmp	r3, #128	; 0x80
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 8006d32:	f882 0053 	strb.w	r0, [r2, #83]	; 0x53
            if( !nfcip_PFBisSATN(pfb) )
 8006d36:	d001      	beq.n	8006d3c <nfcipDEPControlMsg+0x44>
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 8006d38:	f882 0054 	strb.w	r0, [r2, #84]	; 0x54
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 8006d3c:	f88d 1018 	strb.w	r1, [sp, #24]
 8006d40:	ab06      	add	r3, sp, #24
 8006d42:	f10d 0119 	add.w	r1, sp, #25
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8006d46:	b115      	cbz	r5, 8006d4e <nfcipDEPControlMsg+0x56>
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8006d48:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006d4c:	3b01      	subs	r3, #1
            *(--txBlock) = pfb;                                                          /* PFB */
 8006d4e:	f803 0c01 	strb.w	r0, [r3, #-1]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8006d52:	1ed8      	subs	r0, r3, #3
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 8006d54:	f803 cc02 	strb.w	ip, [r3, #-2]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8006d58:	f803 ec03 	strb.w	lr, [r3, #-3]
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8006d5c:	1a09      	subs	r1, r1, r0
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8006d5e:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8006d62:	b289      	uxth	r1, r1
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8006d64:	428b      	cmp	r3, r1
 8006d66:	d328      	bcc.n	8006dba <nfcipDEPControlMsg+0xc2>
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 8006d68:	2504      	movs	r5, #4
 8006d6a:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8006d72:	f8b2 306a 	ldrh.w	r3, [r2, #106]	; 0x6a
 8006d76:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006d78:	f003 fe34 	bl	800a9e4 <rfalTransceiveBlockingTx>
}
 8006d7c:	b00b      	add	sp, #44	; 0x2c
 8006d7e:	bd30      	pop	{r4, r5, pc}
    if( nfcip_PFBisSTO( pfb ) )
 8006d80:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8006d84:	2b90      	cmp	r3, #144	; 0x90
 8006d86:	d125      	bne.n	8006dd4 <nfcipDEPControlMsg+0xdc>
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8006d88:	2007      	movs	r0, #7
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8006d8a:	f04f 33ff 	mov.w	r3, #4294967295
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 8006d8e:	2290      	movs	r2, #144	; 0x90
 8006d90:	e9cd 2300 	strd	r2, r3, [sp]
 8006d94:	a905      	add	r1, sp, #20
 8006d96:	2301      	movs	r3, #1
 8006d98:	f10d 0219 	add.w	r2, sp, #25
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 8006d9c:	f88d c019 	strb.w	ip, [sp, #25]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 8006da0:	f7ff fecc 	bl	8006b3c <nfcipTx>
}
 8006da4:	b00b      	add	sp, #44	; 0x2c
 8006da6:	bd30      	pop	{r4, r5, pc}
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8006da8:	e9d2 1312 	ldrd	r1, r3, [r2, #72]	; 0x48
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8006dac:	2006      	movs	r0, #6
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8006dae:	fb01 330c 	mla	r3, r1, ip, r3
    if( nfcip_PFBisSTO( pfb ) )
 8006db2:	e7ec      	b.n	8006d8e <nfcipDEPControlMsg+0x96>
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 8006db4:	f040 0004 	orr.w	r0, r0, #4
 8006db8:	e7b5      	b.n	8006d26 <nfcipDEPControlMsg+0x2e>
        return ERR_NOTSUPP;
 8006dba:	2018      	movs	r0, #24
}
 8006dbc:	b00b      	add	sp, #44	; 0x2c
 8006dbe:	bd30      	pop	{r4, r5, pc}
            if( !nfcip_PFBisSATN(pfb) )
 8006dc0:	2b80      	cmp	r3, #128	; 0x80
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 8006dc2:	f882 0053 	strb.w	r0, [r2, #83]	; 0x53
            if( !nfcip_PFBisSATN(pfb) )
 8006dc6:	d001      	beq.n	8006dcc <nfcipDEPControlMsg+0xd4>
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 8006dc8:	f882 0054 	strb.w	r0, [r2, #84]	; 0x54
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 8006dcc:	f10d 0119 	add.w	r1, sp, #25
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	e7b8      	b.n	8006d46 <nfcipDEPControlMsg+0x4e>
    if( nfcip_PFBisSTO( pfb ) )
 8006dd4:	f04f 0ed5 	mov.w	lr, #213	; 0xd5
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8006dd8:	f04f 0c07 	mov.w	ip, #7
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8006ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8006de0:	e79c      	b.n	8006d1c <nfcipDEPControlMsg+0x24>
 8006de2:	bf00      	nop
 8006de4:	20000af8 	.word	0x20000af8

08006de8 <rfalNfcDepInitialize>:
    gNfcip.isDeactivating = NULL;
 8006de8:	4b0f      	ldr	r3, [pc, #60]	; (8006e28 <rfalNfcDepInitialize+0x40>)
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 8006dea:	20fe      	movs	r0, #254	; 0xfe
    gNfcip.isDeactivating = NULL;
 8006dec:	2200      	movs	r2, #0
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 8006dee:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8006df2:	f04f 0c02 	mov.w	ip, #2
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 8006df6:	f8a3 005c 	strh.w	r0, [r3, #92]	; 0x5c
    gNfcip.cfg.gbLen = 0;    
 8006dfa:	f44f 7040 	mov.w	r0, #768	; 0x300
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 8006dfe:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    gNfcip.isDeactivating = NULL;
 8006e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    gNfcip.isWait4RTOX    = false;
 8006e06:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    gNfcip.isReqPending   = false;
 8006e0a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8006e0e:	719a      	strb	r2, [r3, #6]
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8006e10:	f8c3 c002 	str.w	ip, [r3, #2]
    gNfcip.cfg.gbLen = 0;    
 8006e14:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
    gNfcip.state          = NFCIP_ST_IDLE;
 8006e18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    gNfcip.RTOXTimer = 0;
 8006e1c:	67da      	str	r2, [r3, #124]	; 0x7c
    gNfcip.cntATNRetrys  = 0;
 8006e1e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    gNfcip.cntTxRetrys   = 0;
 8006e22:	f8c3 2056 	str.w	r2, [r3, #86]	; 0x56
}
 8006e26:	4770      	bx	lr
 8006e28:	20000af8 	.word	0x20000af8

08006e2c <rfalNfcDepATR>:
{
 8006e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e30:	b0b8      	sub	sp, #224	; 0xe0
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 8006e32:	2800      	cmp	r0, #0
 8006e34:	f000 80b4 	beq.w	8006fa0 <rfalNfcDepATR+0x174>
 8006e38:	460e      	mov	r6, r1
 8006e3a:	2900      	cmp	r1, #0
 8006e3c:	f000 80b0 	beq.w	8006fa0 <rfalNfcDepATR+0x174>
 8006e40:	4617      	mov	r7, r2
 8006e42:	2a00      	cmp	r2, #0
 8006e44:	f000 80ac 	beq.w	8006fa0 <rfalNfcDepATR+0x174>
    cfg.did  = param->DID;
 8006e48:	f8d0 2009 	ldr.w	r2, [r0, #9]
 8006e4c:	f8cd 2093 	str.w	r2, [sp, #147]	; 0x93
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 8006e50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e54:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
    cfg.gbLen = param->GBLen;
 8006e58:	7d02      	ldrb	r2, [r0, #20]
    cfg.lr   = param->LR;
 8006e5a:	7b43      	ldrb	r3, [r0, #13]
 8006e5c:	f88d 30d3 	strb.w	r3, [sp, #211]	; 0xd3
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 8006e60:	230e      	movs	r3, #14
    cfg.did  = param->DID;
 8006e62:	f890 8009 	ldrb.w	r8, [r0, #9]
    cfg.gbLen = param->GBLen;
 8006e66:	f88d 20d2 	strb.w	r2, [sp, #210]	; 0xd2
 8006e6a:	4605      	mov	r5, r0
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 8006e6c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 8006e70:	2a00      	cmp	r2, #0
 8006e72:	d172      	bne.n	8006f5a <rfalNfcDepATR+0x12e>
    cfg.nfcidLen = param->nfcidLen;
 8006e74:	7a2a      	ldrb	r2, [r5, #8]
 8006e76:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	d167      	bne.n	8006f4e <rfalNfcDepATR+0x122>
    gNfcip.isDeactivating = NULL;
 8006e7e:	4c53      	ldr	r4, [pc, #332]	; (8006fcc <rfalNfcDepATR+0x1a0>)
    cfg.oper     = param->operParam;
 8006e80:	786a      	ldrb	r2, [r5, #1]
 8006e82:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 8006e86:	2300      	movs	r3, #0
    cfg.commMode = param->commMode;
 8006e88:	782d      	ldrb	r5, [r5, #0]
    gNfcip.isReqPending   = false;
 8006e8a:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
    gNfcip.cntTxRetrys   = 0;
 8006e8e:	f8c4 3056 	str.w	r3, [r4, #86]	; 0x56
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 8006e92:	2250      	movs	r2, #80	; 0x50
 8006e94:	a924      	add	r1, sp, #144	; 0x90
 8006e96:	4620      	mov	r0, r4
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 8006e98:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    cfg.commMode = param->commMode;
 8006e9c:	f88d 5091 	strb.w	r5, [sp, #145]	; 0x91
    gNfcip.isDeactivating = NULL;
 8006ea0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    gNfcip.isWait4RTOX    = false;
 8006ea4:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
    gNfcip.pni       = 0;    
 8006ea8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    gNfcip.RTOXTimer = 0;
 8006eac:	67e3      	str	r3, [r4, #124]	; 0x7c
    gNfcip.cntATNRetrys  = 0;
 8006eae:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 8006eb2:	f004 fd95 	bl	800b9e0 <memcpy>
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 8006eb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 8006eba:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 8006ebe:	f1b8 0f0e 	cmp.w	r8, #14
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 8006ec2:	f103 0301 	add.w	r3, r3, #1
 8006ec6:	ea4f 1383 	mov.w	r3, r3, lsl #6
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 8006eca:	bf28      	it	cs
 8006ecc:	f04f 080e 	movcs.w	r8, #14
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 8006ed0:	2a0e      	cmp	r2, #14
 8006ed2:	bf28      	it	cs
 8006ed4:	220e      	movcs	r2, #14
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 8006ed6:	2bfd      	cmp	r3, #253	; 0xfd
 8006ed8:	bf94      	ite	ls
 8006eda:	b29b      	uxthls	r3, r3
 8006edc:	23fe      	movhi	r3, #254	; 0xfe
 8006ede:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 8006ee2:	2301      	movs	r3, #1
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 8006ee4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 8006ee8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 8006eec:	4a38      	ldr	r2, [pc, #224]	; (8006fd0 <rfalNfcDepATR+0x1a4>)
 8006eee:	4b39      	ldr	r3, [pc, #228]	; (8006fd4 <rfalNfcDepATR+0x1a8>)
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 8006ef0:	f884 8003 	strb.w	r8, [r4, #3]
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 8006ef4:	2d01      	cmp	r5, #1
 8006ef6:	bf18      	it	ne
 8006ef8:	4613      	movne	r3, r2
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 8006efa:	9301      	str	r3, [sp, #4]
    gNfcip.rxBuf       = rxBuf;
 8006efc:	aa13      	add	r2, sp, #76	; 0x4c
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 8006efe:	2300      	movs	r3, #0
 8006f00:	9300      	str	r3, [sp, #0]
    gNfcip.rxBuf       = rxBuf;
 8006f02:	6662      	str	r2, [r4, #100]	; 0x64
    gNfcip.rxBufLen    = rxBufLen;
 8006f04:	2241      	movs	r2, #65	; 0x41
 8006f06:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 8006f0a:	f10d 020a 	add.w	r2, sp, #10
 8006f0e:	66e2      	str	r2, [r4, #108]	; 0x6c
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 8006f10:	4618      	mov	r0, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	a903      	add	r1, sp, #12
 8006f16:	f7ff fe11 	bl	8006b3c <nfcipTx>
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	b998      	cbnz	r0, 8006f46 <rfalNfcDepATR+0x11a>
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
    {
        ret = rfalTransceiveBlockingRx();
 8006f1e:	f003 fdcb 	bl	800aab8 <rfalTransceiveBlockingRx>
    else
    {
        ret = rfalGetTransceiveStatus();
    }
    
    if( ret != ERR_BUSY )
 8006f22:	2802      	cmp	r0, #2
 8006f24:	d041      	beq.n	8006faa <rfalNfcDepATR+0x17e>
    {
        if( gNfcip.rxRcvdLen != NULL )
 8006f26:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006f28:	b311      	cbz	r1, 8006f70 <rfalNfcDepATR+0x144>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 8006f2a:	880a      	ldrh	r2, [r1, #0]
 8006f2c:	3207      	adds	r2, #7
 8006f2e:	08d2      	lsrs	r2, r2, #3
 8006f30:	800a      	strh	r2, [r1, #0]
                        
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d139      	bne.n	8006faa <rfalNfcDepATR+0x17e>
 8006f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f38:	b1db      	cbz	r3, 8006f72 <rfalNfcDepATR+0x146>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d101      	bne.n	8006f44 <rfalNfcDepATR+0x118>
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d816      	bhi.n	8006f72 <rfalNfcDepATR+0x146>
                {
                    return ERR_FRAMING;
 8006f44:	2509      	movs	r5, #9
}
 8006f46:	4628      	mov	r0, r5
 8006f48:	b038      	add	sp, #224	; 0xe0
 8006f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ST_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 8006f4e:	6869      	ldr	r1, [r5, #4]
 8006f50:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8006f54:	f004 fd44 	bl	800b9e0 <memcpy>
 8006f58:	e791      	b.n	8006e7e <rfalNfcDepATR+0x52>
        ST_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 8006f5a:	6901      	ldr	r1, [r0, #16]
 8006f5c:	f10d 00a2 	add.w	r0, sp, #162	; 0xa2
 8006f60:	f004 fd3e 	bl	800b9e0 <memcpy>
    cfg.nfcidLen = param->nfcidLen;
 8006f64:	7a2a      	ldrb	r2, [r5, #8]
 8006f66:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 8006f6a:	2a00      	cmp	r2, #0
 8006f6c:	d087      	beq.n	8006e7e <rfalNfcDepATR+0x52>
 8006f6e:	e7ee      	b.n	8006f4e <rfalNfcDepATR+0x122>
    if( ret != ERR_NONE )
 8006f70:	b9d8      	cbnz	r0, 8006faa <rfalNfcDepATR+0x17e>
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 8006f72:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 8006f76:	1e62      	subs	r2, r4, #1
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 8006f78:	f1a4 0312 	sub.w	r3, r4, #18
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 8006f7c:	b292      	uxth	r2, r2
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 8006f7e:	2b2f      	cmp	r3, #47	; 0x2f
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 8006f80:	f8ad 200a 	strh.w	r2, [sp, #10]
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 8006f84:	d807      	bhi.n	8006f96 <rfalNfcDepATR+0x16a>
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 8006f86:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 8006f8a:	2bd5      	cmp	r3, #213	; 0xd5
 8006f8c:	d103      	bne.n	8006f96 <rfalNfcDepATR+0x16a>
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 8006f8e:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d00e      	beq.n	8006fb4 <rfalNfcDepATR+0x188>
        return ERR_PROTO;
 8006f96:	250b      	movs	r5, #11
}
 8006f98:	4628      	mov	r0, r5
 8006f9a:	b038      	add	sp, #224	; 0xe0
 8006f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return ERR_PARAM;
 8006fa0:	2507      	movs	r5, #7
}
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	b038      	add	sp, #224	; 0xe0
 8006fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006faa:	4605      	mov	r5, r0
 8006fac:	4628      	mov	r0, r5
 8006fae:	b038      	add	sp, #224	; 0xe0
 8006fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ST_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f10d 014d 	add.w	r1, sp, #77	; 0x4d
 8006fba:	f004 fd11 	bl	800b9e0 <memcpy>
    *atrResLen = (uint8_t)rxLen;
 8006fbe:	3c01      	subs	r4, #1
}
 8006fc0:	4628      	mov	r0, r5
    *atrResLen = (uint8_t)rxLen;
 8006fc2:	703c      	strb	r4, [r7, #0]
}
 8006fc4:	b038      	add	sp, #224	; 0xe0
 8006fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000af8 	.word	0x20000af8
 8006fd0:	01000201 	.word	0x01000201
 8006fd4:	00200201 	.word	0x00200201

08006fd8 <rfalNfcDepPSL>:
{
 8006fd8:	b510      	push	{r4, lr}
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 8006fda:	4c32      	ldr	r4, [pc, #200]	; (80070a4 <rfalNfcDepPSL+0xcc>)
 8006fdc:	4b32      	ldr	r3, [pc, #200]	; (80070a8 <rfalNfcDepPSL+0xd0>)
 8006fde:	f894 c001 	ldrb.w	ip, [r4, #1]
 8006fe2:	4a32      	ldr	r2, [pc, #200]	; (80070ac <rfalNfcDepPSL+0xd4>)
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 8006fe4:	f894 e003 	ldrb.w	lr, [r4, #3]
{
 8006fe8:	b088      	sub	sp, #32
    txBuf[msgIt++] = FSL;
 8006fea:	f88d 101d 	strb.w	r1, [sp, #29]
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 8006fee:	f1bc 0f01 	cmp.w	ip, #1
 8006ff2:	bf0c      	ite	eq
 8006ff4:	4619      	moveq	r1, r3
 8006ff6:	4611      	movne	r1, r2
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8006ff8:	f8b4 c05c 	ldrh.w	ip, [r4, #92]	; 0x5c
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 8006ffc:	f88d e01b 	strb.w	lr, [sp, #27]
    gNfcip.rxBufLen    = rxBufLen;
 8007000:	2304      	movs	r3, #4
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8007002:	f64f 7e04 	movw	lr, #65284	; 0xff04
    txBuf[msgIt++] = BRS;
 8007006:	f88d 001c 	strb.w	r0, [sp, #28]
    gNfcip.rxBuf       = rxBuf;
 800700a:	aa05      	add	r2, sp, #20
    gNfcip.rxRcvdLen   = rxActLen;
 800700c:	f10d 0012 	add.w	r0, sp, #18
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8007010:	f8a4 e052 	strh.w	lr, [r4, #82]	; 0x52
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8007014:	459c      	cmp	ip, r3
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8007016:	f04f 0ed4 	mov.w	lr, #212	; 0xd4
    gNfcip.rxBuf       = rxBuf;
 800701a:	6662      	str	r2, [r4, #100]	; 0x64
    gNfcip.rxBufLen    = rxBufLen;
 800701c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 8007020:	66e0      	str	r0, [r4, #108]	; 0x6c
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 8007022:	f88d 301a 	strb.w	r3, [sp, #26]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8007026:	f88d e019 	strb.w	lr, [sp, #25]
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800702a:	d91d      	bls.n	8007068 <rfalNfcDepPSL+0x90>
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 800702c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8007030:	9000      	str	r0, [sp, #0]
 8007032:	2105      	movs	r1, #5
 8007034:	f10d 0019 	add.w	r0, sp, #25
 8007038:	f003 fcd4 	bl	800a9e4 <rfalTransceiveBlockingTx>
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 800703c:	b990      	cbnz	r0, 8007064 <rfalNfcDepPSL+0x8c>
        ret = rfalTransceiveBlockingRx();
 800703e:	f003 fd3b 	bl	800aab8 <rfalTransceiveBlockingRx>
    if( ret != ERR_BUSY )
 8007042:	2802      	cmp	r0, #2
 8007044:	d00e      	beq.n	8007064 <rfalNfcDepPSL+0x8c>
        if( gNfcip.rxRcvdLen != NULL )
 8007046:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007048:	b18a      	cbz	r2, 800706e <rfalNfcDepPSL+0x96>
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 800704a:	8813      	ldrh	r3, [r2, #0]
 800704c:	3307      	adds	r3, #7
 800704e:	08db      	lsrs	r3, r3, #3
 8007050:	8013      	strh	r3, [r2, #0]
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 8007052:	b938      	cbnz	r0, 8007064 <rfalNfcDepPSL+0x8c>
 8007054:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007056:	b162      	cbz	r2, 8007072 <rfalNfcDepPSL+0x9a>
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 8007058:	7812      	ldrb	r2, [r2, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d101      	bne.n	8007062 <rfalNfcDepPSL+0x8a>
 800705e:	2a02      	cmp	r2, #2
 8007060:	d807      	bhi.n	8007072 <rfalNfcDepPSL+0x9a>
                    return ERR_FRAMING;
 8007062:	2009      	movs	r0, #9
}
 8007064:	b008      	add	sp, #32
 8007066:	bd10      	pop	{r4, pc}
        return ERR_NOTSUPP;
 8007068:	2018      	movs	r0, #24
}
 800706a:	b008      	add	sp, #32
 800706c:	bd10      	pop	{r4, pc}
    if( ret != ERR_NONE )
 800706e:	2800      	cmp	r0, #0
 8007070:	d1f8      	bne.n	8007064 <rfalNfcDepPSL+0x8c>
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 8007072:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007076:	2b03      	cmp	r3, #3
 8007078:	d910      	bls.n	800709c <rfalNfcDepPSL+0xc4>
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 800707a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800707e:	2bd5      	cmp	r3, #213	; 0xd5
 8007080:	d10c      	bne.n	800709c <rfalNfcDepPSL+0xc4>
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 8007082:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007086:	2b05      	cmp	r3, #5
 8007088:	d108      	bne.n	800709c <rfalNfcDepPSL+0xc4>
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 800708a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800708e:	78e3      	ldrb	r3, [r4, #3]
    return ERR_NONE;
 8007090:	4298      	cmp	r0, r3
 8007092:	bf14      	ite	ne
 8007094:	200b      	movne	r0, #11
 8007096:	2000      	moveq	r0, #0
}
 8007098:	b008      	add	sp, #32
 800709a:	bd10      	pop	{r4, pc}
        return ERR_PROTO;
 800709c:	200b      	movs	r0, #11
}
 800709e:	b008      	add	sp, #32
 80070a0:	bd10      	pop	{r4, pc}
 80070a2:	bf00      	nop
 80070a4:	20000af8 	.word	0x20000af8
 80070a8:	00200201 	.word	0x00200201
 80070ac:	01000201 	.word	0x01000201

080070b0 <rfalNfcDepRLS>:
{   
 80070b0:	b570      	push	{r4, r5, r6, lr}
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 80070b2:	4c35      	ldr	r4, [pc, #212]	; (8007188 <rfalNfcDepRLS+0xd8>)
 80070b4:	7823      	ldrb	r3, [r4, #0]
{   
 80070b6:	b088      	sub	sp, #32
    uint16_t   rxLen = 0;
 80070b8:	2000      	movs	r0, #0
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 80070ba:	2b01      	cmp	r3, #1
    uint16_t   rxLen = 0;
 80070bc:	f8ad 0012 	strh.w	r0, [sp, #18]
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 80070c0:	d03c      	beq.n	800713c <rfalNfcDepRLS+0x8c>
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, RFAL_NFCDEP_ATRRES_MAX_LEN, &rxLen  ) );
 80070c2:	4932      	ldr	r1, [pc, #200]	; (800718c <rfalNfcDepRLS+0xdc>)
 80070c4:	7860      	ldrb	r0, [r4, #1]
 80070c6:	4e32      	ldr	r6, [pc, #200]	; (8007190 <rfalNfcDepRLS+0xe0>)
    gNfcip.rxBufLen    = rxBufLen;
 80070c8:	2340      	movs	r3, #64	; 0x40
 80070ca:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 80070ce:	78e3      	ldrb	r3, [r4, #3]
    gNfcip.rxBuf       = rxBuf;
 80070d0:	aa05      	add	r2, sp, #20
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, RFAL_NFCDEP_ATRRES_MAX_LEN, &rxLen  ) );
 80070d2:	2801      	cmp	r0, #1
 80070d4:	bf08      	it	eq
 80070d6:	460e      	moveq	r6, r1
    gNfcip.rxRcvdLen   = rxActLen;
 80070d8:	f10d 0512 	add.w	r5, sp, #18
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 80070dc:	f64f 710a 	movw	r1, #65290	; 0xff0a
    gNfcip.rxBuf       = rxBuf;
 80070e0:	6662      	str	r2, [r4, #100]	; 0x64
    gNfcip.rxRcvdLen   = rxActLen;
 80070e2:	66e5      	str	r5, [r4, #108]	; 0x6c
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 80070e4:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 80070e8:	bb53      	cbnz	r3, 8007140 <rfalNfcDepRLS+0x90>
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 80070ea:	f10d 011d 	add.w	r1, sp, #29
 80070ee:	460b      	mov	r3, r1
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 80070f0:	1e98      	subs	r0, r3, #2
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 80070f2:	f8b4 c05c 	ldrh.w	ip, [r4, #92]	; 0x5c
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 80070f6:	1a09      	subs	r1, r1, r0
 80070f8:	b289      	uxth	r1, r1
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 80070fa:	f640 2ed4 	movw	lr, #2772	; 0xad4
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 80070fe:	458c      	cmp	ip, r1
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8007100:	f823 ec02 	strh.w	lr, [r3, #-2]
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8007104:	d322      	bcc.n	800714c <rfalNfcDepRLS+0x9c>
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 8007106:	9500      	str	r5, [sp, #0]
 8007108:	2504      	movs	r5, #4
 800710a:	9602      	str	r6, [sp, #8]
 800710c:	2340      	movs	r3, #64	; 0x40
 800710e:	9501      	str	r5, [sp, #4]
 8007110:	f003 fc68 	bl	800a9e4 <rfalTransceiveBlockingTx>
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 8007114:	b990      	cbnz	r0, 800713c <rfalNfcDepRLS+0x8c>
        ret = rfalTransceiveBlockingRx();
 8007116:	f003 fccf 	bl	800aab8 <rfalTransceiveBlockingRx>
    if( ret != ERR_BUSY )
 800711a:	2802      	cmp	r0, #2
 800711c:	d00e      	beq.n	800713c <rfalNfcDepRLS+0x8c>
        if( gNfcip.rxRcvdLen != NULL )
 800711e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007120:	b1ba      	cbz	r2, 8007152 <rfalNfcDepRLS+0xa2>
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 8007122:	8813      	ldrh	r3, [r2, #0]
 8007124:	3307      	adds	r3, #7
 8007126:	08db      	lsrs	r3, r3, #3
 8007128:	8013      	strh	r3, [r2, #0]
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 800712a:	b938      	cbnz	r0, 800713c <rfalNfcDepRLS+0x8c>
 800712c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800712e:	b192      	cbz	r2, 8007156 <rfalNfcDepRLS+0xa6>
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 8007130:	7812      	ldrb	r2, [r2, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d101      	bne.n	800713a <rfalNfcDepRLS+0x8a>
 8007136:	2a02      	cmp	r2, #2
 8007138:	d80d      	bhi.n	8007156 <rfalNfcDepRLS+0xa6>
                    return ERR_FRAMING;
 800713a:	2009      	movs	r0, #9
}
 800713c:	b008      	add	sp, #32
 800713e:	bd70      	pop	{r4, r5, r6, pc}
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8007140:	f88d 301c 	strb.w	r3, [sp, #28]
 8007144:	f10d 011d 	add.w	r1, sp, #29
 8007148:	ab07      	add	r3, sp, #28
 800714a:	e7d1      	b.n	80070f0 <rfalNfcDepRLS+0x40>
        return ERR_NOTSUPP;
 800714c:	2018      	movs	r0, #24
}
 800714e:	b008      	add	sp, #32
 8007150:	bd70      	pop	{r4, r5, r6, pc}
    if( ret != ERR_NONE )
 8007152:	2800      	cmp	r0, #0
 8007154:	d1f2      	bne.n	800713c <rfalNfcDepRLS+0x8c>
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 8007156:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800715a:	2b02      	cmp	r3, #2
 800715c:	d911      	bls.n	8007182 <rfalNfcDepRLS+0xd2>
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 800715e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8007162:	2bd5      	cmp	r3, #213	; 0xd5
 8007164:	d10d      	bne.n	8007182 <rfalNfcDepRLS+0xd2>
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 8007166:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800716a:	2b0b      	cmp	r3, #11
 800716c:	d109      	bne.n	8007182 <rfalNfcDepRLS+0xd2>
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800716e:	78e0      	ldrb	r0, [r4, #3]
 8007170:	2800      	cmp	r0, #0
 8007172:	d0e3      	beq.n	800713c <rfalNfcDepRLS+0x8c>
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 8007174:	f89d 3017 	ldrb.w	r3, [sp, #23]
            return ERR_PROTO;
 8007178:	4283      	cmp	r3, r0
 800717a:	bf14      	ite	ne
 800717c:	200b      	movne	r0, #11
 800717e:	2000      	moveq	r0, #0
 8007180:	e7dc      	b.n	800713c <rfalNfcDepRLS+0x8c>
 8007182:	200b      	movs	r0, #11
}
 8007184:	b008      	add	sp, #32
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	20000af8 	.word	0x20000af8
 800718c:	00200201 	.word	0x00200201
 8007190:	01000201 	.word	0x01000201

08007194 <rfalNfcDepInitiatorHandleActivation>:
{
 8007194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if( (param == NULL) || (nfcDepDev == NULL) )
 8007198:	2800      	cmp	r0, #0
 800719a:	d057      	beq.n	800724c <rfalNfcDepInitiatorHandleActivation+0xb8>
 800719c:	4614      	mov	r4, r2
 800719e:	2a00      	cmp	r2, #0
 80071a0:	d054      	beq.n	800724c <rfalNfcDepInitiatorHandleActivation+0xb8>
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 80071a2:	2300      	movs	r3, #0
         if( nfcipIsTransmissionError(ret) )
 80071a4:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80072b4 <rfalNfcDepInitiatorHandleActivation+0x120>
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 80071a8:	7283      	strb	r3, [r0, #10]
 80071aa:	460f      	mov	r7, r1
 80071ac:	4606      	mov	r6, r0
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 80071ae:	f102 0a41 	add.w	sl, r2, #65	; 0x41
 80071b2:	f04f 0803 	mov.w	r8, #3
 80071b6:	4652      	mov	r2, sl
 80071b8:	4621      	mov	r1, r4
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff fe36 	bl	8006e2c <rfalNfcDepATR>
         if( nfcipIsTransmissionError(ret) )
 80071c0:	281b      	cmp	r0, #27
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 80071c2:	4605      	mov	r5, r0
         if( nfcipIsTransmissionError(ret) )
 80071c4:	fa29 f300 	lsr.w	r3, r9, r0
 80071c8:	d83d      	bhi.n	8007246 <rfalNfcDepInitiatorHandleActivation+0xb2>
 80071ca:	f013 0f01 	tst.w	r3, #1
    while( (maxRetyrs--) != 0U );
 80071ce:	f108 38ff 	add.w	r8, r8, #4294967295
         if( nfcipIsTransmissionError(ret) )
 80071d2:	d002      	beq.n	80071da <rfalNfcDepInitiatorHandleActivation+0x46>
    while( (maxRetyrs--) != 0U );
 80071d4:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 80071d8:	d1ed      	bne.n	80071b6 <rfalNfcDepInitiatorHandleActivation+0x22>
    if( ret != ERR_NONE )
 80071da:	bba5      	cbnz	r5, 8007246 <rfalNfcDepInitiatorHandleActivation+0xb2>
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 80071dc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 80071e0:	7c23      	ldrb	r3, [r4, #16]
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 80071e2:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 80071e6:	3a11      	subs	r2, #17
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 80071e8:	f3c3 1301 	ubfx	r3, r3, #4, #2
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 80071ec:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 80071f0:	7b22      	ldrb	r2, [r4, #12]
 80071f2:	f884 2056 	strb.w	r2, [r4, #86]	; 0x56
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	0192      	lsls	r2, r2, #6
 80071fa:	2afd      	cmp	r2, #253	; 0xfd
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 80071fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 8007200:	bf98      	it	ls
 8007202:	4613      	movls	r3, r2
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 8007204:	7be2      	ldrb	r2, [r4, #15]
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 8007206:	bf88      	it	hi
 8007208:	23fe      	movhi	r3, #254	; 0xfe
 800720a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 800720e:	f002 030f 	and.w	r3, r2, #15
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 8007212:	2b0e      	cmp	r3, #14
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 8007214:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 8007218:	bf28      	it	cs
 800721a:	230e      	movcs	r3, #14
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 800721c:	2201      	movs	r2, #1
 800721e:	330c      	adds	r3, #12
 8007220:	fa02 f303 	lsl.w	r3, r2, r3
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 8007224:	220c      	movs	r2, #12
 8007226:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 800722a:	f104 0155 	add.w	r1, r4, #85	; 0x55
 800722e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8007232:	f003 fb1f 	bl	800a874 <rfalGetBitRate>
    if( nfcDepDev->info.DSI != desiredBR )    /* if desired BR is different    */
 8007236:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800723a:	42bb      	cmp	r3, r7
 800723c:	d003      	beq.n	8007246 <rfalNfcDepInitiatorHandleActivation+0xb2>
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 800723e:	2f02      	cmp	r7, #2
 8007240:	d90f      	bls.n	8007262 <rfalNfcDepInitiatorHandleActivation+0xce>
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 8007242:	2f03      	cmp	r7, #3
 8007244:	d006      	beq.n	8007254 <rfalNfcDepInitiatorHandleActivation+0xc0>
}
 8007246:	4628      	mov	r0, r5
 8007248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return ERR_PARAM;
 800724c:	2507      	movs	r5, #7
}
 800724e:	4628      	mov	r0, r5
 8007250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Bx = MIN(BRx, BSx);
 8007254:	7ba3      	ldrb	r3, [r4, #14]
 8007256:	7b62      	ldrb	r2, [r4, #13]
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 8007258:	4293      	cmp	r3, r2
 800725a:	bf28      	it	cs
 800725c:	4613      	movcs	r3, r2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0f1      	beq.n	8007246 <rfalNfcDepInitiatorHandleActivation+0xb2>
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 8007262:	00fb      	lsls	r3, r7, #3
 8007264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007268:	f007 0007 	and.w	r0, r7, #7
        EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 800726c:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 8007270:	4318      	orrs	r0, r3
 8007272:	f7ff feb1 	bl	8006fd8 <rfalNfcDepPSL>
 8007276:	b9a8      	cbnz	r0, 80072a4 <rfalNfcDepInitiatorHandleActivation+0x110>
        if( nfcDepDev->info.DSI != desiredBR )
 8007278:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800727c:	42bb      	cmp	r3, r7
 800727e:	d0e2      	beq.n	8007246 <rfalNfcDepInitiatorHandleActivation+0xb2>
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 8007280:	4a0b      	ldr	r2, [pc, #44]	; (80072b0 <rfalNfcDepInitiatorHandleActivation+0x11c>)
 8007282:	7852      	ldrb	r2, [r2, #1]
 8007284:	4313      	orrs	r3, r2
 8007286:	d00f      	beq.n	80072a8 <rfalNfcDepInitiatorHandleActivation+0x114>
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	f367 0307 	bfi	r3, r7, #0, #8
 8007290:	f367 230f 	bfi	r3, r7, #8, #8
 8007294:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 8007298:	4639      	mov	r1, r7
 800729a:	4638      	mov	r0, r7
 800729c:	f003 facc 	bl	800a838 <rfalSetBitRate>
        return ERR_NONE;   /* PSL has been sent    */
 80072a0:	2500      	movs	r5, #0
 80072a2:	e7d0      	b.n	8007246 <rfalNfcDepInitiatorHandleActivation+0xb2>
 80072a4:	4605      	mov	r5, r0
 80072a6:	e7ce      	b.n	8007246 <rfalNfcDepInitiatorHandleActivation+0xb2>
                rfalNfcfPollerInitialize( desiredBR );
 80072a8:	4638      	mov	r0, r7
 80072aa:	f001 fbfd 	bl	8008aa8 <rfalNfcfPollerInitialize>
 80072ae:	e7eb      	b.n	8007288 <rfalNfcDepInitiatorHandleActivation+0xf4>
 80072b0:	20000af8 	.word	0x20000af8
 80072b4:	08200200 	.word	0x08200200

080072b8 <rfalNfcDepStartTransceive>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepStartTransceive( rfalNfcDepTxRxParam *param )
{
 80072b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nfcDepParams.rxBufLen     = sizeof(rfalNfcDepBufFormat);
    nfcDepParams.fsc          = param->FSx;
    nfcDepParams.fwt          = param->FWT;
    nfcDepParams.dFwt         = param->dFWT;

    gNfcip.rxRcvdLen          = param->rxLen;
 80072bc:	4b20      	ldr	r3, [pc, #128]	; (8007340 <rfalNfcDepStartTransceive+0x88>)
    nfcDepParams.fsc          = param->FSx;
 80072be:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 80072c2:	7819      	ldrb	r1, [r3, #0]
    nfcDepParams.txBufLen     = param->txBufLen;
 80072c4:	8882      	ldrh	r2, [r0, #4]
    nfcDepParams.txChaining   = param->isTxChaining;
 80072c6:	f890 e006 	ldrb.w	lr, [r0, #6]
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
 80072ca:	6807      	ldr	r7, [r0, #0]
    nfcDepParams.txBuf        = (uint8_t *)param->txBuf;
 80072cc:	6886      	ldr	r6, [r0, #8]
 80072ce:	f8d0 8010 	ldr.w	r8, [r0, #16]
    nfcDepParams.fwt          = param->FWT;
 80072d2:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
    gNfcip.rxRcvdLen          = param->rxLen;
 80072d6:	68c0      	ldr	r0, [r0, #12]
 80072d8:	66d8      	str	r0, [r3, #108]	; 0x6c
    gNfcip.fsc          = DEPParams->fsc;
 80072da:	f8a3 c05c 	strh.w	ip, [r3, #92]	; 0x5c
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 80072de:	f240 5005 	movw	r0, #1285	; 0x505
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 80072e2:	f240 1c03 	movw	ip, #259	; 0x103
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 80072e6:	2901      	cmp	r1, #1
    gNfcip.txBuf        = DEPParams->txBuf;
 80072e8:	e9c3 7618 	strd	r7, r6, [r3, #96]	; 0x60
    gNfcip.isChaining         = param->isRxChaining;
 80072ec:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
    gNfcip.isTxChaining = DEPParams->txChaining;
 80072f0:	f883 e05e 	strb.w	lr, [r3, #94]	; 0x5e
    gNfcip.cfg.fwt      = DEPParams->fwt;
 80072f4:	649d      	str	r5, [r3, #72]	; 0x48
    gNfcip.txBufLen     = DEPParams->txBufLen;
 80072f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    gNfcip.cfg.fwt      = DEPParams->fwt;
 80072fa:	64dc      	str	r4, [r3, #76]	; 0x4c
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 80072fc:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 8007300:	f8a3 0070 	strh.w	r0, [r3, #112]	; 0x70
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 8007304:	d00a      	beq.n	800731c <rfalNfcDepStartTransceive+0x64>
    gNfcip.cntATNRetrys  = 0;
 8007306:	2200      	movs	r2, #0
    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8007308:	2105      	movs	r1, #5
    gNfcip.cntATNRetrys  = 0;
 800730a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    gNfcip.cntTxRetrys   = 0;
 800730e:	f8c3 2056 	str.w	r2, [r3, #86]	; 0x56
    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8007312:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50

    nfcipSetDEPParams(&nfcDepParams);
    
    return ERR_NONE;
}
 8007316:	2000      	movs	r0, #0
 8007318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(DEPParams->txBufLen > 0U)
 800731c:	b152      	cbz	r2, 8007334 <rfalNfcDepStartTransceive+0x7c>
            if( !gNfcip.isWait4RTOX )
 800731e:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8007322:	b92a      	cbnz	r2, 8007330 <rfalNfcDepStartTransceive+0x78>
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8007324:	220f      	movs	r2, #15
 8007326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800732a:	2000      	movs	r0, #0
 800732c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                gNfcip.isTxPending = true;
 8007330:	f883 1085 	strb.w	r1, [r3, #133]	; 0x85
        gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8007334:	220d      	movs	r2, #13
 8007336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800733a:	2000      	movs	r0, #0
 800733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007340:	20000af8 	.word	0x20000af8

08007344 <rfalNfcDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 8007348:	4cbc      	ldr	r4, [pc, #752]	; (800763c <rfalNfcDepGetTransceiveStatus+0x2f8>)
    switch( gNfcip.state )
 800734a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 800734e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8007350:	6f65      	ldr	r5, [r4, #116]	; 0x74
{
 8007352:	b08f      	sub	sp, #60	; 0x3c
    switch( gNfcip.state )
 8007354:	2b10      	cmp	r3, #16
 8007356:	d812      	bhi.n	800737e <rfalNfcDepGetTransceiveStatus+0x3a>
 8007358:	e8df f013 	tbh	[pc, r3, lsl #1]
 800735c:	00110016 	.word	0x00110016
 8007360:	00110011 	.word	0x00110011
 8007364:	01370016 	.word	0x01370016
 8007368:	0011004d 	.word	0x0011004d
 800736c:	00110011 	.word	0x00110011
 8007370:	00110011 	.word	0x00110011
 8007374:	001e0016 	.word	0x001e0016
 8007378:	011400d2 	.word	0x011400d2
 800737c:	0016      	.short	0x0016
 800737e:	2314      	movs	r3, #20
}
 8007380:	4618      	mov	r0, r3
 8007382:	b00f      	add	sp, #60	; 0x3c
 8007384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return ERR_NONE;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	b00f      	add	sp, #60	; 0x3c
 800738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 8007392:	230d      	movs	r3, #13
 8007394:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 8007398:	f894 7084 	ldrb.w	r7, [r4, #132]	; 0x84
 800739c:	2f00      	cmp	r7, #0
 800739e:	f000 812e 	beq.w	80075fe <rfalNfcDepGetTransceiveStatus+0x2ba>
                gNfcip.isReqPending = false;
 80073a2:	2300      	movs	r3, #0
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 80073a4:	6e67      	ldr	r7, [r4, #100]	; 0x64
                gNfcip.isReqPending = false;
 80073a6:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    *outActRxLen    = 0;
 80073aa:	8033      	strh	r3, [r6, #0]
    *outIsChaining  = false;
 80073ac:	702b      	strb	r3, [r5, #0]
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 80073ae:	787b      	ldrb	r3, [r7, #1]
 80073b0:	2bd4      	cmp	r3, #212	; 0xd4
 80073b2:	d10a      	bne.n	80073ca <rfalNfcDepGetTransceiveStatus+0x86>
    switch( gNfcip.rxBuf[rxMsgIt++] )
 80073b4:	78bb      	ldrb	r3, [r7, #2]
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 80073b6:	783a      	ldrb	r2, [r7, #0]
    switch( gNfcip.rxBuf[rxMsgIt++] )
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	f000 822f 	beq.w	800781c <rfalNfcDepGetTransceiveStatus+0x4d8>
 80073be:	2b0a      	cmp	r3, #10
 80073c0:	f000 81f0 	beq.w	80077a4 <rfalNfcDepGetTransceiveStatus+0x460>
 80073c4:	2b06      	cmp	r3, #6
 80073c6:	f000 8265 	beq.w	8007894 <rfalNfcDepGetTransceiveStatus+0x550>
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80073ca:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80073cc:	2100      	movs	r1, #0
 80073ce:	f04f 30ff 	mov.w	r0, #4294967295
 80073d2:	9002      	str	r0, [sp, #8]
 80073d4:	2004      	movs	r0, #4
 80073d6:	e9cd 2000 	strd	r2, r0, [sp]
 80073da:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80073de:	463a      	mov	r2, r7
 80073e0:	4608      	mov	r0, r1
 80073e2:	f003 faff 	bl	800a9e4 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore bad request */
 80073e6:	2302      	movs	r3, #2
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	b00f      	add	sp, #60	; 0x3c
 80073ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 80073f0:	2306      	movs	r3, #6
 80073f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        ret = rfalGetTransceiveStatus();
 80073f6:	f003 fc47 	bl	800ac88 <rfalGetTransceiveStatus>
    if( ret != ERR_BUSY )
 80073fa:	2802      	cmp	r0, #2
        ret = rfalGetTransceiveStatus();
 80073fc:	4603      	mov	r3, r0
    if( ret != ERR_BUSY )
 80073fe:	d0f2      	beq.n	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
        if( gNfcip.rxRcvdLen != NULL )
 8007400:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007402:	2900      	cmp	r1, #0
 8007404:	f000 811c 	beq.w	8007640 <rfalNfcDepGetTransceiveStatus+0x2fc>
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 8007408:	880a      	ldrh	r2, [r1, #0]
 800740a:	3207      	adds	r2, #7
 800740c:	08d2      	lsrs	r2, r2, #3
 800740e:	800a      	strh	r2, [r1, #0]
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 8007410:	2800      	cmp	r0, #0
 8007412:	f040 8115 	bne.w	8007640 <rfalNfcDepGetTransceiveStatus+0x2fc>
 8007416:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007418:	2900      	cmp	r1, #0
 800741a:	f000 81ba 	beq.w	8007792 <rfalNfcDepGetTransceiveStatus+0x44e>
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 800741e:	780b      	ldrb	r3, [r1, #0]
 8007420:	4293      	cmp	r3, r2
 8007422:	f040 8157 	bne.w	80076d4 <rfalNfcDepGetTransceiveStatus+0x390>
 8007426:	2b02      	cmp	r3, #2
 8007428:	f240 8154 	bls.w	80076d4 <rfalNfcDepGetTransceiveStatus+0x390>
    *outActRxLen    = 0;
 800742c:	8030      	strh	r0, [r6, #0]
    *outIsChaining  = false;
 800742e:	7028      	strb	r0, [r5, #0]
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 8007430:	784b      	ldrb	r3, [r1, #1]
 8007432:	2bd5      	cmp	r3, #213	; 0xd5
 8007434:	f040 81a2 	bne.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 8007438:	7888      	ldrb	r0, [r1, #2]
 800743a:	2807      	cmp	r0, #7
 800743c:	f040 819e 	bne.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 8007440:	78cf      	ldrb	r7, [r1, #3]
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8007442:	f007 03e0 	and.w	r3, r7, #224	; 0xe0
 8007446:	2b80      	cmp	r3, #128	; 0x80
 8007448:	d003      	beq.n	8007452 <rfalNfcDepGetTransceiveStatus+0x10e>
 800744a:	f017 0fa0 	tst.w	r7, #160	; 0xa0
 800744e:	f040 8195 	bne.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8007452:	78e2      	ldrb	r2, [r4, #3]
 8007454:	2a00      	cmp	r2, #0
 8007456:	f000 82a2 	beq.w	800799e <rfalNfcDepGetTransceiveStatus+0x65a>
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 800745a:	f891 c004 	ldrb.w	ip, [r1, #4]
 800745e:	4594      	cmp	ip, r2
 8007460:	f040 818c 	bne.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
 8007464:	077a      	lsls	r2, r7, #29
 8007466:	f140 8189 	bpl.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
 800746a:	f04f 0906 	mov.w	r9, #6
 800746e:	f04f 0c05 	mov.w	ip, #5
 8007472:	f04f 0a02 	mov.w	sl, #2
 8007476:	46cb      	mov	fp, r9
 8007478:	2201      	movs	r2, #1
 800747a:	46e0      	mov	r8, ip
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 800747c:	f894 e004 	ldrb.w	lr, [r4, #4]
 8007480:	f1be 0f00 	cmp.w	lr, #0
 8007484:	f000 82ab 	beq.w	80079de <rfalNfcDepGetTransceiveStatus+0x69a>
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || !nfcip_PFBhasNAD( rxPFB ) )
 8007488:	f811 2008 	ldrb.w	r2, [r1, r8]
 800748c:	4572      	cmp	r2, lr
 800748e:	f040 8175 	bne.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
 8007492:	073a      	lsls	r2, r7, #28
 8007494:	f140 8172 	bpl.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
 8007498:	46d8      	mov	r8, fp
 800749a:	46cc      	mov	ip, r9
 800749c:	4652      	mov	r2, sl
    if( nfcip_PFBisRPDU( rxPFB ) )
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	f000 82fa 	beq.w	8007a98 <rfalNfcDepGetTransceiveStatus+0x754>
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 80074a4:	2b80      	cmp	r3, #128	; 0x80
 80074a6:	f000 8344 	beq.w	8007b32 <rfalNfcDepGetTransceiveStatus+0x7ee>
    if( nfcip_PFBisIPDU( rxPFB ) )
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f040 82ce 	bne.w	8007a4c <rfalNfcDepGetTransceiveStatus+0x708>
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 80074b0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80074b4:	f007 0e03 	and.w	lr, r7, #3
 80074b8:	4570      	cmp	r0, lr
 80074ba:	f040 815f 	bne.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80074be:	3001      	adds	r0, #1
 80074c0:	f000 0e03 	and.w	lr, r0, #3
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 80074c4:	7808      	ldrb	r0, [r1, #0]
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80074c6:	f884 e051 	strb.w	lr, [r4, #81]	; 0x51
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 80074ca:	3804      	subs	r0, #4
 80074cc:	1a82      	subs	r2, r0, r2
 80074ce:	b292      	uxth	r2, r2
    gNfcip.cntATNRetrys  = 0;
 80074d0:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
    gNfcip.cntTxRetrys   = 0;
 80074d4:	f8c4 3056 	str.w	r3, [r4, #86]	; 0x56
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 80074d8:	8032      	strh	r2, [r6, #0]
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 80074da:	f894 0071 	ldrb.w	r0, [r4, #113]	; 0x71
 80074de:	4560      	cmp	r0, ip
 80074e0:	d002      	beq.n	80074e8 <rfalNfcDepGetTransceiveStatus+0x1a4>
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	f040 83f4 	bne.w	8007cd0 <rfalNfcDepGetTransceiveStatus+0x98c>
        if( nfcip_PFBisIMI( rxPFB ) )
 80074e8:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
 80074ec:	2f10      	cmp	r7, #16
 80074ee:	f000 83f7 	beq.w	8007ce0 <rfalNfcDepGetTransceiveStatus+0x99c>
            gNfcip.isRxChaining = false;
 80074f2:	2300      	movs	r3, #0
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 80074f4:	2204      	movs	r2, #4
            gNfcip.isRxChaining = false;
 80074f6:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 80074fa:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
            ret = ERR_NONE;    /* Data exchange done */
 80074fe:	e73f      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 8007500:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007502:	f7f9 ffd7 	bl	80014b4 <timerIsExpired>
 8007506:	2800      	cmp	r0, #0
 8007508:	f43f af6d 	beq.w	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 800750c:	78a3      	ldrb	r3, [r4, #2]
 800750e:	07db      	lsls	r3, r3, #31
 8007510:	f100 8136 	bmi.w	8007780 <rfalNfcDepGetTransceiveStatus+0x43c>
            if( gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 8007514:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	2b03      	cmp	r3, #3
 800751c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8007520:	f200 812c 	bhi.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 8007524:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007528:	f003 030f 	and.w	r3, r3, #15
 800752c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007530:	330c      	adds	r3, #12
 8007532:	fa22 f303 	lsr.w	r3, r2, r3
 8007536:	2b3a      	cmp	r3, #58	; 0x3a
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8007538:	7822      	ldrb	r2, [r4, #0]
 800753a:	bf8a      	itet	hi
 800753c:	213b      	movhi	r1, #59	; 0x3b
 800753e:	b2d9      	uxtbls	r1, r3
 8007540:	460b      	movhi	r3, r1
 8007542:	2a01      	cmp	r2, #1
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 8007544:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8007548:	f000 80c0 	beq.w	80076cc <rfalNfcDepGetTransceiveStatus+0x388>
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 800754c:	e9d4 0212 	ldrd	r0, r2, [r4, #72]	; 0x48
 8007550:	fb00 2303 	mla	r3, r0, r3, r2
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8007554:	2006      	movs	r0, #6
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 8007556:	2290      	movs	r2, #144	; 0x90
 8007558:	e9cd 2300 	strd	r2, r3, [sp]
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 800755c:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 8007560:	2301      	movs	r3, #1
 8007562:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8007566:	a909      	add	r1, sp, #36	; 0x24
 8007568:	f7ff fae8 	bl	8006b3c <nfcipTx>
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800756c:	4603      	mov	r3, r0
 800756e:	2800      	cmp	r0, #0
 8007570:	f47f af06 	bne.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 8007574:	230d      	movs	r3, #13
            gNfcip.isWait4RTOX = true;
 8007576:	2201      	movs	r2, #1
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 8007578:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            gNfcip.isWait4RTOX = true;
 800757c:	f884 2086 	strb.w	r2, [r4, #134]	; 0x86
            return ERR_BUSY;
 8007580:	2302      	movs	r3, #2
 8007582:	e6fd      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 8007584:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007588:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800758a:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	f04f 33ff 	mov.w	r3, #4294967295
 8007598:	440a      	add	r2, r1
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	2007      	movs	r0, #7
 800759e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80075a2:	f7ff facb 	bl	8006b3c <nfcipTx>
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80075a6:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 80075aa:	3201      	adds	r2, #1
            gNfcip.isTxPending = false;
 80075ac:	2300      	movs	r3, #0
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80075ae:	f002 0203 	and.w	r2, r2, #3
            gNfcip.isTxPending = false;
 80075b2:	f8a4 3085 	strh.w	r3, [r4, #133]	; 0x85
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80075b6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
            switch( ret )
 80075ba:	4603      	mov	r3, r0
 80075bc:	2800      	cmp	r0, #0
 80075be:	f43f aee8 	beq.w	8007392 <rfalNfcDepGetTransceiveStatus+0x4e>
                  gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 80075c2:	220c      	movs	r2, #12
 80075c4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
                  return ret;
 80075c8:	e6da      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 80075ca:	e9d4 3012 	ldrd	r3, r0, [r4, #72]	; 0x48
 80075ce:	4403      	add	r3, r0
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80075d6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80075d8:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	440a      	add	r2, r1
 80075e4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80075e8:	2006      	movs	r0, #6
 80075ea:	f7ff faa7 	bl	8006b3c <nfcipTx>
            switch( ret )
 80075ee:	4603      	mov	r3, r0
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f43f aefd 	beq.w	80073f0 <rfalNfcDepGetTransceiveStatus+0xac>
                  gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 80075f6:	2204      	movs	r2, #4
 80075f8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
                  return ret;
 80075fc:	e6c0      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
        ret = rfalGetTransceiveStatus();
 80075fe:	f003 fb43 	bl	800ac88 <rfalGetTransceiveStatus>
    if( ret != ERR_BUSY )
 8007602:	2802      	cmp	r0, #2
        ret = rfalGetTransceiveStatus();
 8007604:	4603      	mov	r3, r0
    if( ret != ERR_BUSY )
 8007606:	f43f aeee 	beq.w	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
        if( gNfcip.rxRcvdLen != NULL )
 800760a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800760c:	2a00      	cmp	r2, #0
 800760e:	f000 80c3 	beq.w	8007798 <rfalNfcDepGetTransceiveStatus+0x454>
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 8007612:	8811      	ldrh	r1, [r2, #0]
 8007614:	3107      	adds	r1, #7
 8007616:	08c9      	lsrs	r1, r1, #3
 8007618:	8011      	strh	r1, [r2, #0]
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 800761a:	2800      	cmp	r0, #0
 800761c:	f040 80b2 	bne.w	8007784 <rfalNfcDepGetTransceiveStatus+0x440>
 8007620:	6e67      	ldr	r7, [r4, #100]	; 0x64
 8007622:	2f00      	cmp	r7, #0
 8007624:	f000 81ab 	beq.w	800797e <rfalNfcDepGetTransceiveStatus+0x63a>
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 8007628:	7838      	ldrb	r0, [r7, #0]
 800762a:	4288      	cmp	r0, r1
 800762c:	f040 81a3 	bne.w	8007976 <rfalNfcDepGetTransceiveStatus+0x632>
 8007630:	2802      	cmp	r0, #2
 8007632:	f240 81a0 	bls.w	8007976 <rfalNfcDepGetTransceiveStatus+0x632>
    *outActRxLen    = 0;
 8007636:	8033      	strh	r3, [r6, #0]
    *outIsChaining  = false;
 8007638:	702b      	strb	r3, [r5, #0]
    switch( rxRes )
 800763a:	e6b8      	b.n	80073ae <rfalNfcDepGetTransceiveStatus+0x6a>
 800763c:	20000af8 	.word	0x20000af8
    *outActRxLen    = 0;
 8007640:	2200      	movs	r2, #0
 8007642:	8032      	strh	r2, [r6, #0]
    *outIsChaining  = false;
 8007644:	702a      	strb	r2, [r5, #0]
    switch( rxRes )
 8007646:	281d      	cmp	r0, #29
 8007648:	f63f ae9a 	bhi.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
 800764c:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <rfalNfcDepGetTransceiveStatus+0x310>)
 800764e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8007652:	bf00      	nop
 8007654:	0800776b 	.word	0x0800776b
 8007658:	08007381 	.word	0x08007381
 800765c:	08007381 	.word	0x08007381
 8007660:	08007381 	.word	0x08007381
 8007664:	08007707 	.word	0x08007707
 8007668:	08007381 	.word	0x08007381
 800766c:	08007381 	.word	0x08007381
 8007670:	08007381 	.word	0x08007381
 8007674:	08007381 	.word	0x08007381
 8007678:	080076db 	.word	0x080076db
 800767c:	08007381 	.word	0x08007381
 8007680:	08007381 	.word	0x08007381
 8007684:	08007381 	.word	0x08007381
 8007688:	08007381 	.word	0x08007381
 800768c:	08007381 	.word	0x08007381
 8007690:	08007381 	.word	0x08007381
 8007694:	08007381 	.word	0x08007381
 8007698:	08007381 	.word	0x08007381
 800769c:	08007381 	.word	0x08007381
 80076a0:	08007381 	.word	0x08007381
 80076a4:	08007381 	.word	0x08007381
 80076a8:	080076db 	.word	0x080076db
 80076ac:	08007381 	.word	0x08007381
 80076b0:	08007381 	.word	0x08007381
 80076b4:	08007381 	.word	0x08007381
 80076b8:	08007381 	.word	0x08007381
 80076bc:	08007381 	.word	0x08007381
 80076c0:	080076db 	.word	0x080076db
 80076c4:	08007381 	.word	0x08007381
 80076c8:	080076db 	.word	0x080076db
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 80076cc:	2007      	movs	r0, #7
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 80076ce:	f04f 33ff 	mov.w	r3, #4294967295
 80076d2:	e740      	b.n	8007556 <rfalNfcDepGetTransceiveStatus+0x212>
    *outActRxLen    = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	8033      	strh	r3, [r6, #0]
    *outIsChaining  = false;
 80076d8:	702b      	strb	r3, [r5, #0]
            if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 80076da:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80076e6:	f200 8144 	bhi.w	8007972 <rfalNfcDepGetTransceiveStatus+0x62e>
                EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 80076ea:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80076ee:	f000 0003 	and.w	r0, r0, #3
 80076f2:	2100      	movs	r1, #0
 80076f4:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 80076f8:	f7ff fafe 	bl	8006cf8 <nfcipDEPControlMsg>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2800      	cmp	r0, #0
 8007700:	f47f ae3e 	bne.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
 8007704:	e66f      	b.n	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
            if( gNfcip.cntTORetrys++ >= NFCIP_MAX_TO_RETRYS )
 8007706:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
 800770a:	1c51      	adds	r1, r2, #1
 800770c:	2a02      	cmp	r2, #2
 800770e:	f884 1057 	strb.w	r1, [r4, #87]	; 0x57
 8007712:	d833      	bhi.n	800777c <rfalNfcDepGetTransceiveStatus+0x438>
            if( nfcipIsDeactivationPending() )
 8007714:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007718:	b12a      	cbz	r2, 8007726 <rfalNfcDepGetTransceiveStatus+0x3e2>
 800771a:	9305      	str	r3, [sp, #20]
 800771c:	4790      	blx	r2
 800771e:	9b05      	ldr	r3, [sp, #20]
 8007720:	2800      	cmp	r0, #0
 8007722:	f47f ae2d 	bne.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 8007726:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800772a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800772e:	2b50      	cmp	r3, #80	; 0x50
 8007730:	d01d      	beq.n	800776e <rfalNfcDepGetTransceiveStatus+0x42a>
            if( gNfcip.cntATNRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8007732:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	2b02      	cmp	r3, #2
 800773a:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 800773e:	d81d      	bhi.n	800777c <rfalNfcDepGetTransceiveStatus+0x438>
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8007740:	7823      	ldrb	r3, [r4, #0]
 8007742:	2b01      	cmp	r3, #1
 8007744:	f000 8150 	beq.w	80079e8 <rfalNfcDepGetTransceiveStatus+0x6a4>
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8007748:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 800774c:	2006      	movs	r0, #6
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 800774e:	441a      	add	r2, r3
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 8007750:	2300      	movs	r3, #0
 8007752:	2180      	movs	r1, #128	; 0x80
 8007754:	e9cd 1200 	strd	r1, r2, [sp]
 8007758:	461a      	mov	r2, r3
 800775a:	a909      	add	r1, sp, #36	; 0x24
 800775c:	f7ff f9ee 	bl	8006b3c <nfcipTx>
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8007760:	4603      	mov	r3, r0
 8007762:	2800      	cmp	r0, #0
 8007764:	f43f ae3f 	beq.w	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
 8007768:	e60a      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 800776a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800776c:	e660      	b.n	8007430 <rfalNfcDepGetTransceiveStatus+0xec>
                if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 800776e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	2b02      	cmp	r3, #2
 8007776:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800777a:	d9b6      	bls.n	80076ea <rfalNfcDepGetTransceiveStatus+0x3a6>
                return ERR_PROTO;
 800777c:	230b      	movs	r3, #11
 800777e:	e5ff      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
                return ERR_TIMEOUT;
 8007780:	2304      	movs	r3, #4
 8007782:	e5fd      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
    *outActRxLen    = 0;
 8007784:	8037      	strh	r7, [r6, #0]
    *outIsChaining  = false;
 8007786:	702f      	strb	r7, [r5, #0]
    switch( rxRes )
 8007788:	2b25      	cmp	r3, #37	; 0x25
 800778a:	f43f adf9 	beq.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 800778e:	6e67      	ldr	r7, [r4, #100]	; 0x64
 8007790:	e61c      	b.n	80073cc <rfalNfcDepGetTransceiveStatus+0x88>
    *outActRxLen    = 0;
 8007792:	8031      	strh	r1, [r6, #0]
    *outIsChaining  = false;
 8007794:	7029      	strb	r1, [r5, #0]
    switch( rxRes )
 8007796:	e64b      	b.n	8007430 <rfalNfcDepGetTransceiveStatus+0xec>
    *outActRxLen    = 0;
 8007798:	8032      	strh	r2, [r6, #0]
    *outIsChaining  = false;
 800779a:	702a      	strb	r2, [r5, #0]
    switch( rxRes )
 800779c:	2800      	cmp	r0, #0
 800779e:	d1f3      	bne.n	8007788 <rfalNfcDepGetTransceiveStatus+0x444>
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 80077a0:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80077a2:	e604      	b.n	80073ae <rfalNfcDepGetTransceiveStatus+0x6a>
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 80077a4:	78e3      	ldrb	r3, [r4, #3]
 80077a6:	78f9      	ldrb	r1, [r7, #3]
 80077a8:	4299      	cmp	r1, r3
 80077aa:	d028      	beq.n	80077fe <rfalNfcDepGetTransceiveStatus+0x4ba>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f47f ae1a 	bne.w	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 80077b2:	2a03      	cmp	r2, #3
 80077b4:	f63f ae17 	bhi.w	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 80077b8:	f64f 720b 	movw	r2, #65291	; 0xff0b
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 80077bc:	f10d 0329 	add.w	r3, sp, #41	; 0x29
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 80077c0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 80077c4:	461a      	mov	r2, r3
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 80077c6:	1e90      	subs	r0, r2, #2
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 80077c8:	1a1b      	subs	r3, r3, r0
 80077ca:	b299      	uxth	r1, r3
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 80077cc:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 80077d0:	f640 35d5 	movw	r5, #3029	; 0xbd5
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 80077d4:	428b      	cmp	r3, r1
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 80077d6:	f822 5c02 	strh.w	r5, [r2, #-2]
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 80077da:	d30b      	bcc.n	80077f4 <rfalNfcDepGetTransceiveStatus+0x4b0>
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 80077dc:	2304      	movs	r3, #4
 80077de:	f04f 3eff 	mov.w	lr, #4294967295
 80077e2:	e9cd 3e01 	strd	r3, lr, [sp, #4]
 80077e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	463a      	mov	r2, r7
 80077ec:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80077f0:	f003 f8f8 	bl	800a9e4 <rfalTransceiveBlockingTx>
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 80077f4:	230c      	movs	r3, #12
 80077f6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            return ERR_RELEASE_REQ;
 80077fa:	231f      	movs	r3, #31
 80077fc:	e5c0      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 80077fe:	2a04      	cmp	r2, #4
 8007800:	d1d4      	bne.n	80077ac <rfalNfcDepGetTransceiveStatus+0x468>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8007802:	2900      	cmp	r1, #0
 8007804:	f43f adef 	beq.w	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8007808:	f64f 730b 	movw	r3, #65291	; 0xff0b
 800780c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8007810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007814:	aa0a      	add	r2, sp, #40	; 0x28
 8007816:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 800781a:	e7d4      	b.n	80077c6 <rfalNfcDepGetTransceiveStatus+0x482>
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 800781c:	78e3      	ldrb	r3, [r4, #3]
 800781e:	78f9      	ldrb	r1, [r7, #3]
 8007820:	4299      	cmp	r1, r3
 8007822:	d028      	beq.n	8007876 <rfalNfcDepGetTransceiveStatus+0x532>
 8007824:	2b00      	cmp	r3, #0
 8007826:	f47f adde 	bne.w	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 800782a:	2a03      	cmp	r2, #3
 800782c:	f47f addb 	bne.w	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8007830:	f64f 7209 	movw	r2, #65289	; 0xff09
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 8007834:	f10d 0329 	add.w	r3, sp, #41	; 0x29
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8007838:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 800783c:	461a      	mov	r2, r3
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 800783e:	1e90      	subs	r0, r2, #2
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8007840:	1a1b      	subs	r3, r3, r0
 8007842:	b299      	uxth	r1, r3
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8007844:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8007848:	f640 15d5 	movw	r5, #2517	; 0x9d5
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800784c:	428b      	cmp	r3, r1
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 800784e:	f822 5c02 	strh.w	r5, [r2, #-2]
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8007852:	d30b      	bcc.n	800786c <rfalNfcDepGetTransceiveStatus+0x528>
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 8007854:	2304      	movs	r3, #4
 8007856:	f04f 38ff 	mov.w	r8, #4294967295
 800785a:	e9cd 3801 	strd	r3, r8, [sp, #4]
 800785e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	463a      	mov	r2, r7
 8007864:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007868:	f003 f8bc 	bl	800a9e4 <rfalTransceiveBlockingTx>
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 800786c:	2310      	movs	r3, #16
 800786e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            return ERR_SLEEP_REQ;
 8007872:	2320      	movs	r3, #32
 8007874:	e584      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8007876:	2a04      	cmp	r2, #4
 8007878:	d1d4      	bne.n	8007824 <rfalNfcDepGetTransceiveStatus+0x4e0>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 800787a:	2900      	cmp	r1, #0
 800787c:	f43f adb3 	beq.w	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8007880:	f64f 7309 	movw	r3, #65289	; 0xff09
 8007884:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8007888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800788c:	aa0a      	add	r2, sp, #40	; 0x28
 800788e:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8007892:	e7d4      	b.n	800783e <rfalNfcDepGetTransceiveStatus+0x4fa>
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 8007894:	f897 8003 	ldrb.w	r8, [r7, #3]
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8007898:	f008 00e0 	and.w	r0, r8, #224	; 0xe0
 800789c:	2880      	cmp	r0, #128	; 0x80
 800789e:	d003      	beq.n	80078a8 <rfalNfcDepGetTransceiveStatus+0x564>
 80078a0:	f018 0fa0 	tst.w	r8, #160	; 0xa0
 80078a4:	f47f ad91 	bne.w	80073ca <rfalNfcDepGetTransceiveStatus+0x86>
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 80078a8:	78e1      	ldrb	r1, [r4, #3]
 80078aa:	9105      	str	r1, [sp, #20]
 80078ac:	2900      	cmp	r1, #0
 80078ae:	d069      	beq.n	8007984 <rfalNfcDepGetTransceiveStatus+0x640>
        if( !nfcip_PFBhasDID( rxPFB ) )
 80078b0:	f018 0e04 	ands.w	lr, r8, #4
 80078b4:	f000 8174 	beq.w	8007ba0 <rfalNfcDepGetTransceiveStatus+0x85c>
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 80078b8:	f897 c004 	ldrb.w	ip, [r7, #4]
 80078bc:	458c      	cmp	ip, r1
 80078be:	f47f ad84 	bne.w	80073ca <rfalNfcDepGetTransceiveStatus+0x86>
 80078c2:	f04f 0c02 	mov.w	ip, #2
 80078c6:	2106      	movs	r1, #6
 80078c8:	e9cd c106 	strd	ip, r1, [sp, #24]
 80078cc:	f04f 0a05 	mov.w	sl, #5
 80078d0:	f04f 0b01 	mov.w	fp, #1
 80078d4:	46d1      	mov	r9, sl
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 80078d6:	f894 c004 	ldrb.w	ip, [r4, #4]
 80078da:	f1bc 0f00 	cmp.w	ip, #0
 80078de:	d06b      	beq.n	80079b8 <rfalNfcDepGetTransceiveStatus+0x674>
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 80078e0:	f817 c009 	ldrb.w	ip, [r7, r9]
 80078e4:	9905      	ldr	r1, [sp, #20]
 80078e6:	458c      	cmp	ip, r1
 80078e8:	f47f ad6f 	bne.w	80073ca <rfalNfcDepGetTransceiveStatus+0x86>
 80078ec:	f1be 0f00 	cmp.w	lr, #0
 80078f0:	f43f ad6b 	beq.w	80073ca <rfalNfcDepGetTransceiveStatus+0x86>
 80078f4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80078f8:	f8dd b018 	ldr.w	fp, [sp, #24]
 80078fc:	469a      	mov	sl, r3
    if( nfcip_PFBisRPDU( rxPFB ) )
 80078fe:	2840      	cmp	r0, #64	; 0x40
 8007900:	d076      	beq.n	80079f0 <rfalNfcDepGetTransceiveStatus+0x6ac>
    if( nfcip_PFBisSPDU( rxPFB ) )
 8007902:	2880      	cmp	r0, #128	; 0x80
 8007904:	f000 80a4 	beq.w	8007a50 <rfalNfcDepGetTransceiveStatus+0x70c>
    if( nfcip_PFBisIPDU( rxPFB ) )
 8007908:	2800      	cmp	r0, #0
 800790a:	f040 809f 	bne.w	8007a4c <rfalNfcDepGetTransceiveStatus+0x708>
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 800790e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007912:	f008 0103 	and.w	r1, r8, #3
 8007916:	428b      	cmp	r3, r1
 8007918:	f000 80dc 	beq.w	8007ad4 <rfalNfcDepGetTransceiveStatus+0x790>
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 800791c:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8007920:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007924:	2a80      	cmp	r2, #128	; 0x80
 8007926:	f47f ad50 	bne.w	80073ca <rfalNfcDepGetTransceiveStatus+0x86>
 800792a:	1e58      	subs	r0, r3, #1
 800792c:	b2c0      	uxtb	r0, r0
 800792e:	ea88 0300 	eor.w	r3, r8, r0
 8007932:	079b      	lsls	r3, r3, #30
 8007934:	f47f ad49 	bne.w	80073ca <rfalNfcDepGetTransceiveStatus+0x86>
                if( nfcip_PFBisIMI( rxPFB ) )
 8007938:	f008 08f0 	and.w	r8, r8, #240	; 0xf0
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 800793c:	f000 0003 	and.w	r0, r0, #3
                if( nfcip_PFBisIMI( rxPFB ) )
 8007940:	f1b8 0f10 	cmp.w	r8, #16
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 8007944:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
                if( nfcip_PFBisIMI( rxPFB ) )
 8007948:	f040 80a1 	bne.w	8007a8e <rfalNfcDepGetTransceiveStatus+0x74a>
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800794c:	f817 1009 	ldrb.w	r1, [r7, r9]
 8007950:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8007954:	f7ff f9d0 	bl	8006cf8 <nfcipDEPControlMsg>
 8007958:	4603      	mov	r3, r0
 800795a:	2800      	cmp	r0, #0
 800795c:	f47f ad10 	bne.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8007960:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8007964:	3201      	adds	r2, #1
 8007966:	f002 0203 	and.w	r2, r2, #3
                return ERR_BUSY;
 800796a:	2302      	movs	r3, #2
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800796c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8007970:	e506      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
                return ERR_FRAMING;
 8007972:	2309      	movs	r3, #9
 8007974:	e504      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
    *outActRxLen    = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	8033      	strh	r3, [r6, #0]
    *outIsChaining  = false;
 800797a:	702b      	strb	r3, [r5, #0]
    switch( rxRes )
 800797c:	e526      	b.n	80073cc <rfalNfcDepGetTransceiveStatus+0x88>
    *outActRxLen    = 0;
 800797e:	8037      	strh	r7, [r6, #0]
    *outIsChaining  = false;
 8007980:	702f      	strb	r7, [r5, #0]
    switch( rxRes )
 8007982:	e514      	b.n	80073ae <rfalNfcDepGetTransceiveStatus+0x6a>
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 8007984:	f018 0e04 	ands.w	lr, r8, #4
 8007988:	f040 811b 	bne.w	8007bc2 <rfalNfcDepGetTransceiveStatus+0x87e>
 800798c:	2305      	movs	r3, #5
 800798e:	f04f 0a04 	mov.w	sl, #4
 8007992:	2101      	movs	r1, #1
 8007994:	e9cd 1306 	strd	r1, r3, [sp, #24]
 8007998:	46f3      	mov	fp, lr
 800799a:	46d1      	mov	r9, sl
 800799c:	e79b      	b.n	80078d6 <rfalNfcDepGetTransceiveStatus+0x592>
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 800799e:	f017 0204 	ands.w	r2, r7, #4
 80079a2:	f47f aeeb 	bne.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
 80079a6:	f04f 0905 	mov.w	r9, #5
 80079aa:	f04f 0c04 	mov.w	ip, #4
 80079ae:	f04f 0a01 	mov.w	sl, #1
 80079b2:	46cb      	mov	fp, r9
 80079b4:	46e0      	mov	r8, ip
 80079b6:	e561      	b.n	800747c <rfalNfcDepGetTransceiveStatus+0x138>
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 80079b8:	f018 0f08 	tst.w	r8, #8
 80079bc:	d09f      	beq.n	80078fe <rfalNfcDepGetTransceiveStatus+0x5ba>
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80079be:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80079c0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80079c4:	f04f 31ff 	mov.w	r1, #4294967295
 80079c8:	9102      	str	r1, [sp, #8]
 80079ca:	2104      	movs	r1, #4
 80079cc:	e9cd 2100 	strd	r2, r1, [sp]
 80079d0:	4660      	mov	r0, ip
 80079d2:	463a      	mov	r2, r7
 80079d4:	4661      	mov	r1, ip
 80079d6:	f003 f805 	bl	800a9e4 <rfalTransceiveBlockingTx>
        return ERR_BUSY;                                /* ERR_PROTO - Ignore unexpected NAD  */
 80079da:	2302      	movs	r3, #2
 80079dc:	e4d0      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 80079de:	f017 0f08 	tst.w	r7, #8
 80079e2:	f43f ad5c 	beq.w	800749e <rfalNfcDepGetTransceiveStatus+0x15a>
 80079e6:	e6c9      	b.n	800777c <rfalNfcDepGetTransceiveStatus+0x438>
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 80079e8:	2007      	movs	r0, #7
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 80079ea:	f04f 32ff 	mov.w	r2, #4294967295
 80079ee:	e6af      	b.n	8007750 <rfalNfcDepGetTransceiveStatus+0x40c>
        if( nfcip_PFBisRACK( rxPFB ) )
 80079f0:	f008 03f0 	and.w	r3, r8, #240	; 0xf0
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	d015      	beq.n	8007a24 <rfalNfcDepGetTransceiveStatus+0x6e0>
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 80079f8:	2b50      	cmp	r3, #80	; 0x50
 80079fa:	f47f ace6 	bne.w	80073ca <rfalNfcDepGetTransceiveStatus+0x86>
 80079fe:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	ea88 0803 	eor.w	r8, r8, r3
 8007a0a:	f018 0f03 	tst.w	r8, #3
 8007a0e:	f47f acdc 	bne.w	80073ca <rfalNfcDepGetTransceiveStatus+0x86>
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 8007a12:	f003 0303 	and.w	r3, r3, #3
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8007a16:	220f      	movs	r2, #15
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 8007a18:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8007a1c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
            return ERR_BUSY;
 8007a20:	2302      	movs	r3, #2
 8007a22:	e4ad      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8007a24:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007a28:	f008 0203 	and.w	r2, r8, #3
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	f000 8110 	beq.w	8007c52 <rfalNfcDepGetTransceiveStatus+0x90e>
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 8007a32:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8007a36:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007a3a:	2a80      	cmp	r2, #128	; 0x80
 8007a3c:	d106      	bne.n	8007a4c <rfalNfcDepGetTransceiveStatus+0x708>
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	ea88 0803 	eor.w	r8, r8, r3
 8007a46:	f018 0f03 	tst.w	r8, #3
 8007a4a:	d0e2      	beq.n	8007a12 <rfalNfcDepGetTransceiveStatus+0x6ce>
    ret        = ERR_INTERNAL;
 8007a4c:	230c      	movs	r3, #12
 8007a4e:	e497      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 8007a50:	f008 08f0 	and.w	r8, r8, #240	; 0xf0
 8007a54:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8007a58:	f000 80de 	beq.w	8007c18 <rfalNfcDepGetTransceiveStatus+0x8d4>
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8007a5c:	f1b8 0f90 	cmp.w	r8, #144	; 0x90
 8007a60:	f47f acb3 	bne.w	80073ca <rfalNfcDepGetTransceiveStatus+0x86>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8007a64:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8007a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a6c:	2b90      	cmp	r3, #144	; 0x90
 8007a6e:	d1ed      	bne.n	8007a4c <rfalNfcDepGetTransceiveStatus+0x708>
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 8007a70:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
 8007a74:	f817 3009 	ldrb.w	r3, [r7, r9]
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	f47f aca6 	bne.w	80073ca <rfalNfcDepGetTransceiveStatus+0x86>
                if( gNfcip.isTxPending )
 8007a7e:	f894 2085 	ldrb.w	r2, [r4, #133]	; 0x85
                gNfcip.isWait4RTOX = false;
 8007a82:	2100      	movs	r1, #0
 8007a84:	f884 1086 	strb.w	r1, [r4, #134]	; 0x86
                if( gNfcip.isTxPending )
 8007a88:	2a00      	cmp	r2, #0
 8007a8a:	f000 813d 	beq.w	8007d08 <rfalNfcDepGetTransceiveStatus+0x9c4>
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8007a8e:	230f      	movs	r3, #15
 8007a90:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
                    return ERR_BUSY;
 8007a94:	2302      	movs	r3, #2
 8007a96:	e473      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
        if( nfcip_PFBisRACK( rxPFB ) )
 8007a98:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
 8007a9c:	2b40      	cmp	r3, #64	; 0x40
 8007a9e:	f47f ae6d 	bne.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8007aa2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007aa6:	f007 0203 	and.w	r2, r7, #3
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	f000 80bd 	beq.w	8007c2a <rfalNfcDepGetTransceiveStatus+0x8e6>
                if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 8007ab0:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8007ab4:	1c51      	adds	r1, r2, #1
 8007ab6:	2a02      	cmp	r2, #2
 8007ab8:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
 8007abc:	f63f ae5e 	bhi.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	405f      	eors	r7, r3
 8007ac4:	07ba      	lsls	r2, r7, #30
 8007ac6:	f47f ae59 	bne.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8007aca:	2305      	movs	r3, #5
 8007acc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
                    return ERR_BUSY;
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e455      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 8007ad4:	3a04      	subs	r2, #4
 8007ad6:	eba2 020b 	sub.w	r2, r2, fp
 8007ada:	b292      	uxth	r2, r2
 8007adc:	8032      	strh	r2, [r6, #0]
    gNfcip.cntATNRetrys  = 0;
 8007ade:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    gNfcip.cntTxRetrys   = 0;
 8007ae2:	f8c4 0056 	str.w	r0, [r4, #86]	; 0x56
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8007ae6:	f894 0071 	ldrb.w	r0, [r4, #113]	; 0x71
 8007aea:	4550      	cmp	r0, sl
 8007aec:	d002      	beq.n	8007af4 <rfalNfcDepGetTransceiveStatus+0x7b0>
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	f040 80e8 	bne.w	8007cc4 <rfalNfcDepGetTransceiveStatus+0x980>
        if( nfcip_PFBisIMI( rxPFB ) )
 8007af4:	f008 08f0 	and.w	r8, r8, #240	; 0xf0
 8007af8:	f1b8 0f10 	cmp.w	r8, #16
 8007afc:	f000 80c5 	beq.w	8007c8a <rfalNfcDepGetTransceiveStatus+0x946>
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8007b00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	330c      	adds	r3, #12
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	4098      	lsls	r0, r3
 8007b0e:	f243 43f8 	movw	r3, #13560	; 0x34f8
 8007b12:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b16:	3001      	adds	r0, #1
 8007b18:	eba0 00d0 	sub.w	r0, r0, r0, lsr #3
 8007b1c:	b280      	uxth	r0, r0
 8007b1e:	f7f9 fcc3 	bl	80014a8 <timerCalculateTimer>
            gNfcip.isRxChaining = false;
 8007b22:	2300      	movs	r3, #0
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8007b24:	220e      	movs	r2, #14
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8007b26:	67e0      	str	r0, [r4, #124]	; 0x7c
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8007b28:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
            gNfcip.isRxChaining = false;
 8007b2c:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            ret = ERR_NONE;                            /* Data exchange done */
 8007b30:	e426      	b.n	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 8007b32:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
 8007b36:	2f80      	cmp	r7, #128	; 0x80
 8007b38:	d054      	beq.n	8007be4 <rfalNfcDepGetTransceiveStatus+0x8a0>
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8007b3a:	2f90      	cmp	r7, #144	; 0x90
 8007b3c:	f47f ae1e 	bne.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
            if( (gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 8007b40:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 8007b44:	f811 5008 	ldrb.w	r5, [r1, r8]
            if( (gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8007b50:	f63f ae14 	bhi.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
 8007b54:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8007b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b5c:	2b80      	cmp	r3, #128	; 0x80
 8007b5e:	f43f ae0d 	beq.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 8007b62:	1e6b      	subs	r3, r5, #1
 8007b64:	2b3a      	cmp	r3, #58	; 0x3a
 8007b66:	f63f ae09 	bhi.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8007b6a:	7823      	ldrb	r3, [r4, #0]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	f000 80e3 	beq.w	8007d38 <rfalNfcDepGetTransceiveStatus+0x9f4>
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8007b72:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8007b76:	2006      	movs	r0, #6
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8007b78:	fb02 3305 	mla	r3, r2, r5, r3
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 8007b7c:	2290      	movs	r2, #144	; 0x90
 8007b7e:	e9cd 2300 	strd	r2, r3, [sp]
 8007b82:	a909      	add	r1, sp, #36	; 0x24
 8007b84:	2301      	movs	r3, #1
 8007b86:	f10d 0229 	add.w	r2, sp, #41	; 0x29
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 8007b8a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 8007b8e:	f7fe ffd5 	bl	8006b3c <nfcipTx>
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 8007b92:	4603      	mov	r3, r0
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f47f abf3 	bne.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            gNfcip.lastRTOX = rxRTOX;
 8007b9a:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
            return ERR_BUSY;
 8007b9e:	e422      	b.n	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8007ba0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007ba2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007ba6:	f04f 31ff 	mov.w	r1, #4294967295
 8007baa:	9102      	str	r1, [sp, #8]
 8007bac:	2104      	movs	r1, #4
 8007bae:	e9cd 2100 	strd	r2, r1, [sp]
 8007bb2:	4670      	mov	r0, lr
 8007bb4:	463a      	mov	r2, r7
 8007bb6:	4671      	mov	r1, lr
 8007bb8:	f002 ff14 	bl	800a9e4 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	f7ff bbdf 	b.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8007bc2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007bc4:	9905      	ldr	r1, [sp, #20]
 8007bc6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007bca:	f04f 30ff 	mov.w	r0, #4294967295
 8007bce:	9002      	str	r0, [sp, #8]
 8007bd0:	2004      	movs	r0, #4
 8007bd2:	e9cd 2000 	strd	r2, r0, [sp]
 8007bd6:	463a      	mov	r2, r7
 8007bd8:	4608      	mov	r0, r1
 8007bda:	f002 ff03 	bl	800a9e4 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore unexpected DID  */
 8007bde:	2302      	movs	r3, #2
 8007be0:	f7ff bbce 	b.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 8007be4:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8007be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bec:	2b80      	cmp	r3, #128	; 0x80
 8007bee:	f47f adc5 	bne.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8007bf2:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
 8007bf6:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 8007bfa:	2300      	movs	r3, #0
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8007bfc:	2890      	cmp	r0, #144	; 0x90
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 8007bfe:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8007c02:	f000 809c 	beq.w	8007d3e <rfalNfcDepGetTransceiveStatus+0x9fa>
                    if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 8007c06:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	f884 2056 	strb.w	r2, [r4, #86]	; 0x56
 8007c12:	f63f adb3 	bhi.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
 8007c16:	e758      	b.n	8007aca <rfalNfcDepGetTransceiveStatus+0x786>
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8007c18:	2100      	movs	r1, #0
 8007c1a:	f7ff f86d 	bl	8006cf8 <nfcipDEPControlMsg>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2800      	cmp	r0, #0
 8007c22:	f47f abad 	bne.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
 8007c26:	f7ff bbde 	b.w	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8007c2a:	3301      	adds	r3, #1
                if( !gNfcip.isTxChaining )
 8007c2c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
                if( !gNfcip.isTxChaining )
 8007c38:	2a00      	cmp	r2, #0
 8007c3a:	f43f ad9f 	beq.w	800777c <rfalNfcDepGetTransceiveStatus+0x438>
    gNfcip.cntATNRetrys  = 0;
 8007c3e:	2300      	movs	r3, #0
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 8007c40:	2204      	movs	r2, #4
    gNfcip.cntATNRetrys  = 0;
 8007c42:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
    gNfcip.cntTxRetrys   = 0;
 8007c46:	f8c4 3056 	str.w	r3, [r4, #86]	; 0x56
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 8007c4a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
                return ERR_NONE;                            /* This block has been transmitted */
 8007c4e:	f7ff bb97 	b.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
                if( !gNfcip.isTxChaining )
 8007c52:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
 8007c56:	2900      	cmp	r1, #0
 8007c58:	d03f      	beq.n	8007cda <rfalNfcDepGetTransceiveStatus+0x996>
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8007c5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	330c      	adds	r3, #12
 8007c64:	2001      	movs	r0, #1
 8007c66:	4098      	lsls	r0, r3
 8007c68:	f243 43f8 	movw	r3, #13560	; 0x34f8
 8007c6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8007c70:	3001      	adds	r0, #1
 8007c72:	eba0 00d0 	sub.w	r0, r0, r0, lsr #3
 8007c76:	b280      	uxth	r0, r0
 8007c78:	f7f9 fc16 	bl	80014a8 <timerCalculateTimer>
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8007c7c:	230e      	movs	r3, #14
 8007c7e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8007c82:	67e0      	str	r0, [r4, #124]	; 0x7c
                return ERR_NONE;                        /* This block has been transmitted */
 8007c84:	2300      	movs	r3, #0
 8007c86:	f7ff bb7b 	b.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            gNfcip.isRxChaining = true;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            *outIsChaining      = true;
 8007c90:	702b      	strb	r3, [r5, #0]
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8007c92:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8007c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c98:	f000 0003 	and.w	r0, r0, #3
 8007c9c:	f813 1009 	ldrb.w	r1, [r3, r9]
 8007ca0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8007ca4:	f7ff f828 	bl	8006cf8 <nfcipDEPControlMsg>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2800      	cmp	r0, #0
 8007cac:	f47f ab68 	bne.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8007cb0:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8007cb4:	3201      	adds	r2, #1
 8007cb6:	f002 0203 	and.w	r2, r2, #3
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8007cba:	230d      	movs	r3, #13
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8007cbc:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8007cc0:	f7ff bb5e 	b.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8007cc4:	4438      	add	r0, r7
 8007cc6:	eb07 0109 	add.w	r1, r7, r9
 8007cca:	f003 fe97 	bl	800b9fc <memmove>
 8007cce:	e711      	b.n	8007af4 <rfalNfcDepGetTransceiveStatus+0x7b0>
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8007cd0:	4408      	add	r0, r1
 8007cd2:	4441      	add	r1, r8
 8007cd4:	f003 fe92 	bl	800b9fc <memmove>
 8007cd8:	e406      	b.n	80074e8 <rfalNfcDepGetTransceiveStatus+0x1a4>
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8007cda:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007cdc:	f7ff bb77 	b.w	80073ce <rfalNfcDepGetTransceiveStatus+0x8a>
            gNfcip.isRxChaining = true;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            *outIsChaining      = true;
 8007ce6:	702b      	strb	r3, [r5, #0]
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8007ce8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8007cec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cee:	f000 0003 	and.w	r0, r0, #3
 8007cf2:	f813 1008 	ldrb.w	r1, [r3, r8]
 8007cf6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8007cfa:	f7fe fffd 	bl	8006cf8 <nfcipDEPControlMsg>
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8007cfe:	1e03      	subs	r3, r0, #0
 8007d00:	bf08      	it	eq
 8007d02:	230d      	moveq	r3, #13
 8007d04:	f7ff bb3c 	b.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 8007d08:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8007d0c:	f000 000f 	and.w	r0, r0, #15
 8007d10:	300c      	adds	r0, #12
 8007d12:	fa03 f000 	lsl.w	r0, r3, r0
 8007d16:	f243 42f8 	movw	r2, #13560	; 0x34f8
 8007d1a:	fbb0 f0f2 	udiv	r0, r0, r2
 8007d1e:	3001      	adds	r0, #1
 8007d20:	eba0 00d0 	sub.w	r0, r0, r0, lsr #3
 8007d24:	b280      	uxth	r0, r0
 8007d26:	f7f9 fbbf 	bl	80014a8 <timerCalculateTimer>
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8007d2a:	230e      	movs	r3, #14
 8007d2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 8007d30:	67e0      	str	r0, [r4, #124]	; 0x7c
                return ERR_BUSY;
 8007d32:	2302      	movs	r3, #2
 8007d34:	f7ff bb24 	b.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8007d38:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3c:	e71e      	b.n	8007b7c <rfalNfcDepGetTransceiveStatus+0x838>
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 8007d3e:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
 8007d42:	f7fe ffd9 	bl	8006cf8 <nfcipDEPControlMsg>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	f47f ab19 	bne.w	8007380 <rfalNfcDepGetTransceiveStatus+0x3c>
 8007d4e:	f7ff bb4a 	b.w	80073e6 <rfalNfcDepGetTransceiveStatus+0xa2>
 8007d52:	bf00      	nop

08007d54 <rfalNfcaPollerInitialize>:
/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 8007d54:	2200      	movs	r2, #0
{
 8007d56:	b510      	push	{r4, lr}
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 8007d58:	4611      	mov	r1, r2
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	f002 fc94 	bl	800a688 <rfalSetMode>
 8007d60:	4604      	mov	r4, r0
 8007d62:	b968      	cbnz	r0, 8007d80 <rfalNfcaPollerInitialize+0x2c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8007d64:	2001      	movs	r0, #1
 8007d66:	f002 fd97 	bl	800a898 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 8007d6a:	4806      	ldr	r0, [pc, #24]	; (8007d84 <rfalNfcaPollerInitialize+0x30>)
 8007d6c:	f002 fdb0 	bl	800a8d0 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 8007d70:	f240 4094 	movw	r0, #1172	; 0x494
 8007d74:	f002 fda2 	bl	800a8bc <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 8007d78:	f641 207c 	movw	r0, #6780	; 0x1a7c
 8007d7c:	f002 fd92 	bl	800a8a4 <rfalSetFDTPoll>
    
    return ERR_NONE;
}
 8007d80:	4620      	mov	r0, r4
 8007d82:	bd10      	pop	{r4, pc}
 8007d84:	000108d8 	.word	0x000108d8

08007d88 <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 8007d88:	b500      	push	{lr}
 8007d8a:	b085      	sub	sp, #20
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8007d8c:	f240 6354 	movw	r3, #1620	; 0x654
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	2210      	movs	r2, #16
 8007d94:	f10d 030e 	add.w	r3, sp, #14
 8007d98:	f002 ffb4 	bl	800ad04 <rfalISO14443ATransceiveShortFrame>
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 8007d9c:	281d      	cmp	r0, #29
 8007d9e:	d805      	bhi.n	8007dac <rfalNfcaPollerCheckPresence+0x24>
 8007da0:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <rfalNfcaPollerCheckPresence+0x2c>)
 8007da2:	40c3      	lsrs	r3, r0
    {
       ret = ERR_NONE;
 8007da4:	f013 0f01 	tst.w	r3, #1
 8007da8:	bf18      	it	ne
 8007daa:	2000      	movne	r0, #0
    }

    return ret;
}
 8007dac:	b005      	add	sp, #20
 8007dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8007db2:	bf00      	nop
 8007db4:	28200202 	.word	0x28200202

08007db8 <rfalNfcaPollerTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcaSensRes *sensRes )
{
 8007db8:	b510      	push	{r4, lr}
 8007dba:	b086      	sub	sp, #24
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 8007dbc:	2801      	cmp	r0, #1
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8007dbe:	f240 6354 	movw	r3, #1620	; 0x654
{
 8007dc2:	4604      	mov	r4, r0
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	bf0c      	ite	eq
 8007dc8:	2052      	moveq	r0, #82	; 0x52
 8007dca:	2026      	movne	r0, #38	; 0x26
 8007dcc:	ab05      	add	r3, sp, #20
 8007dce:	2210      	movs	r2, #16
 8007dd0:	f002 ff98 	bl	800ad04 <rfalISO14443ATransceiveShortFrame>
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 8007dd4:	281d      	cmp	r0, #29
 8007dd6:	d807      	bhi.n	8007de8 <rfalNfcaPollerTechnologyDetection+0x30>
 8007dd8:	4b0e      	ldr	r3, [pc, #56]	; (8007e14 <rfalNfcaPollerTechnologyDetection+0x5c>)
 8007dda:	40c3      	lsrs	r3, r0
 8007ddc:	07db      	lsls	r3, r3, #31
 8007dde:	d400      	bmi.n	8007de2 <rfalNfcaPollerTechnologyDetection+0x2a>
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 8007de0:	b910      	cbnz	r0, 8007de8 <rfalNfcaPollerTechnologyDetection+0x30>
    
    /* Send SLP_REQ as  Activity 1.1  9.2.3.6 and EMVCo 2.6  9.2.1.3 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO)
 8007de2:	2c02      	cmp	r4, #2
 8007de4:	d102      	bne.n	8007dec <rfalNfcaPollerTechnologyDetection+0x34>
    {
        rfalNfcaPollerSleep();
    }
    return ERR_NONE;
 8007de6:	2000      	movs	r0, #0
}
 8007de8:	b006      	add	sp, #24
 8007dea:	bd10      	pop	{r4, pc}
    uint8_t        rxBuf;    /* dummy buffer, just to perform Rx */
    
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
    slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
    
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 8007dec:	2400      	movs	r4, #0
 8007dee:	f243 43f8 	movw	r3, #13560	; 0x34f8
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 8007df2:	2150      	movs	r1, #80	; 0x50
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 8007df4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 8007df8:	f8ad 1014 	strh.w	r1, [sp, #20]
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 8007dfc:	9400      	str	r4, [sp, #0]
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f10d 0213 	add.w	r2, sp, #19
 8007e04:	a805      	add	r0, sp, #20
 8007e06:	2102      	movs	r1, #2
 8007e08:	f002 fe94 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    return ERR_NONE;
 8007e0c:	4620      	mov	r0, r4
}
 8007e0e:	b006      	add	sp, #24
 8007e10:	bd10      	pop	{r4, pc}
 8007e12:	bf00      	nop
 8007e14:	28200202 	.word	0x28200202

08007e18 <rfalNfcaPollerSingleCollisionResolution>:
{
 8007e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1c:	ed2d 8b02 	vpush	{d8}
 8007e20:	b08f      	sub	sp, #60	; 0x3c
 8007e22:	9307      	str	r3, [sp, #28]
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 8007e24:	9105      	str	r1, [sp, #20]
 8007e26:	2900      	cmp	r1, #0
 8007e28:	f000 81ac 	beq.w	8008184 <rfalNfcaPollerSingleCollisionResolution+0x36c>
 8007e2c:	2a00      	cmp	r2, #0
 8007e2e:	f000 81a9 	beq.w	8008184 <rfalNfcaPollerSingleCollisionResolution+0x36c>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 81a6 	beq.w	8008184 <rfalNfcaPollerSingleCollisionResolution+0x36c>
 8007e38:	ee08 2a10 	vmov	s16, r2
 8007e3c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	f000 81a0 	beq.w	8008184 <rfalNfcaPollerSingleCollisionResolution+0x36c>
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 8007e44:	2700      	movs	r7, #0
 8007e46:	700f      	strb	r7, [r1, #0]
    *nfcId1Len   = 0;
 8007e48:	7017      	strb	r7, [r2, #0]
    ST_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 8007e4a:	601f      	str	r7, [r3, #0]
 8007e4c:	605f      	str	r7, [r3, #4]
 8007e4e:	811f      	strh	r7, [r3, #8]
 8007e50:	2393      	movs	r3, #147	; 0x93
 8007e52:	2800      	cmp	r0, #0
 8007e54:	9306      	str	r3, [sp, #24]
    uint8_t         backtrackCnt = 3;
 8007e56:	f04f 0303 	mov.w	r3, #3
 8007e5a:	4605      	mov	r5, r0
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8007e5c:	bf0c      	ite	eq
 8007e5e:	f04f 0802 	moveq.w	r8, #2
 8007e62:	46b8      	movne	r8, r7
    uint8_t         backtrackCnt = 3;
 8007e64:	4699      	mov	r9, r3
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 8007e66:	9b06      	ldr	r3, [sp, #24]
 8007e68:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        bytesTxRx    = RFAL_NFCA_SDD_REQ_LEN;
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        bitsTxRx     = 0;
 8007e72:	4619      	mov	r1, r3
 8007e74:	2300      	movs	r3, #0
        ST_MEMSET( (uint8_t*)&selReq, 0x00, sizeof(rfalNfcaSelReq) );
 8007e76:	f8cd 7032 	str.w	r7, [sp, #50]	; 0x32
 8007e7a:	f88d 7036 	strb.w	r7, [sp, #54]	; 0x36
        bitsTxRx     = 0;
 8007e7e:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8007e82:	469a      	mov	sl, r3
            selReq.selPar = rfalNfcaSelPar(bytesTxRx, bitsTxRx);
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8007e8c:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
            rfalNfcaTxRetry( ret, rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&selReq, &bytesTxRx, &bitsTxRx, &bytesRx, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 8007e90:	2d00      	cmp	r5, #0
 8007e92:	f000 80d5 	beq.w	8008040 <rfalNfcaPollerSingleCollisionResolution+0x228>
            selReq.selPar = rfalNfcaSelPar(bytesTxRx, bitsTxRx);
 8007e96:	4644      	mov	r4, r8
            rfalNfcaTxRetry( ret, rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&selReq, &bytesTxRx, &bitsTxRx, &bytesRx, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 8007e98:	f240 6654 	movw	r6, #1620	; 0x654
 8007e9c:	e001      	b.n	8007ea2 <rfalNfcaPollerSingleCollisionResolution+0x8a>
 8007e9e:	2804      	cmp	r0, #4
 8007ea0:	d160      	bne.n	8007f64 <rfalNfcaPollerSingleCollisionResolution+0x14c>
 8007ea2:	3c01      	subs	r4, #1
 8007ea4:	9600      	str	r6, [sp, #0]
 8007ea6:	ab0b      	add	r3, sp, #44	; 0x2c
 8007ea8:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8007eac:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8007eb0:	a80c      	add	r0, sp, #48	; 0x30
 8007eb2:	b2e4      	uxtb	r4, r4
 8007eb4:	f002 ffee 	bl	800ae94 <rfalISO14443ATransceiveAnticollisionFrame>
 8007eb8:	2cff      	cmp	r4, #255	; 0xff
 8007eba:	d1f0      	bne.n	8007e9e <rfalNfcaPollerSingleCollisionResolution+0x86>
 8007ebc:	4683      	mov	fp, r0
            bytesRx = rfalConvBitsToBytes(bytesRx);
 8007ebe:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8007ec2:	3307      	adds	r3, #7
 8007ec4:	08db      	lsrs	r3, r3, #3
            if ((ret == ERR_TIMEOUT) 
 8007ec6:	f1bb 0f04 	cmp.w	fp, #4
            bytesRx = rfalConvBitsToBytes(bytesRx);
 8007eca:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            if ((ret == ERR_TIMEOUT) 
 8007ece:	d150      	bne.n	8007f72 <rfalNfcaPollerSingleCollisionResolution+0x15a>
                && (backtrackCnt != 0U) && !doBacktrack
 8007ed0:	464b      	mov	r3, r9
 8007ed2:	b14b      	cbz	r3, 8007ee8 <rfalNfcaPollerSingleCollisionResolution+0xd0>
 8007ed4:	f1ba 0f00 	cmp.w	sl, #0
 8007ed8:	d106      	bne.n	8007ee8 <rfalNfcaPollerSingleCollisionResolution+0xd0>
                && !((RFAL_NFCA_SDD_REQ_LEN==bytesTxRx) && (0U==bitsTxRx)))
 8007eda:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d109      	bne.n	8007ef6 <rfalNfcaPollerSingleCollisionResolution+0xde>
 8007ee2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007ee6:	b933      	cbnz	r3, 8007ef6 <rfalNfcaPollerSingleCollisionResolution+0xde>
 8007ee8:	46d9      	mov	r9, fp
}
 8007eea:	4648      	mov	r0, r9
 8007eec:	b00f      	add	sp, #60	; 0x3c
 8007eee:	ecbd 8b02 	vpop	{d8}
 8007ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8007ef6:	f240 6354 	movw	r3, #1620	; 0x654
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	2210      	movs	r2, #16
 8007efe:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8007f02:	a90a      	add	r1, sp, #40	; 0x28
 8007f04:	2026      	movs	r0, #38	; 0x26
 8007f06:	f002 fefd 	bl	800ad04 <rfalISO14443ATransceiveShortFrame>
                if (0U == bitsTxRx)
 8007f0a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 8103 	beq.w	800811a <rfalNfcaPollerSingleCollisionResolution+0x302>
                    bitsTxRx--;
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b2db      	uxtb	r3, r3
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 8007f18:	2001      	movs	r0, #1
 8007f1a:	4098      	lsls	r0, r3
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 8007f1c:	1e1a      	subs	r2, r3, #0
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 8007f1e:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 8007f22:	b2c0      	uxtb	r0, r0
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 8007f24:	bf18      	it	ne
 8007f26:	2201      	movne	r2, #1
                backtrackCnt--;
 8007f28:	f109 34ff 	add.w	r4, r9, #4294967295
 8007f2c:	b2e4      	uxtb	r4, r4
 8007f2e:	46a1      	mov	r9, r4
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 8007f30:	f101 0438 	add.w	r4, r1, #56	; 0x38
 8007f34:	446c      	add	r4, sp
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 8007f36:	440a      	add	r2, r1
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 8007f38:	f814 4c08 	ldrb.w	r4, [r4, #-8]
 8007f3c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 8007f40:	4220      	tst	r0, r4
 8007f42:	bf0c      	ite	eq
 8007f44:	2401      	moveq	r4, #1
 8007f46:	2400      	movne	r4, #0
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 8007f48:	2a07      	cmp	r2, #7
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 8007f4a:	4608      	mov	r0, r1
                doBacktrack = true;
 8007f4c:	f04f 0a01 	mov.w	sl, #1
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 8007f50:	f240 80a5 	bls.w	800809e <rfalNfcaPollerSingleCollisionResolution+0x286>
                    return ERR_PROTO;
 8007f54:	f04f 090b 	mov.w	r9, #11
}
 8007f58:	4648      	mov	r0, r9
 8007f5a:	b00f      	add	sp, #60	; 0x3c
 8007f5c:	ecbd 8b02 	vpop	{d8}
 8007f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bytesRx = rfalConvBitsToBytes(bytesRx);
 8007f64:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8007f68:	3307      	adds	r3, #7
 8007f6a:	08db      	lsrs	r3, r3, #3
 8007f6c:	4683      	mov	fp, r0
 8007f6e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            if( ret == ERR_RF_COLLISION )
 8007f72:	f1bb 0f1d 	cmp.w	fp, #29
 8007f76:	f000 8082 	beq.w	800807e <rfalNfcaPollerSingleCollisionResolution+0x266>
        if( ret != ERR_NONE )
 8007f7a:	f1bb 0f00 	cmp.w	fp, #0
 8007f7e:	d1b3      	bne.n	8007ee8 <rfalNfcaPollerSingleCollisionResolution+0xd0>
        if( (devLimit == 0U) && (bytesRx != sizeof(rfalNfcaSddRes)) )
 8007f80:	2d00      	cmp	r5, #0
 8007f82:	f040 80d4 	bne.w	800812e <rfalNfcaPollerSingleCollisionResolution+0x316>
 8007f86:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8007f8a:	2b05      	cmp	r3, #5
 8007f8c:	d1e2      	bne.n	8007f54 <rfalNfcaPollerSingleCollisionResolution+0x13c>
        BCC ^= buf[i];
 8007f8e:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8007f92:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8007f96:	4053      	eors	r3, r2
 8007f98:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8007f9c:	4053      	eors	r3, r2
 8007f9e:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
        if( selReq.bcc != rfalNfcaCalculateBcc( selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 8007fa2:	4053      	eors	r3, r2
 8007fa4:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d1d3      	bne.n	8007f54 <rfalNfcaPollerSingleCollisionResolution+0x13c>
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8007fac:	2370      	movs	r3, #112	; 0x70
 8007fae:	ee18 6a10 	vmov	r6, s16
 8007fb2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8007fb6:	2402      	movs	r4, #2
        rfalNfcaTxRetry( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &bytesRx, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 8007fb8:	f240 6a54 	movw	sl, #1620	; 0x654
 8007fbc:	e002      	b.n	8007fc4 <rfalNfcaPollerSingleCollisionResolution+0x1ac>
 8007fbe:	f1bb 0f04 	cmp.w	fp, #4
 8007fc2:	d111      	bne.n	8007fe8 <rfalNfcaPollerSingleCollisionResolution+0x1d0>
 8007fc4:	a90b      	add	r1, sp, #44	; 0x2c
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4632      	mov	r2, r6
 8007fca:	9100      	str	r1, [sp, #0]
 8007fcc:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8007fd0:	2107      	movs	r1, #7
 8007fd2:	a80c      	add	r0, sp, #48	; 0x30
 8007fd4:	f002 fdae 	bl	800ab34 <rfalTransceiveBlockingTxRx>
 8007fd8:	3c01      	subs	r4, #1
 8007fda:	4683      	mov	fp, r0
 8007fdc:	b2e4      	uxtb	r4, r4
 8007fde:	2005      	movs	r0, #5
 8007fe0:	f7f9 fade 	bl	80015a0 <HAL_Delay>
 8007fe4:	2cff      	cmp	r4, #255	; 0xff
 8007fe6:	d1ea      	bne.n	8007fbe <rfalNfcaPollerSingleCollisionResolution+0x1a6>
        if( ret != ERR_NONE )
 8007fe8:	f1bb 0f00 	cmp.w	fp, #0
 8007fec:	f47f af7c 	bne.w	8007ee8 <rfalNfcaPollerSingleCollisionResolution+0xd0>
        if( bytesRx != sizeof(rfalNfcaSelRes) )
 8007ff0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8007ff4:	2a01      	cmp	r2, #1
 8007ff6:	d1ad      	bne.n	8007f54 <rfalNfcaPollerSingleCollisionResolution+0x13c>
        if( (ret == ERR_NONE) && (*selReq.nfcid1 == RFAL_NFCA_SDD_CT) )
 8007ff8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8007ffc:	2a88      	cmp	r2, #136	; 0x88
 8007ffe:	f040 80cf 	bne.w	80081a0 <rfalNfcaPollerSingleCollisionResolution+0x388>
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8008002:	9b06      	ldr	r3, [sp, #24]
            ST_MEMCPY( &nfcId1[*nfcId1Len], &((uint8_t*)&selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8008004:	9807      	ldr	r0, [sp, #28]
 8008006:	f8bd 2033 	ldrh.w	r2, [sp, #51]	; 0x33
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 800800a:	3302      	adds	r3, #2
 800800c:	b2d9      	uxtb	r1, r3
            ST_MEMCPY( &nfcId1[*nfcId1Len], &((uint8_t*)&selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800800e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8008010:	9106      	str	r1, [sp, #24]
            ST_MEMCPY( &nfcId1[*nfcId1Len], &((uint8_t*)&selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	52c2      	strh	r2, [r0, r3]
 8008016:	4403      	add	r3, r0
 8008018:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800801c:	709a      	strb	r2, [r3, #2]
            *nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800801e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008020:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008022:	781b      	ldrb	r3, [r3, #0]
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8008024:	2999      	cmp	r1, #153	; 0x99
            *nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 8008026:	f103 0303 	add.w	r3, r3, #3
 800802a:	7013      	strb	r3, [r2, #0]
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 800802c:	f47f af1b 	bne.w	8007e66 <rfalNfcaPollerSingleCollisionResolution+0x4e>
    return ERR_INTERNAL;
 8008030:	f04f 090c 	mov.w	r9, #12
}
 8008034:	4648      	mov	r0, r9
 8008036:	b00f      	add	sp, #60	; 0x3c
 8008038:	ecbd 8b02 	vpop	{d8}
 800803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            selReq.selPar = rfalNfcaSelPar(bytesTxRx, bitsTxRx);
 8008040:	2402      	movs	r4, #2
            rfalNfcaTxRetry( ret, rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&selReq, &bytesTxRx, &bitsTxRx, &bytesRx, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 8008042:	f240 6654 	movw	r6, #1620	; 0x654
 8008046:	ab0b      	add	r3, sp, #44	; 0x2c
 8008048:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 800804c:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8008050:	9600      	str	r6, [sp, #0]
 8008052:	a80c      	add	r0, sp, #48	; 0x30
 8008054:	f002 ff1e 	bl	800ae94 <rfalISO14443ATransceiveAnticollisionFrame>
 8008058:	3c01      	subs	r4, #1
 800805a:	4683      	mov	fp, r0
 800805c:	b2e4      	uxtb	r4, r4
 800805e:	2005      	movs	r0, #5
 8008060:	f7f9 fa9e 	bl	80015a0 <HAL_Delay>
 8008064:	2cff      	cmp	r4, #255	; 0xff
 8008066:	f43f af2a 	beq.w	8007ebe <rfalNfcaPollerSingleCollisionResolution+0xa6>
 800806a:	f1bb 0f04 	cmp.w	fp, #4
 800806e:	d0ea      	beq.n	8008046 <rfalNfcaPollerSingleCollisionResolution+0x22e>
            bytesRx = rfalConvBitsToBytes(bytesRx);
 8008070:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8008074:	3307      	adds	r3, #7
 8008076:	08db      	lsrs	r3, r3, #3
 8008078:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            if ((ret == ERR_TIMEOUT) 
 800807c:	e779      	b.n	8007f72 <rfalNfcaPollerSingleCollisionResolution+0x15a>
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 800807e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8008082:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 8008086:	1e1a      	subs	r2, r3, #0
 8008088:	bf18      	it	ne
 800808a:	2201      	movne	r2, #1
 800808c:	440a      	add	r2, r1
 800808e:	2a07      	cmp	r2, #7
 8008090:	4608      	mov	r0, r1
            uint8_t         collBit = 1; /* standards mandate or recommend collision bit to be set to One. */
 8008092:	f04f 0401 	mov.w	r4, #1
                doBacktrack = false;
 8008096:	f04f 0a00 	mov.w	sl, #0
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 800809a:	f63f af5b 	bhi.w	8007f54 <rfalNfcaPollerSingleCollisionResolution+0x13c>
                if( ((bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (backtrackCnt != 0U) )
 800809e:	d015      	beq.n	80080cc <rfalNfcaPollerSingleCollisionResolution+0x2b4>
                if( (devLimit == 0U) && !(*collPending) )
 80080a0:	b91d      	cbnz	r5, 80080aa <rfalNfcaPollerSingleCollisionResolution+0x292>
 80080a2:	9a05      	ldr	r2, [sp, #20]
 80080a4:	7812      	ldrb	r2, [r2, #0]
 80080a6:	2a00      	cmp	r2, #0
 80080a8:	d074      	beq.n	8008194 <rfalNfcaPollerSingleCollisionResolution+0x37c>
                *collPending = true;
 80080aa:	9e05      	ldr	r6, [sp, #20]
 80080ac:	2201      	movs	r2, #1
 80080ae:	7032      	strb	r2, [r6, #0]
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 80080b0:	409a      	lsls	r2, r3
                if (collBit != 0U)
 80080b2:	b304      	cbz	r4, 80080f6 <rfalNfcaPollerSingleCollisionResolution+0x2de>
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 80080b4:	ac0c      	add	r4, sp, #48	; 0x30
                bitsTxRx++;
 80080b6:	3301      	adds	r3, #1
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 80080b8:	5c24      	ldrb	r4, [r4, r0]
                bitsTxRx++;
 80080ba:	b2db      	uxtb	r3, r3
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 80080bc:	4322      	orrs	r2, r4
 80080be:	ac0c      	add	r4, sp, #48	; 0x30
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 80080c0:	2b08      	cmp	r3, #8
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 80080c2:	5422      	strb	r2, [r4, r0]
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 80080c4:	d021      	beq.n	800810a <rfalNfcaPollerSingleCollisionResolution+0x2f2>
                bitsTxRx++;
 80080c6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 80080ca:	e6db      	b.n	8007e84 <rfalNfcaPollerSingleCollisionResolution+0x6c>
                if( ((bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (backtrackCnt != 0U) )
 80080cc:	464e      	mov	r6, r9
 80080ce:	2e00      	cmp	r6, #0
 80080d0:	d0e6      	beq.n	80080a0 <rfalNfcaPollerSingleCollisionResolution+0x288>
                    backtrackCnt--;
 80080d2:	f109 33ff 	add.w	r3, r9, #4294967295
 80080d6:	b2db      	uxtb	r3, r3
                    collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 80080d8:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
                    bitsTxRx = 7;
 80080dc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
                    backtrackCnt--;
 80080e0:	4699      	mov	r9, r3
                    collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 80080e2:	2005      	movs	r0, #5
                    bytesTxRx = RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN - 1U;
 80080e4:	f04f 0305 	mov.w	r3, #5
 80080e8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 80080ec:	f004 0480 	and.w	r4, r4, #128	; 0x80
 80080f0:	4613      	mov	r3, r2
 80080f2:	4601      	mov	r1, r0
 80080f4:	e7d4      	b.n	80080a0 <rfalNfcaPollerSingleCollisionResolution+0x288>
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 80080f6:	ac0c      	add	r4, sp, #48	; 0x30
                bitsTxRx++;
 80080f8:	3301      	adds	r3, #1
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 80080fa:	5c24      	ldrb	r4, [r4, r0]
                bitsTxRx++;
 80080fc:	b2db      	uxtb	r3, r3
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 80080fe:	ea24 0202 	bic.w	r2, r4, r2
 8008102:	ac0c      	add	r4, sp, #48	; 0x30
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 8008104:	2b08      	cmp	r3, #8
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 8008106:	5422      	strb	r2, [r4, r0]
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 8008108:	d1dd      	bne.n	80080c6 <rfalNfcaPollerSingleCollisionResolution+0x2ae>
                    bytesTxRx++;
 800810a:	3101      	adds	r1, #1
 800810c:	b2c9      	uxtb	r1, r1
                    bitsTxRx = 0;
 800810e:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
                    bytesTxRx++;
 8008112:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
 8008116:	2300      	movs	r3, #0
 8008118:	e6b4      	b.n	8007e84 <rfalNfcaPollerSingleCollisionResolution+0x6c>
                    bytesTxRx--;
 800811a:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 800811e:	3901      	subs	r1, #1
 8008120:	b2c9      	uxtb	r1, r1
 8008122:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
 8008126:	2201      	movs	r2, #1
 8008128:	2080      	movs	r0, #128	; 0x80
                    bitsTxRx = 7;
 800812a:	2307      	movs	r3, #7
 800812c:	e6fc      	b.n	8007f28 <rfalNfcaPollerSingleCollisionResolution+0x110>
        BCC ^= buf[i];
 800812e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8008132:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008136:	4053      	eors	r3, r2
 8008138:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800813c:	4053      	eors	r3, r2
 800813e:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
        if( selReq.bcc != rfalNfcaCalculateBcc( selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 8008142:	4053      	eors	r3, r2
 8008144:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 8008148:	429a      	cmp	r2, r3
 800814a:	f47f af03 	bne.w	8007f54 <rfalNfcaPollerSingleCollisionResolution+0x13c>
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800814e:	2370      	movs	r3, #112	; 0x70
 8008150:	ee18 6a10 	vmov	r6, s16
 8008154:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8008158:	4644      	mov	r4, r8
        rfalNfcaTxRetry( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &bytesRx, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 800815a:	f240 6a54 	movw	sl, #1620	; 0x654
 800815e:	e001      	b.n	8008164 <rfalNfcaPollerSingleCollisionResolution+0x34c>
 8008160:	2804      	cmp	r0, #4
 8008162:	d10d      	bne.n	8008180 <rfalNfcaPollerSingleCollisionResolution+0x368>
 8008164:	ab0b      	add	r3, sp, #44	; 0x2c
 8008166:	3c01      	subs	r4, #1
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 800816e:	2301      	movs	r3, #1
 8008170:	4632      	mov	r2, r6
 8008172:	2107      	movs	r1, #7
 8008174:	a80c      	add	r0, sp, #48	; 0x30
 8008176:	b2e4      	uxtb	r4, r4
 8008178:	f002 fcdc 	bl	800ab34 <rfalTransceiveBlockingTxRx>
 800817c:	2cff      	cmp	r4, #255	; 0xff
 800817e:	d1ef      	bne.n	8008160 <rfalNfcaPollerSingleCollisionResolution+0x348>
 8008180:	4683      	mov	fp, r0
 8008182:	e731      	b.n	8007fe8 <rfalNfcaPollerSingleCollisionResolution+0x1d0>
        return ERR_PARAM;
 8008184:	f04f 0907 	mov.w	r9, #7
}
 8008188:	4648      	mov	r0, r9
 800818a:	b00f      	add	sp, #60	; 0x3c
 800818c:	ecbd 8b02 	vpop	{d8}
 8008190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    *collPending = true;
 8008194:	9a05      	ldr	r2, [sp, #20]
 8008196:	2301      	movs	r3, #1
 8008198:	7013      	strb	r3, [r2, #0]
                    return ERR_IGNORE;
 800819a:	f04f 0912 	mov.w	r9, #18
 800819e:	e6a4      	b.n	8007eea <rfalNfcaPollerSingleCollisionResolution+0xd2>
            ST_MEMCPY( &nfcId1[*nfcId1Len], (uint8_t*)&selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 80081a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081a2:	f8dd 1032 	ldr.w	r1, [sp, #50]	; 0x32
 80081a6:	781a      	ldrb	r2, [r3, #0]
 80081a8:	9b07      	ldr	r3, [sp, #28]
 80081aa:	5099      	str	r1, [r3, r2]
            *nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 80081ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081ae:	781a      	ldrb	r2, [r3, #0]
 80081b0:	3204      	adds	r2, #4
            ST_MEMCPY( &nfcId1[*nfcId1Len], (uint8_t*)&selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 80081b2:	46d9      	mov	r9, fp
            *nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 80081b4:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 80081b6:	e698      	b.n	8007eea <rfalNfcaPollerSingleCollisionResolution+0xd2>

080081b8 <rfalNfcaPollerFullCollisionResolution>:
{
 80081b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081bc:	b086      	sub	sp, #24
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 80081be:	2a00      	cmp	r2, #0
 80081c0:	f000 80b7 	beq.w	8008332 <rfalNfcaPollerFullCollisionResolution+0x17a>
 80081c4:	461d      	mov	r5, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 80b3 	beq.w	8008332 <rfalNfcaPollerFullCollisionResolution+0x17a>
    *devCnt = 0;
 80081cc:	2300      	movs	r3, #0
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 80081ce:	2802      	cmp	r0, #2
 80081d0:	4607      	mov	r7, r0
 80081d2:	460e      	mov	r6, r1
 80081d4:	4614      	mov	r4, r2
    *devCnt = 0;
 80081d6:	702b      	strb	r3, [r5, #0]
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 80081d8:	d145      	bne.n	8008266 <rfalNfcaPollerFullCollisionResolution+0xae>
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 80081da:	f892 8002 	ldrb.w	r8, [r2, #2]
 80081de:	f008 030f 	and.w	r3, r8, #15
 80081e2:	2b0c      	cmp	r3, #12
 80081e4:	f000 80bd 	beq.w	8008362 <rfalNfcaPollerFullCollisionResolution+0x1aa>
    sensRes = nfcaDevList->sensRes;
 80081e8:	f894 9001 	ldrb.w	r9, [r4, #1]
    if( devLimit > 0U )  /* MISRA 21.18 */
 80081ec:	2e00      	cmp	r6, #0
 80081ee:	d159      	bne.n	80082a4 <rfalNfcaPollerFullCollisionResolution+0xec>
    nfcaDevList->sensRes = sensRes;
 80081f0:	f884 9001 	strb.w	r9, [r4, #1]
 80081f4:	f884 8002 	strb.w	r8, [r4, #2]
        EXIT_ON_ERR( ret, rfalNfcaPollerSingleCollisionResolution( devLimit, &collPending, &nfcaDevList[*devCnt].selRes, (uint8_t*)&nfcaDevList[*devCnt].nfcId1, (uint8_t*)&nfcaDevList[*devCnt].nfcId1Len ) );
 80081f8:	f895 c000 	ldrb.w	ip, [r5]
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 80081fc:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800839c <rfalNfcaPollerFullCollisionResolution+0x1e4>
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 8008200:	f04f 0850 	mov.w	r8, #80	; 0x50
        EXIT_ON_ERR( ret, rfalNfcaPollerSingleCollisionResolution( devLimit, &collPending, &nfcaDevList[*devCnt].selRes, (uint8_t*)&nfcaDevList[*devCnt].nfcId1, (uint8_t*)&nfcaDevList[*devCnt].nfcId1Len ) );
 8008204:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 8008208:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
 800820c:	eb04 0c4c 	add.w	ip, r4, ip, lsl #1
 8008210:	f10c 0104 	add.w	r1, ip, #4
 8008214:	9100      	str	r1, [sp, #0]
 8008216:	f10c 0305 	add.w	r3, ip, #5
 800821a:	f10c 0203 	add.w	r2, ip, #3
 800821e:	a904      	add	r1, sp, #16
 8008220:	4630      	mov	r0, r6
 8008222:	f7ff fdf9 	bl	8007e18 <rfalNfcaPollerSingleCollisionResolution>
 8008226:	4682      	mov	sl, r0
 8008228:	b9c8      	cbnz	r0, 800825e <rfalNfcaPollerFullCollisionResolution+0xa6>
        newDeviceType = ((uint8_t)nfcaDevList[*devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 800822a:	782b      	ldrb	r3, [r5, #0]
 800822c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008230:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8008234:	eb04 0243 	add.w	r2, r4, r3, lsl #1
 8008238:	78d2      	ldrb	r2, [r2, #3]
 800823a:	f002 0260 	and.w	r2, r2, #96	; 0x60
        nfcaDevList[*devCnt].type    = (rfalNfcaListenDeviceType) (newDeviceType);
 800823e:	f804 2013 	strb.w	r2, [r4, r3, lsl #1]
        nfcaDevList[*devCnt].isSleep = false;
 8008242:	782b      	ldrb	r3, [r5, #0]
 8008244:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008248:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800824c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008250:	7558      	strb	r0, [r3, #21]
        (*devCnt)++;
 8008252:	782b      	ldrb	r3, [r5, #0]
 8008254:	3301      	adds	r3, #1
 8008256:	b2db      	uxtb	r3, r3
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 8008258:	42b3      	cmp	r3, r6
        (*devCnt)++;
 800825a:	702b      	strb	r3, [r5, #0]
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 800825c:	d32c      	bcc.n	80082b8 <rfalNfcaPollerFullCollisionResolution+0x100>
}
 800825e:	4650      	mov	r0, sl
 8008260:	b006      	add	sp, #24
 8008262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8008266:	f240 6354 	movw	r3, #1620	; 0x654
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	2210      	movs	r2, #16
 800826e:	f10d 0312 	add.w	r3, sp, #18
 8008272:	1c61      	adds	r1, r4, #1
 8008274:	2052      	movs	r0, #82	; 0x52
 8008276:	f002 fd45 	bl	800ad04 <rfalISO14443ATransceiveShortFrame>
        if(ret != ERR_NONE)
 800827a:	4682      	mov	sl, r0
 800827c:	2800      	cmp	r0, #0
 800827e:	d05e      	beq.n	800833e <rfalNfcaPollerFullCollisionResolution+0x186>
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != ERR_RF_COLLISION) && (ret != ERR_CRC) && (ret != ERR_FRAMING) && (ret != ERR_PAR)) )
 8008280:	2f01      	cmp	r7, #1
 8008282:	d0ec      	beq.n	800825e <rfalNfcaPollerFullCollisionResolution+0xa6>
 8008284:	281d      	cmp	r0, #29
 8008286:	d8ea      	bhi.n	800825e <rfalNfcaPollerFullCollisionResolution+0xa6>
 8008288:	4b43      	ldr	r3, [pc, #268]	; (8008398 <rfalNfcaPollerFullCollisionResolution+0x1e0>)
 800828a:	40c3      	lsrs	r3, r0
 800828c:	07d9      	lsls	r1, r3, #31
 800828e:	d5e6      	bpl.n	800825e <rfalNfcaPollerFullCollisionResolution+0xa6>
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 8008290:	f894 8002 	ldrb.w	r8, [r4, #2]
 8008294:	f008 030f 	and.w	r3, r8, #15
 8008298:	2b0c      	cmp	r3, #12
 800829a:	d1a5      	bne.n	80081e8 <rfalNfcaPollerFullCollisionResolution+0x30>
 800829c:	2e00      	cmp	r6, #0
 800829e:	d05d      	beq.n	800835c <rfalNfcaPollerFullCollisionResolution+0x1a4>
    sensRes = nfcaDevList->sensRes;
 80082a0:	f894 9001 	ldrb.w	r9, [r4, #1]
        ST_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 80082a4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80082a8:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 80082ac:	0052      	lsls	r2, r2, #1
 80082ae:	2100      	movs	r1, #0
 80082b0:	4620      	mov	r0, r4
 80082b2:	f003 fbbd 	bl	800ba30 <memset>
 80082b6:	e79b      	b.n	80081f0 <rfalNfcaPollerFullCollisionResolution+0x38>
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 80082b8:	f89d 2010 	ldrb.w	r2, [sp, #16]
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 80082bc:	2300      	movs	r3, #0
 80082be:	f243 41f8 	movw	r1, #13560	; 0x34f8
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 80082c2:	b90a      	cbnz	r2, 80082c8 <rfalNfcaPollerFullCollisionResolution+0x110>
 80082c4:	2f02      	cmp	r7, #2
 80082c6:	d0ca      	beq.n	800825e <rfalNfcaPollerFullCollisionResolution+0xa6>
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 80082c8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	f10d 0211 	add.w	r2, sp, #17
 80082d2:	2301      	movs	r3, #1
 80082d4:	2102      	movs	r1, #2
 80082d6:	a805      	add	r0, sp, #20
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 80082d8:	f8ad 8014 	strh.w	r8, [sp, #20]
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 80082dc:	f002 fc2a 	bl	800ab34 <rfalTransceiveBlockingTxRx>
            nfcaDevList[(*devCnt - 1U)].isSleep = true;
 80082e0:	782a      	ldrb	r2, [r5, #0]
 80082e2:	2116      	movs	r1, #22
 80082e4:	fb01 4202 	mla	r2, r1, r2, r4
 80082e8:	2101      	movs	r1, #1
 80082ea:	f802 1c01 	strb.w	r1, [r2, #-1]
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &nfcaDevList[*devCnt].sensRes );
 80082ee:	7829      	ldrb	r1, [r5, #0]
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 80082f0:	f240 6254 	movw	r2, #1620	; 0x654
 80082f4:	9200      	str	r2, [sp, #0]
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &nfcaDevList[*devCnt].sensRes );
 80082f6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80082fa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80082fe:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8008302:	ab05      	add	r3, sp, #20
 8008304:	2210      	movs	r2, #16
 8008306:	3101      	adds	r1, #1
 8008308:	2026      	movs	r0, #38	; 0x26
 800830a:	f002 fcfb 	bl	800ad04 <rfalISO14443ATransceiveShortFrame>
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 800830e:	281d      	cmp	r0, #29
                collPending = true;
 8008310:	f04f 0301 	mov.w	r3, #1
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 8008314:	fa29 f200 	lsr.w	r2, r9, r0
 8008318:	d803      	bhi.n	8008322 <rfalNfcaPollerFullCollisionResolution+0x16a>
 800831a:	07d2      	lsls	r2, r2, #31
 800831c:	d401      	bmi.n	8008322 <rfalNfcaPollerFullCollisionResolution+0x16a>
            if( ret == ERR_TIMEOUT )
 800831e:	2804      	cmp	r0, #4
 8008320:	d09d      	beq.n	800825e <rfalNfcaPollerFullCollisionResolution+0xa6>
    }while( (*devCnt < devLimit) && (collPending) );
 8008322:	f895 c000 	ldrb.w	ip, [r5]
                collPending = true;
 8008326:	f88d 3010 	strb.w	r3, [sp, #16]
    }while( (*devCnt < devLimit) && (collPending) );
 800832a:	4566      	cmp	r6, ip
 800832c:	f63f af6a 	bhi.w	8008204 <rfalNfcaPollerFullCollisionResolution+0x4c>
 8008330:	e795      	b.n	800825e <rfalNfcaPollerFullCollisionResolution+0xa6>
        return ERR_PARAM;
 8008332:	f04f 0a07 	mov.w	sl, #7
}
 8008336:	4650      	mov	r0, sl
 8008338:	b006      	add	sp, #24
 800833a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( (ret == ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 800833e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008342:	2b10      	cmp	r3, #16
 8008344:	d124      	bne.n	8008390 <rfalNfcaPollerFullCollisionResolution+0x1d8>
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 8008346:	f894 8002 	ldrb.w	r8, [r4, #2]
 800834a:	f008 030f 	and.w	r3, r8, #15
 800834e:	2b0c      	cmp	r3, #12
 8008350:	f47f af4a 	bne.w	80081e8 <rfalNfcaPollerFullCollisionResolution+0x30>
 8008354:	b116      	cbz	r6, 800835c <rfalNfcaPollerFullCollisionResolution+0x1a4>
 8008356:	2f01      	cmp	r7, #1
 8008358:	d0a2      	beq.n	80082a0 <rfalNfcaPollerFullCollisionResolution+0xe8>
 800835a:	e004      	b.n	8008366 <rfalNfcaPollerFullCollisionResolution+0x1ae>
    sensRes = nfcaDevList->sensRes;
 800835c:	f894 9001 	ldrb.w	r9, [r4, #1]
    if( devLimit > 0U )  /* MISRA 21.18 */
 8008360:	e746      	b.n	80081f0 <rfalNfcaPollerFullCollisionResolution+0x38>
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 8008362:	2900      	cmp	r1, #0
 8008364:	d0fa      	beq.n	800835c <rfalNfcaPollerFullCollisionResolution+0x1a4>
        rfalT1TPollerInitialize();
 8008366:	f003 fabf 	bl	800b8e8 <rfalT1TPollerInitialize>
        EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 800836a:	f104 000f 	add.w	r0, r4, #15
 800836e:	f003 fad3 	bl	800b918 <rfalT1TPollerRid>
 8008372:	4682      	mov	sl, r0
 8008374:	2800      	cmp	r0, #0
 8008376:	f47f af72 	bne.w	800825e <rfalNfcaPollerFullCollisionResolution+0xa6>
        *devCnt = 1;
 800837a:	2301      	movs	r3, #1
 800837c:	702b      	strb	r3, [r5, #0]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 800837e:	f8d4 2011 	ldr.w	r2, [r4, #17]
        nfcaDevList->isSleep   = false;
 8008382:	7560      	strb	r0, [r4, #21]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 8008384:	2104      	movs	r1, #4
        nfcaDevList->type      = RFAL_NFCA_T1T;
 8008386:	7023      	strb	r3, [r4, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 8008388:	7121      	strb	r1, [r4, #4]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 800838a:	f8c4 2005 	str.w	r2, [r4, #5]
        return ERR_NONE;
 800838e:	e766      	b.n	800825e <rfalNfcaPollerFullCollisionResolution+0xa6>
            return ERR_PROTO;
 8008390:	f04f 0a0b 	mov.w	sl, #11
 8008394:	e763      	b.n	800825e <rfalNfcaPollerFullCollisionResolution+0xa6>
 8008396:	bf00      	nop
 8008398:	28200200 	.word	0x28200200
 800839c:	28200202 	.word	0x28200202

080083a0 <rfalNfcaPollerSelect>:
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d054      	beq.n	800844e <rfalNfcaPollerSelect+0xae>
 80083a4:	290a      	cmp	r1, #10
 80083a6:	d852      	bhi.n	800844e <rfalNfcaPollerSelect+0xae>
{
 80083a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	4693      	mov	fp, r2
 80083ae:	b089      	sub	sp, #36	; 0x24
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 80083b0:	2a00      	cmp	r2, #0
 80083b2:	d04e      	beq.n	8008452 <rfalNfcaPollerSelect+0xb2>
    cl          = rfalNfcaNfcidLen2CL( nfcidLen );
 80083b4:	4e28      	ldr	r6, [pc, #160]	; (8008458 <rfalNfcaPollerSelect+0xb8>)
 80083b6:	2500      	movs	r5, #0
 80083b8:	fba6 3101 	umull	r3, r1, r6, r1
 80083bc:	4607      	mov	r7, r0
 80083be:	088e      	lsrs	r6, r1, #2
    nfcidOffset = 0;
 80083c0:	462c      	mov	r4, r5
 80083c2:	462b      	mov	r3, r5
 80083c4:	f10d 0916 	add.w	r9, sp, #22
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 80083c8:	f04f 0870 	mov.w	r8, #112	; 0x70
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 80083cc:	f04f 0a88 	mov.w	sl, #136	; 0x88
 80083d0:	e02a      	b.n	8008428 <rfalNfcaPollerSelect+0x88>
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 80083d2:	788b      	ldrb	r3, [r1, #2]
 80083d4:	5b3a      	ldrh	r2, [r7, r4]
 80083d6:	f88d 301d 	strb.w	r3, [sp, #29]
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 80083da:	1ce3      	adds	r3, r4, #3
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 80083dc:	f8ad 201b 	strh.w	r2, [sp, #27]
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 80083e0:	b2dc      	uxtb	r4, r3
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 80083e2:	f88d a01a 	strb.w	sl, [sp, #26]
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 80083e6:	2288      	movs	r2, #136	; 0x88
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 80083e8:	f240 6054 	movw	r0, #1620	; 0x654
        BCC ^= buf[i];
 80083ec:	f89d 101b 	ldrb.w	r1, [sp, #27]
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 80083f0:	9002      	str	r0, [sp, #8]
        BCC ^= buf[i];
 80083f2:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80083f6:	4041      	eors	r1, r0
 80083f8:	f89d 001d 	ldrb.w	r0, [sp, #29]
 80083fc:	4041      	eors	r1, r0
 80083fe:	4051      	eors	r1, r2
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 8008400:	2300      	movs	r3, #0
 8008402:	e9cd 9300 	strd	r9, r3, [sp]
        selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 8008406:	f88d 101e 	strb.w	r1, [sp, #30]
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 800840a:	2301      	movs	r3, #1
 800840c:	465a      	mov	r2, fp
 800840e:	2107      	movs	r1, #7
 8008410:	a806      	add	r0, sp, #24
 8008412:	f002 fb8f 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8008416:	3501      	adds	r5, #1
 8008418:	b2eb      	uxtb	r3, r5
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 800841a:	b9a8      	cbnz	r0, 8008448 <rfalNfcaPollerSelect+0xa8>
        if( rxLen != sizeof(rfalNfcaSelRes) )
 800841c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8008420:	2a01      	cmp	r2, #1
 8008422:	d110      	bne.n	8008446 <rfalNfcaPollerSelect+0xa6>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8008424:	429e      	cmp	r6, r3
 8008426:	d30f      	bcc.n	8008448 <rfalNfcaPollerSelect+0xa8>
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 8008428:	005a      	lsls	r2, r3, #1
 800842a:	3a6d      	subs	r2, #109	; 0x6d
        if( cl != i )
 800842c:	429e      	cmp	r6, r3
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800842e:	eb07 0104 	add.w	r1, r7, r4
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 8008432:	f88d 2018 	strb.w	r2, [sp, #24]
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8008436:	f88d 8019 	strb.w	r8, [sp, #25]
        if( cl != i )
 800843a:	d1ca      	bne.n	80083d2 <rfalNfcaPollerSelect+0x32>
            ST_MEMCPY( selReq.nfcid1, &nfcid1[nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 800843c:	5939      	ldr	r1, [r7, r4]
 800843e:	f8cd 101a 	str.w	r1, [sp, #26]
 8008442:	b2ca      	uxtb	r2, r1
 8008444:	e7d0      	b.n	80083e8 <rfalNfcaPollerSelect+0x48>
            return ERR_PROTO;
 8008446:	200b      	movs	r0, #11
}
 8008448:	b009      	add	sp, #36	; 0x24
 800844a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ERR_PARAM;
 800844e:	2007      	movs	r0, #7
}
 8008450:	4770      	bx	lr
        return ERR_PARAM;
 8008452:	2007      	movs	r0, #7
 8008454:	e7f8      	b.n	8008448 <rfalNfcaPollerSelect+0xa8>
 8008456:	bf00      	nop
 8008458:	cccccccd 	.word	0xcccccccd

0800845c <rfalNfcbPollerCheckPresence.part.0>:
    return ERR_NONE;
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
 800845c:	b5f0      	push	{r4, r5, r6, r7, lr}
    *sensbResLen = 0;
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
    sensbReq.AFI   = gRfalNfcb.AFI;
 800845e:	4f1f      	ldr	r7, [pc, #124]	; (80084dc <rfalNfcbPollerCheckPresence.part.0+0x80>)
    *sensbResLen = 0;
 8008460:	2500      	movs	r5, #0
 8008462:	701d      	strb	r5, [r3, #0]
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
 8008464:	461e      	mov	r6, r3
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 8008466:	787b      	ldrb	r3, [r7, #1]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 8008468:	6015      	str	r5, [r2, #0]
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
 800846a:	b087      	sub	sp, #28
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800846c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008470:	4319      	orrs	r1, r3
    
    /* Send SENSB_REQ and disable AGC to detect collisions */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8008472:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 8008476:	4308      	orrs	r0, r1
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8008478:	9302      	str	r3, [sp, #8]
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 800847a:	2105      	movs	r1, #5
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800847c:	f10d 0312 	add.w	r3, sp, #18
 8008480:	9501      	str	r5, [sp, #4]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 8008482:	6055      	str	r5, [r2, #4]
 8008484:	6095      	str	r5, [r2, #8]
 8008486:	7315      	strb	r5, [r2, #12]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8008488:	9300      	str	r3, [sp, #0]
    sensbReq.AFI   = gRfalNfcb.AFI;
 800848a:	783d      	ldrb	r5, [r7, #0]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800848c:	f88d 0016 	strb.w	r0, [sp, #22]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8008490:	230d      	movs	r3, #13
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 8008492:	f88d 1014 	strb.w	r1, [sp, #20]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8008496:	a805      	add	r0, sp, #20
 8008498:	2103      	movs	r1, #3
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
 800849a:	4614      	mov	r4, r2
    sensbReq.AFI   = gRfalNfcb.AFI;
 800849c:	f88d 5015 	strb.w	r5, [sp, #21]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 80084a0:	f002 fb48 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    
    *sensbResLen = (uint8_t)rxLen;
 80084a4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80084a8:	7033      	strb	r3, [r6, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 80084aa:	2815      	cmp	r0, #21
 80084ac:	d010      	beq.n	80084d0 <rfalNfcbPollerCheckPresence.part.0+0x74>
 80084ae:	2809      	cmp	r0, #9
 80084b0:	d00e      	beq.n	80084d0 <rfalNfcbPollerCheckPresence.part.0+0x74>
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        *sensbResLen = 0;
        return ERR_NONE;
    }
    
    if( ret == ERR_NONE )
 80084b2:	b108      	cbz	r0, 80084b8 <rfalNfcbPollerCheckPresence.part.0+0x5c>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
    }
    
    return ret;
}
 80084b4:	b007      	add	sp, #28
 80084b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 80084b8:	3b0c      	subs	r3, #12
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d80c      	bhi.n	80084d8 <rfalNfcbPollerCheckPresence.part.0+0x7c>
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 80084be:	7aa3      	ldrb	r3, [r4, #10]
 80084c0:	071b      	lsls	r3, r3, #28
 80084c2:	d409      	bmi.n	80084d8 <rfalNfcbPollerCheckPresence.part.0+0x7c>
 80084c4:	7823      	ldrb	r3, [r4, #0]
        return ERR_PROTO;
 80084c6:	2b50      	cmp	r3, #80	; 0x50
 80084c8:	bf18      	it	ne
 80084ca:	200b      	movne	r0, #11
}
 80084cc:	b007      	add	sp, #28
 80084ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *sensbResLen = 0;
 80084d0:	2000      	movs	r0, #0
 80084d2:	7030      	strb	r0, [r6, #0]
}
 80084d4:	b007      	add	sp, #28
 80084d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERR_PROTO;
 80084d8:	200b      	movs	r0, #11
 80084da:	e7eb      	b.n	80084b4 <rfalNfcbPollerCheckPresence.part.0+0x58>
 80084dc:	20000b80 	.word	0x20000b80

080084e0 <rfalNfcbPollerSlottedCollisionResolution.part.0>:
    return rfalNfcbPollerSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &colPending );
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	b091      	sub	sp, #68	; 0x44
            return ERR_PARAM;
        }
        
        /* Initialise as no error in case Activity 1.0 where the previous SENSB_RES from technology detection should be used */
        ret         = ERR_NONE;
        *devCnt     = 0;
 80084e6:	2700      	movs	r7, #0
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
 80084e8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 80084ec:	930b      	str	r3, [sp, #44]	; 0x2c
        curDevCnt   = 0;
        *colPending = false;
 80084ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        *devCnt     = 0;
 80084f0:	f88b 7000 	strb.w	r7, [fp]
           
        
        /* Send ALLB_REQ   Activity 1.1   9.3.5.2 and 9.3.5.3  (Symbol 1 and 2) */
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 80084f4:	2802      	cmp	r0, #2
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
 80084f6:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80084fa:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80084fe:	9005      	str	r0, [sp, #20]
        *colPending = false;
 8008500:	701f      	strb	r7, [r3, #0]
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 8008502:	f040 8116 	bne.w	8008732 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x252>
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
        {
            return ERR_FRAMING;
        }
        
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 8008506:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 800850a:	4293      	cmp	r3, r2
 800850c:	d86d      	bhi.n	80085ea <rfalNfcbPollerSlottedCollisionResolution.part.0+0x10a>
 800850e:	9308      	str	r3, [sp, #32]
                    }
                    
                    /* Activity 1.1  9.3.5.15  -  Symbol 14 */
                    slotCode++;
                }
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 8008510:	f04f 0a01 	mov.w	sl, #1
 8008514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008516:	fa0a f803 	lsl.w	r8, sl, r3
 800851a:	4313      	orrs	r3, r2
 800851c:	9306      	str	r3, [sp, #24]
 800851e:	2300      	movs	r3, #0
 8008520:	fa5f f888 	uxtb.w	r8, r8
 8008524:	9307      	str	r3, [sp, #28]
                if( (compMode == RFAL_COMPLIANCE_MODE_NFC) && (curDevCnt != 0U) )
 8008526:	9b05      	ldr	r3, [sp, #20]
 8008528:	b91b      	cbnz	r3, 8008532 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x52>
 800852a:	9b07      	ldr	r3, [sp, #28]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f040 811f 	bne.w	8008770 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x290>
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 8008532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008534:	9a08      	ldr	r2, [sp, #32]
 8008536:	4293      	cmp	r3, r2
 8008538:	f000 80f5 	beq.w	8008726 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x246>
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 800853c:	f89b 3000 	ldrb.w	r3, [fp]
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 8008540:	9908      	ldr	r1, [sp, #32]
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 8008542:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8008546:	444b      	add	r3, r9
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 8008548:	2904      	cmp	r1, #4
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 800854a:	f103 0201 	add.w	r2, r3, #1
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 800854e:	f200 8108 	bhi.w	8008762 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x282>
 8008552:	2000      	movs	r0, #0
 8008554:	f7ff ff82 	bl	800845c <rfalNfcbPollerCheckPresence.part.0>
 8008558:	4607      	mov	r7, r0
                *colPending = false;
 800855a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800855c:	2500      	movs	r5, #0
 800855e:	f04f 0200 	mov.w	r2, #0
 8008562:	701a      	strb	r2, [r3, #0]
                curDevCnt   = 0;
 8008564:	9507      	str	r5, [sp, #28]
 8008566:	462b      	mov	r3, r5
                    if( slotCode != 0U )
 8008568:	2d00      	cmp	r5, #0
 800856a:	d143      	bne.n	80085f4 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x114>
                    if( ret != ERR_TIMEOUT )
 800856c:	2f04      	cmp	r7, #4
 800856e:	d02b      	beq.n	80085c8 <rfalNfcbPollerSlottedCollisionResolution.part.0+0xe8>
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 8008570:	f89b 4000 	ldrb.w	r4, [fp]
 8008574:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8008578:	444c      	add	r4, r9
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 800857a:	7823      	ldrb	r3, [r4, #0]
 800857c:	3b0c      	subs	r3, #12
 800857e:	2b01      	cmp	r3, #1
 8008580:	d870      	bhi.n	8008664 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x184>
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 8008582:	7ae3      	ldrb	r3, [r4, #11]
 8008584:	071b      	lsls	r3, r3, #28
 8008586:	d46d      	bmi.n	8008664 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x184>
 8008588:	7863      	ldrb	r3, [r4, #1]
 800858a:	2b50      	cmp	r3, #80	; 0x50
 800858c:	d16a      	bne.n	8008664 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x184>
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 800858e:	2f00      	cmp	r7, #0
 8008590:	d168      	bne.n	8008664 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x184>
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8008592:	9a05      	ldr	r2, [sp, #20]
                            nfcbDevList[*devCnt].isSleep = false;
 8008594:	73a7      	strb	r7, [r4, #14]
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8008596:	2a01      	cmp	r2, #1
 8008598:	f000 810d 	beq.w	80087b6 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x2d6>
                            else if( compMode == RFAL_COMPLIANCE_MODE_ISO )
 800859c:	2a02      	cmp	r2, #2
 800859e:	d071      	beq.n	8008684 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x1a4>
                            else if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 80085a0:	b992      	cbnz	r2, 80085c8 <rfalNfcbPollerSlottedCollisionResolution.part.0+0xe8>
                                if(curDevCnt != 0U)
 80085a2:	9a07      	ldr	r2, [sp, #28]
 80085a4:	2a00      	cmp	r2, #0
 80085a6:	f040 809c 	bne.w	80086e2 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x202>
                                curDevCnt++;
 80085aa:	9b07      	ldr	r3, [sp, #28]
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 80085ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
                                curDevCnt++;
 80085ae:	3301      	adds	r3, #1
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	9307      	str	r3, [sp, #28]
                                (*devCnt)++;
 80085b4:	f89b 3000 	ldrb.w	r3, [fp]
 80085b8:	3301      	adds	r3, #1
 80085ba:	b2db      	uxtb	r3, r3
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 80085bc:	429a      	cmp	r2, r3
                                (*devCnt)++;
 80085be:	f88b 3000 	strb.w	r3, [fp]
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 80085c2:	d912      	bls.n	80085ea <rfalNfcbPollerSlottedCollisionResolution.part.0+0x10a>
 80085c4:	9b08      	ldr	r3, [sp, #32]
 80085c6:	b183      	cbz	r3, 80085ea <rfalNfcbPollerSlottedCollisionResolution.part.0+0x10a>
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 80085c8:	3501      	adds	r5, #1
 80085ca:	b2eb      	uxtb	r3, r5
 80085cc:	4598      	cmp	r8, r3
 80085ce:	d8cb      	bhi.n	8008568 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x88>
                
                /* Activity 1.1  9.3.5.17  -  Symbol 16 */
                if( !(*colPending) )
 80085d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	b14b      	cbz	r3, 80085ea <rfalNfcbPollerSlottedCollisionResolution.part.0+0x10a>
                {
                    return ERR_NONE;
                }
            
            /* Activity 1.1  9.3.5.18  -  Symbol 17 */
            } while (curDevCnt != 0U);     /* If a collision is detected and card(s) were found on this loop keep the same number of available slots */
 80085d6:	9b07      	ldr	r3, [sp, #28]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1a4      	bne.n	8008526 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x46>
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 80085dc:	9b08      	ldr	r3, [sp, #32]
 80085de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085e0:	3301      	adds	r3, #1
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	4293      	cmp	r3, r2
 80085e6:	9308      	str	r3, [sp, #32]
 80085e8:	d994      	bls.n	8008514 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x34>
        }
        
        return ERR_NONE;
 80085ea:	2700      	movs	r7, #0
}
 80085ec:	4638      	mov	r0, r7
 80085ee:	b011      	add	sp, #68	; 0x44
 80085f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        ret = rfalNfcbPollerSlotMarker( slotCode, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 80085f4:	f89b 6000 	ldrb.w	r6, [fp]
 80085f8:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 80085fc:	eb19 0406 	adds.w	r4, r9, r6
 8008600:	d037      	beq.n	8008672 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x192>
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
 8008602:	2b10      	cmp	r3, #16
 8008604:	d835      	bhi.n	8008672 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x192>
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 8008606:	011b      	lsls	r3, r3, #4
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 8008608:	496f      	ldr	r1, [pc, #444]	; (80087c8 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x2e8>)
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 800860a:	f043 0305 	orr.w	r3, r3, #5
 800860e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 8008612:	2300      	movs	r3, #0
 8008614:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008618:	ab0e      	add	r3, sp, #56	; 0x38
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	1c62      	adds	r2, r4, #1
 800861e:	230d      	movs	r3, #13
 8008620:	2101      	movs	r1, #1
 8008622:	a80d      	add	r0, sp, #52	; 0x34
 8008624:	f002 fa86 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    *sensbResLen = (uint8_t)rxLen;
 8008628:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800862c:	f809 3006 	strb.w	r3, [r9, r6]
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8008630:	2815      	cmp	r0, #21
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 8008632:	4607      	mov	r7, r0
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8008634:	d01f      	beq.n	8008676 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x196>
 8008636:	2809      	cmp	r0, #9
 8008638:	d01d      	beq.n	8008676 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x196>
    if( ret == ERR_NONE )
 800863a:	2800      	cmp	r0, #0
 800863c:	d196      	bne.n	800856c <rfalNfcbPollerSlottedCollisionResolution.part.0+0x8c>
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 800863e:	3b0c      	subs	r3, #12
 8008640:	2b01      	cmp	r3, #1
 8008642:	d805      	bhi.n	8008650 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x170>
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 8008644:	7ae3      	ldrb	r3, [r4, #11]
 8008646:	071a      	lsls	r2, r3, #28
 8008648:	d402      	bmi.n	8008650 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x170>
 800864a:	7863      	ldrb	r3, [r4, #1]
 800864c:	2b50      	cmp	r3, #80	; 0x50
 800864e:	d08f      	beq.n	8008570 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x90>
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 8008650:	f89b 4000 	ldrb.w	r4, [fp]
 8008654:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8008658:	444c      	add	r4, r9
        return ERR_PROTO;
 800865a:	270b      	movs	r7, #11
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 800865c:	7823      	ldrb	r3, [r4, #0]
 800865e:	3b0c      	subs	r3, #12
 8008660:	2b01      	cmp	r3, #1
 8008662:	d98e      	bls.n	8008582 <rfalNfcbPollerSlottedCollisionResolution.part.0+0xa2>
                            if( (devLimit == 0U) && (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8008664:	9b06      	ldr	r3, [sp, #24]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d07d      	beq.n	8008766 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x286>
                            *colPending = true;
 800866a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800866c:	f883 a000 	strb.w	sl, [r3]
 8008670:	e7aa      	b.n	80085c8 <rfalNfcbPollerSlottedCollisionResolution.part.0+0xe8>
        return ERR_PARAM;
 8008672:	2707      	movs	r7, #7
 8008674:	e781      	b.n	800857a <rfalNfcbPollerSlottedCollisionResolution.part.0+0x9a>
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 8008676:	f89b 4000 	ldrb.w	r4, [fp]
 800867a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800867e:	444c      	add	r4, r9
        return ERR_RF_COLLISION;
 8008680:	271d      	movs	r7, #29
 8008682:	e77a      	b.n	800857a <rfalNfcbPollerSlottedCollisionResolution.part.0+0x9a>
                                curDevCnt++;
 8008684:	9a07      	ldr	r2, [sp, #28]
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8008686:	9909      	ldr	r1, [sp, #36]	; 0x24
                                curDevCnt++;
 8008688:	3201      	adds	r2, #1
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	9207      	str	r2, [sp, #28]
                                (*devCnt)++;
 800868e:	f89b 2000 	ldrb.w	r2, [fp]
 8008692:	3201      	adds	r2, #1
 8008694:	b2d2      	uxtb	r2, r2
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8008696:	428a      	cmp	r2, r1
                                (*devCnt)++;
 8008698:	f88b 2000 	strb.w	r2, [fp]
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800869c:	d2a5      	bcs.n	80085ea <rfalNfcbPollerSlottedCollisionResolution.part.0+0x10a>
 800869e:	9908      	ldr	r1, [sp, #32]
 80086a0:	2900      	cmp	r1, #0
 80086a2:	d0a2      	beq.n	80085ea <rfalNfcbPollerSlottedCollisionResolution.part.0+0x10a>
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 80086a4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 80086a8:	4b47      	ldr	r3, [pc, #284]	; (80087c8 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x2e8>)
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 80086aa:	f06f 040e 	mvn.w	r4, #14
 80086ae:	260f      	movs	r6, #15
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 80086b0:	e9cd 7301 	strd	r7, r3, [sp, #4]
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 80086b4:	fb16 4202 	smlabb	r2, r6, r2, r4
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 80086b8:	444a      	add	r2, r9
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 80086ba:	2105      	movs	r1, #5
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 80086bc:	f8d2 3002 	ldr.w	r3, [r2, #2]
 80086c0:	f8cd 3039 	str.w	r3, [sp, #57]	; 0x39
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 80086c4:	ab0d      	add	r3, sp, #52	; 0x34
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	aa0c      	add	r2, sp, #48	; 0x30
 80086ca:	2301      	movs	r3, #1
 80086cc:	a80e      	add	r0, sp, #56	; 0x38
 80086ce:	f002 fa31 	bl	800ab34 <rfalTransceiveBlockingTxRx>
                                nfcbDevList[*devCnt-1U].isSleep =  true;
 80086d2:	f89b 3000 	ldrb.w	r3, [fp]
 80086d6:	fb16 4403 	smlabb	r4, r6, r3, r4
 80086da:	444c      	add	r4, r9
 80086dc:	f884 a00e 	strb.w	sl, [r4, #14]
 80086e0:	e772      	b.n	80085c8 <rfalNfcbPollerSlottedCollisionResolution.part.0+0xe8>
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 80086e2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 80086e6:	4b38      	ldr	r3, [pc, #224]	; (80087c8 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x2e8>)
 80086e8:	9302      	str	r3, [sp, #8]
 80086ea:	9b05      	ldr	r3, [sp, #20]
 80086ec:	9301      	str	r3, [sp, #4]
                                    rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 80086ee:	f89b 3000 	ldrb.w	r3, [fp]
 80086f2:	f06f 040e 	mvn.w	r4, #14
 80086f6:	260f      	movs	r6, #15
 80086f8:	fb16 4303 	smlabb	r3, r6, r3, r4
 80086fc:	444b      	add	r3, r9
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 80086fe:	aa0c      	add	r2, sp, #48	; 0x30
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 8008700:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008704:	f8cd 3039 	str.w	r3, [sp, #57]	; 0x39
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 8008708:	ab0d      	add	r3, sp, #52	; 0x34
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	2105      	movs	r1, #5
 800870e:	2301      	movs	r3, #1
 8008710:	a80e      	add	r0, sp, #56	; 0x38
 8008712:	f002 fa0f 	bl	800ab34 <rfalTransceiveBlockingTxRx>
                                    nfcbDevList[*devCnt-1U].isSleep = true;
 8008716:	f89b 3000 	ldrb.w	r3, [fp]
 800871a:	fb16 4303 	smlabb	r3, r6, r3, r4
 800871e:	444b      	add	r3, r9
 8008720:	f883 a00e 	strb.w	sl, [r3, #14]
 8008724:	e741      	b.n	80085aa <rfalNfcbPollerSlottedCollisionResolution.part.0+0xca>
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 8008726:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	f43f af15 	beq.w	800855a <rfalNfcbPollerSlottedCollisionResolution.part.0+0x7a>
 8008730:	e704      	b.n	800853c <rfalNfcbPollerSlottedCollisionResolution.part.0+0x5c>
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 8008732:	4614      	mov	r4, r2
 8008734:	464b      	mov	r3, r9
 8008736:	f109 0201 	add.w	r2, r9, #1
 800873a:	4621      	mov	r1, r4
 800873c:	2008      	movs	r0, #8
 800873e:	f7ff fe8d 	bl	800845c <rfalNfcbPollerCheckPresence.part.0>
           if( (ret != ERR_NONE) && (initSlots == RFAL_NFCB_SLOT_NUM_1) )
 8008742:	4607      	mov	r7, r0
 8008744:	b110      	cbz	r0, 800874c <rfalNfcbPollerSlottedCollisionResolution.part.0+0x26c>
 8008746:	2c00      	cmp	r4, #0
 8008748:	f43f af50 	beq.w	80085ec <rfalNfcbPollerSlottedCollisionResolution.part.0+0x10c>
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
 800874c:	9b05      	ldr	r3, [sp, #20]
 800874e:	2b01      	cmp	r3, #1
 8008750:	f47f aed9 	bne.w	8008506 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x26>
 8008754:	f899 3000 	ldrb.w	r3, [r9]
 8008758:	2b00      	cmp	r3, #0
 800875a:	f47f aed4 	bne.w	8008506 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x26>
            return ERR_FRAMING;
 800875e:	2709      	movs	r7, #9
 8008760:	e744      	b.n	80085ec <rfalNfcbPollerSlottedCollisionResolution.part.0+0x10c>
        return ERR_PARAM;
 8008762:	2707      	movs	r7, #7
 8008764:	e6f9      	b.n	800855a <rfalNfcbPollerSlottedCollisionResolution.part.0+0x7a>
                                return ERR_RF_COLLISION;
 8008766:	271d      	movs	r7, #29
}
 8008768:	4638      	mov	r0, r7
 800876a:	b011      	add	sp, #68	; 0x44
 800876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 8008770:	4b15      	ldr	r3, [pc, #84]	; (80087c8 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x2e8>)
 8008772:	9302      	str	r3, [sp, #8]
 8008774:	9b05      	ldr	r3, [sp, #20]
 8008776:	9301      	str	r3, [sp, #4]
                    rfalNfcbPollerSleep( nfcbDevList[(*devCnt-1U)].sensbRes.nfcid0 );
 8008778:	f89b 3000 	ldrb.w	r3, [fp]
 800877c:	f06f 040e 	mvn.w	r4, #14
 8008780:	250f      	movs	r5, #15
 8008782:	fb15 4303 	smlabb	r3, r5, r3, r4
 8008786:	444b      	add	r3, r9
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 8008788:	aa0c      	add	r2, sp, #48	; 0x30
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800878a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800878e:	f8cd 3039 	str.w	r3, [sp, #57]	; 0x39
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 8008792:	ab0d      	add	r3, sp, #52	; 0x34
 8008794:	9300      	str	r3, [sp, #0]
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 8008796:	2350      	movs	r3, #80	; 0x50
 8008798:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 800879c:	2105      	movs	r1, #5
 800879e:	2301      	movs	r3, #1
 80087a0:	a80e      	add	r0, sp, #56	; 0x38
 80087a2:	f002 f9c7 	bl	800ab34 <rfalTransceiveBlockingTxRx>
                    nfcbDevList[(*devCnt-1U)].isSleep = true;
 80087a6:	f89b 3000 	ldrb.w	r3, [fp]
 80087aa:	fb15 4303 	smlabb	r3, r5, r3, r4
 80087ae:	444b      	add	r3, r9
 80087b0:	f883 a00e 	strb.w	sl, [r3, #14]
 80087b4:	e6bd      	b.n	8008532 <rfalNfcbPollerSlottedCollisionResolution.part.0+0x52>
                                (*devCnt)++;
 80087b6:	f89b 3000 	ldrb.w	r3, [fp]
}
 80087ba:	4638      	mov	r0, r7
                                (*devCnt)++;
 80087bc:	3301      	adds	r3, #1
 80087be:	f88b 3000 	strb.w	r3, [fp]
}
 80087c2:	b011      	add	sp, #68	; 0x44
 80087c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c8:	0003a278 	.word	0x0003a278

080087cc <rfalNfcbPollerInitialize>:
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 80087cc:	2200      	movs	r2, #0
{
 80087ce:	b510      	push	{r4, lr}
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 80087d0:	4611      	mov	r1, r2
 80087d2:	2003      	movs	r0, #3
 80087d4:	f001 ff58 	bl	800a688 <rfalSetMode>
 80087d8:	4604      	mov	r4, r0
 80087da:	b978      	cbnz	r0, 80087fc <rfalNfcbPollerInitialize+0x30>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 80087dc:	2001      	movs	r0, #1
 80087de:	f002 f85b 	bl	800a898 <rfalSetErrorHandling>
    rfalSetGT( RFAL_GT_NFCB );
 80087e2:	4807      	ldr	r0, [pc, #28]	; (8008800 <rfalNfcbPollerInitialize+0x34>)
 80087e4:	f002 f874 	bl	800a8d0 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 80087e8:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 80087ec:	f002 f866 	bl	800a8bc <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 80087f0:	f641 207c 	movw	r0, #6780	; 0x1a7c
 80087f4:	f002 f856 	bl	800a8a4 <rfalSetFDTPoll>
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 80087f8:	4b02      	ldr	r3, [pc, #8]	; (8008804 <rfalNfcbPollerInitialize+0x38>)
 80087fa:	801c      	strh	r4, [r3, #0]
}
 80087fc:	4620      	mov	r0, r4
 80087fe:	bd10      	pop	{r4, pc}
 8008800:	000108d8 	.word	0x000108d8
 8008804:	20000b80 	.word	0x20000b80

08008808 <rfalNfcbPollerCheckPresence>:
{
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	461c      	mov	r4, r3
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 800880c:	f010 03f7 	ands.w	r3, r0, #247	; 0xf7
{
 8008810:	b086      	sub	sp, #24
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 8008812:	d136      	bne.n	8008882 <rfalNfcbPollerCheckPresence+0x7a>
 8008814:	2904      	cmp	r1, #4
 8008816:	d834      	bhi.n	8008882 <rfalNfcbPollerCheckPresence+0x7a>
 8008818:	4615      	mov	r5, r2
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 800881a:	b392      	cbz	r2, 8008882 <rfalNfcbPollerCheckPresence+0x7a>
 800881c:	b38c      	cbz	r4, 8008882 <rfalNfcbPollerCheckPresence+0x7a>
    *sensbResLen = 0;
 800881e:	7023      	strb	r3, [r4, #0]
    sensbReq.AFI   = gRfalNfcb.AFI;
 8008820:	4e1c      	ldr	r6, [pc, #112]	; (8008894 <rfalNfcbPollerCheckPresence+0x8c>)
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8008822:	9301      	str	r3, [sp, #4]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	6053      	str	r3, [r2, #4]
 8008828:	6093      	str	r3, [r2, #8]
 800882a:	7313      	strb	r3, [r2, #12]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800882c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8008830:	9302      	str	r3, [sp, #8]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 8008832:	7873      	ldrb	r3, [r6, #1]
    sensbReq.AFI   = gRfalNfcb.AFI;
 8008834:	7836      	ldrb	r6, [r6, #0]
 8008836:	f88d 6015 	strb.w	r6, [sp, #21]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800883a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800883e:	4319      	orrs	r1, r3
 8008840:	4301      	orrs	r1, r0
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8008842:	f10d 0312 	add.w	r3, sp, #18
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 8008846:	f88d 1016 	strb.w	r1, [sp, #22]
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 800884a:	2105      	movs	r1, #5
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800884c:	9300      	str	r3, [sp, #0]
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 800884e:	f88d 1014 	strb.w	r1, [sp, #20]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8008852:	230d      	movs	r3, #13
 8008854:	2103      	movs	r1, #3
 8008856:	a805      	add	r0, sp, #20
 8008858:	f002 f96c 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    *sensbResLen = (uint8_t)rxLen;
 800885c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8008860:	7023      	strb	r3, [r4, #0]
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8008862:	2815      	cmp	r0, #21
 8008864:	d010      	beq.n	8008888 <rfalNfcbPollerCheckPresence+0x80>
 8008866:	2809      	cmp	r0, #9
 8008868:	d00e      	beq.n	8008888 <rfalNfcbPollerCheckPresence+0x80>
    if( ret == ERR_NONE )
 800886a:	b958      	cbnz	r0, 8008884 <rfalNfcbPollerCheckPresence+0x7c>
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 800886c:	3b0c      	subs	r3, #12
 800886e:	2b01      	cmp	r3, #1
 8008870:	d80e      	bhi.n	8008890 <rfalNfcbPollerCheckPresence+0x88>
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 8008872:	7aab      	ldrb	r3, [r5, #10]
 8008874:	071b      	lsls	r3, r3, #28
 8008876:	d40b      	bmi.n	8008890 <rfalNfcbPollerCheckPresence+0x88>
 8008878:	782b      	ldrb	r3, [r5, #0]
        return ERR_PROTO;
 800887a:	2b50      	cmp	r3, #80	; 0x50
 800887c:	bf18      	it	ne
 800887e:	200b      	movne	r0, #11
 8008880:	e000      	b.n	8008884 <rfalNfcbPollerCheckPresence+0x7c>
        return ERR_PARAM;
 8008882:	2007      	movs	r0, #7
}
 8008884:	b006      	add	sp, #24
 8008886:	bd70      	pop	{r4, r5, r6, pc}
        *sensbResLen = 0;
 8008888:	2000      	movs	r0, #0
 800888a:	7020      	strb	r0, [r4, #0]
}
 800888c:	b006      	add	sp, #24
 800888e:	bd70      	pop	{r4, r5, r6, pc}
        return ERR_PROTO;
 8008890:	200b      	movs	r0, #11
 8008892:	e7f7      	b.n	8008884 <rfalNfcbPollerCheckPresence+0x7c>
 8008894:	20000b80 	.word	0x20000b80

08008898 <rfalNfcbPollerTechnologyDetection>:
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 8008898:	2900      	cmp	r1, #0
 800889a:	d03f      	beq.n	800891c <rfalNfcbPollerTechnologyDetection+0x84>
{
 800889c:	b530      	push	{r4, r5, lr}
 800889e:	4615      	mov	r5, r2
 80088a0:	b087      	sub	sp, #28
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 80088a2:	b36a      	cbz	r2, 8008900 <rfalNfcbPollerTechnologyDetection+0x68>
 80088a4:	460c      	mov	r4, r1
    *sensbResLen = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	702b      	strb	r3, [r5, #0]
    sensbReq.AFI   = gRfalNfcb.AFI;
 80088aa:	4a1e      	ldr	r2, [pc, #120]	; (8008924 <rfalNfcbPollerTechnologyDetection+0x8c>)
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	6063      	str	r3, [r4, #4]
 80088b0:	60a3      	str	r3, [r4, #8]
 80088b2:	7323      	strb	r3, [r4, #12]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	f10d 0312 	add.w	r3, sp, #18
 80088ba:	9300      	str	r3, [sp, #0]
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 80088bc:	2105      	movs	r1, #5
 80088be:	f88d 1014 	strb.w	r1, [sp, #20]
    sensbReq.AFI   = gRfalNfcb.AFI;
 80088c2:	7811      	ldrb	r1, [r2, #0]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 80088c4:	7852      	ldrb	r2, [r2, #1]
    sensbReq.AFI   = gRfalNfcb.AFI;
 80088c6:	f88d 1015 	strb.w	r1, [sp, #21]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 80088ca:	f002 0230 	and.w	r2, r2, #48	; 0x30
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 80088ce:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80088d2:	230d      	movs	r3, #13
 80088d4:	9102      	str	r1, [sp, #8]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 80088d6:	f88d 2016 	strb.w	r2, [sp, #22]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 80088da:	2103      	movs	r1, #3
 80088dc:	4622      	mov	r2, r4
 80088de:	a805      	add	r0, sp, #20
 80088e0:	f002 f928 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    *sensbResLen = (uint8_t)rxLen;
 80088e4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80088e8:	702b      	strb	r3, [r5, #0]
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 80088ea:	2815      	cmp	r0, #21
 80088ec:	d004      	beq.n	80088f8 <rfalNfcbPollerTechnologyDetection+0x60>
 80088ee:	2809      	cmp	r0, #9
 80088f0:	d002      	beq.n	80088f8 <rfalNfcbPollerTechnologyDetection+0x60>
    if( ret == ERR_NONE )
 80088f2:	b140      	cbz	r0, 8008906 <rfalNfcbPollerTechnologyDetection+0x6e>
}
 80088f4:	b007      	add	sp, #28
 80088f6:	bd30      	pop	{r4, r5, pc}
        *sensbResLen = 0;
 80088f8:	2000      	movs	r0, #0
 80088fa:	7028      	strb	r0, [r5, #0]
}
 80088fc:	b007      	add	sp, #28
 80088fe:	bd30      	pop	{r4, r5, pc}
        return ERR_PARAM;
 8008900:	2007      	movs	r0, #7
}
 8008902:	b007      	add	sp, #28
 8008904:	bd30      	pop	{r4, r5, pc}
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 8008906:	3b0c      	subs	r3, #12
 8008908:	2b01      	cmp	r3, #1
 800890a:	d809      	bhi.n	8008920 <rfalNfcbPollerTechnologyDetection+0x88>
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 800890c:	7aa3      	ldrb	r3, [r4, #10]
 800890e:	071b      	lsls	r3, r3, #28
 8008910:	d406      	bmi.n	8008920 <rfalNfcbPollerTechnologyDetection+0x88>
 8008912:	7823      	ldrb	r3, [r4, #0]
        return ERR_PROTO;
 8008914:	2b50      	cmp	r3, #80	; 0x50
 8008916:	bf18      	it	ne
 8008918:	200b      	movne	r0, #11
 800891a:	e7eb      	b.n	80088f4 <rfalNfcbPollerTechnologyDetection+0x5c>
        return ERR_PARAM;
 800891c:	2007      	movs	r0, #7
}
 800891e:	4770      	bx	lr
        return ERR_PROTO;
 8008920:	200b      	movs	r0, #11
 8008922:	e7e7      	b.n	80088f4 <rfalNfcbPollerTechnologyDetection+0x5c>
 8008924:	20000b80 	.word	0x20000b80

08008928 <rfalNfcbPollerCollisionResolution>:
        if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 8008928:	b16a      	cbz	r2, 8008946 <rfalNfcbPollerCollisionResolution+0x1e>
 800892a:	b163      	cbz	r3, 8008946 <rfalNfcbPollerCollisionResolution+0x1e>
{
 800892c:	b510      	push	{r4, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	f10d 0417 	add.w	r4, sp, #23
 8008934:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008938:	9200      	str	r2, [sp, #0]
 800893a:	2304      	movs	r3, #4
 800893c:	2200      	movs	r2, #0
 800893e:	f7ff fdcf 	bl	80084e0 <rfalNfcbPollerSlottedCollisionResolution.part.0>
}
 8008942:	b006      	add	sp, #24
 8008944:	bd10      	pop	{r4, pc}
            return ERR_PARAM;
 8008946:	2007      	movs	r0, #7
}
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop

0800894c <rfalNfcbTR2ToFDT>:
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 800894c:	4a06      	ldr	r2, [pc, #24]	; (8008968 <rfalNfcbTR2ToFDT+0x1c>)
 800894e:	4b07      	ldr	r3, [pc, #28]	; (800896c <rfalNfcbTR2ToFDT+0x20>)
{
 8008950:	b082      	sub	sp, #8
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 8008952:	e9cd 2300 	strd	r2, r3, [sp]
    /*******************************************************************************/

    return rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 8008956:	a902      	add	r1, sp, #8
 8008958:	f000 0003 	and.w	r0, r0, #3
 800895c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
}
 8008960:	f830 0c08 	ldrh.w	r0, [r0, #-8]
 8008964:	b002      	add	sp, #8
 8008966:	4770      	bx	lr
 8008968:	0d000700 	.word	0x0d000700
 800896c:	25001500 	.word	0x25001500

08008970 <rfalNfcfComputeValidSENF>:
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
{
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 8008974:	4e4b      	ldr	r6, [pc, #300]	; (8008aa4 <rfalNfcfComputeValidSENF+0x134>)
{
 8008976:	b089      	sub	sp, #36	; 0x24
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 8008978:	7835      	ldrb	r5, [r6, #0]
{
 800897a:	9301      	str	r3, [sp, #4]
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 800897c:	2d00      	cmp	r5, #0
 800897e:	d070      	beq.n	8008a62 <rfalNfcfComputeValidSENF+0xf2>
 8008980:	4680      	mov	r8, r0
 8008982:	460f      	mov	r7, r1
 8008984:	4691      	mov	r9, r2
 8008986:	783b      	ldrb	r3, [r7, #0]
 8008988:	454b      	cmp	r3, r9
 800898a:	d26a      	bcs.n	8008a62 <rfalNfcfComputeValidSENF+0xf2>
    {
        duplicate = false;
        gRfalNfcfGreedyF.pollFound--;
 800898c:	3d01      	subs	r5, #1
 800898e:	b2ed      	uxtb	r5, r5
        
        /* MISRA 11.3 - Cannot point directly into different object type, use local copy */
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 8008990:	2214      	movs	r2, #20
 8008992:	2302      	movs	r3, #2
 8008994:	fb12 3305 	smlabb	r3, r2, r5, r3
 8008998:	eb06 0e03 	add.w	lr, r6, r3
        gRfalNfcfGreedyF.pollFound--;
 800899c:	7035      	strb	r5, [r6, #0]
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 800899e:	58f0      	ldr	r0, [r6, r3]
 80089a0:	f8de 2008 	ldr.w	r2, [lr, #8]
 80089a4:	f8de 300c 	ldr.w	r3, [lr, #12]
 80089a8:	f8de 1004 	ldr.w	r1, [lr, #4]
        /* Point to received SENSF_RES */
        sensfBuf = &sensfCopy;
        
        
        /* Check for devices that are already in device list */
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 80089ac:	783c      	ldrb	r4, [r7, #0]
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 80089ae:	f10d 0c0c 	add.w	ip, sp, #12
 80089b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80089b6:	f8be 2010 	ldrh.w	r2, [lr, #16]
 80089ba:	f89e 3012 	ldrb.w	r3, [lr, #18]
 80089be:	f8ac 2000 	strh.w	r2, [ip]
 80089c2:	f88c 3002 	strb.w	r3, [ip, #2]
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 80089c6:	2c00      	cmp	r4, #0
 80089c8:	d057      	beq.n	8008a7a <rfalNfcfComputeValidSENF+0x10a>
 80089ca:	f108 0a02 	add.w	sl, r8, #2
 80089ce:	f04f 0b00 	mov.w	fp, #0
 80089d2:	e003      	b.n	80089dc <rfalNfcfComputeValidSENF+0x6c>
 80089d4:	fa5f fb83 	uxtb.w	fp, r3
 80089d8:	45a3      	cmp	fp, r4
 80089da:	d045      	beq.n	8008a68 <rfalNfcfComputeValidSENF+0xf8>
        {
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 80089dc:	4651      	mov	r1, sl
 80089de:	2208      	movs	r2, #8
 80089e0:	f10d 000e 	add.w	r0, sp, #14
 80089e4:	f002 ffec 	bl	800b9c0 <memcmp>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 80089e8:	f10a 0a13 	add.w	sl, sl, #19
 80089ec:	f10b 0301 	add.w	r3, fp, #1
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d1ef      	bne.n	80089d4 <rfalNfcfComputeValidSENF+0x64>
                break;
            }
        }
        
        /* If is a duplicate skip this (and not to overwrite)*/        
        if(duplicate && !overwrite)
 80089f4:	9b01      	ldr	r3, [sp, #4]
 80089f6:	b393      	cbz	r3, 8008a5e <rfalNfcfComputeValidSENF+0xee>
 80089f8:	4618      	mov	r0, r3
        {
            continue;
        }
        
        /* Check if response length is OK */
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 80089fa:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80089fe:	f1a2 0112 	sub.w	r1, r2, #18
 8008a02:	2902      	cmp	r1, #2
 8008a04:	d82b      	bhi.n	8008a5e <rfalNfcfComputeValidSENF+0xee>
        {
            continue;
        }
        
        /* Check if the response is a SENSF_RES / Polling response */
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 8008a06:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8008a0a:	2901      	cmp	r1, #1
 8008a0c:	d127      	bne.n	8008a5e <rfalNfcfComputeValidSENF+0xee>
        {
            continue;
        }
        
        /* Check if is an overwrite request or new device*/
        if(duplicate && overwrite)
 8008a0e:	b108      	cbz	r0, 8008a14 <rfalNfcfComputeValidSENF+0xa4>
 8008a10:	9b01      	ldr	r3, [sp, #4]
 8008a12:	bbab      	cbnz	r3, 8008a80 <rfalNfcfComputeValidSENF+0x110>
            continue;
        }
        else
        {
            /* fill deviceInfo/GRE_SENSF_RES with new SENSF_RES */
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8008a14:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8008a18:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8008a1c:	3a01      	subs	r2, #1
 8008a1e:	f808 2004 	strb.w	r2, [r8, r4]
            ST_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 8008a22:	783b      	ldrb	r3, [r7, #0]
 8008a24:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8008a28:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8008a2c:	eb08 0003 	add.w	r0, r8, r3
 8008a30:	f818 2003 	ldrb.w	r2, [r8, r3]
 8008a34:	3001      	adds	r0, #1
 8008a36:	f10d 010d 	add.w	r1, sp, #13
 8008a3a:	f002 ffd1 	bl	800b9e0 <memcpy>
        }
        
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 8008a3e:	783b      	ldrb	r3, [r7, #0]
 8008a40:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8008a44:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8008a48:	4443      	add	r3, r8
 8008a4a:	789a      	ldrb	r2, [r3, #2]
 8008a4c:	2a01      	cmp	r2, #1
 8008a4e:	d00d      	beq.n	8008a6c <rfalNfcfComputeValidSENF+0xfc>
 8008a50:	2300      	movs	r3, #0
 8008a52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a54:	7013      	strb	r3, [r2, #0]
                
        (*curDevIdx)++;
 8008a56:	783b      	ldrb	r3, [r7, #0]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	703b      	strb	r3, [r7, #0]
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 8008a5c:	7835      	ldrb	r5, [r6, #0]
 8008a5e:	2d00      	cmp	r5, #0
 8008a60:	d191      	bne.n	8008986 <rfalNfcfComputeValidSENF+0x16>
    }
}
 8008a62:	b009      	add	sp, #36	; 0x24
 8008a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        duplicate = false;
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e7c6      	b.n	80089fa <rfalNfcfComputeValidSENF+0x8a>
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 8008a6c:	78db      	ldrb	r3, [r3, #3]
 8008a6e:	f1a3 03fe 	sub.w	r3, r3, #254	; 0xfe
 8008a72:	fab3 f383 	clz	r3, r3
 8008a76:	095b      	lsrs	r3, r3, #5
 8008a78:	e7eb      	b.n	8008a52 <rfalNfcfComputeValidSENF+0xe2>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 8008a7a:	46a3      	mov	fp, r4
        duplicate = false;
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	e7bc      	b.n	80089fa <rfalNfcfComputeValidSENF+0x8a>
            outDevInfo[tmpIdx].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8008a80:	eb0b 01cb 	add.w	r1, fp, fp, lsl #3
 8008a84:	eb0b 0341 	add.w	r3, fp, r1, lsl #1
 8008a88:	3a01      	subs	r2, #1
 8008a8a:	b2d2      	uxtb	r2, r2
 8008a8c:	f808 2003 	strb.w	r2, [r8, r3]
 8008a90:	4443      	add	r3, r8
            ST_MEMCPY( &outDevInfo[tmpIdx].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[tmpIdx].sensfResLen );
 8008a92:	1c58      	adds	r0, r3, #1
 8008a94:	f10d 010d 	add.w	r1, sp, #13
 8008a98:	f002 ffa2 	bl	800b9e0 <memcpy>
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 8008a9c:	2d00      	cmp	r5, #0
 8008a9e:	f47f af72 	bne.w	8008986 <rfalNfcfComputeValidSENF+0x16>
 8008aa2:	e7de      	b.n	8008a62 <rfalNfcfComputeValidSENF+0xf2>
 8008aa4:	20000b84 	.word	0x20000b84

08008aa8 <rfalNfcfPollerInitialize>:
/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 8008aa8:	1e43      	subs	r3, r0, #1
 8008aaa:	2b01      	cmp	r3, #1
{
 8008aac:	b510      	push	{r4, lr}
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 8008aae:	d818      	bhi.n	8008ae2 <rfalNfcfPollerInitialize+0x3a>
    {
        return ERR_PARAM;
    }
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	4601      	mov	r1, r0
 8008ab4:	2006      	movs	r0, #6
 8008ab6:	f001 fde7 	bl	800a688 <rfalSetMode>
 8008aba:	4604      	mov	r4, r0
 8008abc:	b108      	cbz	r0, 8008ac2 <rfalNfcfPollerInitialize+0x1a>
    rfalSetGT( RFAL_GT_NFCF );
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
    
    return ERR_NONE;
}
 8008abe:	4620      	mov	r0, r4
 8008ac0:	bd10      	pop	{r4, pc}
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	f001 fee8 	bl	800a898 <rfalSetErrorHandling>
    rfalSetGT( RFAL_GT_NFCF );
 8008ac8:	4807      	ldr	r0, [pc, #28]	; (8008ae8 <rfalNfcfPollerInitialize+0x40>)
 8008aca:	f001 ff01 	bl	800a8d0 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 8008ace:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 8008ad2:	f001 fef3 	bl	800a8bc <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 8008ad6:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 8008ada:	f001 fee3 	bl	800a8a4 <rfalSetFDTPoll>
}
 8008ade:	4620      	mov	r0, r4
 8008ae0:	bd10      	pop	{r4, pc}
        return ERR_PARAM;
 8008ae2:	2407      	movs	r4, #7
}
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	bd10      	pop	{r4, pc}
 8008ae8:	00042360 	.word	0x00042360

08008aec <rfalNfcfPollerCheckPresence>:
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
}

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheckPresence( void )
{
 8008aec:	b510      	push	{r4, lr}
    gRfalNfcfGreedyF.pollFound     = 0;
 8008aee:	4909      	ldr	r1, [pc, #36]	; (8008b14 <rfalNfcfPollerCheckPresence+0x28>)
{
 8008af0:	b084      	sub	sp, #16
    gRfalNfcfGreedyF.pollFound     = 0;
 8008af2:	460b      	mov	r3, r1
 8008af4:	2200      	movs	r2, #0
    gRfalNfcfGreedyF.pollCollision = 0;
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8008af6:	1c4c      	adds	r4, r1, #1
 8008af8:	2004      	movs	r0, #4
    gRfalNfcfGreedyF.pollFound     = 0;
 8008afa:	f823 2b02 	strh.w	r2, [r3], #2
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8008afe:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8008b02:	9000      	str	r0, [sp, #0]
 8008b04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008b08:	2003      	movs	r0, #3
 8008b0a:	f002 faeb 	bl	800b0e4 <rfalFeliCaPoll>
}
 8008b0e:	b004      	add	sp, #16
 8008b10:	bd10      	pop	{r4, pc}
 8008b12:	bf00      	nop
 8008b14:	20000b84 	.word	0x20000b84

08008b18 <rfalNfcfPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 8008b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b1c:	b087      	sub	sp, #28
    ReturnCode  ret;
    bool        nfcDepFound;
    
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	d040      	beq.n	8008ba4 <rfalNfcfPollerCollisionResolution+0x8c>
 8008b22:	461c      	mov	r4, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d03d      	beq.n	8008ba4 <rfalNfcfPollerCollisionResolution+0x8c>
    {
        return ERR_PARAM;
    }
            
    *devCnt      = 0;
 8008b28:	2600      	movs	r6, #0
 8008b2a:	460f      	mov	r7, r1
 8008b2c:	4615      	mov	r5, r2
 8008b2e:	701e      	strb	r6, [r3, #0]
    nfcDepFound  = false;
 8008b30:	f88d 6017 	strb.w	r6, [sp, #23]
    /* ACTIVITY 1.1 - 9.3.63.59 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 8008b34:	b341      	cbz	r1, 8008b88 <rfalNfcfPollerCollisionResolution+0x70>
 8008b36:	f10d 0317 	add.w	r3, sp, #23
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	460a      	mov	r2, r1
 8008b3e:	4633      	mov	r3, r6
 8008b40:	4680      	mov	r8, r0
 8008b42:	4621      	mov	r1, r4
 8008b44:	4628      	mov	r0, r5
 8008b46:	f7ff ff13 	bl	8008970 <rfalNfcfComputeValidSENF>
    /*******************************************************************************/
    /* ACTIVITY 1.0 - 9.3.6.4                                                      */
    /* ACTIVITY 1.1 - 9.3.63.60 Check if devices found are lower than the limit    */
    /* and send a SENSF_REQ if so                                                  */
    /*******************************************************************************/
    if( *devCnt < devLimit )
 8008b4a:	7823      	ldrb	r3, [r4, #0]
 8008b4c:	42bb      	cmp	r3, r7
 8008b4e:	d216      	bcs.n	8008b7e <rfalNfcfPollerCollisionResolution+0x66>
    {
        /* ACTIVITY 1.0 - 9.3.6.5  Copy valid SENSF_RES and then to remove it
         * ACTIVITY 1.1 - 9.3.6.65 Copy and filter duplicates                                           
         * For now, due to some devices keep generating different nfcid2, we use 1.0  
         * Phones detected: Samsung Galaxy Nexus,Samsung Galaxy S3,Samsung Nexus S */
        *devCnt = 0;
 8008b50:	7026      	strb	r6, [r4, #0]
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 8008b52:	4632      	mov	r2, r6
 8008b54:	4e27      	ldr	r6, [pc, #156]	; (8008bf4 <rfalNfcfPollerCollisionResolution+0xdc>)
 8008b56:	9601      	str	r6, [sp, #4]
 8008b58:	2310      	movs	r3, #16
 8008b5a:	f106 0901 	add.w	r9, r6, #1
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b64:	1cb3      	adds	r3, r6, #2
 8008b66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008b6a:	200f      	movs	r0, #15
 8008b6c:	f002 faba 	bl	800b0e4 <rfalFeliCaPoll>
        
        ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
        if( ret == ERR_NONE )
 8008b70:	b1e8      	cbz	r0, 8008bae <rfalNfcfPollerCollisionResolution+0x96>
        }
      
      /*******************************************************************************/
      /* ACTIVITY 1.1 -  9.3.6.63 Check if any device supports NFC DEP               */
      /*******************************************************************************/
      if( nfcDepFound && (compMode == RFAL_COMPLIANCE_MODE_NFC) )
 8008b72:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008b76:	b113      	cbz	r3, 8008b7e <rfalNfcfPollerCollisionResolution+0x66>
 8008b78:	f1b8 0f00 	cmp.w	r8, #0
 8008b7c:	d021      	beq.n	8008bc2 <rfalNfcfPollerCollisionResolution+0xaa>
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
          }
      }
    }
    
    return ERR_NONE;
 8008b7e:	2600      	movs	r6, #0
}
 8008b80:	4630      	mov	r0, r6
 8008b82:	b007      	add	sp, #28
 8008b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 8008b88:	f10d 0317 	add.w	r3, sp, #23
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	2204      	movs	r2, #4
 8008b90:	460b      	mov	r3, r1
 8008b92:	4628      	mov	r0, r5
 8008b94:	4621      	mov	r1, r4
 8008b96:	f7ff feeb 	bl	8008970 <rfalNfcfComputeValidSENF>
    return ERR_NONE;
 8008b9a:	463e      	mov	r6, r7
}
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	b007      	add	sp, #28
 8008ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return ERR_PARAM;
 8008ba4:	2607      	movs	r6, #7
}
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	b007      	add	sp, #28
 8008baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, false, &nfcDepFound );
 8008bae:	f10d 0317 	add.w	r3, sp, #23
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	463a      	mov	r2, r7
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4621      	mov	r1, r4
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f7ff fed8 	bl	8008970 <rfalNfcfComputeValidSENF>
 8008bc0:	e7d7      	b.n	8008b72 <rfalNfcfPollerCollisionResolution+0x5a>
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 8008bc2:	2310      	movs	r3, #16
 8008bc4:	e9cd 6901 	strd	r6, r9, [sp, #4]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <rfalNfcfPollerCollisionResolution+0xe0>)
 8008bce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008bd2:	200f      	movs	r0, #15
 8008bd4:	f002 fa86 	bl	800b0e4 <rfalFeliCaPoll>
          if( ret == ERR_NONE )
 8008bd8:	4606      	mov	r6, r0
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d1cf      	bne.n	8008b7e <rfalNfcfPollerCollisionResolution+0x66>
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
 8008bde:	f10d 0317 	add.w	r3, sp, #23
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	463a      	mov	r2, r7
 8008be6:	2301      	movs	r3, #1
 8008be8:	4621      	mov	r1, r4
 8008bea:	4628      	mov	r0, r5
 8008bec:	f7ff fec0 	bl	8008970 <rfalNfcfComputeValidSENF>
 8008bf0:	e7d4      	b.n	8008b9c <rfalNfcfPollerCollisionResolution+0x84>
 8008bf2:	bf00      	nop
 8008bf4:	20000b84 	.word	0x20000b84
 8008bf8:	20000b86 	.word	0x20000b86

08008bfc <rfalNfcfPollerCheck>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheck( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvdLen )
{
 8008bfc:	b530      	push	{r4, r5, lr}
 8008bfe:	b09b      	sub	sp, #108	; 0x6c
    uint8_t    i;
    ReturnCode ret;
    uint8_t    *checkRes;
    
    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f000 8308 	beq.w	8009216 <rfalNfcfPollerCheck+0x61a>
 8008c06:	4614      	mov	r4, r2
 8008c08:	2a00      	cmp	r2, #0
 8008c0a:	f000 8304 	beq.w	8009216 <rfalNfcfPollerCheck+0x61a>
 8008c0e:	2900      	cmp	r1, #0
 8008c10:	f000 8301 	beq.w	8009216 <rfalNfcfPollerCheck+0x61a>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8008c14:	7a0d      	ldrb	r5, [r1, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 8008c16:	1e6a      	subs	r2, r5, #1
 8008c18:	2a0e      	cmp	r2, #14
 8008c1a:	f200 82fc 	bhi.w	8009216 <rfalNfcfPollerCheck+0x61a>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 8008c1e:	f891 c000 	ldrb.w	ip, [r1]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8008c22:	f10c 32ff 	add.w	r2, ip, #4294967295
 8008c26:	2a0e      	cmp	r2, #14
 8008c28:	f200 82f5 	bhi.w	8009216 <rfalNfcfPollerCheck+0x61a>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 8008c2c:	2b0b      	cmp	r3, #11
 8008c2e:	f240 82f2 	bls.w	8009216 <rfalNfcfPollerCheck+0x61a>
    /*******************************************************************************/
    /* Compose CHECK command/request                                               */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 8008c32:	f8d0 e000 	ldr.w	lr, [r0]
 8008c36:	6840      	ldr	r0, [r0, #4]
 8008c38:	f8cd 0015 	str.w	r0, [sp, #21]
    msgIt += RFAL_NFCF_NFCID2_LEN;
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
    for( i = 0; i < servBlock->numServ; i++)
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008c3c:	684a      	ldr	r2, [r1, #4]
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 8008c3e:	f88d c019 	strb.w	ip, [sp, #25]
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 8008c42:	2006      	movs	r0, #6
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 8008c44:	f8cd e011 	str.w	lr, [sp, #17]
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 8008c48:	f88d 0010 	strb.w	r0, [sp, #16]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008c4c:	8810      	ldrh	r0, [r2, #0]
 8008c4e:	f88d 001a 	strb.w	r0, [sp, #26]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008c52:	8810      	ldrh	r0, [r2, #0]
    for( i = 0; i < servBlock->numServ; i++)
 8008c54:	f1bc 0f01 	cmp.w	ip, #1
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008c58:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008c5c:	f88d 001b 	strb.w	r0, [sp, #27]
    for( i = 0; i < servBlock->numServ; i++)
 8008c60:	f000 8097 	beq.w	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008c64:	8850      	ldrh	r0, [r2, #2]
 8008c66:	f88d 001c 	strb.w	r0, [sp, #28]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008c6a:	8850      	ldrh	r0, [r2, #2]
    for( i = 0; i < servBlock->numServ; i++)
 8008c6c:	f1bc 0f02 	cmp.w	ip, #2
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008c70:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008c74:	f88d 001d 	strb.w	r0, [sp, #29]
    for( i = 0; i < servBlock->numServ; i++)
 8008c78:	f000 808b 	beq.w	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008c7c:	8890      	ldrh	r0, [r2, #4]
 8008c7e:	f88d 001e 	strb.w	r0, [sp, #30]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008c82:	8890      	ldrh	r0, [r2, #4]
    for( i = 0; i < servBlock->numServ; i++)
 8008c84:	f1bc 0f03 	cmp.w	ip, #3
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008c88:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008c8c:	f88d 001f 	strb.w	r0, [sp, #31]
    for( i = 0; i < servBlock->numServ; i++)
 8008c90:	d07f      	beq.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008c92:	88d0      	ldrh	r0, [r2, #6]
 8008c94:	f88d 0020 	strb.w	r0, [sp, #32]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008c98:	88d0      	ldrh	r0, [r2, #6]
    for( i = 0; i < servBlock->numServ; i++)
 8008c9a:	f1bc 0f04 	cmp.w	ip, #4
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008c9e:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008ca2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    for( i = 0; i < servBlock->numServ; i++)
 8008ca6:	d074      	beq.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008ca8:	8910      	ldrh	r0, [r2, #8]
 8008caa:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008cae:	8910      	ldrh	r0, [r2, #8]
    for( i = 0; i < servBlock->numServ; i++)
 8008cb0:	f1bc 0f05 	cmp.w	ip, #5
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008cb4:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008cb8:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    for( i = 0; i < servBlock->numServ; i++)
 8008cbc:	d069      	beq.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008cbe:	8950      	ldrh	r0, [r2, #10]
 8008cc0:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008cc4:	8950      	ldrh	r0, [r2, #10]
    for( i = 0; i < servBlock->numServ; i++)
 8008cc6:	f1bc 0f06 	cmp.w	ip, #6
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008cca:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008cce:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    for( i = 0; i < servBlock->numServ; i++)
 8008cd2:	d05e      	beq.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008cd4:	8990      	ldrh	r0, [r2, #12]
 8008cd6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008cda:	8990      	ldrh	r0, [r2, #12]
    for( i = 0; i < servBlock->numServ; i++)
 8008cdc:	f1bc 0f07 	cmp.w	ip, #7
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008ce0:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008ce4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    for( i = 0; i < servBlock->numServ; i++)
 8008ce8:	d053      	beq.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008cea:	89d0      	ldrh	r0, [r2, #14]
 8008cec:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008cf0:	89d0      	ldrh	r0, [r2, #14]
    for( i = 0; i < servBlock->numServ; i++)
 8008cf2:	f1bc 0f08 	cmp.w	ip, #8
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008cf6:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008cfa:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
    for( i = 0; i < servBlock->numServ; i++)
 8008cfe:	d048      	beq.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008d00:	8a10      	ldrh	r0, [r2, #16]
 8008d02:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d06:	8a10      	ldrh	r0, [r2, #16]
    for( i = 0; i < servBlock->numServ; i++)
 8008d08:	f1bc 0f09 	cmp.w	ip, #9
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d0c:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008d10:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
    for( i = 0; i < servBlock->numServ; i++)
 8008d14:	d03d      	beq.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008d16:	8a50      	ldrh	r0, [r2, #18]
 8008d18:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d1c:	8a50      	ldrh	r0, [r2, #18]
    for( i = 0; i < servBlock->numServ; i++)
 8008d1e:	f1bc 0f0a 	cmp.w	ip, #10
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d22:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008d26:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    for( i = 0; i < servBlock->numServ; i++)
 8008d2a:	d032      	beq.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008d2c:	8a90      	ldrh	r0, [r2, #20]
 8008d2e:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d32:	8a90      	ldrh	r0, [r2, #20]
    for( i = 0; i < servBlock->numServ; i++)
 8008d34:	f1bc 0f0b 	cmp.w	ip, #11
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d38:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008d3c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    for( i = 0; i < servBlock->numServ; i++)
 8008d40:	d027      	beq.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008d42:	8ad0      	ldrh	r0, [r2, #22]
 8008d44:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d48:	8ad0      	ldrh	r0, [r2, #22]
    for( i = 0; i < servBlock->numServ; i++)
 8008d4a:	f1bc 0f0c 	cmp.w	ip, #12
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d4e:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008d52:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
    for( i = 0; i < servBlock->numServ; i++)
 8008d56:	d01c      	beq.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008d58:	8b10      	ldrh	r0, [r2, #24]
 8008d5a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d5e:	8b10      	ldrh	r0, [r2, #24]
    for( i = 0; i < servBlock->numServ; i++)
 8008d60:	f1bc 0f0d 	cmp.w	ip, #13
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d64:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008d68:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    for( i = 0; i < servBlock->numServ; i++)
 8008d6c:	d011      	beq.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008d6e:	8b50      	ldrh	r0, [r2, #26]
 8008d70:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d74:	8b50      	ldrh	r0, [r2, #26]
    for( i = 0; i < servBlock->numServ; i++)
 8008d76:	f1bc 0f0f 	cmp.w	ip, #15
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d7a:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8008d7e:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
    for( i = 0; i < servBlock->numServ; i++)
 8008d82:	d106      	bne.n	8008d92 <rfalNfcfPollerCheck+0x196>
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8008d84:	8b90      	ldrh	r0, [r2, #28]
 8008d86:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8008d8a:	8b92      	ldrh	r2, [r2, #28]
 8008d8c:	0a12      	lsrs	r2, r2, #8
 8008d8e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8008d92:	f10c 0c05 	add.w	ip, ip, #5
 8008d96:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008d9a:	fa5f fc8c 	uxtb.w	ip, ip
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
    for( i = 0; i < servBlock->numBlock; i++)
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008d9e:	68ca      	ldr	r2, [r1, #12]
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8008da0:	f10c 0168 	add.w	r1, ip, #104	; 0x68
 8008da4:	4469      	add	r1, sp
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008da6:	a81a      	add	r0, sp, #104	; 0x68
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8008da8:	f801 5c58 	strb.w	r5, [r1, #-88]
 8008dac:	f10c 0101 	add.w	r1, ip, #1
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008db0:	fa50 f181 	uxtab	r1, r0, r1
 8008db4:	7810      	ldrb	r0, [r2, #0]
 8008db6:	f801 0c58 	strb.w	r0, [r1, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008dba:	f992 0000 	ldrsb.w	r0, [r2]
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008dbe:	f10c 0102 	add.w	r1, ip, #2
 8008dc2:	b2c9      	uxtb	r1, r1
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008dc4:	2800      	cmp	r0, #0
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008dc6:	f101 0168 	add.w	r1, r1, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008dca:	f2c0 8228 	blt.w	800921e <rfalNfcfPollerCheck+0x622>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008dce:	4469      	add	r1, sp
 8008dd0:	8850      	ldrh	r0, [r2, #2]
 8008dd2:	f801 0c58 	strb.w	r0, [r1, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008dd6:	8850      	ldrh	r0, [r2, #2]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008dd8:	f10c 0103 	add.w	r1, ip, #3
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008ddc:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8008de0:	fa5e f181 	uxtab	r1, lr, r1
 8008de4:	0a00      	lsrs	r0, r0, #8
 8008de6:	f801 0c58 	strb.w	r0, [r1, #-88]
 8008dea:	f10c 0104 	add.w	r1, ip, #4
 8008dee:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 8008df0:	2d01      	cmp	r5, #1
 8008df2:	f000 81fb 	beq.w	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008df6:	f101 0068 	add.w	r0, r1, #104	; 0x68
 8008dfa:	4468      	add	r0, sp
 8008dfc:	f892 c004 	ldrb.w	ip, [r2, #4]
 8008e00:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008e04:	f992 c004 	ldrsb.w	ip, [r2, #4]
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008e08:	1c48      	adds	r0, r1, #1
 8008e0a:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008e0c:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008e0e:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008e12:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008e14:	f2c0 820d 	blt.w	8009232 <rfalNfcfPollerCheck+0x636>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008e18:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 8008e1c:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008e20:	f8b2 c006 	ldrh.w	ip, [r2, #6]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008e24:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008e26:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8008e2a:	fa5e f080 	uxtab	r0, lr, r0
 8008e2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8008e32:	3103      	adds	r1, #3
 8008e34:	f800 cc58 	strb.w	ip, [r0, #-88]
 8008e38:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 8008e3a:	2d02      	cmp	r5, #2
 8008e3c:	f000 81d6 	beq.w	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008e40:	f101 0068 	add.w	r0, r1, #104	; 0x68
 8008e44:	4468      	add	r0, sp
 8008e46:	f892 c008 	ldrb.w	ip, [r2, #8]
 8008e4a:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008e4e:	f992 c008 	ldrsb.w	ip, [r2, #8]
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008e52:	1c48      	adds	r0, r1, #1
 8008e54:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008e56:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008e58:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008e5c:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008e5e:	f2c0 81ef 	blt.w	8009240 <rfalNfcfPollerCheck+0x644>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008e62:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
 8008e66:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008e6a:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008e6e:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008e70:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8008e74:	fa5e f080 	uxtab	r0, lr, r0
 8008e78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8008e7c:	3103      	adds	r1, #3
 8008e7e:	f800 cc58 	strb.w	ip, [r0, #-88]
 8008e82:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 8008e84:	2d03      	cmp	r5, #3
 8008e86:	f000 81b1 	beq.w	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008e8a:	f101 0068 	add.w	r0, r1, #104	; 0x68
 8008e8e:	4468      	add	r0, sp
 8008e90:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8008e94:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008e98:	f992 c00c 	ldrsb.w	ip, [r2, #12]
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008e9c:	1c48      	adds	r0, r1, #1
 8008e9e:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008ea0:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008ea2:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008ea6:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008ea8:	f2c0 81ea 	blt.w	8009280 <rfalNfcfPollerCheck+0x684>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008eac:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
 8008eb0:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008eb4:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008eb8:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008eba:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8008ebe:	fa5e f080 	uxtab	r0, lr, r0
 8008ec2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8008ec6:	3103      	adds	r1, #3
 8008ec8:	f800 cc58 	strb.w	ip, [r0, #-88]
 8008ecc:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 8008ece:	2d04      	cmp	r5, #4
 8008ed0:	f000 818c 	beq.w	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008ed4:	f101 0068 	add.w	r0, r1, #104	; 0x68
 8008ed8:	4468      	add	r0, sp
 8008eda:	f892 c010 	ldrb.w	ip, [r2, #16]
 8008ede:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008ee2:	f992 c010 	ldrsb.w	ip, [r2, #16]
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008ee6:	1c48      	adds	r0, r1, #1
 8008ee8:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008eea:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008eec:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008ef0:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008ef2:	f2c0 81cc 	blt.w	800928e <rfalNfcfPollerCheck+0x692>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008ef6:	f8b2 c012 	ldrh.w	ip, [r2, #18]
 8008efa:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008efe:	f8b2 c012 	ldrh.w	ip, [r2, #18]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008f02:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008f04:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8008f08:	fa5e f080 	uxtab	r0, lr, r0
 8008f0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8008f10:	3103      	adds	r1, #3
 8008f12:	f800 cc58 	strb.w	ip, [r0, #-88]
 8008f16:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 8008f18:	2d05      	cmp	r5, #5
 8008f1a:	f000 8167 	beq.w	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008f1e:	f101 0068 	add.w	r0, r1, #104	; 0x68
 8008f22:	4468      	add	r0, sp
 8008f24:	f892 c014 	ldrb.w	ip, [r2, #20]
 8008f28:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008f2c:	f992 c014 	ldrsb.w	ip, [r2, #20]
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008f30:	1c48      	adds	r0, r1, #1
 8008f32:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008f34:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008f36:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008f3a:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008f3c:	f2c0 81ae 	blt.w	800929c <rfalNfcfPollerCheck+0x6a0>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008f40:	f8b2 c016 	ldrh.w	ip, [r2, #22]
 8008f44:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008f48:	f8b2 c016 	ldrh.w	ip, [r2, #22]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008f4c:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008f4e:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8008f52:	fa5e f080 	uxtab	r0, lr, r0
 8008f56:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8008f5a:	3103      	adds	r1, #3
 8008f5c:	f800 cc58 	strb.w	ip, [r0, #-88]
 8008f60:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 8008f62:	2d06      	cmp	r5, #6
 8008f64:	f000 8142 	beq.w	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008f68:	f101 0068 	add.w	r0, r1, #104	; 0x68
 8008f6c:	4468      	add	r0, sp
 8008f6e:	f892 c018 	ldrb.w	ip, [r2, #24]
 8008f72:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008f76:	f992 c018 	ldrsb.w	ip, [r2, #24]
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008f7a:	1c48      	adds	r0, r1, #1
 8008f7c:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008f7e:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008f80:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008f84:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008f86:	f2c0 8162 	blt.w	800924e <rfalNfcfPollerCheck+0x652>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008f8a:	f8b2 c01a 	ldrh.w	ip, [r2, #26]
 8008f8e:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008f92:	f8b2 c01a 	ldrh.w	ip, [r2, #26]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008f96:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008f98:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8008f9c:	fa5e f080 	uxtab	r0, lr, r0
 8008fa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8008fa4:	3103      	adds	r1, #3
 8008fa6:	f800 cc58 	strb.w	ip, [r0, #-88]
 8008faa:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 8008fac:	2d07      	cmp	r5, #7
 8008fae:	f000 811d 	beq.w	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008fb2:	f101 0068 	add.w	r0, r1, #104	; 0x68
 8008fb6:	4468      	add	r0, sp
 8008fb8:	f892 c01c 	ldrb.w	ip, [r2, #28]
 8008fbc:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008fc0:	f992 c01c 	ldrsb.w	ip, [r2, #28]
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008fc4:	1c48      	adds	r0, r1, #1
 8008fc6:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008fc8:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008fca:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8008fce:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8008fd0:	f2c0 816d 	blt.w	80092ae <rfalNfcfPollerCheck+0x6b2>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008fd4:	f8b2 c01e 	ldrh.w	ip, [r2, #30]
 8008fd8:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008fdc:	f8b2 c01e 	ldrh.w	ip, [r2, #30]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8008fe0:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8008fe2:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8008fe6:	fa5e f080 	uxtab	r0, lr, r0
 8008fea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8008fee:	3103      	adds	r1, #3
 8008ff0:	f800 cc58 	strb.w	ip, [r0, #-88]
 8008ff4:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 8008ff6:	2d08      	cmp	r5, #8
 8008ff8:	f000 80f8 	beq.w	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8008ffc:	f101 0068 	add.w	r0, r1, #104	; 0x68
 8009000:	4468      	add	r0, sp
 8009002:	f892 c020 	ldrb.w	ip, [r2, #32]
 8009006:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 800900a:	f992 c020 	ldrsb.w	ip, [r2, #32]
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 800900e:	1c48      	adds	r0, r1, #1
 8009010:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8009012:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8009014:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8009018:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 800901a:	f2c0 814f 	blt.w	80092bc <rfalNfcfPollerCheck+0x6c0>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 800901e:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
 8009022:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8009026:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 800902a:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 800902c:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8009030:	fa5e f080 	uxtab	r0, lr, r0
 8009034:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8009038:	3103      	adds	r1, #3
 800903a:	f800 cc58 	strb.w	ip, [r0, #-88]
 800903e:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 8009040:	2d09      	cmp	r5, #9
 8009042:	f000 80d3 	beq.w	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8009046:	f101 0068 	add.w	r0, r1, #104	; 0x68
 800904a:	4468      	add	r0, sp
 800904c:	f892 c024 	ldrb.w	ip, [r2, #36]	; 0x24
 8009050:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8009054:	f992 c024 	ldrsb.w	ip, [r2, #36]	; 0x24
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8009058:	1c48      	adds	r0, r1, #1
 800905a:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 800905c:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 800905e:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8009062:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8009064:	f2c0 8131 	blt.w	80092ca <rfalNfcfPollerCheck+0x6ce>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8009068:	f8b2 c026 	ldrh.w	ip, [r2, #38]	; 0x26
 800906c:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8009070:	f8b2 c026 	ldrh.w	ip, [r2, #38]	; 0x26
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8009074:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8009076:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800907a:	fa5e f080 	uxtab	r0, lr, r0
 800907e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8009082:	3103      	adds	r1, #3
 8009084:	f800 cc58 	strb.w	ip, [r0, #-88]
 8009088:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 800908a:	2d0a      	cmp	r5, #10
 800908c:	f000 80ae 	beq.w	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8009090:	f101 0068 	add.w	r0, r1, #104	; 0x68
 8009094:	4468      	add	r0, sp
 8009096:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
 800909a:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 800909e:	f992 c028 	ldrsb.w	ip, [r2, #40]	; 0x28
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 80090a2:	1c48      	adds	r0, r1, #1
 80090a4:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80090a6:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 80090a8:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80090ac:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 80090ae:	f2c0 8113 	blt.w	80092d8 <rfalNfcfPollerCheck+0x6dc>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 80090b2:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
 80090b6:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 80090ba:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 80090be:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 80090c0:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 80090c4:	fa5e f080 	uxtab	r0, lr, r0
 80090c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80090cc:	3103      	adds	r1, #3
 80090ce:	f800 cc58 	strb.w	ip, [r0, #-88]
 80090d2:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 80090d4:	2d0b      	cmp	r5, #11
 80090d6:	f000 8089 	beq.w	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 80090da:	f101 0068 	add.w	r0, r1, #104	; 0x68
 80090de:	4468      	add	r0, sp
 80090e0:	f892 c02c 	ldrb.w	ip, [r2, #44]	; 0x2c
 80090e4:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 80090e8:	f992 c02c 	ldrsb.w	ip, [r2, #44]	; 0x2c
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 80090ec:	1c48      	adds	r0, r1, #1
 80090ee:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80090f0:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 80090f2:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80090f6:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 80090f8:	f2c0 80f5 	blt.w	80092e6 <rfalNfcfPollerCheck+0x6ea>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 80090fc:	f8b2 c02e 	ldrh.w	ip, [r2, #46]	; 0x2e
 8009100:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8009104:	f8b2 c02e 	ldrh.w	ip, [r2, #46]	; 0x2e
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8009108:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 800910a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800910e:	fa5e f080 	uxtab	r0, lr, r0
 8009112:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8009116:	3103      	adds	r1, #3
 8009118:	f800 cc58 	strb.w	ip, [r0, #-88]
 800911c:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 800911e:	2d0c      	cmp	r5, #12
 8009120:	d064      	beq.n	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8009122:	f101 0068 	add.w	r0, r1, #104	; 0x68
 8009126:	4468      	add	r0, sp
 8009128:	f892 c030 	ldrb.w	ip, [r2, #48]	; 0x30
 800912c:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8009130:	f992 c030 	ldrsb.w	ip, [r2, #48]	; 0x30
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8009134:	1c48      	adds	r0, r1, #1
 8009136:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8009138:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 800913a:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 800913e:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8009140:	f2c0 80d8 	blt.w	80092f4 <rfalNfcfPollerCheck+0x6f8>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8009144:	f8b2 c032 	ldrh.w	ip, [r2, #50]	; 0x32
 8009148:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 800914c:	f8b2 c032 	ldrh.w	ip, [r2, #50]	; 0x32
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8009150:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8009152:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8009156:	fa5e f080 	uxtab	r0, lr, r0
 800915a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800915e:	3103      	adds	r1, #3
 8009160:	f800 cc58 	strb.w	ip, [r0, #-88]
 8009164:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 8009166:	2d0d      	cmp	r5, #13
 8009168:	d040      	beq.n	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 800916a:	f101 0068 	add.w	r0, r1, #104	; 0x68
 800916e:	4468      	add	r0, sp
 8009170:	f892 c034 	ldrb.w	ip, [r2, #52]	; 0x34
 8009174:	f800 cc58 	strb.w	ip, [r0, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8009178:	f992 c034 	ldrsb.w	ip, [r2, #52]	; 0x34
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 800917c:	1c48      	adds	r0, r1, #1
 800917e:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8009180:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8009182:	f1bc 0f00 	cmp.w	ip, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8009186:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8009188:	f2c0 80bb 	blt.w	8009302 <rfalNfcfPollerCheck+0x706>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 800918c:	f8b2 c036 	ldrh.w	ip, [r2, #54]	; 0x36
 8009190:	f800 cc58 	strb.w	ip, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8009194:	f8b2 c036 	ldrh.w	ip, [r2, #54]	; 0x36
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8009198:	1c88      	adds	r0, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 800919a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800919e:	fa5e f080 	uxtab	r0, lr, r0
 80091a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80091a6:	3103      	adds	r1, #3
 80091a8:	f800 cc58 	strb.w	ip, [r0, #-88]
 80091ac:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
 80091ae:	2d0f      	cmp	r5, #15
 80091b0:	d11c      	bne.n	80091ec <rfalNfcfPollerCheck+0x5f0>
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 80091b2:	f101 0568 	add.w	r5, r1, #104	; 0x68
 80091b6:	446d      	add	r5, sp
 80091b8:	f892 c038 	ldrb.w	ip, [r2, #56]	; 0x38
 80091bc:	f805 cc58 	strb.w	ip, [r5, #-88]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 80091c0:	f992 5038 	ldrsb.w	r5, [r2, #56]	; 0x38
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 80091c4:	1c48      	adds	r0, r1, #1
 80091c6:	b2c0      	uxtb	r0, r0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80091c8:	3068      	adds	r0, #104	; 0x68
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 80091ca:	2d00      	cmp	r5, #0
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80091cc:	4468      	add	r0, sp
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 80091ce:	f2c0 809f 	blt.w	8009310 <rfalNfcfPollerCheck+0x714>
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 80091d2:	8f55      	ldrh	r5, [r2, #58]	; 0x3a
 80091d4:	f800 5c58 	strb.w	r5, [r0, #-88]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 80091d8:	8f50      	ldrh	r0, [r2, #58]	; 0x3a
 80091da:	1ccd      	adds	r5, r1, #3
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 80091dc:	1c8a      	adds	r2, r1, #2
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 80091de:	a91a      	add	r1, sp, #104	; 0x68
 80091e0:	fa51 f282 	uxtab	r2, r1, r2
 80091e4:	0a00      	lsrs	r0, r0, #8
 80091e6:	b2e9      	uxtb	r1, r5
 80091e8:	f802 0c58 	strb.w	r0, [r2, #-88]
        }
    }
    
    /*******************************************************************************/
    /* Transceive CHECK command/request                                            */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 80091ec:	484b      	ldr	r0, [pc, #300]	; (800931c <rfalNfcfPollerCheck+0x720>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	e9cd 2001 	strd	r2, r0, [sp, #4]
 80091f4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80091f6:	9200      	str	r2, [sp, #0]
 80091f8:	a804      	add	r0, sp, #16
 80091fa:	4622      	mov	r2, r4
 80091fc:	f001 fc9a 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    
    if( ret == ERR_NONE )
 8009200:	4605      	mov	r5, r0
 8009202:	b948      	cbnz	r0, 8009218 <rfalNfcfPollerCheck+0x61c>
    {
        /* Skip LEN byte */
        checkRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
        
        /* Check response length */
        if( *rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 8009204:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	2b0a      	cmp	r3, #10
 800920a:	d94e      	bls.n	80092aa <rfalNfcfPollerCheck+0x6ae>
        {
            ret = ERR_PROTO;
        }
        /* Check for a valid response */
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 800920c:	7862      	ldrb	r2, [r4, #1]
 800920e:	2a07      	cmp	r2, #7
 8009210:	d024      	beq.n	800925c <rfalNfcfPollerCheck+0x660>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)        )
        {
            ret = ERR_REQUEST;
 8009212:	2505      	movs	r5, #5
 8009214:	e000      	b.n	8009218 <rfalNfcfPollerCheck+0x61c>
        return ERR_PARAM;
 8009216:	2507      	movs	r5, #7
            }
        }
    }
    
    return ret;
}
 8009218:	4628      	mov	r0, r5
 800921a:	b01b      	add	sp, #108	; 0x6c
 800921c:	bd30      	pop	{r4, r5, pc}
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 800921e:	eb0d 0001 	add.w	r0, sp, r1
 8009222:	f10c 0103 	add.w	r1, ip, #3
 8009226:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800922a:	f800 cc58 	strb.w	ip, [r0, #-88]
 800922e:	b2c9      	uxtb	r1, r1
 8009230:	e5de      	b.n	8008df0 <rfalNfcfPollerCheck+0x1f4>
 8009232:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 8009236:	f800 cc58 	strb.w	ip, [r0, #-88]
 800923a:	3102      	adds	r1, #2
 800923c:	b2c9      	uxtb	r1, r1
 800923e:	e5fc      	b.n	8008e3a <rfalNfcfPollerCheck+0x23e>
 8009240:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
 8009244:	f800 cc58 	strb.w	ip, [r0, #-88]
 8009248:	3102      	adds	r1, #2
 800924a:	b2c9      	uxtb	r1, r1
 800924c:	e61a      	b.n	8008e84 <rfalNfcfPollerCheck+0x288>
 800924e:	f8b2 c01a 	ldrh.w	ip, [r2, #26]
 8009252:	f800 cc58 	strb.w	ip, [r0, #-88]
 8009256:	3102      	adds	r1, #2
 8009258:	b2c9      	uxtb	r1, r1
 800925a:	e6a7      	b.n	8008fac <rfalNfcfPollerCheck+0x3b0>
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 800925c:	7aa2      	ldrb	r2, [r4, #10]
 800925e:	2a00      	cmp	r2, #0
 8009260:	d1d7      	bne.n	8009212 <rfalNfcfPollerCheck+0x616>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 8009262:	7ae2      	ldrb	r2, [r4, #11]
 8009264:	2a00      	cmp	r2, #0
 8009266:	d1d4      	bne.n	8009212 <rfalNfcfPollerCheck+0x616>
            (*rcvdLen) -= (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_NOB_POS);
 8009268:	3b0c      	subs	r3, #12
 800926a:	b29a      	uxth	r2, r3
 800926c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800926e:	801a      	strh	r2, [r3, #0]
            if( *rcvdLen > 0U )
 8009270:	2a00      	cmp	r2, #0
 8009272:	d0d1      	beq.n	8009218 <rfalNfcfPollerCheck+0x61c>
                ST_MEMMOVE( rxBuf, &checkRes[RFAL_NFCF_CHECKUPDATE_RES_NOB_POS], (*rcvdLen) );
 8009274:	f104 010c 	add.w	r1, r4, #12
 8009278:	4620      	mov	r0, r4
 800927a:	f002 fbbf 	bl	800b9fc <memmove>
 800927e:	e7cb      	b.n	8009218 <rfalNfcfPollerCheck+0x61c>
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8009280:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
 8009284:	f800 cc58 	strb.w	ip, [r0, #-88]
 8009288:	3102      	adds	r1, #2
 800928a:	b2c9      	uxtb	r1, r1
 800928c:	e61f      	b.n	8008ece <rfalNfcfPollerCheck+0x2d2>
 800928e:	f8b2 c012 	ldrh.w	ip, [r2, #18]
 8009292:	f800 cc58 	strb.w	ip, [r0, #-88]
 8009296:	3102      	adds	r1, #2
 8009298:	b2c9      	uxtb	r1, r1
 800929a:	e63d      	b.n	8008f18 <rfalNfcfPollerCheck+0x31c>
 800929c:	f8b2 c016 	ldrh.w	ip, [r2, #22]
 80092a0:	f800 cc58 	strb.w	ip, [r0, #-88]
 80092a4:	3102      	adds	r1, #2
 80092a6:	b2c9      	uxtb	r1, r1
 80092a8:	e65b      	b.n	8008f62 <rfalNfcfPollerCheck+0x366>
            ret = ERR_PROTO;
 80092aa:	250b      	movs	r5, #11
 80092ac:	e7b4      	b.n	8009218 <rfalNfcfPollerCheck+0x61c>
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80092ae:	f8b2 c01e 	ldrh.w	ip, [r2, #30]
 80092b2:	f800 cc58 	strb.w	ip, [r0, #-88]
 80092b6:	3102      	adds	r1, #2
 80092b8:	b2c9      	uxtb	r1, r1
 80092ba:	e69c      	b.n	8008ff6 <rfalNfcfPollerCheck+0x3fa>
 80092bc:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
 80092c0:	f800 cc58 	strb.w	ip, [r0, #-88]
 80092c4:	3102      	adds	r1, #2
 80092c6:	b2c9      	uxtb	r1, r1
 80092c8:	e6ba      	b.n	8009040 <rfalNfcfPollerCheck+0x444>
 80092ca:	f8b2 c026 	ldrh.w	ip, [r2, #38]	; 0x26
 80092ce:	f800 cc58 	strb.w	ip, [r0, #-88]
 80092d2:	3102      	adds	r1, #2
 80092d4:	b2c9      	uxtb	r1, r1
 80092d6:	e6d8      	b.n	800908a <rfalNfcfPollerCheck+0x48e>
 80092d8:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
 80092dc:	f800 cc58 	strb.w	ip, [r0, #-88]
 80092e0:	3102      	adds	r1, #2
 80092e2:	b2c9      	uxtb	r1, r1
 80092e4:	e6f6      	b.n	80090d4 <rfalNfcfPollerCheck+0x4d8>
 80092e6:	f8b2 c02e 	ldrh.w	ip, [r2, #46]	; 0x2e
 80092ea:	f800 cc58 	strb.w	ip, [r0, #-88]
 80092ee:	3102      	adds	r1, #2
 80092f0:	b2c9      	uxtb	r1, r1
 80092f2:	e714      	b.n	800911e <rfalNfcfPollerCheck+0x522>
 80092f4:	f8b2 c032 	ldrh.w	ip, [r2, #50]	; 0x32
 80092f8:	f800 cc58 	strb.w	ip, [r0, #-88]
 80092fc:	3102      	adds	r1, #2
 80092fe:	b2c9      	uxtb	r1, r1
 8009300:	e731      	b.n	8009166 <rfalNfcfPollerCheck+0x56a>
 8009302:	f8b2 c036 	ldrh.w	ip, [r2, #54]	; 0x36
 8009306:	f800 cc58 	strb.w	ip, [r0, #-88]
 800930a:	3102      	adds	r1, #2
 800930c:	b2c9      	uxtb	r1, r1
 800930e:	e74e      	b.n	80091ae <rfalNfcfPollerCheck+0x5b2>
 8009310:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8009312:	f800 2c58 	strb.w	r2, [r0, #-88]
 8009316:	3102      	adds	r1, #2
 8009318:	b2c9      	uxtb	r1, r1
 800931a:	e767      	b.n	80091ec <rfalNfcfPollerCheck+0x5f0>
 800931c:	02000010 	.word	0x02000010

08009320 <rfalNfcvPollerInitialize>:
/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 8009320:	22ec      	movs	r2, #236	; 0xec
{
 8009322:	b510      	push	{r4, lr}
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 8009324:	4611      	mov	r1, r2
 8009326:	2007      	movs	r0, #7
 8009328:	f001 f9ae 	bl	800a688 <rfalSetMode>
 800932c:	4604      	mov	r4, r0
 800932e:	b968      	cbnz	r0, 800934c <rfalNfcvPollerInitialize+0x2c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8009330:	2001      	movs	r0, #1
 8009332:	f001 fab1 	bl	800a898 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 8009336:	4806      	ldr	r0, [pc, #24]	; (8009350 <rfalNfcvPollerInitialize+0x30>)
 8009338:	f001 faca 	bl	800a8d0 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 800933c:	f241 00d6 	movw	r0, #4310	; 0x10d6
 8009340:	f001 fabc 	bl	800a8bc <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8009344:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 8009348:	f001 faac 	bl	800a8a4 <rfalSetFDTPoll>
    
    return ERR_NONE;
}
 800934c:	4620      	mov	r0, r4
 800934e:	bd10      	pop	{r4, pc}
 8009350:	000108d8 	.word	0x000108d8

08009354 <rfalNfcvPollerCheckPresence>:
{
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 8009354:	b1d8      	cbz	r0, 800938e <rfalNfcvPollerCheckPresence+0x3a>
{
 8009356:	b510      	push	{r4, lr}
 8009358:	b086      	sub	sp, #24
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 800935a:	f10d 030a 	add.w	r3, sp, #10
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	230c      	movs	r3, #12
 8009362:	4602      	mov	r2, r0
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 8009364:	f44f 7c93 	mov.w	ip, #294	; 0x126
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 8009368:	2400      	movs	r4, #0
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 800936a:	2103      	movs	r1, #3
 800936c:	eb0d 0003 	add.w	r0, sp, r3
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 8009370:	f8ad c00c 	strh.w	ip, [sp, #12]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 8009374:	f88d 400e 	strb.w	r4, [sp, #14]
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 8009378:	f001 fe88 	bl	800b08c <rfalISO15693TransceiveAnticollisionFrame>
    if( rcvdLen != NULL )
    {
        *rcvdLen = rxLen;
    }
    
    if( ret == ERR_NONE )
 800937c:	b128      	cbz	r0, 800938a <rfalNfcvPollerCheckPresence+0x36>
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 800937e:	f020 0308 	bic.w	r3, r0, #8
 8009382:	b29b      	uxth	r3, r3
 8009384:	2b15      	cmp	r3, #21
 8009386:	d104      	bne.n	8009392 <rfalNfcvPollerCheckPresence+0x3e>
        ret = ERR_NONE;
 8009388:	4620      	mov	r0, r4
}
 800938a:	b006      	add	sp, #24
 800938c:	bd10      	pop	{r4, pc}
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 800938e:	2007      	movs	r0, #7
}
 8009390:	4770      	bx	lr
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 8009392:	f020 0302 	bic.w	r3, r0, #2
 8009396:	b29b      	uxth	r3, r3
        ret = ERR_NONE;
 8009398:	2b09      	cmp	r3, #9
 800939a:	bf08      	it	eq
 800939c:	2000      	moveq	r0, #0
}
 800939e:	b006      	add	sp, #24
 80093a0:	bd10      	pop	{r4, pc}
 80093a2:	bf00      	nop

080093a4 <rfalNfcvPollerCollisionResolution>:
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	f000 810b 	beq.w	80095c0 <rfalNfcvPollerCollisionResolution+0x21c>
{
 80093aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ae:	461e      	mov	r6, r3
 80093b0:	b0ad      	sub	sp, #180	; 0xb4
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 8100 	beq.w	80095b8 <rfalNfcvPollerCollisionResolution+0x214>
    {
        return ERR_PARAM;
    }

    /* Initialize parameters */
    *devCnt = 0;
 80093b8:	2500      	movs	r5, #0
 80093ba:	460f      	mov	r7, r1
 80093bc:	4604      	mov	r4, r0
 80093be:	4690      	mov	r8, r2
 80093c0:	701d      	strb	r5, [r3, #0]
    colIt         = 0;
    colCnt        = 0;
    colPending    = false;
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 80093c2:	2290      	movs	r2, #144	; 0x90
 80093c4:	4629      	mov	r1, r5
 80093c6:	a808      	add	r0, sp, #32
 80093c8:	f002 fb32 	bl	800ba30 <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 80093cc:	2f00      	cmp	r7, #0
 80093ce:	f040 80c3 	bne.w	8009558 <rfalNfcvPollerCollisionResolution+0x1b4>
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 80093d2:	2c00      	cmp	r4, #0
 80093d4:	f000 80cb 	beq.w	800956e <rfalNfcvPollerCollisionResolution+0x1ca>
        do
        {
            if( slotNum == 0U )
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.0  9.3.7.7  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 80093d8:	2300      	movs	r3, #0
 80093da:	7830      	ldrb	r0, [r6, #0]
 80093dc:	9303      	str	r3, [sp, #12]
 80093de:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
 80093e2:	f04f 0901 	mov.w	r9, #1
        slotNum    = 0;
 80093e6:	2400      	movs	r4, #0
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.0  9.3.7.15  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 80093e8:	f04f 0b01 	mov.w	fp, #1
            if( slotNum == 0U )
 80093ec:	2c00      	cmp	r4, #0
 80093ee:	d034      	beq.n	800945a <rfalNfcvPollerCollisionResolution+0xb6>
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 80093f0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80093f4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80093f8:	aa04      	add	r2, sp, #16
 80093fa:	4440      	add	r0, r8
 80093fc:	210c      	movs	r1, #12
 80093fe:	f001 fe57 	bl	800b0b0 <rfalISO15693TransceiveEOFAnticollision>
 8009402:	4605      	mov	r5, r0
            slotNum++;
 8009404:	3401      	adds	r4, #1
            if( ret != ERR_TIMEOUT )
 8009406:	2d04      	cmp	r5, #4
            slotNum++;
 8009408:	b2e4      	uxtb	r4, r4
            if( ret != ERR_TIMEOUT )
 800940a:	d05b      	beq.n	80094c4 <rfalNfcvPollerCollisionResolution+0x120>
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800940c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8009410:	2b5f      	cmp	r3, #95	; 0x5f
 8009412:	d914      	bls.n	800943e <rfalNfcvPollerCollisionResolution+0x9a>
                if( ret == ERR_NONE )
 8009414:	b1c5      	cbz	r5, 8009448 <rfalNfcvPollerCollisionResolution+0xa4>
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 8009416:	f1b9 0f0f 	cmp.w	r9, #15
 800941a:	d963      	bls.n	80094e4 <rfalNfcvPollerCollisionResolution+0x140>
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
            }
            
            /* Check if devices found have reached device limit   Activity 2.0  9.3.7.15  (Symbol 16) */
            if( *devCnt >= devLimit )
 800941c:	7830      	ldrb	r0, [r6, #0]
 800941e:	4287      	cmp	r7, r0
 8009420:	d909      	bls.n	8009436 <rfalNfcvPollerCollisionResolution+0x92>
            {
                return ERR_NONE;
            }
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 8009422:	2c10      	cmp	r4, #16
 8009424:	d1e2      	bne.n	80093ec <rfalNfcvPollerCollisionResolution+0x48>
        colIt++;
    } while( colIt < colCnt );                     /* Collisions found loop */
 8009426:	9b03      	ldr	r3, [sp, #12]
 8009428:	3301      	adds	r3, #1
 800942a:	9303      	str	r3, [sp, #12]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	4599      	cmp	r9, r3
 8009430:	f10a 0a09 	add.w	sl, sl, #9
 8009434:	d8d7      	bhi.n	80093e6 <rfalNfcvPollerCollisionResolution+0x42>
            return ERR_NONE;
 8009436:	2000      	movs	r0, #0
    
    return ERR_NONE;
}
 8009438:	b02d      	add	sp, #180	; 0xb4
 800943a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800943e:	2004      	movs	r0, #4
 8009440:	f7f8 f8ae 	bl	80015a0 <HAL_Delay>
                if( ret == ERR_NONE )
 8009444:	2d00      	cmp	r5, #0
 8009446:	d1e6      	bne.n	8009416 <rfalNfcvPollerCollisionResolution+0x72>
                    if( rcvdLen == rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 8009448:	f8bd 3010 	ldrh.w	r3, [sp, #16]
                        (*devCnt)++;
 800944c:	7830      	ldrb	r0, [r6, #0]
                    if( rcvdLen == rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800944e:	2b60      	cmp	r3, #96	; 0x60
                        (*devCnt)++;
 8009450:	bf02      	ittt	eq
 8009452:	3001      	addeq	r0, #1
 8009454:	b2c0      	uxtbeq	r0, r0
 8009456:	7030      	strbeq	r0, [r6, #0]
 8009458:	e7e1      	b.n	800941e <rfalNfcvPollerCollisionResolution+0x7a>
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 800945a:	7833      	ldrb	r3, [r6, #0]
 800945c:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 8009460:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009464:	f8ad 1014 	strh.w	r1, [sp, #20]
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 8009468:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800946c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 8009470:	2a3b      	cmp	r2, #59	; 0x3b
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 8009472:	eb08 0503 	add.w	r5, r8, r3
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 8009476:	d929      	bls.n	80094cc <rfalNfcvPollerCollisionResolution+0x128>
 8009478:	233c      	movs	r3, #60	; 0x3c
 800947a:	f88d 3016 	strb.w	r3, [sp, #22]
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 800947e:	2208      	movs	r2, #8
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 8009480:	230b      	movs	r3, #11
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 8009482:	4651      	mov	r1, sl
 8009484:	f10d 0017 	add.w	r0, sp, #23
 8009488:	9302      	str	r3, [sp, #8]
 800948a:	f002 faa9 	bl	800b9e0 <memcpy>
 800948e:	9b02      	ldr	r3, [sp, #8]
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 8009490:	4619      	mov	r1, r3
 8009492:	f10d 0312 	add.w	r3, sp, #18
 8009496:	462a      	mov	r2, r5
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	a805      	add	r0, sp, #20
 800949c:	230c      	movs	r3, #12
 800949e:	f001 fdf5 	bl	800b08c <rfalISO15693TransceiveAnticollisionFrame>
        *rcvdLen = rxLen;
 80094a2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80094a6:	f8ad 3010 	strh.w	r3, [sp, #16]
    if( ret == ERR_NONE )
 80094aa:	4605      	mov	r5, r0
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d1a9      	bne.n	8009404 <rfalNfcvPollerCollisionResolution+0x60>
        if( rxLen != rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 80094b0:	2b60      	cmp	r3, #96	; 0x60
 80094b2:	d14d      	bne.n	8009550 <rfalNfcvPollerCollisionResolution+0x1ac>
                        (*devCnt)++;
 80094b4:	7830      	ldrb	r0, [r6, #0]
 80094b6:	3001      	adds	r0, #1
 80094b8:	b2c0      	uxtb	r0, r0
            if( *devCnt >= devLimit )
 80094ba:	4287      	cmp	r7, r0
                        (*devCnt)++;
 80094bc:	7030      	strb	r0, [r6, #0]
            if( *devCnt >= devLimit )
 80094be:	d9ba      	bls.n	8009436 <rfalNfcvPollerCollisionResolution+0x92>
            slotNum++;
 80094c0:	2401      	movs	r4, #1
 80094c2:	e795      	b.n	80093f0 <rfalNfcvPollerCollisionResolution+0x4c>
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80094c4:	4628      	mov	r0, r5
 80094c6:	f7f8 f86b 	bl	80015a0 <HAL_Delay>
 80094ca:	e7a7      	b.n	800941c <rfalNfcvPollerCollisionResolution+0x78>
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 80094cc:	1dd3      	adds	r3, r2, #7
 80094ce:	f013 0ff8 	tst.w	r3, #248	; 0xf8
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 80094d2:	f88d 2016 	strb.w	r2, [sp, #22]
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 80094d6:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 80094da:	bf08      	it	eq
 80094dc:	2303      	moveq	r3, #3
 80094de:	d0d7      	beq.n	8009490 <rfalNfcvPollerCollisionResolution+0xec>
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 80094e0:	1cd3      	adds	r3, r2, #3
 80094e2:	e7ce      	b.n	8009482 <rfalNfcvPollerCollisionResolution+0xde>
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 80094e4:	2309      	movs	r3, #9
 80094e6:	fb13 b309 	smlabb	r3, r3, r9, fp
 80094ea:	ad08      	add	r5, sp, #32
 80094ec:	aa08      	add	r2, sp, #32
 80094ee:	f8da 0000 	ldr.w	r0, [sl]
 80094f2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80094f6:	50e8      	str	r0, [r5, r3]
 80094f8:	441a      	add	r2, r3
 80094fa:	6051      	str	r1, [r2, #4]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 80094fc:	eb09 01c9 	add.w	r1, r9, r9, lsl #3
                        colPos = colFound[colIt].maskLen;
 8009500:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 8009504:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 8009508:	eb0d 0103 	add.w	r1, sp, r3
 800950c:	eb01 05d2 	add.w	r5, r1, r2, lsr #3
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 8009510:	f002 0007 	and.w	r0, r2, #7
 8009514:	f815 cc8f 	ldrb.w	ip, [r5, #-143]
 8009518:	fa0b f300 	lsl.w	r3, fp, r0
 800951c:	3b01      	subs	r3, #1
 800951e:	ea03 030c 	and.w	r3, r3, ip
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 8009522:	f104 3cff 	add.w	ip, r4, #4294967295
 8009526:	fa0c fe00 	lsl.w	lr, ip, r0
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 800952a:	f1c0 0008 	rsb	r0, r0, #8
 800952e:	fa2c f000 	lsr.w	r0, ip, r0
                        colCnt++;
 8009532:	f109 0901 	add.w	r9, r9, #1
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 8009536:	ea43 030e 	orr.w	r3, r3, lr
                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 800953a:	3204      	adds	r2, #4
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 800953c:	f805 0c8e 	strb.w	r0, [r5, #-142]
                        colCnt++;
 8009540:	fa5f f989 	uxtb.w	r9, r9
            if( *devCnt >= devLimit )
 8009544:	7830      	ldrb	r0, [r6, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 8009546:	f805 3c8f 	strb.w	r3, [r5, #-143]
                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 800954a:	f801 2c90 	strb.w	r2, [r1, #-144]
                        colCnt++;
 800954e:	e766      	b.n	800941e <rfalNfcvPollerCollisionResolution+0x7a>
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 8009550:	2b5f      	cmp	r3, #95	; 0x5f
 8009552:	d924      	bls.n	800959e <rfalNfcvPollerCollisionResolution+0x1fa>
            slotNum++;
 8009554:	2401      	movs	r4, #1
 8009556:	e75e      	b.n	8009416 <rfalNfcvPollerCollisionResolution+0x72>
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 8009558:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800955c:	4629      	mov	r1, r5
 800955e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8009562:	4640      	mov	r0, r8
 8009564:	f002 fa64 	bl	800ba30 <memset>
    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 8009568:	2c00      	cmp	r4, #0
 800956a:	f47f af35 	bne.w	80093d8 <rfalNfcvPollerCollisionResolution+0x34>
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 800956e:	f10d 0312 	add.w	r3, sp, #18
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 8009572:	f44f 7293 	mov.w	r2, #294	; 0x126
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 8009576:	9300      	str	r3, [sp, #0]
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 8009578:	f8ad 2014 	strh.w	r2, [sp, #20]
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 800957c:	230c      	movs	r3, #12
 800957e:	4642      	mov	r2, r8
 8009580:	2103      	movs	r1, #3
 8009582:	a805      	add	r0, sp, #20
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 8009584:	f88d 4016 	strb.w	r4, [sp, #22]
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 8009588:	f001 fd80 	bl	800b08c <rfalISO15693TransceiveAnticollisionFrame>
    if( ret == ERR_NONE )
 800958c:	b960      	cbnz	r0, 80095a8 <rfalNfcvPollerCollisionResolution+0x204>
        if( rxLen != rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800958e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009592:	2b60      	cmp	r3, #96	; 0x60
 8009594:	d10b      	bne.n	80095ae <rfalNfcvPollerCollisionResolution+0x20a>
            (*devCnt)++;
 8009596:	7833      	ldrb	r3, [r6, #0]
 8009598:	3301      	adds	r3, #1
 800959a:	7033      	strb	r3, [r6, #0]
            return ERR_NONE;
 800959c:	e74c      	b.n	8009438 <rfalNfcvPollerCollisionResolution+0x94>
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800959e:	2004      	movs	r0, #4
 80095a0:	f7f7 fffe 	bl	80015a0 <HAL_Delay>
            slotNum++;
 80095a4:	2401      	movs	r4, #1
 80095a6:	e736      	b.n	8009416 <rfalNfcvPollerCollisionResolution+0x72>
        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.0  9.3.7.2 (Symbol 1)  */
 80095a8:	2804      	cmp	r0, #4
 80095aa:	f43f af44 	beq.w	8009436 <rfalNfcvPollerCollisionResolution+0x92>
        if( devLimit == 0U )
 80095ae:	b14f      	cbz	r7, 80095c4 <rfalNfcvPollerCollisionResolution+0x220>
        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80095b0:	2004      	movs	r0, #4
 80095b2:	f7f7 fff5 	bl	80015a0 <HAL_Delay>
 80095b6:	e70f      	b.n	80093d8 <rfalNfcvPollerCollisionResolution+0x34>
        return ERR_PARAM;
 80095b8:	2007      	movs	r0, #7
}
 80095ba:	b02d      	add	sp, #180	; 0xb4
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ERR_PARAM;
 80095c0:	2007      	movs	r0, #7
}
 80095c2:	4770      	bx	lr
            return ERR_RF_COLLISION;
 80095c4:	201d      	movs	r0, #29
 80095c6:	e737      	b.n	8009438 <rfalNfcvPollerCollisionResolution+0x94>

080095c8 <rfalNfcvPollerReadSingleBlock>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_SELECT, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80095c8:	b530      	push	{r4, r5, lr}
 80095ca:	b091      	sub	sp, #68	; 0x44
 80095cc:	f8bd c050 	ldrh.w	ip, [sp, #80]	; 0x50
 80095d0:	9c15      	ldr	r4, [sp, #84]	; 0x54
    
    msgIt    = 0;
    fastMode = false;
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 80095d2:	b3bb      	cbz	r3, 8009644 <rfalNfcvPollerReadSingleBlock+0x7c>
 80095d4:	b3b4      	cbz	r4, 8009644 <rfalNfcvPollerReadSingleBlock+0x7c>
 80095d6:	461d      	mov	r5, r3
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
 80095d8:	b341      	cbz	r1, 800962c <rfalNfcvPollerReadSingleBlock+0x64>
    
    /* Check if request is to be sent in Addressed or Selected mode */
    if( uid != NULL )
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
        ST_MEMCPY( &req.payload.data[msgIt], uid, RFAL_NFCV_UID_LEN );
 80095da:	680b      	ldr	r3, [r1, #0]
 80095dc:	f8cd 3016 	str.w	r3, [sp, #22]
    req.REQ_FLAG  = (uint8_t)(flags & (~((uint32_t)RFAL_NFCV_REQ_FLAG_ADDRESS) & ~((uint32_t)RFAL_NFCV_REQ_FLAG_SELECT)));
 80095e0:	f020 0030 	bic.w	r0, r0, #48	; 0x30
        ST_MEMCPY( &req.payload.data[msgIt], uid, RFAL_NFCV_UID_LEN );
 80095e4:	684b      	ldr	r3, [r1, #4]
 80095e6:	f8cd 301a 	str.w	r3, [sp, #26]
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
 80095ea:	f040 0020 	orr.w	r0, r0, #32
    req.CMD       = cmd;
 80095ee:	2320      	movs	r3, #32
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
 80095f0:	f88d 0014 	strb.w	r0, [sp, #20]
 80095f4:	210b      	movs	r1, #11
    req.CMD       = cmd;
 80095f6:	f88d 3015 	strb.w	r3, [sp, #21]
        msgIt += RFAL_NFCV_UID_LEN;
 80095fa:	2008      	movs	r0, #8
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_SELECT;
    }
    
    if( dataLen > 0U )
    {
        ST_MEMCPY( &req.payload.data[msgIt], data, dataLen);
 80095fc:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8009600:	eb0d 0003 	add.w	r0, sp, r3
        msgIt += (uint8_t)dataLen;
    }
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_MAX );
 8009604:	2300      	movs	r3, #0
        ST_MEMCPY( &req.payload.data[msgIt], data, dataLen);
 8009606:	f800 2c2a 	strb.w	r2, [r0, #-42]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_MAX );
 800960a:	4a16      	ldr	r2, [pc, #88]	; (8009664 <rfalNfcvPollerReadSingleBlock+0x9c>)
 800960c:	9400      	str	r4, [sp, #0]
 800960e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009612:	a805      	add	r0, sp, #20
 8009614:	4663      	mov	r3, ip
 8009616:	462a      	mov	r2, r5
 8009618:	f001 fa8c 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    if( fastMode )
    {
        rfalSetBitRate( RFAL_BR_KEEP, rxBR );
    }
    
    if( ret != ERR_NONE )
 800961c:	b920      	cbnz	r0, 8009628 <rfalNfcvPollerReadSingleBlock+0x60>
    {
        return ret;
    }
    
    /* Check if the response minimum length has been received */
    if( (*rcvLen) < (uint8_t)RFAL_NFCV_FLAG_LEN )
 800961e:	8823      	ldrh	r3, [r4, #0]
 8009620:	b1e3      	cbz	r3, 800965c <rfalNfcvPollerReadSingleBlock+0x94>
    {
        return ERR_PROTO;
    }
    
    /* Check if an error has been signalled */
    if( (rxBuf[RFAL_NFCV_FLAG_POS] & (uint8_t)RFAL_NFCV_RES_FLAG_ERROR) != 0U )
 8009622:	782b      	ldrb	r3, [r5, #0]
 8009624:	07db      	lsls	r3, r3, #31
 8009626:	d410      	bmi.n	800964a <rfalNfcvPollerReadSingleBlock+0x82>
}
 8009628:	b011      	add	sp, #68	; 0x44
 800962a:	bd30      	pop	{r4, r5, pc}
    req.REQ_FLAG  = (uint8_t)(flags & (~((uint32_t)RFAL_NFCV_REQ_FLAG_ADDRESS) & ~((uint32_t)RFAL_NFCV_REQ_FLAG_SELECT)));
 800962c:	f020 0030 	bic.w	r0, r0, #48	; 0x30
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_SELECT;
 8009630:	f040 0010 	orr.w	r0, r0, #16
    req.CMD       = cmd;
 8009634:	2320      	movs	r3, #32
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_SELECT;
 8009636:	f88d 0014 	strb.w	r0, [sp, #20]
    req.CMD       = cmd;
 800963a:	f88d 3015 	strb.w	r3, [sp, #21]
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_SELECT;
 800963e:	4608      	mov	r0, r1
 8009640:	2103      	movs	r1, #3
 8009642:	e7db      	b.n	80095fc <rfalNfcvPollerReadSingleBlock+0x34>
        return ERR_PARAM;
 8009644:	2007      	movs	r0, #7
}
 8009646:	b011      	add	sp, #68	; 0x44
 8009648:	bd30      	pop	{r4, r5, pc}
    switch(err)
 800964a:	786b      	ldrb	r3, [r5, #1]
 800964c:	3b01      	subs	r3, #1
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b12      	cmp	r3, #18
 8009652:	d805      	bhi.n	8009660 <rfalNfcvPollerReadSingleBlock+0x98>
 8009654:	4a04      	ldr	r2, [pc, #16]	; (8009668 <rfalNfcvPollerReadSingleBlock+0xa0>)
 8009656:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800965a:	e7e5      	b.n	8009628 <rfalNfcvPollerReadSingleBlock+0x60>
        return ERR_PROTO;
 800965c:	200b      	movs	r0, #11
 800965e:	e7e3      	b.n	8009628 <rfalNfcvPollerReadSingleBlock+0x60>
    {
        return rfalNfcvParseError( rxBuf[RFAL_NFCV_DATASTART_POS] );
 8009660:	2005      	movs	r0, #5
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), rxBuf, rxBufLen, rcvLen );
 8009662:	e7e1      	b.n	8009628 <rfalNfcvPollerReadSingleBlock+0x60>
 8009664:	00042360 	.word	0x00042360
 8009668:	0800c544 	.word	0x0800c544

0800966c <rfalPrepareTransceive>:
}


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 800966c:	b538      	push	{r3, r4, r5, lr}
    uint8_t  reg;
    
    /*******************************************************************************/
    /* In the EMVCo mode the NRT will continue to run.                             *
     * For the clear to stop it, the EMV mode has to be disabled before            */
    st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 800966e:	2102      	movs	r1, #2
 8009670:	2011      	movs	r0, #17
 8009672:	f7f7 fb5d 	bl	8000d30 <st25r3911ClrRegisterBits>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 8009676:	4c33      	ldr	r4, [pc, #204]	; (8009744 <rfalPrepareTransceive+0xd8>)
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 8009678:	20c2      	movs	r0, #194	; 0xc2
 800967a:	f7f7 fd5d 	bl	8001138 <st25r3911ExecuteCommand>
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 800967e:	20d5      	movs	r0, #213	; 0xd5
 8009680:	f7f7 fd5a 	bl	8001138 <st25r3911ExecuteCommand>
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 8009684:	7863      	ldrb	r3, [r4, #1]
 8009686:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800968a:	2b09      	cmp	r3, #9
 800968c:	d002      	beq.n	8009694 <rfalPrepareTransceive+0x28>
    {
       /* In Passive communications General Purpose Timer is used to measure FDT Poll */
       if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800968e:	6920      	ldr	r0, [r4, #16]
 8009690:	2800      	cmp	r0, #0
 8009692:	d14a      	bne.n	800972a <rfalPrepareTransceive+0xbe>
    
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 8009694:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009696:	b103      	cbz	r3, 800969a <rfalPrepareTransceive+0x2e>
    {
        gRFAL.callbacks.preTxRx();
 8009698:	4798      	blx	r3
    /*******************************************************************************/
    
    reg = (ST25R3911_REG_ISO14443A_NFC_no_tx_par_off | ST25R3911_REG_ISO14443A_NFC_no_rx_par_off | ST25R3911_REG_ISO14443A_NFC_nfc_f0_off);
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 800969a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800969c:	f001 0304 	and.w	r3, r1, #4
 80096a0:	2b00      	cmp	r3, #0
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_nfc_f0;
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 80096a2:	f001 0c10 	and.w	ip, r1, #16
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 80096a6:	bf0b      	itete	eq
 80096a8:	23c0      	moveq	r3, #192	; 0xc0
 80096aa:	23e0      	movne	r3, #224	; 0xe0
 80096ac:	2240      	moveq	r2, #64	; 0x40
 80096ae:	2260      	movne	r2, #96	; 0x60
 80096b0:	bf07      	ittee	eq
 80096b2:	2000      	moveq	r0, #0
 80096b4:	2580      	moveq	r5, #128	; 0x80
 80096b6:	2020      	movne	r0, #32
 80096b8:	25a0      	movne	r5, #160	; 0xa0
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 80096ba:	f1bc 0f00 	cmp.w	ip, #0
 80096be:	bf04      	itt	eq
 80096c0:	462b      	moveq	r3, r5
 80096c2:	4602      	moveq	r2, r0
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_tx_par;
 80096c4:	f011 0f20 	tst.w	r1, #32
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0), reg );
 80096c8:	bf18      	it	ne
 80096ca:	461a      	movne	r2, r3
 80096cc:	21e0      	movs	r1, #224	; 0xe0
 80096ce:	2005      	movs	r0, #5
 80096d0:	f7f7 fbb2 	bl	8000e38 <st25r3911ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 80096d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80096d6:	071b      	lsls	r3, r3, #28
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 80096d8:	f04f 0110 	mov.w	r1, #16
 80096dc:	f04f 000b 	mov.w	r0, #11
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 80096e0:	d51a      	bpl.n	8009718 <rfalPrepareTransceive+0xac>
        st25r3911ClrRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 80096e2:	f7f7 fb25 	bl	8000d30 <st25r3911ClrRegisterBits>
    

    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 80096e6:	79e1      	ldrb	r1, [r4, #7]
 80096e8:	2902      	cmp	r1, #2
 80096ea:	d01a      	beq.n	8009722 <rfalPrepareTransceive+0xb6>
    {
        st25r3911SetRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
    }
    else
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 80096ec:	2102      	movs	r1, #2
 80096ee:	2011      	movs	r0, #17
 80096f0:	f7f7 fb1e 	bl	8000d30 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 80096f4:	7863      	ldrb	r3, [r4, #1]
    {
        maskInterrupts |= ( ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC );
 80096f6:	4a14      	ldr	r2, [pc, #80]	; (8009748 <rfalPrepareTransceive+0xdc>)
 80096f8:	4d14      	ldr	r5, [pc, #80]	; (800974c <rfalPrepareTransceive+0xe0>)
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 80096fa:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
        maskInterrupts |= ( ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC );
 80096fe:	2b09      	cmp	r3, #9
 8009700:	bf08      	it	eq
 8009702:	4615      	moveq	r5, r2
    }
    
    
    /*******************************************************************************/
    /* clear and enable these interrupts */
    st25r3911GetInterrupt( maskInterrupts );
 8009704:	4628      	mov	r0, r5
 8009706:	f7f7 fe33 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( maskInterrupts );
 800970a:	4628      	mov	r0, r5
 800970c:	f7f7 fe56 	bl	80013bc <st25r3911EnableInterrupts>


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 8009710:	23ff      	movs	r3, #255	; 0xff
 8009712:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
 8009716:	bd38      	pop	{r3, r4, r5, pc}
        st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 8009718:	f7f7 fb4c 	bl	8000db4 <st25r3911SetRegisterBits>
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800971c:	79e1      	ldrb	r1, [r4, #7]
 800971e:	2902      	cmp	r1, #2
 8009720:	d1e4      	bne.n	80096ec <rfalPrepareTransceive+0x80>
        st25r3911SetRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 8009722:	2011      	movs	r0, #17
 8009724:	f7f7 fb46 	bl	8000db4 <st25r3911SetRegisterBits>
 8009728:	e7e4      	b.n	80096f4 <rfalPrepareTransceive+0x88>
           st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 800972a:	f240 433b 	movw	r3, #1083	; 0x43b
 800972e:	4298      	cmp	r0, r3
 8009730:	bf88      	it	hi
 8009732:	f2a0 403c 	subwhi	r0, r0, #1084	; 0x43c
 8009736:	f3c0 00cf 	ubfx	r0, r0, #3, #16
 800973a:	2120      	movs	r1, #32
 800973c:	f7f7 f8f8 	bl	8000930 <st25r3911StartGPTimer_8fcs>
 8009740:	e7a8      	b.n	8009694 <rfalPrepareTransceive+0x28>
 8009742:	bf00      	nop
 8009744:	20000cc8 	.word	0x20000cc8
 8009748:	00f05e78 	.word	0x00f05e78
 800974c:	00f04078 	.word	0x00f04078

08009750 <rfalSetBitRate.part.0>:
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
 8009750:	b510      	push	{r4, lr}
    switch( gRFAL.mode )
 8009752:	4c85      	ldr	r4, [pc, #532]	; (8009968 <rfalSetBitRate.part.0+0x218>)
 8009754:	7863      	ldrb	r3, [r4, #1]
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
 8009756:	b084      	sub	sp, #16
    switch( gRFAL.mode )
 8009758:	2b0d      	cmp	r3, #13
 800975a:	f200 8102 	bhi.w	8009962 <rfalSetBitRate.part.0+0x212>
 800975e:	e8df f003 	tbb	[pc, r3]
 8009762:	4807      	.short	0x4807
 8009764:	0a0a0a48 	.word	0x0a0a0a48
 8009768:	622a2a9a 	.word	0x622a2a9a
 800976c:	7e070707 	.word	0x7e070707
            return ERR_WRONG_STATE;
 8009770:	2021      	movs	r0, #33	; 0x21
}
 8009772:	b004      	add	sp, #16
 8009774:	bd10      	pop	{r4, pc}
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8009776:	2008      	movs	r0, #8
 8009778:	f7fa fcd0 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800977c:	78a3      	ldrb	r3, [r4, #2]
 800977e:	2bea      	cmp	r3, #234	; 0xea
 8009780:	bf96      	itet	ls
 8009782:	1c58      	addls	r0, r3, #1
 8009784:	0118      	lslhi	r0, r3, #4
 8009786:	0100      	lslls	r0, r0, #4
 8009788:	b2c0      	uxtb	r0, r0
 800978a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800978e:	f040 0001 	orr.w	r0, r0, #1
 8009792:	f7fa fcc3 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8009796:	78e3      	ldrb	r3, [r4, #3]
 8009798:	2bea      	cmp	r3, #234	; 0xea
 800979a:	bf96      	itet	ls
 800979c:	1c58      	addls	r0, r3, #1
 800979e:	0118      	lslhi	r0, r3, #4
 80097a0:	0100      	lslls	r0, r0, #4
 80097a2:	b2c0      	uxtb	r0, r0
 80097a4:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 80097a8:	f040 0002 	orr.w	r0, r0, #2
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80097ac:	f7fa fcb6 	bl	800411c <rfalSetAnalogConfig>
    return ERR_NONE;
 80097b0:	2000      	movs	r0, #0
}
 80097b2:	b004      	add	sp, #16
 80097b4:	bd10      	pop	{r4, pc}
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 80097b6:	78e2      	ldrb	r2, [r4, #3]
 80097b8:	f102 0315 	add.w	r3, r2, #21
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b01      	cmp	r3, #1
 80097c0:	f240 8085 	bls.w	80098ce <rfalSetBitRate.part.0+0x17e>
 80097c4:	2a00      	cmp	r2, #0
 80097c6:	f000 80ba 	beq.w	800993e <rfalSetBitRate.part.0+0x1ee>
 80097ca:	2a01      	cmp	r2, #1
 80097cc:	f040 80c7 	bne.w	800995e <rfalSetBitRate.part.0+0x20e>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 80097d0:	78a3      	ldrb	r3, [r4, #2]
 80097d2:	f103 0214 	add.w	r2, r3, #20
 80097d6:	b2d2      	uxtb	r2, r2
 80097d8:	2a01      	cmp	r2, #1
 80097da:	f200 80c0 	bhi.w	800995e <rfalSetBitRate.part.0+0x20e>
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 80097de:	f1a3 03ed 	sub.w	r3, r3, #237	; 0xed
 80097e2:	fab3 f383 	clz	r3, r3
 80097e6:	095b      	lsrs	r3, r3, #5
                            config.speedMode = 3;
 80097e8:	2203      	movs	r2, #3
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 80097ea:	f88d 3008 	strb.w	r3, [sp, #8]
                            config.speedMode = 3;
 80097ee:	9203      	str	r2, [sp, #12]
                            break;
 80097f0:	e07f      	b.n	80098f2 <rfalSetBitRate.part.0+0x1a2>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 80097f2:	2008      	movs	r0, #8
 80097f4:	f7fa fc92 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80097f8:	78a3      	ldrb	r3, [r4, #2]
 80097fa:	2bea      	cmp	r3, #234	; 0xea
 80097fc:	bf96      	itet	ls
 80097fe:	1c58      	addls	r0, r3, #1
 8009800:	0118      	lslhi	r0, r3, #4
 8009802:	0100      	lslls	r0, r0, #4
 8009804:	b2c0      	uxtb	r0, r0
 8009806:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800980a:	f040 0001 	orr.w	r0, r0, #1
 800980e:	f7fa fc85 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8009812:	78e3      	ldrb	r3, [r4, #3]
 8009814:	2bea      	cmp	r3, #234	; 0xea
 8009816:	bf96      	itet	ls
 8009818:	1c58      	addls	r0, r3, #1
 800981a:	0118      	lslhi	r0, r3, #4
 800981c:	0100      	lslls	r0, r0, #4
 800981e:	b2c0      	uxtb	r0, r0
 8009820:	f440 7081 	orr.w	r0, r0, #258	; 0x102
 8009824:	e7c2      	b.n	80097ac <rfalSetBitRate.part.0+0x5c>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8009826:	2008      	movs	r0, #8
 8009828:	f7fa fc78 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800982c:	78a3      	ldrb	r3, [r4, #2]
 800982e:	2bea      	cmp	r3, #234	; 0xea
 8009830:	bf96      	itet	ls
 8009832:	1c58      	addls	r0, r3, #1
 8009834:	0118      	lslhi	r0, r3, #4
 8009836:	0100      	lslls	r0, r0, #4
 8009838:	b2c0      	uxtb	r0, r0
 800983a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800983e:	f040 0001 	orr.w	r0, r0, #1
 8009842:	f7fa fc6b 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8009846:	78e3      	ldrb	r3, [r4, #3]
 8009848:	2bea      	cmp	r3, #234	; 0xea
 800984a:	bf96      	itet	ls
 800984c:	1c58      	addls	r0, r3, #1
 800984e:	0118      	lslhi	r0, r3, #4
 8009850:	0100      	lslls	r0, r0, #4
 8009852:	b2c0      	uxtb	r0, r0
 8009854:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8009858:	f040 0002 	orr.w	r0, r0, #2
 800985c:	e7a6      	b.n	80097ac <rfalSetBitRate.part.0+0x5c>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800985e:	2009      	movs	r0, #9
 8009860:	f7fa fc5c 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8009864:	78a3      	ldrb	r3, [r4, #2]
 8009866:	2bea      	cmp	r3, #234	; 0xea
 8009868:	bf96      	itet	ls
 800986a:	1c58      	addls	r0, r3, #1
 800986c:	0118      	lslhi	r0, r3, #4
 800986e:	0100      	lslls	r0, r0, #4
 8009870:	b2c0      	uxtb	r0, r0
 8009872:	f440 4008 	orr.w	r0, r0, #34816	; 0x8800
 8009876:	f040 0001 	orr.w	r0, r0, #1
 800987a:	f7fa fc4f 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800987e:	78e3      	ldrb	r3, [r4, #3]
 8009880:	2bea      	cmp	r3, #234	; 0xea
 8009882:	bf96      	itet	ls
 8009884:	1c58      	addls	r0, r3, #1
 8009886:	0118      	lslhi	r0, r3, #4
 8009888:	0100      	lslls	r0, r0, #4
 800988a:	b2c0      	uxtb	r0, r0
 800988c:	f440 4008 	orr.w	r0, r0, #34816	; 0x8800
 8009890:	f040 0002 	orr.w	r0, r0, #2
 8009894:	e78a      	b.n	80097ac <rfalSetBitRate.part.0+0x5c>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8009896:	2008      	movs	r0, #8
 8009898:	f7fa fc40 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800989c:	78a3      	ldrb	r3, [r4, #2]
 800989e:	2bea      	cmp	r3, #234	; 0xea
 80098a0:	bf96      	itet	ls
 80098a2:	1c58      	addls	r0, r3, #1
 80098a4:	0118      	lslhi	r0, r3, #4
 80098a6:	0100      	lslls	r0, r0, #4
 80098a8:	b2c0      	uxtb	r0, r0
 80098aa:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 80098ae:	f040 0001 	orr.w	r0, r0, #1
 80098b2:	f7fa fc33 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80098b6:	78e3      	ldrb	r3, [r4, #3]
 80098b8:	2bea      	cmp	r3, #234	; 0xea
 80098ba:	bf96      	itet	ls
 80098bc:	1c58      	addls	r0, r3, #1
 80098be:	0118      	lslhi	r0, r3, #4
 80098c0:	0100      	lslls	r0, r0, #4
 80098c2:	b2c0      	uxtb	r0, r0
 80098c4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 80098c8:	f040 0002 	orr.w	r0, r0, #2
 80098cc:	e76e      	b.n	80097ac <rfalSetBitRate.part.0+0x5c>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 80098ce:	78a3      	ldrb	r3, [r4, #2]
 80098d0:	f103 0114 	add.w	r1, r3, #20
 80098d4:	b2c9      	uxtb	r1, r1
 80098d6:	2901      	cmp	r1, #1
 80098d8:	d841      	bhi.n	800995e <rfalSetBitRate.part.0+0x20e>
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 80098da:	f1a3 03ed 	sub.w	r3, r3, #237	; 0xed
 80098de:	fab3 f383 	clz	r3, r3
 80098e2:	095b      	lsrs	r3, r3, #5
 80098e4:	2aeb      	cmp	r2, #235	; 0xeb
 80098e6:	f88d 3008 	strb.w	r3, [sp, #8]
                            config.speedMode = 1;
 80098ea:	bf0c      	ite	eq
 80098ec:	2301      	moveq	r3, #1
                            config.speedMode = 0;
 80098ee:	2300      	movne	r3, #0
 80098f0:	9303      	str	r3, [sp, #12]
                    iso15693PhyConfigure(&config, &isoStreamConfig);   /* Convert ISO15693 config into StreamConfig */
 80098f2:	4669      	mov	r1, sp
 80098f4:	a802      	add	r0, sp, #8
 80098f6:	f7fa fd29 	bl	800434c <iso15693PhyConfigure>
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 80098fa:	9b00      	ldr	r3, [sp, #0]
                    st25r3911StreamConfigure(&streamConf);
 80098fc:	a801      	add	r0, sp, #4
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	9301      	str	r3, [sp, #4]
                    st25r3911StreamConfigure(&streamConf);
 8009902:	f7f7 f8e5 	bl	8000ad0 <st25r3911StreamConfigure>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8009906:	2008      	movs	r0, #8
 8009908:	f7fa fc08 	bl	800411c <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800990c:	78a3      	ldrb	r3, [r4, #2]
 800990e:	2bea      	cmp	r3, #234	; 0xea
 8009910:	bf96      	itet	ls
 8009912:	1c58      	addls	r0, r3, #1
 8009914:	0118      	lslhi	r0, r3, #4
 8009916:	0100      	lslls	r0, r0, #4
 8009918:	b2c0      	uxtb	r0, r0
 800991a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800991e:	f040 0001 	orr.w	r0, r0, #1
 8009922:	f7fa fbfb 	bl	800411c <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8009926:	78e3      	ldrb	r3, [r4, #3]
 8009928:	2bea      	cmp	r3, #234	; 0xea
 800992a:	bf96      	itet	ls
 800992c:	1c58      	addls	r0, r3, #1
 800992e:	0118      	lslhi	r0, r3, #4
 8009930:	0100      	lslls	r0, r0, #4
 8009932:	b2c0      	uxtb	r0, r0
 8009934:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8009938:	f040 0002 	orr.w	r0, r0, #2
 800993c:	e736      	b.n	80097ac <rfalSetBitRate.part.0+0x5c>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 800993e:	78a2      	ldrb	r2, [r4, #2]
 8009940:	f102 0314 	add.w	r3, r2, #20
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b01      	cmp	r3, #1
 8009948:	d809      	bhi.n	800995e <rfalSetBitRate.part.0+0x20e>
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 800994a:	f1a2 02ed 	sub.w	r2, r2, #237	; 0xed
 800994e:	fab2 f282 	clz	r2, r2
 8009952:	0952      	lsrs	r2, r2, #5
                            config.speedMode = 2;
 8009954:	2302      	movs	r3, #2
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 8009956:	f88d 2008 	strb.w	r2, [sp, #8]
                            config.speedMode = 2;
 800995a:	9303      	str	r3, [sp, #12]
                            break;
 800995c:	e7c9      	b.n	80098f2 <rfalSetBitRate.part.0+0x1a2>
                    return ERR_PARAM;
 800995e:	2007      	movs	r0, #7
 8009960:	e707      	b.n	8009772 <rfalSetBitRate.part.0+0x22>
    switch( gRFAL.mode )
 8009962:	200f      	movs	r0, #15
 8009964:	e705      	b.n	8009772 <rfalSetBitRate.part.0+0x22>
 8009966:	bf00      	nop
 8009968:	20000cc8 	.word	0x20000cc8

0800996c <rfalStartTransceive.part.0>:
        gRFAL.TxRx.ctx = *ctx;
 800996c:	4684      	mov	ip, r0
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
 800996e:	b538      	push	{r3, r4, r5, lr}
        gRFAL.TxRx.ctx = *ctx;
 8009970:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009974:	4c50      	ldr	r4, [pc, #320]	; (8009ab8 <rfalStartTransceive.part.0+0x14c>)
 8009976:	f104 0e1c 	add.w	lr, r4, #28
 800997a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800997e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8009982:	68e5      	ldr	r5, [r4, #12]
        gRFAL.TxRx.ctx = *ctx;
 8009984:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8009988:	b185      	cbz	r5, 80099ac <rfalStartTransceive.part.0+0x40>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800998a:	7863      	ldrb	r3, [r4, #1]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d002      	beq.n	8009996 <rfalStartTransceive.part.0+0x2a>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8009990:	1e9a      	subs	r2, r3, #2
 8009992:	2a01      	cmp	r2, #1
 8009994:	d873      	bhi.n	8009a7e <rfalStartTransceive.part.0+0x112>
 8009996:	f44f 71aa 	mov.w	r1, #340	; 0x154
            st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 800999a:	428d      	cmp	r5, r1
 800999c:	bf26      	itte	cs
 800999e:	1a69      	subcs	r1, r5, r1
 80099a0:	f3c1 1187 	ubfxcs	r1, r1, #6, #8
 80099a4:	2104      	movcc	r1, #4
 80099a6:	200e      	movs	r0, #14
 80099a8:	f7f7 f97e 	bl	8000ca8 <st25r3911WriteRegister>
        if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 80099ac:	7862      	ldrb	r2, [r4, #1]
 80099ae:	f002 03fb 	and.w	r3, r2, #251	; 0xfb
 80099b2:	2b09      	cmp	r3, #9
 80099b4:	d019      	beq.n	80099ea <rfalStartTransceive.part.0+0x7e>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 80099b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099b8:	1e59      	subs	r1, r3, #1
 80099ba:	3103      	adds	r1, #3
 80099bc:	d85b      	bhi.n	8009a76 <rfalStartTransceive.part.0+0x10a>
                if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 80099be:	68e1      	ldr	r1, [r4, #12]
 80099c0:	428b      	cmp	r3, r1
 80099c2:	d974      	bls.n	8009aae <rfalStartTransceive.part.0+0x142>
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 80099c4:	2a01      	cmp	r2, #1
 80099c6:	d05f      	beq.n	8009a88 <rfalStartTransceive.part.0+0x11c>
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 80099c8:	2a02      	cmp	r2, #2
 80099ca:	d05d      	beq.n	8009a88 <rfalStartTransceive.part.0+0x11c>
                if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 80099cc:	2a03      	cmp	r2, #3
 80099ce:	bf08      	it	eq
 80099d0:	f44f 6232 	moveq.w	r2, #2848	; 0xb20
 80099d4:	d160      	bne.n	8009a98 <rfalStartTransceive.part.0+0x12c>
                gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3911_NRT_MAX_1FC );
 80099d6:	4939      	ldr	r1, [pc, #228]	; (8009abc <rfalStartTransceive.part.0+0x150>)
 80099d8:	4413      	add	r3, r2
 80099da:	428b      	cmp	r3, r1
 80099dc:	bf28      	it	cs
 80099de:	460b      	movcs	r3, r1
                st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 80099e0:	0998      	lsrs	r0, r3, #6
                gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3911_NRT_MAX_1FC );
 80099e2:	6363      	str	r3, [r4, #52]	; 0x34
                st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 80099e4:	f7f6 ffee 	bl	80009c4 <st25r3911SetNoResponseTime_64fcs>
 80099e8:	e002      	b.n	80099f0 <rfalStartTransceive.part.0+0x84>
            st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc(RFAL_AP2P_FIELDON_TADTTRFW) );
 80099ea:	2080      	movs	r0, #128	; 0x80
 80099ec:	f7f6 ffea 	bl	80009c4 <st25r3911SetNoResponseTime_64fcs>
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 80099f0:	7863      	ldrb	r3, [r4, #1]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 80099f2:	220b      	movs	r2, #11
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 80099f4:	3b07      	subs	r3, #7
        gRFAL.state       = RFAL_STATE_TXRX;
 80099f6:	2003      	movs	r0, #3
        gRFAL.TxRx.status = ERR_BUSY;
 80099f8:	2102      	movs	r1, #2
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 80099fa:	7522      	strb	r2, [r4, #20]
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 80099fc:	2b01      	cmp	r3, #1
        gRFAL.TxRx.rxse   = false;
 80099fe:	f04f 0200 	mov.w	r2, #0
        gRFAL.state       = RFAL_STATE_TXRX;
 8009a02:	7020      	strb	r0, [r4, #0]
        gRFAL.TxRx.status = ERR_BUSY;
 8009a04:	82e1      	strh	r1, [r4, #22]
        gRFAL.TxRx.rxse   = false;
 8009a06:	7622      	strb	r2, [r4, #24]
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8009a08:	d820      	bhi.n	8009a4c <rfalStartTransceive.part.0+0xe0>
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 8009a0a:	4d2d      	ldr	r5, [pc, #180]	; (8009ac0 <rfalStartTransceive.part.0+0x154>)
 8009a0c:	f5a5 7c67 	sub.w	ip, r5, #924	; 0x39c
 8009a10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 8009a16:	f8d4 33c0 	ldr.w	r3, [r4, #960]	; 0x3c0
 8009a1a:	f5a5 7207 	sub.w	r2, r5, #540	; 0x21c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	bf18      	it	ne
 8009a22:	4613      	movne	r3, r2
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 8009a24:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8009a28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 8009a2c:	6263      	str	r3, [r4, #36]	; 0x24
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 8009a2e:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 8009a32:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 8009a36:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 8009a3a:	6323      	str	r3, [r4, #48]	; 0x30
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 8009a3c:	69e3      	ldr	r3, [r4, #28]
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 8009a3e:	f44f 5e82 	mov.w	lr, #4160	; 0x1040
 8009a42:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 8009a46:	b133      	cbz	r3, 8009a56 <rfalStartTransceive.part.0+0xea>
        return ERR_NONE;
 8009a48:	2000      	movs	r0, #0
}
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 8009a4c:	69e3      	ldr	r3, [r4, #28]
 8009a4e:	b113      	cbz	r3, 8009a56 <rfalStartTransceive.part.0+0xea>
 8009a50:	8c23      	ldrh	r3, [r4, #32]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1f8      	bne.n	8009a48 <rfalStartTransceive.part.0+0xdc>
            rfalPrepareTransceive( );
 8009a56:	f7ff fe09 	bl	800966c <rfalPrepareTransceive>
            if( rfalIsModeActiveComm(gRFAL.mode) )
 8009a5a:	7863      	ldrb	r3, [r4, #1]
 8009a5c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8009a60:	2b09      	cmp	r3, #9
 8009a62:	d014      	beq.n	8009a8e <rfalStartTransceive.part.0+0x122>
            st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8009a64:	20d1      	movs	r0, #209	; 0xd1
 8009a66:	f7f7 fb67 	bl	8001138 <st25r3911ExecuteCommand>
            st25r3911ExecuteCommand( ST25R3911_CMD_START_NO_RESPONSE_TIMER );
 8009a6a:	20e3      	movs	r0, #227	; 0xe3
 8009a6c:	f7f7 fb64 	bl	8001138 <st25r3911ExecuteCommand>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8009a70:	2351      	movs	r3, #81	; 0x51
 8009a72:	7523      	strb	r3, [r4, #20]
 8009a74:	e7e8      	b.n	8009a48 <rfalStartTransceive.part.0+0xdc>
                st25r3911SetNoResponseTime_64fcs( RFAL_ST25R3911_NRT_DISABLED );
 8009a76:	2000      	movs	r0, #0
 8009a78:	f7f6 ffa4 	bl	80009c4 <st25r3911SetNoResponseTime_64fcs>
 8009a7c:	e7b8      	b.n	80099f0 <rfalStartTransceive.part.0+0x84>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 8009a7e:	2b07      	cmp	r3, #7
 8009a80:	bf14      	ite	ne
 8009a82:	2140      	movne	r1, #64	; 0x40
 8009a84:	21c0      	moveq	r1, #192	; 0xc0
 8009a86:	e788      	b.n	800999a <rfalStartTransceive.part.0+0x2e>
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8009a88:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009a8c:	e7a3      	b.n	80099d6 <rfalStartTransceive.part.0+0x6a>
                st25r3911TxOff();
 8009a8e:	2108      	movs	r1, #8
 8009a90:	2002      	movs	r0, #2
 8009a92:	f7f7 f94d 	bl	8000d30 <st25r3911ClrRegisterBits>
 8009a96:	e7e5      	b.n	8009a64 <rfalStartTransceive.part.0+0xf8>
                if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 8009a98:	2a06      	cmp	r2, #6
 8009a9a:	d10a      	bne.n	8009ab2 <rfalStartTransceive.part.0+0x146>
                    FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 8009a9c:	78a2      	ldrb	r2, [r4, #2]
 8009a9e:	2a01      	cmp	r2, #1
 8009aa0:	bf0c      	ite	eq
 8009aa2:	f44f 6280 	moveq.w	r2, #1024	; 0x400
 8009aa6:	f44f 7200 	movne.w	r2, #512	; 0x200
 8009aaa:	3240      	adds	r2, #64	; 0x40
 8009aac:	e793      	b.n	80099d6 <rfalStartTransceive.part.0+0x6a>
                    return ERR_PARAM;
 8009aae:	2007      	movs	r0, #7
}
 8009ab0:	bd38      	pop	{r3, r4, r5, pc}
                FxTAdj = RFAL_FWT_ADJUSTMENT;
 8009ab2:	2240      	movs	r2, #64	; 0x40
 8009ab4:	e78f      	b.n	80099d6 <rfalStartTransceive.part.0+0x6a>
 8009ab6:	bf00      	nop
 8009ab8:	20000cc8 	.word	0x20000cc8
 8009abc:	0ffff000 	.word	0x0ffff000
 8009ac0:	20001080 	.word	0x20001080

08009ac4 <rfalTransceiveTx>:
{
 8009ac4:	b530      	push	{r4, r5, lr}
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8009ac6:	4ca7      	ldr	r4, [pc, #668]	; (8009d64 <rfalTransceiveTx+0x2a0>)
 8009ac8:	7d23      	ldrb	r3, [r4, #20]
 8009aca:	7d62      	ldrb	r2, [r4, #21]
{
 8009acc:	b089      	sub	sp, #36	; 0x24
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8009ace:	429a      	cmp	r2, r3
    irqs = ST25R3911_IRQ_MASK_NONE;
 8009ad0:	f04f 0100 	mov.w	r1, #0
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 8009ad4:	bf18      	it	ne
 8009ad6:	7563      	strbne	r3, [r4, #21]
    switch( gRFAL.TxRx.state )
 8009ad8:	3b0b      	subs	r3, #11
    irqs = ST25R3911_IRQ_MASK_NONE;
 8009ada:	9107      	str	r1, [sp, #28]
    switch( gRFAL.TxRx.state )
 8009adc:	2b08      	cmp	r3, #8
 8009ade:	f200 8173 	bhi.w	8009dc8 <rfalTransceiveTx+0x304>
 8009ae2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009ae6:	0009      	.short	0x0009
 8009ae8:	0013000b 	.word	0x0013000b
 8009aec:	00a2001a 	.word	0x00a2001a
 8009af0:	008400b1 	.word	0x008400b1
 8009af4:	00fb0097 	.word	0x00fb0097
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 8009af8:	230c      	movs	r3, #12
 8009afa:	7523      	strb	r3, [r4, #20]
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 8009afc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f040 8103 	bne.w	8009d0a <rfalTransceiveTx+0x246>
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8009b04:	2200      	movs	r2, #0
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 8009b06:	230d      	movs	r3, #13
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8009b08:	6422      	str	r2, [r4, #64]	; 0x40
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 8009b0a:	7523      	strb	r3, [r4, #20]
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 8009b0c:	7863      	ldrb	r3, [r4, #1]
 8009b0e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8009b12:	2b09      	cmp	r3, #9
 8009b14:	d135      	bne.n	8009b82 <rfalTransceiveTx+0xbe>
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 8009b16:	230e      	movs	r3, #14
 8009b18:	7523      	strb	r3, [r4, #20]
            rfalPrepareTransceive( );
 8009b1a:	f7ff fda7 	bl	800966c <rfalPrepareTransceive>
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 8009b1e:	2210      	movs	r2, #16
 8009b20:	4611      	mov	r1, r2
 8009b22:	2000      	movs	r0, #0
 8009b24:	f7f6 ff1c 	bl	8000960 <st25r3911CheckReg>
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8009b28:	7863      	ldrb	r3, [r4, #1]
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 8009b2a:	2800      	cmp	r0, #0
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8009b2c:	f1a3 0207 	sub.w	r2, r3, #7
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 8009b30:	bf14      	ite	ne
 8009b32:	2150      	movne	r1, #80	; 0x50
 8009b34:	2140      	moveq	r1, #64	; 0x40
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8009b36:	2a01      	cmp	r2, #1
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 8009b38:	8721      	strh	r1, [r4, #56]	; 0x38
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8009b3a:	d92a      	bls.n	8009b92 <rfalTransceiveTx+0xce>
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 8009b3c:	8c20      	ldrh	r0, [r4, #32]
 8009b3e:	1dc3      	adds	r3, r0, #7
 8009b40:	08db      	lsrs	r3, r3, #3
 8009b42:	8763      	strh	r3, [r4, #58]	; 0x3a
                st25r3911SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 8009b44:	f7f6 ffb6 	bl	8000ab4 <st25r3911SetNumTxBits>
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3911_FIFO_DEPTH );
 8009b48:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                st25r3911WriteFifo( gRFAL.TxRx.ctx.txBuf, (uint8_t)gRFAL.fifo.bytesWritten );
 8009b4a:	69e0      	ldr	r0, [r4, #28]
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3911_FIFO_DEPTH );
 8009b4c:	2b60      	cmp	r3, #96	; 0x60
 8009b4e:	bf28      	it	cs
 8009b50:	2360      	movcs	r3, #96	; 0x60
                st25r3911WriteFifo( gRFAL.TxRx.ctx.txBuf, (uint8_t)gRFAL.fifo.bytesWritten );
 8009b52:	b2d9      	uxtb	r1, r3
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3911_FIFO_DEPTH );
 8009b54:	87a3      	strh	r3, [r4, #60]	; 0x3c
                st25r3911WriteFifo( gRFAL.TxRx.ctx.txBuf, (uint8_t)gRFAL.fifo.bytesWritten );
 8009b56:	f7f7 fa6b 	bl	8001030 <st25r3911WriteFifo>
            rfalCheckEnableObsModeTx(); 
 8009b5a:	7961      	ldrb	r1, [r4, #5]
 8009b5c:	2900      	cmp	r1, #0
 8009b5e:	f040 80e3 	bne.w	8009d28 <rfalTransceiveTx+0x264>
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 8009b62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b64:	07dd      	lsls	r5, r3, #31
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITHOUT_CRC );
 8009b66:	bf4c      	ite	mi
 8009b68:	20c5      	movmi	r0, #197	; 0xc5
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITH_CRC );
 8009b6a:	20c4      	movpl	r0, #196	; 0xc4
 8009b6c:	f7f7 fae4 	bl	8001138 <st25r3911ExecuteCommand>
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8009b70:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8009b72:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8009b74:	4293      	cmp	r3, r2
 8009b76:	bf34      	ite	cc
 8009b78:	230f      	movcc	r3, #15
 8009b7a:	2311      	movcs	r3, #17
 8009b7c:	7523      	strb	r3, [r4, #20]
}
 8009b7e:	b009      	add	sp, #36	; 0x24
 8009b80:	bd30      	pop	{r4, r5, pc}
                if( st25r3911IsGPTRunning() )
 8009b82:	2204      	movs	r2, #4
 8009b84:	4611      	mov	r1, r2
 8009b86:	202b      	movs	r0, #43	; 0x2b
 8009b88:	f7f6 feea 	bl	8000960 <st25r3911CheckReg>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d1f6      	bne.n	8009b7e <rfalTransceiveTx+0xba>
 8009b90:	e7c1      	b.n	8009b16 <rfalTransceiveTx+0x52>
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8009b92:	4875      	ldr	r0, [pc, #468]	; (8009d68 <rfalTransceiveTx+0x2a4>)
 8009b94:	f8d4 23cc 	ldr.w	r2, [r4, #972]	; 0x3cc
 8009b98:	8c21      	ldrh	r1, [r4, #32]
 8009b9a:	9005      	str	r0, [sp, #20]
                gRFAL.nfcvData.nfcvOffset = 0;
 8009b9c:	2500      	movs	r5, #0
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8009b9e:	f1a3 0308 	sub.w	r3, r3, #8
 8009ba2:	fab3 f383 	clz	r3, r3
                gRFAL.nfcvData.nfcvOffset = 0;
 8009ba6:	f8a4 53b4 	strh.w	r5, [r4, #948]	; 0x3b4
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8009baa:	f500 75b8 	add.w	r5, r0, #368	; 0x170
 8009bae:	095b      	lsrs	r3, r3, #5
 8009bb0:	9503      	str	r5, [sp, #12]
 8009bb2:	f500 755e 	add.w	r5, r0, #888	; 0x378
 8009bb6:	3802      	subs	r0, #2
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	3107      	adds	r1, #7
 8009bbc:	f082 0340 	eor.w	r3, r2, #64	; 0x40
 8009bc0:	9001      	str	r0, [sp, #4]
 8009bc2:	43d2      	mvns	r2, r2
 8009bc4:	2060      	movs	r0, #96	; 0x60
 8009bc6:	9004      	str	r0, [sp, #16]
 8009bc8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009bcc:	69e0      	ldr	r0, [r4, #28]
 8009bce:	9502      	str	r5, [sp, #8]
 8009bd0:	f002 0201 	and.w	r2, r2, #1
 8009bd4:	08c9      	lsrs	r1, r1, #3
 8009bd6:	f7fa fbd1 	bl	800437c <iso15693VCDCode>
                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	f000 80a8 	beq.w	8009d30 <rfalTransceiveTx+0x26c>
 8009be0:	280d      	cmp	r0, #13
 8009be2:	f000 80a5 	beq.w	8009d30 <rfalTransceiveTx+0x26c>
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8009be6:	2313      	movs	r3, #19
                    gRFAL.TxRx.status = ret;
 8009be8:	82e0      	strh	r0, [r4, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8009bea:	7523      	strb	r3, [r4, #20]
                    break;
 8009bec:	e7c7      	b.n	8009b7e <rfalTransceiveTx+0xba>
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );
 8009bee:	2048      	movs	r0, #72	; 0x48
 8009bf0:	f7f7 fbbe 	bl	8001370 <st25r3911GetInterrupt>
 8009bf4:	9007      	str	r0, [sp, #28]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8009bf6:	9b07      	ldr	r3, [sp, #28]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0c0      	beq.n	8009b7e <rfalTransceiveTx+0xba>
            if( (irqs & ST25R3911_IRQ_MASK_TXE) != 0U )
 8009bfc:	9b07      	ldr	r3, [sp, #28]
 8009bfe:	071a      	lsls	r2, r3, #28
 8009c00:	f140 8089 	bpl.w	8009d16 <rfalTransceiveTx+0x252>
                if( rfalIsModeActiveComm( gRFAL.mode) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) ) 
 8009c04:	7863      	ldrb	r3, [r4, #1]
 8009c06:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8009c0a:	2b09      	cmp	r3, #9
 8009c0c:	f000 80ca 	beq.w	8009da4 <rfalTransceiveTx+0x2e0>
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 8009c10:	2312      	movs	r3, #18
 8009c12:	7523      	strb	r3, [r4, #20]
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 8009c14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c16:	2900      	cmp	r1, #0
 8009c18:	f000 80aa 	beq.w	8009d70 <rfalTransceiveTx+0x2ac>
            rfalCheckEnableObsModeRx();
 8009c1c:	79a1      	ldrb	r1, [r4, #6]
 8009c1e:	2900      	cmp	r1, #0
 8009c20:	f040 80bc 	bne.w	8009d9c <rfalTransceiveTx+0x2d8>
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 8009c24:	2351      	movs	r3, #81	; 0x51
 8009c26:	7523      	strb	r3, [r4, #20]
            break;
 8009c28:	e7a9      	b.n	8009b7e <rfalTransceiveTx+0xba>
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );            
 8009c2a:	2048      	movs	r0, #72	; 0x48
 8009c2c:	f7f7 fba0 	bl	8001370 <st25r3911GetInterrupt>
 8009c30:	9007      	str	r0, [sp, #28]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8009c32:	9b07      	ldr	r3, [sp, #28]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0a2      	beq.n	8009b7e <rfalTransceiveTx+0xba>
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_TXE) == 0U) )
 8009c38:	9b07      	ldr	r3, [sp, #28]
 8009c3a:	0658      	lsls	r0, r3, #25
 8009c3c:	d56f      	bpl.n	8009d1e <rfalTransceiveTx+0x25a>
 8009c3e:	9b07      	ldr	r3, [sp, #28]
 8009c40:	0719      	lsls	r1, r3, #28
 8009c42:	d46c      	bmi.n	8009d1e <rfalTransceiveTx+0x25a>
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 8009c44:	2310      	movs	r3, #16
 8009c46:	7523      	strb	r3, [r4, #20]
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8009c48:	7861      	ldrb	r1, [r4, #1]
 8009c4a:	1fcb      	subs	r3, r1, #7
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d879      	bhi.n	8009d44 <rfalTransceiveTx+0x280>
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8009c50:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8009c52:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8009c54:	8f23      	ldrh	r3, [r4, #56]	; 0x38
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8009c56:	f1a1 0108 	sub.w	r1, r1, #8
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8009c5a:	1a12      	subs	r2, r2, r0
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8009c5c:	fab1 f181 	clz	r1, r1
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8009c60:	429a      	cmp	r2, r3
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8009c62:	ea4f 1151 	mov.w	r1, r1, lsr #5
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8009c66:	bfb8      	it	lt
 8009c68:	b293      	uxthlt	r3, r2
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8009c6a:	4840      	ldr	r0, [pc, #256]	; (8009d6c <rfalTransceiveTx+0x2a8>)
 8009c6c:	9100      	str	r1, [sp, #0]
                tmp    = 0;
 8009c6e:	2100      	movs	r1, #0
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8009c70:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8009c74:	f8d4 23cc 	ldr.w	r2, [r4, #972]	; 0x3cc
                tmp    = 0;
 8009c78:	f8ad 101a 	strh.w	r1, [sp, #26]
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8009c7c:	8c21      	ldrh	r1, [r4, #32]
 8009c7e:	9003      	str	r0, [sp, #12]
 8009c80:	bf28      	it	cs
 8009c82:	f44f 7302 	movcs.w	r3, #520	; 0x208
 8009c86:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8009c8a:	f5a0 70b9 	sub.w	r0, r0, #370	; 0x172
 8009c8e:	9304      	str	r3, [sp, #16]
 8009c90:	9001      	str	r0, [sp, #4]
 8009c92:	f082 0340 	eor.w	r3, r2, #64	; 0x40
 8009c96:	f10d 001a 	add.w	r0, sp, #26
 8009c9a:	43d2      	mvns	r2, r2
 8009c9c:	3107      	adds	r1, #7
 8009c9e:	9005      	str	r0, [sp, #20]
 8009ca0:	9502      	str	r5, [sp, #8]
 8009ca2:	69e0      	ldr	r0, [r4, #28]
 8009ca4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009ca8:	f002 0201 	and.w	r2, r2, #1
 8009cac:	08c9      	lsrs	r1, r1, #3
 8009cae:	f7fa fb65 	bl	800437c <iso15693VCDCode>
                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 8009cb2:	b108      	cbz	r0, 8009cb8 <rfalTransceiveTx+0x1f4>
 8009cb4:	280d      	cmp	r0, #13
 8009cb6:	d196      	bne.n	8009be6 <rfalTransceiveTx+0x122>
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)tmp );
 8009cb8:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8009cbc:	482b      	ldr	r0, [pc, #172]	; (8009d6c <rfalTransceiveTx+0x2a8>)
 8009cbe:	f7f7 f9b7 	bl	8001030 <st25r3911WriteFifo>
            gRFAL.fifo.bytesWritten += tmp;
 8009cc2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8009cc4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8009cc8:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
            gRFAL.fifo.bytesWritten += tmp;
 8009cca:	440b      	add	r3, r1
 8009ccc:	b29b      	uxth	r3, r3
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	bf8c      	ite	hi
 8009cd2:	220f      	movhi	r2, #15
 8009cd4:	2211      	movls	r2, #17
            gRFAL.fifo.bytesWritten += tmp;
 8009cd6:	87a3      	strh	r3, [r4, #60]	; 0x3c
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8009cd8:	7522      	strb	r2, [r4, #20]
            break;
 8009cda:	e750      	b.n	8009b7e <rfalTransceiveTx+0xba>
            if( gRFAL.TxRx.status == ERR_BUSY )
 8009cdc:	8ae3      	ldrh	r3, [r4, #22]
 8009cde:	2b02      	cmp	r3, #2
                gRFAL.TxRx.status = ERR_SYSTEM;
 8009ce0:	bf04      	itt	eq
 8009ce2:	2308      	moveq	r3, #8
 8009ce4:	82e3      	strheq	r3, [r4, #22]
            rfalCheckDisableObsMode();
 8009ce6:	79a3      	ldrb	r3, [r4, #6]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d152      	bne.n	8009d92 <rfalTransceiveTx+0x2ce>
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 8009cec:	21e0      	movs	r1, #224	; 0xe0
 8009cee:	2005      	movs	r0, #5
 8009cf0:	f7f7 f81e 	bl	8000d30 <st25r3911ClrRegisterBits>
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 8009cf4:	2110      	movs	r1, #16
 8009cf6:	200b      	movs	r0, #11
 8009cf8:	f7f7 f85c 	bl	8000db4 <st25r3911SetRegisterBits>
    if( gRFAL.callbacks.postTxRx != NULL )
 8009cfc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009cfe:	b103      	cbz	r3, 8009d02 <rfalTransceiveTx+0x23e>
        gRFAL.callbacks.postTxRx();
 8009d00:	4798      	blx	r3
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 8009d02:	2300      	movs	r3, #0
 8009d04:	7523      	strb	r3, [r4, #20]
}
 8009d06:	b009      	add	sp, #36	; 0x24
 8009d08:	bd30      	pop	{r4, r5, pc}
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 8009d0a:	f7f7 fbd3 	bl	80014b4 <timerIsExpired>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f47f aef8 	bne.w	8009b04 <rfalTransceiveTx+0x40>
 8009d14:	e733      	b.n	8009b7e <rfalTransceiveTx+0xba>
            else if( (irqs & ST25R3911_IRQ_MASK_FWL) != 0U )
 8009d16:	9b07      	ldr	r3, [sp, #28]
 8009d18:	065b      	lsls	r3, r3, #25
 8009d1a:	f53f af30 	bmi.w	8009b7e <rfalTransceiveTx+0xba>
                gRFAL.TxRx.status = ERR_IO;
 8009d1e:	2203      	movs	r2, #3
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8009d20:	2313      	movs	r3, #19
                gRFAL.TxRx.status = ERR_IO;
 8009d22:	82e2      	strh	r2, [r4, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8009d24:	7523      	strb	r3, [r4, #20]
                break;
 8009d26:	e72a      	b.n	8009b7e <rfalTransceiveTx+0xba>
            rfalCheckEnableObsModeTx(); 
 8009d28:	2001      	movs	r0, #1
 8009d2a:	f7f6 ff83 	bl	8000c34 <st25r3911WriteTestRegister>
 8009d2e:	e718      	b.n	8009b62 <rfalTransceiveTx+0x9e>
                st25r3911SetNumTxBits( rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 8009d30:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
 8009d32:	00c0      	lsls	r0, r0, #3
 8009d34:	f7f6 febe 	bl	8000ab4 <st25r3911SetNumTxBits>
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)gRFAL.fifo.bytesWritten );
 8009d38:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8009d3c:	480b      	ldr	r0, [pc, #44]	; (8009d6c <rfalTransceiveTx+0x2a8>)
 8009d3e:	f7f7 f977 	bl	8001030 <st25r3911WriteFifo>
 8009d42:	e70a      	b.n	8009b5a <rfalTransceiveTx+0x96>
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 8009d44:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8009d46:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8009d48:	8f25      	ldrh	r5, [r4, #56]	; 0x38
                st25r3911WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], (uint8_t)tmp );
 8009d4a:	69e0      	ldr	r0, [r4, #28]
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 8009d4c:	1a53      	subs	r3, r2, r1
 8009d4e:	42ab      	cmp	r3, r5
 8009d50:	bfa8      	it	ge
 8009d52:	462b      	movge	r3, r5
                st25r3911WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], (uint8_t)tmp );
 8009d54:	4408      	add	r0, r1
 8009d56:	b2d9      	uxtb	r1, r3
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 8009d58:	f8ad 301a 	strh.w	r3, [sp, #26]
                st25r3911WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], (uint8_t)tmp );
 8009d5c:	f7f7 f968 	bl	8001030 <st25r3911WriteFifo>
 8009d60:	e7af      	b.n	8009cc2 <rfalTransceiveTx+0x1fe>
 8009d62:	bf00      	nop
 8009d64:	20000cc8 	.word	0x20000cc8
 8009d68:	20000d04 	.word	0x20000d04
 8009d6c:	20000e74 	.word	0x20000e74
                rfalCheckDisableObsMode();
 8009d70:	79a3      	ldrb	r3, [r4, #6]
 8009d72:	bb2b      	cbnz	r3, 8009dc0 <rfalTransceiveTx+0x2fc>
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 8009d74:	21e0      	movs	r1, #224	; 0xe0
 8009d76:	2005      	movs	r0, #5
 8009d78:	f7f6 ffda 	bl	8000d30 <st25r3911ClrRegisterBits>
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 8009d7c:	2110      	movs	r1, #16
 8009d7e:	200b      	movs	r0, #11
 8009d80:	f7f7 f818 	bl	8000db4 <st25r3911SetRegisterBits>
    if( gRFAL.callbacks.postTxRx != NULL )
 8009d84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009d86:	b103      	cbz	r3, 8009d8a <rfalTransceiveTx+0x2c6>
        gRFAL.callbacks.postTxRx();
 8009d88:	4798      	blx	r3
                gRFAL.TxRx.status = ERR_NONE;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	82e3      	strh	r3, [r4, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 8009d8e:	7523      	strb	r3, [r4, #20]
                break;
 8009d90:	e6f5      	b.n	8009b7e <rfalTransceiveTx+0xba>
            rfalCheckDisableObsMode();
 8009d92:	2100      	movs	r1, #0
 8009d94:	2001      	movs	r0, #1
 8009d96:	f7f6 ff4d 	bl	8000c34 <st25r3911WriteTestRegister>
 8009d9a:	e7a7      	b.n	8009cec <rfalTransceiveTx+0x228>
            rfalCheckEnableObsModeRx();
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	f7f6 ff49 	bl	8000c34 <st25r3911WriteTestRegister>
 8009da2:	e73f      	b.n	8009c24 <rfalTransceiveTx+0x160>
                if( rfalIsModeActiveComm( gRFAL.mode) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) ) 
 8009da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009da6:	1e5a      	subs	r2, r3, #1
 8009da8:	3203      	adds	r2, #3
 8009daa:	f63f af31 	bhi.w	8009c10 <rfalTransceiveTx+0x14c>
                    rfalTimerStart( gRFAL.tmr.FWT, rfalConv1fcToMs( gRFAL.TxRx.ctx.fwt ) );
 8009dae:	4a09      	ldr	r2, [pc, #36]	; (8009dd4 <rfalTransceiveTx+0x310>)
 8009db0:	fba2 2303 	umull	r2, r3, r2, r3
 8009db4:	f3c3 300f 	ubfx	r0, r3, #12, #16
 8009db8:	f7f7 fb76 	bl	80014a8 <timerCalculateTimer>
 8009dbc:	6460      	str	r0, [r4, #68]	; 0x44
 8009dbe:	e727      	b.n	8009c10 <rfalTransceiveTx+0x14c>
                rfalCheckDisableObsMode();
 8009dc0:	2001      	movs	r0, #1
 8009dc2:	f7f6 ff37 	bl	8000c34 <st25r3911WriteTestRegister>
 8009dc6:	e7d5      	b.n	8009d74 <rfalTransceiveTx+0x2b0>
            gRFAL.TxRx.status = ERR_SYSTEM;
 8009dc8:	2208      	movs	r2, #8
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8009dca:	2313      	movs	r3, #19
            gRFAL.TxRx.status = ERR_SYSTEM;
 8009dcc:	82e2      	strh	r2, [r4, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8009dce:	7523      	strb	r3, [r4, #20]
}
 8009dd0:	e6d5      	b.n	8009b7e <rfalTransceiveTx+0xba>
 8009dd2:	bf00      	nop
 8009dd4:	4d542005 	.word	0x4d542005

08009dd8 <rfalErrorHandling>:
{
 8009dd8:	b530      	push	{r4, r5, lr}
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8009dda:	4c43      	ldr	r4, [pc, #268]	; (8009ee8 <rfalErrorHandling+0x110>)
 8009ddc:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
{
 8009de0:	b083      	sub	sp, #12
    uint8_t reEnRx[] = { ST25R3911_CMD_CLEAR_FIFO, ST25R3911_CMD_UNMASK_RECEIVE_DATA };
 8009de2:	f24d 12c2 	movw	r2, #53698	; 0xd1c2
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8009de6:	2bff      	cmp	r3, #255	; 0xff
    uint8_t reEnRx[] = { ST25R3911_CMD_CLEAR_FIFO, ST25R3911_CMD_UNMASK_RECEIVE_DATA };
 8009de8:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8009dec:	d029      	beq.n	8009e42 <rfalErrorHandling+0x6a>
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 8009dee:	79e2      	ldrb	r2, [r4, #7]
/*******************************************************************************/
static uint8_t rfalFIFOStatusGetNumBytes( void )
{
    rfalFIFOStatusUpdate();
    
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 8009df0:	f894 503e 	ldrb.w	r5, [r4, #62]	; 0x3e
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 8009df4:	2a02      	cmp	r2, #2
 8009df6:	d03a      	beq.n	8009e6e <rfalErrorHandling+0x96>
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 8009df8:	7863      	ldrb	r3, [r4, #1]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d001      	beq.n	8009e02 <rfalErrorHandling+0x2a>
}
 8009dfe:	b003      	add	sp, #12
 8009e00:	bd30      	pop	{r4, r5, pc}
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 8009e02:	8ae3      	ldrh	r3, [r4, #22]
 8009e04:	2b1b      	cmp	r3, #27
 8009e06:	d001      	beq.n	8009e0c <rfalErrorHandling+0x34>
 8009e08:	2b15      	cmp	r3, #21
 8009e0a:	d1f8      	bne.n	8009dfe <rfalErrorHandling+0x26>
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8009e0c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8009e10:	2bff      	cmp	r3, #255	; 0xff
 8009e12:	d058      	beq.n	8009ec6 <rfalErrorHandling+0xee>
            if( rfalFIFOStatusIsIncompleteByte() && (fifoBytesToRead == RFAL_NFC_RX_INCOMPLETE_LEN) )
 8009e14:	f013 0f1e 	tst.w	r3, #30
 8009e18:	d0f1      	beq.n	8009dfe <rfalErrorHandling+0x26>
 8009e1a:	2d01      	cmp	r5, #1
 8009e1c:	d1ef      	bne.n	8009dfe <rfalErrorHandling+0x26>
                st25r3911ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 8009e1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009e20:	4629      	mov	r1, r5
 8009e22:	f7f7 f947 	bl	80010b4 <st25r3911ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 8009e26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009e28:	b132      	cbz	r2, 8009e38 <rfalErrorHandling+0x60>
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8009e2a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8009e2e:	2bff      	cmp	r3, #255	; 0xff
 8009e30:	d051      	beq.n	8009ed6 <rfalErrorHandling+0xfe>
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 8009e32:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8009e36:	8013      	strh	r3, [r2, #0]
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 8009e38:	2228      	movs	r2, #40	; 0x28
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8009e3a:	235a      	movs	r3, #90	; 0x5a
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 8009e3c:	82e2      	strh	r2, [r4, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8009e3e:	7523      	strb	r3, [r4, #20]
 8009e40:	e7dd      	b.n	8009dfe <rfalErrorHandling+0x26>
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 8009e42:	2202      	movs	r2, #2
 8009e44:	f104 013e 	add.w	r1, r4, #62	; 0x3e
 8009e48:	201a      	movs	r0, #26
 8009e4a:	f7f6 feb1 	bl	8000bb0 <st25r3911ReadMultipleRegisters>
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 8009e4e:	79e2      	ldrb	r2, [r4, #7]
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 8009e50:	f894 503e 	ldrb.w	r5, [r4, #62]	; 0x3e
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 8009e54:	2a02      	cmp	r2, #2
 8009e56:	d1cf      	bne.n	8009df8 <rfalErrorHandling+0x20>
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8009e58:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8009e5c:	2bff      	cmp	r3, #255	; 0xff
 8009e5e:	d106      	bne.n	8009e6e <rfalErrorHandling+0x96>
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 8009e60:	f104 013e 	add.w	r1, r4, #62	; 0x3e
 8009e64:	201a      	movs	r0, #26
 8009e66:	f7f6 fea3 	bl	8000bb0 <st25r3911ReadMultipleRegisters>

/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
    rfalFIFOStatusUpdate();
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 8009e6a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
        rxHasIncParError = ( rfalFIFOStatusIsIncompleteByte() ? true : rfalFIFOStatusIsMissingPar() );   /* MISRA 13.5 */
 8009e6e:	f013 0f1e 	tst.w	r3, #30
 8009e72:	d01d      	beq.n	8009eb0 <rfalErrorHandling+0xd8>
        if( (fifoBytesToRead > 0U) && rxHasIncParError)
 8009e74:	b315      	cbz	r5, 8009ebc <rfalErrorHandling+0xe4>
            fifoBytesToRead--;
 8009e76:	3d01      	subs	r5, #1
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 8009e78:	b2ed      	uxtb	r5, r5
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8009e7e:	4415      	add	r5, r2
 8009e80:	2d03      	cmp	r5, #3
 8009e82:	dcbc      	bgt.n	8009dfe <rfalErrorHandling+0x26>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 8009e84:	8ae2      	ldrh	r2, [r4, #22]
 8009e86:	2a1d      	cmp	r2, #29
 8009e88:	d81a      	bhi.n	8009ec0 <rfalErrorHandling+0xe8>
 8009e8a:	4918      	ldr	r1, [pc, #96]	; (8009eec <rfalErrorHandling+0x114>)
 8009e8c:	fa21 f202 	lsr.w	r2, r1, r2
 8009e90:	07d2      	lsls	r2, r2, #31
 8009e92:	d515      	bpl.n	8009ec0 <rfalErrorHandling+0xe8>
            st25r3911ExecuteCommands( reEnRx, sizeof(reEnRx) );
 8009e94:	2102      	movs	r1, #2
 8009e96:	a801      	add	r0, sp, #4
 8009e98:	f7f7 f98e 	bl	80011b8 <st25r3911ExecuteCommands>
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 8009e9c:	20ff      	movs	r0, #255	; 0xff
            gRFAL.fifo.bytesTotal = 0;
 8009e9e:	2100      	movs	r1, #0
            gRFAL.TxRx.status = ERR_BUSY;
 8009ea0:	2202      	movs	r2, #2
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8009ea2:	2353      	movs	r3, #83	; 0x53
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 8009ea4:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
            gRFAL.fifo.bytesTotal = 0;
 8009ea8:	8761      	strh	r1, [r4, #58]	; 0x3a
            gRFAL.TxRx.status = ERR_BUSY;
 8009eaa:	82e2      	strh	r2, [r4, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8009eac:	7523      	strb	r3, [r4, #20]
        return;
 8009eae:	e7a6      	b.n	8009dfe <rfalErrorHandling+0x26>
        rxHasIncParError = ( rfalFIFOStatusIsIncompleteByte() ? true : rfalFIFOStatusIsMissingPar() );   /* MISRA 13.5 */
 8009eb0:	f013 0301 	ands.w	r3, r3, #1
 8009eb4:	d0e2      	beq.n	8009e7c <rfalErrorHandling+0xa4>
        if( (fifoBytesToRead > 0U) && rxHasIncParError)
 8009eb6:	2d00      	cmp	r5, #0
 8009eb8:	d1dd      	bne.n	8009e76 <rfalErrorHandling+0x9e>
 8009eba:	e7df      	b.n	8009e7c <rfalErrorHandling+0xa4>
        rxHasIncParError = ( rfalFIFOStatusIsIncompleteByte() ? true : rfalFIFOStatusIsMissingPar() );   /* MISRA 13.5 */
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e7dd      	b.n	8009e7c <rfalErrorHandling+0xa4>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d09c      	beq.n	8009dfe <rfalErrorHandling+0x26>
 8009ec4:	e7e6      	b.n	8009e94 <rfalErrorHandling+0xbc>
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 8009ec6:	490a      	ldr	r1, [pc, #40]	; (8009ef0 <rfalErrorHandling+0x118>)
 8009ec8:	2202      	movs	r2, #2
 8009eca:	201a      	movs	r0, #26
 8009ecc:	f7f6 fe70 	bl	8000bb0 <st25r3911ReadMultipleRegisters>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 8009ed0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
}
 8009ed4:	e79e      	b.n	8009e14 <rfalErrorHandling+0x3c>
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	4905      	ldr	r1, [pc, #20]	; (8009ef0 <rfalErrorHandling+0x118>)
 8009eda:	201a      	movs	r0, #26
 8009edc:	f7f6 fe68 	bl	8000bb0 <st25r3911ReadMultipleRegisters>
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 8009ee0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
    rfalFIFOStatusUpdate();
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb) >> ST25R3911_REG_FIFO_RX_STATUS2_shift_fifo_lb);
 8009ee2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
}
 8009ee6:	e7a4      	b.n	8009e32 <rfalErrorHandling+0x5a>
 8009ee8:	20000cc8 	.word	0x20000cc8
 8009eec:	28200200 	.word	0x28200200
 8009ef0:	20000d06 	.word	0x20000d06

08009ef4 <rfalTransceiveRx>:
{
 8009ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8009ef8:	4ca0      	ldr	r4, [pc, #640]	; (800a17c <rfalTransceiveRx+0x288>)
 8009efa:	7d23      	ldrb	r3, [r4, #20]
 8009efc:	7d62      	ldrb	r2, [r4, #21]
{
 8009efe:	b086      	sub	sp, #24
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8009f00:	429a      	cmp	r2, r3
    irqs = ST25R3911_IRQ_MASK_NONE;
 8009f02:	f04f 0100 	mov.w	r1, #0
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 8009f06:	bf18      	it	ne
 8009f08:	7563      	strbne	r3, [r4, #21]
    switch( gRFAL.TxRx.state )
 8009f0a:	3b51      	subs	r3, #81	; 0x51
    irqs = ST25R3911_IRQ_MASK_NONE;
 8009f0c:	9105      	str	r1, [sp, #20]
    switch( gRFAL.TxRx.state )
 8009f0e:	2b09      	cmp	r3, #9
 8009f10:	f200 8288 	bhi.w	800a424 <rfalTransceiveRx+0x530>
 8009f14:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009f18:	00c200b3 	.word	0x00c200b3
 8009f1c:	001000d7 	.word	0x001000d7
 8009f20:	001f0101 	.word	0x001f0101
 8009f24:	00f20055 	.word	0x00f20055
 8009f28:	0136009e 	.word	0x0136009e
                    rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8009f2c:	200a      	movs	r0, #10
 8009f2e:	f7f7 fabb 	bl	80014a8 <timerCalculateTimer>
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8009f32:	2354      	movs	r3, #84	; 0x54
                    rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8009f34:	64a0      	str	r0, [r4, #72]	; 0x48
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8009f36:	7523      	strb	r3, [r4, #20]
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_EOF) );
 8009f38:	f44f 6005 	mov.w	r0, #2128	; 0x850
 8009f3c:	f7f7 fa18 	bl	8001370 <st25r3911GetInterrupt>
 8009f40:	9005      	str	r0, [sp, #20]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8009f42:	9b05      	ldr	r3, [sp, #20]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 81ca 	beq.w	800a2de <rfalTransceiveRx+0x3ea>
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 8009f4a:	9b05      	ldr	r3, [sp, #20]
 8009f4c:	0659      	lsls	r1, r3, #25
 8009f4e:	f100 8164 	bmi.w	800a21a <rfalTransceiveRx+0x326>
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 8009f52:	2356      	movs	r3, #86	; 0x56
 8009f54:	7523      	strb	r3, [r4, #20]
            irqs |= st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR1 | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_COL) );
 8009f56:	488a      	ldr	r0, [pc, #552]	; (800a180 <rfalTransceiveRx+0x28c>)
 8009f58:	f7f7 fa0a 	bl	8001370 <st25r3911GetInterrupt>
 8009f5c:	9b05      	ldr	r3, [sp, #20]
 8009f5e:	4318      	orrs	r0, r3
 8009f60:	9005      	str	r0, [sp, #20]
            if( (irqs & ST25R3911_IRQ_MASK_ERR1) != 0U )
 8009f62:	9b05      	ldr	r3, [sp, #20]
 8009f64:	02db      	lsls	r3, r3, #11
 8009f66:	f100 8135 	bmi.w	800a1d4 <rfalTransceiveRx+0x2e0>
            else if( ((irqs & ST25R3911_IRQ_MASK_ERR2) != 0U) && (gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO) )
 8009f6a:	9b05      	ldr	r3, [sp, #20]
 8009f6c:	029f      	lsls	r7, r3, #10
 8009f6e:	f100 812d 	bmi.w	800a1cc <rfalTransceiveRx+0x2d8>
            else if( (irqs & ST25R3911_IRQ_MASK_PAR) != 0U )
 8009f72:	9b05      	ldr	r3, [sp, #20]
 8009f74:	025e      	lsls	r6, r3, #9
 8009f76:	f100 81c2 	bmi.w	800a2fe <rfalTransceiveRx+0x40a>
            else if( (irqs & ST25R3911_IRQ_MASK_CRC) != 0U )
 8009f7a:	9b05      	ldr	r3, [sp, #20]
 8009f7c:	021d      	lsls	r5, r3, #8
 8009f7e:	f100 8153 	bmi.w	800a228 <rfalTransceiveRx+0x334>
            else if( (irqs & ST25R3911_IRQ_MASK_COL) != 0U )
 8009f82:	9b05      	ldr	r3, [sp, #20]
 8009f84:	0758      	lsls	r0, r3, #29
 8009f86:	f100 81fa 	bmi.w	800a37e <rfalTransceiveRx+0x48a>
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 8009f8a:	9b05      	ldr	r3, [sp, #20]
 8009f8c:	0519      	lsls	r1, r3, #20
 8009f8e:	d503      	bpl.n	8009f98 <rfalTransceiveRx+0xa4>
 8009f90:	9b05      	ldr	r3, [sp, #20]
 8009f92:	06da      	lsls	r2, r3, #27
 8009f94:	f140 8092 	bpl.w	800a0bc <rfalTransceiveRx+0x1c8>
            else if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) || (gRFAL.TxRx.rxse) )
 8009f98:	9b05      	ldr	r3, [sp, #20]
 8009f9a:	06db      	lsls	r3, r3, #27
 8009f9c:	d403      	bmi.n	8009fa6 <rfalTransceiveRx+0xb2>
 8009f9e:	7e23      	ldrb	r3, [r4, #24]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 81ae 	beq.w	800a302 <rfalTransceiveRx+0x40e>
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8009fa6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8009faa:	2bff      	cmp	r3, #255	; 0xff
 8009fac:	f000 821e 	beq.w	800a3ec <rfalTransceiveRx+0x4f8>
                if( rfalFIFOStatusIsIncompleteByte() )
 8009fb0:	f013 0f1e 	tst.w	r3, #30
 8009fb4:	f000 81ea 	beq.w	800a38c <rfalTransceiveRx+0x498>
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 8009fb8:	2228      	movs	r2, #40	; 0x28
 8009fba:	82e2      	strh	r2, [r4, #22]
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 8009fbc:	2257      	movs	r2, #87	; 0x57
 8009fbe:	7522      	strb	r2, [r4, #20]
 8009fc0:	e001      	b.n	8009fc6 <rfalTransceiveRx+0xd2>
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8009fc2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8009fc6:	2bff      	cmp	r3, #255	; 0xff
 8009fc8:	f000 81b5 	beq.w	800a336 <rfalTransceiveRx+0x442>
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 8009fcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 8009fce:	f894 503e 	ldrb.w	r5, [r4, #62]	; 0x3e
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 8009fd2:	079e      	lsls	r6, r3, #30
 8009fd4:	f140 8160 	bpl.w	800a298 <rfalTransceiveRx+0x3a4>
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8009fd8:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8009fda:	1953      	adds	r3, r2, r5
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8009fdc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8009fde:	b29b      	uxth	r3, r3
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8009fe0:	3207      	adds	r2, #7
 8009fe2:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8009fe6:	8763      	strh	r3, [r4, #58]	; 0x3a
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8009fe8:	ea4f 01d2 	mov.w	r1, r2, lsr #3
                tmp = (uint8_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 8009fec:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8009fee:	d905      	bls.n	8009ffc <rfalTransceiveRx+0x108>
                gRFAL.TxRx.status = ERR_NOMEM;
 8009ff0:	2001      	movs	r0, #1
                tmp = (uint8_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 8009ff2:	1ac9      	subs	r1, r1, r3
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8009ff4:	225a      	movs	r2, #90	; 0x5a
                tmp = (uint8_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 8009ff6:	b2cd      	uxtb	r5, r1
                gRFAL.TxRx.status = ERR_NOMEM;
 8009ff8:	82e0      	strh	r0, [r4, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8009ffa:	7522      	strb	r2, [r4, #20]
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 8009ffc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ffe:	4629      	mov	r1, r5
 800a000:	4418      	add	r0, r3
 800a002:	f7f7 f857 	bl	80010b4 <st25r3911ReadFifo>
            if( (gRFAL.TxRx.ctx.rxRcvdLen != NULL) )
 800a006:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a008:	b19a      	cbz	r2, 800a032 <rfalTransceiveRx+0x13e>
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800a00a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800a00c:	00db      	lsls	r3, r3, #3
 800a00e:	b29b      	uxth	r3, r3
 800a010:	8013      	strh	r3, [r2, #0]
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800a012:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 800a016:	29ff      	cmp	r1, #255	; 0xff
 800a018:	f000 819c 	beq.w	800a354 <rfalTransceiveRx+0x460>
                if( rfalFIFOStatusIsIncompleteByte() )
 800a01c:	f011 0f1e 	tst.w	r1, #30
 800a020:	d007      	beq.n	800a032 <rfalTransceiveRx+0x13e>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb) >> ST25R3911_REG_FIFO_RX_STATUS2_shift_fifo_lb);
 800a022:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800a026:	f3c1 0142 	ubfx	r1, r1, #1, #3
 800a02a:	f1c1 0108 	rsb	r1, r1, #8
 800a02e:	1a5b      	subs	r3, r3, r1
 800a030:	8013      	strh	r3, [r2, #0]
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800a032:	7862      	ldrb	r2, [r4, #1]
 800a034:	1fd3      	subs	r3, r2, #7
 800a036:	2b01      	cmp	r3, #1
 800a038:	f240 80f8 	bls.w	800a22c <rfalTransceiveRx+0x338>
            if( gRFAL.TxRx.status != ERR_BUSY )
 800a03c:	8ae5      	ldrh	r5, [r4, #22]
 800a03e:	2d02      	cmp	r5, #2
 800a040:	f040 80c1 	bne.w	800a1c6 <rfalTransceiveRx+0x2d2>
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 800a044:	7863      	ldrb	r3, [r4, #1]
 800a046:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800a04a:	2b09      	cmp	r3, #9
 800a04c:	f000 8179 	beq.w	800a342 <rfalTransceiveRx+0x44e>
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800a050:	2359      	movs	r3, #89	; 0x59
 800a052:	7523      	strb	r3, [r4, #20]
            rfalCheckDisableObsMode();
 800a054:	79a3      	ldrb	r3, [r4, #6]
 800a056:	2b00      	cmp	r3, #0
 800a058:	f040 8119 	bne.w	800a28e <rfalTransceiveRx+0x39a>
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 800a05c:	21e0      	movs	r1, #224	; 0xe0
 800a05e:	2005      	movs	r0, #5
 800a060:	f7f6 fe66 	bl	8000d30 <st25r3911ClrRegisterBits>
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800a064:	2110      	movs	r1, #16
 800a066:	200b      	movs	r0, #11
 800a068:	f7f6 fea4 	bl	8000db4 <st25r3911SetRegisterBits>
    if( gRFAL.callbacks.postTxRx != NULL )
 800a06c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a06e:	b103      	cbz	r3, 800a072 <rfalTransceiveRx+0x17e>
        gRFAL.callbacks.postTxRx();
 800a070:	4798      	blx	r3
            gRFAL.TxRx.status = ERR_NONE;
 800a072:	2300      	movs	r3, #0
 800a074:	82e3      	strh	r3, [r4, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 800a076:	7523      	strb	r3, [r4, #20]
}
 800a078:	b006      	add	sp, #24
 800a07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800a07e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            gRFAL.fifo.bytesTotal     = 0;    // Total bytes in FIFO will now be from Rx
 800a080:	2200      	movs	r2, #0
 800a082:	f8c4 203a 	str.w	r2, [r4, #58]	; 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800a086:	b103      	cbz	r3, 800a08a <rfalTransceiveRx+0x196>
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 800a088:	801a      	strh	r2, [r3, #0]
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 800a08a:	7863      	ldrb	r3, [r4, #1]
 800a08c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800a090:	2b09      	cmp	r3, #9
 800a092:	bf0c      	ite	eq
 800a094:	2352      	moveq	r3, #82	; 0x52
 800a096:	2353      	movne	r3, #83	; 0x53
 800a098:	7523      	strb	r3, [r4, #20]
            break;
 800a09a:	e7ed      	b.n	800a078 <rfalTransceiveRx+0x184>
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_NRE) );
 800a09c:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800a0a0:	f7f7 f966 	bl	8001370 <st25r3911GetInterrupt>
 800a0a4:	9005      	str	r0, [sp, #20]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800a0a6:	9b05      	ldr	r3, [sp, #20]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d0e5      	beq.n	800a078 <rfalTransceiveRx+0x184>
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 800a0ac:	9b05      	ldr	r3, [sp, #20]
 800a0ae:	04d8      	lsls	r0, r3, #19
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800a0b0:	bf44      	itt	mi
 800a0b2:	2353      	movmi	r3, #83	; 0x53
 800a0b4:	7523      	strbmi	r3, [r4, #20]
            if( (irqs & ST25R3911_IRQ_MASK_NRE) != 0U )
 800a0b6:	9b05      	ldr	r3, [sp, #20]
 800a0b8:	0459      	lsls	r1, r3, #17
 800a0ba:	d5dd      	bpl.n	800a078 <rfalTransceiveRx+0x184>
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800a0bc:	2225      	movs	r2, #37	; 0x25
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a0be:	235a      	movs	r3, #90	; 0x5a
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800a0c0:	82e2      	strh	r2, [r4, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a0c2:	7523      	strb	r3, [r4, #20]
                 break;
 800a0c4:	e7d8      	b.n	800a078 <rfalTransceiveRx+0x184>
            if( rfalIsModeActiveComm( gRFAL.mode ) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800a0c6:	7863      	ldrb	r3, [r4, #1]
 800a0c8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800a0cc:	2b09      	cmp	r3, #9
 800a0ce:	f000 808a 	beq.w	800a1e6 <rfalTransceiveRx+0x2f2>
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_NRE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_RXE) );
 800a0d2:	f644 0030 	movw	r0, #18480	; 0x4830
 800a0d6:	f7f7 f94b 	bl	8001370 <st25r3911GetInterrupt>
 800a0da:	9005      	str	r0, [sp, #20]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800a0dc:	9b05      	ldr	r3, [sp, #20]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d0ca      	beq.n	800a078 <rfalTransceiveRx+0x184>
            if( ((irqs & ST25R3911_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 800a0e2:	9b05      	ldr	r3, [sp, #20]
 800a0e4:	045a      	lsls	r2, r3, #17
 800a0e6:	f140 80e8 	bpl.w	800a2ba <rfalTransceiveRx+0x3c6>
 800a0ea:	9b05      	ldr	r3, [sp, #20]
 800a0ec:	069b      	lsls	r3, r3, #26
 800a0ee:	f100 80e4 	bmi.w	800a2ba <rfalTransceiveRx+0x3c6>
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800a0f2:	2204      	movs	r2, #4
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a0f4:	235a      	movs	r3, #90	; 0x5a
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800a0f6:	82e2      	strh	r2, [r4, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a0f8:	7523      	strb	r3, [r4, #20]
                    break;
 800a0fa:	e7bd      	b.n	800a078 <rfalTransceiveRx+0x184>
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC) );
 800a0fc:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800a100:	f7f7 f936 	bl	8001370 <st25r3911GetInterrupt>
 800a104:	9005      	str	r0, [sp, #20]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800a106:	9b05      	ldr	r3, [sp, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d0b5      	beq.n	800a078 <rfalTransceiveRx+0x184>
            if( (irqs & ST25R3911_IRQ_MASK_CAT) != 0U )
 800a10c:	9b05      	ldr	r3, [sp, #20]
 800a10e:	059a      	lsls	r2, r3, #22
 800a110:	f140 8109 	bpl.w	800a326 <rfalTransceiveRx+0x432>
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800a114:	2359      	movs	r3, #89	; 0x59
 800a116:	7523      	strb	r3, [r4, #20]
 800a118:	e7ae      	b.n	800a078 <rfalTransceiveRx+0x184>
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800a11a:	200a      	movs	r0, #10
 800a11c:	f7f7 f9c4 	bl	80014a8 <timerCalculateTimer>
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800a120:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800a124:	64a0      	str	r0, [r4, #72]	; 0x48
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800a126:	2bff      	cmp	r3, #255	; 0xff
 800a128:	f000 810e 	beq.w	800a348 <rfalTransceiveRx+0x454>
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 800a12c:	f894 503e 	ldrb.w	r5, [r4, #62]	; 0x3e
            gRFAL.fifo.bytesTotal += tmp;
 800a130:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800a132:	8d22      	ldrh	r2, [r4, #40]	; 0x28
            gRFAL.fifo.bytesTotal += tmp;
 800a134:	442b      	add	r3, r5
 800a136:	b29b      	uxth	r3, r3
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800a138:	3207      	adds	r2, #7
 800a13a:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
            gRFAL.fifo.bytesTotal += tmp;
 800a13e:	8763      	strh	r3, [r4, #58]	; 0x3a
 800a140:	b2ae      	uxth	r6, r5
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800a142:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800a144:	ea4f 01d2 	mov.w	r1, r2, lsr #3
 800a148:	d959      	bls.n	800a1fe <rfalTransceiveRx+0x30a>
 800a14a:	b2df      	uxtb	r7, r3
 800a14c:	fa5f f881 	uxtb.w	r8, r1
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800a150:	6a60      	ldr	r0, [r4, #36]	; 0x24
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800a152:	eba8 0607 	sub.w	r6, r8, r7
 800a156:	b2f6      	uxtb	r6, r6
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800a158:	4418      	add	r0, r3
 800a15a:	4631      	mov	r1, r6
 800a15c:	f7f6 ffaa 	bl	80010b4 <st25r3911ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800a160:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
            if( aux < tmp )
 800a162:	42ae      	cmp	r6, r5
            gRFAL.fifo.bytesWritten += aux;
 800a164:	4433      	add	r3, r6
 800a166:	87a3      	strh	r3, [r4, #60]	; 0x3c
            if( aux < tmp )
 800a168:	d251      	bcs.n	800a20e <rfalTransceiveRx+0x31a>
                st25r3911ReadFifo( NULL, (tmp - aux) );
 800a16a:	1979      	adds	r1, r7, r5
 800a16c:	eba1 0108 	sub.w	r1, r1, r8
 800a170:	b2c9      	uxtb	r1, r1
 800a172:	2000      	movs	r0, #0
 800a174:	f7f6 ff9e 	bl	80010b4 <st25r3911ReadFifo>
 800a178:	e049      	b.n	800a20e <rfalTransceiveRx+0x31a>
 800a17a:	bf00      	nop
 800a17c:	20000cc8 	.word	0x20000cc8
 800a180:	00f00004 	.word	0x00f00004
            rfalCheckDisableObsMode();
 800a184:	79a3      	ldrb	r3, [r4, #6]
 800a186:	2b00      	cmp	r3, #0
 800a188:	f040 80b4 	bne.w	800a2f4 <rfalTransceiveRx+0x400>
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 800a18c:	21e0      	movs	r1, #224	; 0xe0
 800a18e:	2005      	movs	r0, #5
 800a190:	f7f6 fdce 	bl	8000d30 <st25r3911ClrRegisterBits>
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800a194:	2110      	movs	r1, #16
 800a196:	200b      	movs	r0, #11
 800a198:	f7f6 fe0c 	bl	8000db4 <st25r3911SetRegisterBits>
    if( gRFAL.callbacks.postTxRx != NULL )
 800a19c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a19e:	b103      	cbz	r3, 800a1a2 <rfalTransceiveRx+0x2ae>
        gRFAL.callbacks.postTxRx();
 800a1a0:	4798      	blx	r3
            if( gRFAL.TxRx.status == ERR_BUSY )
 800a1a2:	8ae3      	ldrh	r3, [r4, #22]
 800a1a4:	2b02      	cmp	r3, #2
                gRFAL.TxRx.status = ERR_SYSTEM;
 800a1a6:	bf04      	itt	eq
 800a1a8:	2308      	moveq	r3, #8
 800a1aa:	82e3      	strheq	r3, [r4, #22]
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	7523      	strb	r3, [r4, #20]
            break;
 800a1b0:	e762      	b.n	800a078 <rfalTransceiveRx+0x184>
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800a1b2:	82e5      	strh	r5, [r4, #22]
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800a1b4:	4d9e      	ldr	r5, [pc, #632]	; (800a430 <rfalTransceiveRx+0x53c>)
 800a1b6:	f505 7667 	add.w	r6, r5, #924	; 0x39c
 800a1ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a1bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1be:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a1c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 800a1c6:	235a      	movs	r3, #90	; 0x5a
 800a1c8:	7523      	strb	r3, [r4, #20]
                break;
 800a1ca:	e755      	b.n	800a078 <rfalTransceiveRx+0x184>
            else if( ((irqs & ST25R3911_IRQ_MASK_ERR2) != 0U) && (gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO) )
 800a1cc:	79e3      	ldrb	r3, [r4, #7]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	f47f aecf 	bne.w	8009f72 <rfalTransceiveRx+0x7e>
                gRFAL.TxRx.status = ERR_FRAMING;
 800a1d4:	2209      	movs	r2, #9
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800a1d6:	2357      	movs	r3, #87	; 0x57
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800a1d8:	82e2      	strh	r2, [r4, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800a1da:	7523      	strb	r3, [r4, #20]
}
 800a1dc:	b006      	add	sp, #24
 800a1de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                rfalErrorHandling();
 800a1e2:	f7ff bdf9 	b.w	8009dd8 <rfalErrorHandling>
            if( rfalIsModeActiveComm( gRFAL.mode ) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800a1e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	3303      	adds	r3, #3
 800a1ec:	f63f af71 	bhi.w	800a0d2 <rfalTransceiveRx+0x1de>
                if( rfalTimerisExpired( gRFAL.tmr.FWT ) )  
 800a1f0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a1f2:	f7f7 f95f 	bl	80014b4 <timerIsExpired>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	f43f af6b 	beq.w	800a0d2 <rfalTransceiveRx+0x1de>
 800a1fc:	e779      	b.n	800a0f2 <rfalTransceiveRx+0x1fe>
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800a1fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a200:	4629      	mov	r1, r5
 800a202:	4418      	add	r0, r3
 800a204:	f7f6 ff56 	bl	80010b4 <st25r3911ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800a208:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800a20a:	441e      	add	r6, r3
 800a20c:	87a6      	strh	r6, [r4, #60]	; 0x3c
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800a20e:	22ff      	movs	r2, #255	; 0xff
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800a210:	2354      	movs	r3, #84	; 0x54
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800a212:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800a216:	7523      	strb	r3, [r4, #20]
            break;
 800a218:	e72e      	b.n	800a078 <rfalTransceiveRx+0x184>
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 800a21a:	9b05      	ldr	r3, [sp, #20]
 800a21c:	06da      	lsls	r2, r3, #27
 800a21e:	f53f ae98 	bmi.w	8009f52 <rfalTransceiveRx+0x5e>
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 800a222:	2355      	movs	r3, #85	; 0x55
 800a224:	7523      	strb	r3, [r4, #20]
                break;
 800a226:	e727      	b.n	800a078 <rfalTransceiveRx+0x184>
                gRFAL.TxRx.status = ERR_CRC;
 800a228:	2215      	movs	r2, #21
 800a22a:	e7d4      	b.n	800a1d6 <rfalTransceiveRx+0x2e2>
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800a22c:	8ae3      	ldrh	r3, [r4, #22]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d1c9      	bne.n	800a1c6 <rfalTransceiveRx+0x2d2>
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 800a232:	f8b4 33c4 	ldrh.w	r3, [r4, #964]	; 0x3c4
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800a236:	f8b4 13d4 	ldrh.w	r1, [r4, #980]	; 0x3d4
 800a23a:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 800a23e:	9102      	str	r1, [sp, #8]
 800a240:	f1a2 0208 	sub.w	r2, r2, #8
 800a244:	fab2 f282 	clz	r2, r2
 800a248:	0952      	lsrs	r2, r2, #5
 800a24a:	f10d 0112 	add.w	r1, sp, #18
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 800a24e:	3307      	adds	r3, #7
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800a250:	e9cd 1000 	strd	r1, r0, [sp]
                uint16_t offset = 0;
 800a254:	2500      	movs	r5, #0
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800a256:	9203      	str	r2, [sp, #12]
 800a258:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 800a25a:	f8d4 23c0 	ldr.w	r2, [r4, #960]	; 0x3c0
 800a25e:	6a60      	ldr	r0, [r4, #36]	; 0x24
                uint16_t offset = 0;
 800a260:	f8ad 5012 	strh.w	r5, [sp, #18]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800a264:	08db      	lsrs	r3, r3, #3
 800a266:	f7fa f9c1 	bl	80045ec <iso15693VICCDecode>
                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 800a26a:	4605      	mov	r5, r0
 800a26c:	2800      	cmp	r0, #0
 800a26e:	f000 8092 	beq.w	800a396 <rfalTransceiveRx+0x4a2>
 800a272:	2815      	cmp	r0, #21
 800a274:	f000 80c2 	beq.w	800a3fc <rfalTransceiveRx+0x508>
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800a278:	4e6d      	ldr	r6, [pc, #436]	; (800a430 <rfalTransceiveRx+0x53c>)
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800a27a:	82e5      	strh	r5, [r4, #22]
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800a27c:	f506 7767 	add.w	r7, r6, #924	; 0x39c
 800a280:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a282:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a284:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800a288:	e886 0007 	stmia.w	r6, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800a28c:	e6d7      	b.n	800a03e <rfalTransceiveRx+0x14a>
            rfalCheckDisableObsMode();
 800a28e:	2100      	movs	r1, #0
 800a290:	2001      	movs	r0, #1
 800a292:	f7f6 fccf 	bl	8000c34 <st25r3911WriteTestRegister>
 800a296:	e6e1      	b.n	800a05c <rfalTransceiveRx+0x168>
                if( st25r3911IsCRCinFIFO() && ((gRFAL.fifo.bytesTotal + tmp) > 0U) )
 800a298:	2240      	movs	r2, #64	; 0x40
 800a29a:	4611      	mov	r1, r2
 800a29c:	2009      	movs	r0, #9
 800a29e:	f7f6 fb5f 	bl	8000960 <st25r3911CheckReg>
 800a2a2:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800a2a4:	b138      	cbz	r0, 800a2b6 <rfalTransceiveRx+0x3c2>
 800a2a6:	1953      	adds	r3, r2, r5
 800a2a8:	f43f ae98 	beq.w	8009fdc <rfalTransceiveRx+0xe8>
                    if( ( tmp > (uint8_t)RFAL_CRC_LEN) )  
 800a2ac:	2d02      	cmp	r5, #2
 800a2ae:	f240 808b 	bls.w	800a3c8 <rfalTransceiveRx+0x4d4>
                        tmp -= (uint8_t)RFAL_CRC_LEN;
 800a2b2:	3d02      	subs	r5, #2
 800a2b4:	b2ed      	uxtb	r5, r5
 800a2b6:	1953      	adds	r3, r2, r5
 800a2b8:	e690      	b.n	8009fdc <rfalTransceiveRx+0xe8>
            if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 800a2ba:	9b05      	ldr	r3, [sp, #20]
 800a2bc:	051f      	lsls	r7, r3, #20
 800a2be:	d525      	bpl.n	800a30c <rfalTransceiveRx+0x418>
 800a2c0:	9b05      	ldr	r3, [sp, #20]
 800a2c2:	069e      	lsls	r6, r3, #26
 800a2c4:	d422      	bmi.n	800a30c <rfalTransceiveRx+0x418>
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800a2c6:	7863      	ldrb	r3, [r4, #1]
 800a2c8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800a2cc:	2b09      	cmp	r3, #9
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a2ce:	f04f 025a 	mov.w	r2, #90	; 0x5a
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800a2d2:	bf0c      	ite	eq
 800a2d4:	2304      	moveq	r3, #4
 800a2d6:	2325      	movne	r3, #37	; 0x25
 800a2d8:	82e3      	strh	r3, [r4, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a2da:	7522      	strb	r2, [r4, #20]
                break;
 800a2dc:	e6cc      	b.n	800a078 <rfalTransceiveRx+0x184>
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 800a2de:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a2e0:	f7f7 f8e8 	bl	80014b4 <timerIsExpired>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	f43f aec7 	beq.w	800a078 <rfalTransceiveRx+0x184>
                    gRFAL.TxRx.status = ERR_FRAMING;
 800a2ea:	2209      	movs	r2, #9
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a2ec:	235a      	movs	r3, #90	; 0x5a
                    gRFAL.TxRx.status = ERR_FRAMING;
 800a2ee:	82e2      	strh	r2, [r4, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a2f0:	7523      	strb	r3, [r4, #20]
 800a2f2:	e6c1      	b.n	800a078 <rfalTransceiveRx+0x184>
            rfalCheckDisableObsMode();
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	2001      	movs	r0, #1
 800a2f8:	f7f6 fc9c 	bl	8000c34 <st25r3911WriteTestRegister>
 800a2fc:	e746      	b.n	800a18c <rfalTransceiveRx+0x298>
                gRFAL.TxRx.status = ERR_PAR;
 800a2fe:	221b      	movs	r2, #27
 800a300:	e769      	b.n	800a1d6 <rfalTransceiveRx+0x2e2>
               gRFAL.TxRx.status = ERR_IO;
 800a302:	2203      	movs	r2, #3
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a304:	235a      	movs	r3, #90	; 0x5a
               gRFAL.TxRx.status = ERR_IO;
 800a306:	82e2      	strh	r2, [r4, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a308:	7523      	strb	r3, [r4, #20]
               break;
 800a30a:	e6b5      	b.n	800a078 <rfalTransceiveRx+0x184>
            if( (irqs & ST25R3911_IRQ_MASK_RXS) != 0U )
 800a30c:	9b05      	ldr	r3, [sp, #20]
 800a30e:	f013 0f20 	tst.w	r3, #32
                if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 800a312:	9b05      	ldr	r3, [sp, #20]
            if( (irqs & ST25R3911_IRQ_MASK_RXS) != 0U )
 800a314:	d035      	beq.n	800a382 <rfalTransceiveRx+0x48e>
                if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 800a316:	06dd      	lsls	r5, r3, #27
 800a318:	f57f ae08 	bpl.w	8009f2c <rfalTransceiveRx+0x38>
                    gRFAL.TxRx.rxse  = true;
 800a31c:	2201      	movs	r2, #1
                    gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800a31e:	2356      	movs	r3, #86	; 0x56
                    gRFAL.TxRx.rxse  = true;
 800a320:	7622      	strb	r2, [r4, #24]
                    gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800a322:	7523      	strb	r3, [r4, #20]
                    break;
 800a324:	e6a8      	b.n	800a078 <rfalTransceiveRx+0x184>
            else if( (irqs & ST25R3911_IRQ_MASK_CAC) != 0U )
 800a326:	9b05      	ldr	r3, [sp, #20]
 800a328:	055b      	lsls	r3, r3, #21
 800a32a:	d5ea      	bpl.n	800a302 <rfalTransceiveRx+0x40e>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800a32c:	221d      	movs	r2, #29
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a32e:	235a      	movs	r3, #90	; 0x5a
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800a330:	82e2      	strh	r2, [r4, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a332:	7523      	strb	r3, [r4, #20]
 800a334:	e6a0      	b.n	800a078 <rfalTransceiveRx+0x184>
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 800a336:	493f      	ldr	r1, [pc, #252]	; (800a434 <rfalTransceiveRx+0x540>)
 800a338:	2202      	movs	r2, #2
 800a33a:	201a      	movs	r0, #26
 800a33c:	f7f6 fc38 	bl	8000bb0 <st25r3911ReadMultipleRegisters>
}
 800a340:	e644      	b.n	8009fcc <rfalTransceiveRx+0xd8>
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800a342:	2358      	movs	r3, #88	; 0x58
 800a344:	7523      	strb	r3, [r4, #20]
                break;
 800a346:	e697      	b.n	800a078 <rfalTransceiveRx+0x184>
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 800a348:	493a      	ldr	r1, [pc, #232]	; (800a434 <rfalTransceiveRx+0x540>)
 800a34a:	2202      	movs	r2, #2
 800a34c:	201a      	movs	r0, #26
 800a34e:	f7f6 fc2f 	bl	8000bb0 <st25r3911ReadMultipleRegisters>
}
 800a352:	e6eb      	b.n	800a12c <rfalTransceiveRx+0x238>
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 800a354:	4937      	ldr	r1, [pc, #220]	; (800a434 <rfalTransceiveRx+0x540>)
 800a356:	2202      	movs	r2, #2
 800a358:	201a      	movs	r0, #26
 800a35a:	f7f6 fc29 	bl	8000bb0 <st25r3911ReadMultipleRegisters>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 800a35e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
                if( rfalFIFOStatusIsIncompleteByte() )
 800a362:	f013 0f1e 	tst.w	r3, #30
 800a366:	f43f ae64 	beq.w	800a032 <rfalTransceiveRx+0x13e>
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800a36a:	2bff      	cmp	r3, #255	; 0xff
 800a36c:	d104      	bne.n	800a378 <rfalTransceiveRx+0x484>
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 800a36e:	4931      	ldr	r1, [pc, #196]	; (800a434 <rfalTransceiveRx+0x540>)
 800a370:	2202      	movs	r2, #2
 800a372:	201a      	movs	r0, #26
 800a374:	f7f6 fc1c 	bl	8000bb0 <st25r3911ReadMultipleRegisters>
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800a378:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a37a:	8813      	ldrh	r3, [r2, #0]
}
 800a37c:	e651      	b.n	800a022 <rfalTransceiveRx+0x12e>
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800a37e:	221d      	movs	r2, #29
 800a380:	e729      	b.n	800a1d6 <rfalTransceiveRx+0x2e2>
            else if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 800a382:	06d8      	lsls	r0, r3, #27
 800a384:	d5bd      	bpl.n	800a302 <rfalTransceiveRx+0x40e>
                gRFAL.TxRx.status = ERR_IO;
 800a386:	2203      	movs	r2, #3
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a388:	235a      	movs	r3, #90	; 0x5a
 800a38a:	e725      	b.n	800a1d8 <rfalTransceiveRx+0x2e4>
                else if( rfalFIFOStatusIsMissingPar() )
 800a38c:	07df      	lsls	r7, r3, #31
                   gRFAL.TxRx.status = ERR_FRAMING;
 800a38e:	bf44      	itt	mi
 800a390:	2209      	movmi	r2, #9
 800a392:	82e2      	strhmi	r2, [r4, #22]
 800a394:	e612      	b.n	8009fbc <rfalTransceiveRx+0xc8>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800a396:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 800a39a:	079f      	lsls	r7, r3, #30
 800a39c:	d41a      	bmi.n	800a3d4 <rfalTransceiveRx+0x4e0>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800a39e:	f8d4 23c8 	ldr.w	r2, [r4, #968]	; 0x3c8
 800a3a2:	8813      	ldrh	r3, [r2, #0]
 800a3a4:	0759      	lsls	r1, r3, #29
 800a3a6:	d115      	bne.n	800a3d4 <rfalTransceiveRx+0x4e0>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800a3a8:	2b0f      	cmp	r3, #15
 800a3aa:	d939      	bls.n	800a420 <rfalTransceiveRx+0x52c>
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800a3ac:	3b10      	subs	r3, #16
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800a3ae:	4d20      	ldr	r5, [pc, #128]	; (800a430 <rfalTransceiveRx+0x53c>)
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800a3b0:	8013      	strh	r3, [r2, #0]
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800a3b2:	f505 7667 	add.w	r6, r5, #924	; 0x39c
 800a3b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a3b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a3ba:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800a3be:	2302      	movs	r3, #2
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800a3c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800a3c4:	82e3      	strh	r3, [r4, #22]
            if( gRFAL.TxRx.status != ERR_BUSY )
 800a3c6:	e63d      	b.n	800a044 <rfalTransceiveRx+0x150>
                    else if(gRFAL.fifo.bytesTotal > (uint16_t)RFAL_CRC_LEN)                       
 800a3c8:	2a02      	cmp	r2, #2
                        gRFAL.fifo.bytesTotal -= (uint16_t)RFAL_CRC_LEN;
 800a3ca:	bf84      	itt	hi
 800a3cc:	1e93      	subhi	r3, r2, #2
 800a3ce:	fa15 f383 	uxtahhi	r3, r5, r3
 800a3d2:	e603      	b.n	8009fdc <rfalTransceiveRx+0xe8>
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800a3d4:	4d16      	ldr	r5, [pc, #88]	; (800a430 <rfalTransceiveRx+0x53c>)
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800a3d6:	2302      	movs	r3, #2
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800a3d8:	f505 7667 	add.w	r6, r5, #924	; 0x39c
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800a3dc:	82e3      	strh	r3, [r4, #22]
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800a3de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a3e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a3e2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a3e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            if( gRFAL.TxRx.status != ERR_BUSY )
 800a3ea:	e62b      	b.n	800a044 <rfalTransceiveRx+0x150>
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 800a3ec:	4911      	ldr	r1, [pc, #68]	; (800a434 <rfalTransceiveRx+0x540>)
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	201a      	movs	r0, #26
 800a3f2:	f7f6 fbdd 	bl	8000bb0 <st25r3911ReadMultipleRegisters>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 800a3f6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
}
 800a3fa:	e5d9      	b.n	8009fb0 <rfalTransceiveRx+0xbc>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800a3fc:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 800a400:	079e      	lsls	r6, r3, #30
 800a402:	f53f aed6 	bmi.w	800a1b2 <rfalTransceiveRx+0x2be>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800a406:	f8d4 23c8 	ldr.w	r2, [r4, #968]	; 0x3c8
 800a40a:	8813      	ldrh	r3, [r2, #0]
 800a40c:	0758      	lsls	r0, r3, #29
 800a40e:	f47f aed0 	bne.w	800a1b2 <rfalTransceiveRx+0x2be>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800a412:	2b0f      	cmp	r3, #15
 800a414:	f67f af30 	bls.w	800a278 <rfalTransceiveRx+0x384>
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800a418:	3b10      	subs	r3, #16
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800a41a:	4e05      	ldr	r6, [pc, #20]	; (800a430 <rfalTransceiveRx+0x53c>)
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800a41c:	8013      	strh	r3, [r2, #0]
 800a41e:	e72c      	b.n	800a27a <rfalTransceiveRx+0x386>
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800a420:	4d03      	ldr	r5, [pc, #12]	; (800a430 <rfalTransceiveRx+0x53c>)
 800a422:	e7c6      	b.n	800a3b2 <rfalTransceiveRx+0x4be>
            gRFAL.TxRx.status = ERR_SYSTEM;
 800a424:	2208      	movs	r2, #8
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a426:	235a      	movs	r3, #90	; 0x5a
            gRFAL.TxRx.status = ERR_SYSTEM;
 800a428:	82e2      	strh	r2, [r4, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800a42a:	7523      	strb	r3, [r4, #20]
}
 800a42c:	e624      	b.n	800a078 <rfalTransceiveRx+0x184>
 800a42e:	bf00      	nop
 800a430:	20000ce4 	.word	0x20000ce4
 800a434:	20000d06 	.word	0x20000d06

0800a438 <rfalISO15693TransceiveAnticollisionFrame.part.0>:
#endif /* RFAL_FEATURE_NFCA */

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
 800a438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );

    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800a43c:	4c61      	ldr	r4, [pc, #388]	; (800a5c4 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x18c>)
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
 800a43e:	b088      	sub	sp, #32
 800a440:	4680      	mov	r8, r0
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800a442:	f241 0003 	movw	r0, #4099	; 0x1003
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
 800a446:	460d      	mov	r5, r1
 800a448:	4617      	mov	r7, r2
 800a44a:	461e      	mov	r6, r3
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800a44c:	f7f9 fe66 	bl	800411c <rfalSetAnalogConfig>
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800a450:	7822      	ldrb	r2, [r4, #0]
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
    ctx.txBuf     = txBuf;
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
    ctx.rxBuf     = rxBuf;
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
    ctx.rxRcvdLen = actLen;
 800a452:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a454:	9105      	str	r1, [sp, #20]
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800a456:	2d00      	cmp	r5, #0
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 800a458:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800a45c:	9307      	str	r3, [sp, #28]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 800a45e:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800a462:	bf0c      	ite	eq
 800a464:	234b      	moveq	r3, #75	; 0x4b
 800a466:	230a      	movne	r3, #10
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800a468:	00f6      	lsls	r6, r6, #3
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800a46a:	2110      	movs	r1, #16
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800a46c:	2a01      	cmp	r2, #1
    ctx.txBuf     = txBuf;
 800a46e:	f8cd 8004 	str.w	r8, [sp, #4]
    ctx.rxBuf     = rxBuf;
 800a472:	9703      	str	r7, [sp, #12]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 800a474:	f8ad 5008 	strh.w	r5, [sp, #8]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800a478:	f8ad 6010 	strh.w	r6, [sp, #16]
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800a47c:	f8a4 13d4 	strh.w	r1, [r4, #980]	; 0x3d4
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800a480:	9306      	str	r3, [sp, #24]
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800a482:	d90a      	bls.n	800a49a <rfalISO15693TransceiveAnticollisionFrame.part.0+0x62>
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800a484:	2208      	movs	r2, #8
 800a486:	4611      	mov	r1, r2
 800a488:	2002      	movs	r0, #2
 800a48a:	f7f6 fa69 	bl	8000960 <st25r3911CheckReg>
 800a48e:	2800      	cmp	r0, #0
 800a490:	d04b      	beq.n	800a52a <rfalISO15693TransceiveAnticollisionFrame.part.0+0xf2>
 800a492:	a801      	add	r0, sp, #4
 800a494:	f7ff fa6a 	bl	800996c <rfalStartTransceive.part.0>
    switch( gRFAL.state )
 800a498:	7822      	ldrb	r2, [r4, #0]
 800a49a:	2a03      	cmp	r2, #3
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800a49c:	f04f 0502 	mov.w	r5, #2
    switch( gRFAL.state )
 800a4a0:	d00f      	beq.n	800a4c2 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x8a>
 800a4a2:	2a05      	cmp	r2, #5
 800a4a4:	d12a      	bne.n	800a4fc <rfalISO15693TransceiveAnticollisionFrame.part.0+0xc4>
    switch( gRFAL.wum.state )
 800a4a6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d944      	bls.n	800a53a <rfalISO15693TransceiveAnticollisionFrame.part.0+0x102>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800a4b0:	7d23      	ldrb	r3, [r4, #20]
 800a4b2:	b193      	cbz	r3, 800a4da <rfalISO15693TransceiveAnticollisionFrame.part.0+0xa2>
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800a4b4:	f1a3 020b 	sub.w	r2, r3, #11
 800a4b8:	2a45      	cmp	r2, #69	; 0x45
 800a4ba:	d87c      	bhi.n	800a5b6 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x17e>
    switch( gRFAL.state )
 800a4bc:	7822      	ldrb	r2, [r4, #0]
 800a4be:	2a03      	cmp	r2, #3
 800a4c0:	d1ef      	bne.n	800a4a2 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x6a>
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800a4c2:	7d23      	ldrb	r3, [r4, #20]
        if( rfalIsTransceiveInTx() )
 800a4c4:	f1a3 020b 	sub.w	r2, r3, #11
 800a4c8:	2a45      	cmp	r2, #69	; 0x45
 800a4ca:	d95a      	bls.n	800a582 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x14a>
        if( rfalIsTransceiveInRx() )
 800a4cc:	2b50      	cmp	r3, #80	; 0x50
 800a4ce:	d9f0      	bls.n	800a4b2 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x7a>
            rfalTransceiveRx();
 800a4d0:	f7ff fd10 	bl	8009ef4 <rfalTransceiveRx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800a4d4:	7d23      	ldrb	r3, [r4, #20]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1ec      	bne.n	800a4b4 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x7c>
 800a4da:	8ae5      	ldrh	r5, [r4, #22]
    if( ret == ERR_NONE)
 800a4dc:	b1a5      	cbz	r5, 800a508 <rfalISO15693TransceiveAnticollisionFrame.part.0+0xd0>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800a4de:	f241 0001 	movw	r0, #4097	; 0x1001
 800a4e2:	f7f9 fe1b 	bl	800411c <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800a4e6:	f241 0002 	movw	r0, #4098	; 0x1002
 800a4ea:	f7f9 fe17 	bl	800411c <rfalSetAnalogConfig>
    gRFAL.nfcvData.ignoreBits = 0;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4628      	mov	r0, r5
    gRFAL.nfcvData.ignoreBits = 0;
 800a4f2:	f8a4 33d4 	strh.w	r3, [r4, #980]	; 0x3d4
}
 800a4f6:	b008      	add	sp, #32
 800a4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800a4fc:	7d23      	ldrb	r3, [r4, #20]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1d8      	bne.n	800a4b4 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x7c>
 800a502:	8ae5      	ldrh	r5, [r4, #22]
    if( ret == ERR_NONE)
 800a504:	2d00      	cmp	r5, #0
 800a506:	d1ea      	bne.n	800a4de <rfalISO15693TransceiveAnticollisionFrame.part.0+0xa6>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800a508:	2502      	movs	r5, #2
    switch( gRFAL.state )
 800a50a:	7823      	ldrb	r3, [r4, #0]
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d02d      	beq.n	800a56c <rfalISO15693TransceiveAnticollisionFrame.part.0+0x134>
 800a510:	2b05      	cmp	r3, #5
 800a512:	d126      	bne.n	800a562 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x12a>
    switch( gRFAL.wum.state )
 800a514:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800a518:	3b01      	subs	r3, #1
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d935      	bls.n	800a58a <rfalISO15693TransceiveAnticollisionFrame.part.0+0x152>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800a51e:	7d23      	ldrb	r3, [r4, #20]
 800a520:	b313      	cbz	r3, 800a568 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x130>
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 800a522:	2b50      	cmp	r3, #80	; 0x50
 800a524:	d8f1      	bhi.n	800a50a <rfalISO15693TransceiveAnticollisionFrame.part.0+0xd2>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800a526:	2502      	movs	r5, #2
 800a528:	e7d9      	b.n	800a4de <rfalISO15693TransceiveAnticollisionFrame.part.0+0xa6>
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800a52a:	7863      	ldrb	r3, [r4, #1]
 800a52c:	3b0a      	subs	r3, #10
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d9af      	bls.n	800a492 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x5a>
 800a532:	9b01      	ldr	r3, [sp, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0ac      	beq.n	800a492 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x5a>
 800a538:	e7ae      	b.n	800a498 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x60>
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800a53a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800a53e:	f7f6 ff17 	bl	8001370 <st25r3911GetInterrupt>
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800a542:	2800      	cmp	r0, #0
 800a544:	d0b4      	beq.n	800a4b0 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x78>
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800a546:	0347      	lsls	r7, r0, #13
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800a548:	bf48      	it	mi
 800a54a:	f884 5054 	strbmi.w	r5, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800a54e:	0386      	lsls	r6, r0, #14
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800a550:	bf48      	it	mi
 800a552:	f884 5054 	strbmi.w	r5, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800a556:	03c0      	lsls	r0, r0, #15
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800a558:	7d23      	ldrb	r3, [r4, #20]
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800a55a:	bf48      	it	mi
 800a55c:	f884 5054 	strbmi.w	r5, [r4, #84]	; 0x54
 800a560:	e7a7      	b.n	800a4b2 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x7a>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800a562:	7d23      	ldrb	r3, [r4, #20]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1dc      	bne.n	800a522 <rfalISO15693TransceiveAnticollisionFrame.part.0+0xea>
 800a568:	8ae5      	ldrh	r5, [r4, #22]
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800a56a:	e7b8      	b.n	800a4de <rfalISO15693TransceiveAnticollisionFrame.part.0+0xa6>
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800a56c:	7d23      	ldrb	r3, [r4, #20]
        if( rfalIsTransceiveInTx() )
 800a56e:	f1a3 020b 	sub.w	r2, r3, #11
 800a572:	2a45      	cmp	r2, #69	; 0x45
 800a574:	d922      	bls.n	800a5bc <rfalISO15693TransceiveAnticollisionFrame.part.0+0x184>
        if( rfalIsTransceiveInRx() )
 800a576:	2b50      	cmp	r3, #80	; 0x50
 800a578:	d81a      	bhi.n	800a5b0 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x178>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1d3      	bne.n	800a526 <rfalISO15693TransceiveAnticollisionFrame.part.0+0xee>
 800a57e:	8ae5      	ldrh	r5, [r4, #22]
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800a580:	e7ad      	b.n	800a4de <rfalISO15693TransceiveAnticollisionFrame.part.0+0xa6>
            rfalTransceiveTx();
 800a582:	f7ff fa9f 	bl	8009ac4 <rfalTransceiveTx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800a586:	7d23      	ldrb	r3, [r4, #20]
 800a588:	e793      	b.n	800a4b2 <rfalISO15693TransceiveAnticollisionFrame.part.0+0x7a>
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800a58a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800a58e:	f7f6 feef 	bl	8001370 <st25r3911GetInterrupt>
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800a592:	2800      	cmp	r0, #0
 800a594:	d0c3      	beq.n	800a51e <rfalISO15693TransceiveAnticollisionFrame.part.0+0xe6>
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800a596:	0341      	lsls	r1, r0, #13
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800a598:	bf48      	it	mi
 800a59a:	f884 5054 	strbmi.w	r5, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800a59e:	0382      	lsls	r2, r0, #14
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800a5a0:	bf48      	it	mi
 800a5a2:	f884 5054 	strbmi.w	r5, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800a5a6:	03c3      	lsls	r3, r0, #15
 800a5a8:	d5b9      	bpl.n	800a51e <rfalISO15693TransceiveAnticollisionFrame.part.0+0xe6>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800a5aa:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 800a5ae:	e7b6      	b.n	800a51e <rfalISO15693TransceiveAnticollisionFrame.part.0+0xe6>
            rfalTransceiveRx();
 800a5b0:	f7ff fca0 	bl	8009ef4 <rfalTransceiveRx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800a5b4:	e7b3      	b.n	800a51e <rfalISO15693TransceiveAnticollisionFrame.part.0+0xe6>
    if( rfalIsTransceiveInRx() )
 800a5b6:	2b50      	cmp	r3, #80	; 0x50
 800a5b8:	d8a6      	bhi.n	800a508 <rfalISO15693TransceiveAnticollisionFrame.part.0+0xd0>
 800a5ba:	e7b4      	b.n	800a526 <rfalISO15693TransceiveAnticollisionFrame.part.0+0xee>
            rfalTransceiveTx();
 800a5bc:	f7ff fa82 	bl	8009ac4 <rfalTransceiveTx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800a5c0:	e7ad      	b.n	800a51e <rfalISO15693TransceiveAnticollisionFrame.part.0+0xe6>
 800a5c2:	bf00      	nop
 800a5c4:	20000cc8 	.word	0x20000cc8

0800a5c8 <rfalInitialize>:
{
 800a5c8:	b500      	push	{lr}
 800a5ca:	b083      	sub	sp, #12
    st25r3911InitInterrupts();
 800a5cc:	f7f6 fe26 	bl	800121c <st25r3911InitInterrupts>
    st25r3911Initialize();
 800a5d0:	f7f6 f816 	bl	8000600 <st25r3911Initialize>
    if( !st25r3911CheckChipID( NULL ) )
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	f7f6 f9d7 	bl	8000988 <st25r3911CheckChipID>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	d04e      	beq.n	800a67c <rfalInitialize+0xb4>
    rfalST25R3911ObsModeDisable();
 800a5de:	2100      	movs	r1, #0
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	f7f6 fb27 	bl	8000c34 <st25r3911WriteTestRegister>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	f7f9 fd98 	bl	800411c <rfalSetAnalogConfig>
    st25r3911ChangeRegisterBits( ST25R3911_REG_IO_CONF1, (ST25R3911_REG_IO_CONF1_fifo_lt | ST25R3911_REG_IO_CONF1_fifo_lr), (ST25R3911_REG_IO_CONF1_fifo_lt_32bytes | ST25R3911_REG_IO_CONF1_fifo_lr_64bytes) );
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	2130      	movs	r1, #48	; 0x30
 800a5f2:	f7f6 fc21 	bl	8000e38 <st25r3911ChangeRegisterBits>
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_crc_2_fifo );
 800a5f6:	2140      	movs	r1, #64	; 0x40
 800a5f8:	2009      	movs	r0, #9
 800a5fa:	f7f6 fbdb 	bl	8000db4 <st25r3911SetRegisterBits>
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800a5fe:	2110      	movs	r1, #16
 800a600:	2009      	movs	r0, #9
 800a602:	f7f6 fbd7 	bl	8000db4 <st25r3911SetRegisterBits>
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800a606:	4b1f      	ldr	r3, [pc, #124]	; (800a684 <rfalInitialize+0xbc>)
    gRFAL.field              = false;
 800a608:	2200      	movs	r2, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800a60a:	20ff      	movs	r0, #255	; 0xff
    gRFAL.state              = RFAL_STATE_INIT;
 800a60c:	2101      	movs	r1, #1
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800a60e:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    gRFAL.state              = RFAL_STATE_INIT;
 800a612:	8019      	strh	r1, [r3, #0]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800a614:	e9c3 2201 	strd	r2, r2, [r3, #4]
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )       
 800a618:	2180      	movs	r1, #128	; 0x80
 800a61a:	202a      	movs	r0, #42	; 0x2a
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800a61c:	829a      	strh	r2, [r3, #20]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 800a61e:	e9c3 2203 	strd	r2, r2, [r3, #12]
    gRFAL.callbacks.postTxRx = NULL;
 800a622:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 800a626:	641a      	str	r2, [r3, #64]	; 0x40
    gRFAL.nfcvData.ignoreBits = 0;
 800a628:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800a62c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )       
 800a630:	f7f6 f996 	bl	8000960 <st25r3911CheckReg>
 800a634:	b9e8      	cbnz	r0, 800a672 <rfalInitialize+0xaa>
    if( st25r3911CheckReg( ST25R3911_REG_ANT_CAL_CONTROL, ST25R3911_REG_ANT_CAL_CONTROL_trim_s, 0x00 ) )
 800a636:	2200      	movs	r2, #0
 800a638:	2180      	movs	r1, #128	; 0x80
 800a63a:	2021      	movs	r0, #33	; 0x21
 800a63c:	f7f6 f990 	bl	8000960 <st25r3911CheckReg>
 800a640:	b918      	cbnz	r0, 800a64a <rfalInitialize+0x82>
    return ERR_NONE;
 800a642:	2000      	movs	r0, #0
}
 800a644:	b003      	add	sp, #12
 800a646:	f85d fb04 	ldr.w	pc, [sp], #4
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );
 800a64a:	f10d 0006 	add.w	r0, sp, #6
 800a64e:	f7f6 f8f1 	bl	8000834 <st25r3911CalibrateAntenna>
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );                
 800a652:	f10d 0006 	add.w	r0, sp, #6
 800a656:	f7f6 f8ed 	bl	8000834 <st25r3911CalibrateAntenna>
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 800a65a:	2200      	movs	r2, #0
 800a65c:	2180      	movs	r1, #128	; 0x80
 800a65e:	202a      	movs	r0, #42	; 0x2a
 800a660:	f7f6 f97e 	bl	8000960 <st25r3911CheckReg>
 800a664:	2800      	cmp	r0, #0
 800a666:	d0ec      	beq.n	800a642 <rfalInitialize+0x7a>
        st25r3911AdjustRegulators( &resValue );
 800a668:	f10d 0006 	add.w	r0, sp, #6
 800a66c:	f7f6 f840 	bl	80006f0 <st25r3911AdjustRegulators>
 800a670:	e7e7      	b.n	800a642 <rfalInitialize+0x7a>
        st25r3911AdjustRegulators( &resValue );
 800a672:	f10d 0006 	add.w	r0, sp, #6
 800a676:	f7f6 f83b 	bl	80006f0 <st25r3911AdjustRegulators>
 800a67a:	e7dc      	b.n	800a636 <rfalInitialize+0x6e>
        return ERR_HW_MISMATCH;
 800a67c:	2024      	movs	r0, #36	; 0x24
}
 800a67e:	b003      	add	sp, #12
 800a680:	f85d fb04 	ldr.w	pc, [sp], #4
 800a684:	20000cc8 	.word	0x20000cc8

0800a688 <rfalSetMode>:
{
 800a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( gRFAL.state == RFAL_STATE_IDLE )
 800a68a:	4f6a      	ldr	r7, [pc, #424]	; (800a834 <rfalSetMode+0x1ac>)
 800a68c:	783b      	ldrb	r3, [r7, #0]
 800a68e:	b36b      	cbz	r3, 800a6ec <rfalSetMode+0x64>
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800a690:	29ff      	cmp	r1, #255	; 0xff
 800a692:	460c      	mov	r4, r1
 800a694:	f000 80ca 	beq.w	800a82c <rfalSetMode+0x1a4>
 800a698:	2aff      	cmp	r2, #255	; 0xff
 800a69a:	4615      	mov	r5, r2
 800a69c:	f000 80c6 	beq.w	800a82c <rfalSetMode+0x1a4>
    switch( mode )
 800a6a0:	1e43      	subs	r3, r0, #1
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	2b0c      	cmp	r3, #12
 800a6a6:	f200 80c3 	bhi.w	800a830 <rfalSetMode+0x1a8>
 800a6aa:	e8df f003 	tbb	[pc, r3]
 800a6ae:	5a49      	.short	0x5a49
 800a6b0:	998a7b60 	.word	0x998a7b60
 800a6b4:	21aa0707 	.word	0x21aa0707
 800a6b8:	2121      	.short	0x2121
 800a6ba:	23          	.byte	0x23
 800a6bb:	00          	.byte	0x00
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800a6bc:	2104      	movs	r1, #4
 800a6be:	2002      	movs	r0, #2
 800a6c0:	f7f6 fb36 	bl	8000d30 <st25r3911ClrRegisterBits>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800a6c4:	f241 0001 	movw	r0, #4097	; 0x1001
 800a6c8:	f7f9 fd28 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800a6cc:	f241 0002 	movw	r0, #4098	; 0x1002
 800a6d0:	f7f9 fd24 	bl	800411c <rfalSetAnalogConfig>
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800a6d4:	783b      	ldrb	r3, [r7, #0]
    gRFAL.mode  = mode;
 800a6d6:	707e      	strb	r6, [r7, #1]
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	bf38      	it	cc
 800a6dc:	2302      	movcc	r3, #2
 800a6de:	703b      	strb	r3, [r7, #0]
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800a6e0:	70bc      	strb	r4, [r7, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800a6e2:	70fd      	strb	r5, [r7, #3]
}
 800a6e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a6e8:	f7ff b832 	b.w	8009750 <rfalSetBitRate.part.0>
        return ERR_WRONG_STATE;
 800a6ec:	2021      	movs	r0, #33	; 0x21
}
 800a6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return ERR_NOTSUPP;
 800a6f0:	2018      	movs	r0, #24
}
 800a6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_nfcip1_normal_mode | ST25R3911_REG_MODE_nfc_ar) );
 800a6f4:	2189      	movs	r1, #137	; 0x89
 800a6f6:	2003      	movs	r0, #3
 800a6f8:	f7f6 fad6 	bl	8000ca8 <st25r3911WriteRegister>
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 800a6fc:	2160      	movs	r1, #96	; 0x60
 800a6fe:	2040      	movs	r0, #64	; 0x40
 800a700:	f7f6 f916 	bl	8000930 <st25r3911StartGPTimer_8fcs>
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800a704:	2110      	movs	r1, #16
 800a706:	2009      	movs	r0, #9
 800a708:	f7f6 fb54 	bl	8000db4 <st25r3911SetRegisterBits>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800a70c:	f648 0001 	movw	r0, #34817	; 0x8801
 800a710:	f7f9 fd04 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800a714:	f648 0002 	movw	r0, #34818	; 0x8802
 800a718:	f7f9 fd00 	bl	800411c <rfalSetAnalogConfig>
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800a71c:	783b      	ldrb	r3, [r7, #0]
    gRFAL.mode  = mode;
 800a71e:	707e      	strb	r6, [r7, #1]
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800a720:	2b02      	cmp	r3, #2
 800a722:	bf38      	it	cc
 800a724:	2302      	movcc	r3, #2
        EXIT_ON_ERR( ret, st25r3911SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800a726:	4629      	mov	r1, r5
 800a728:	4620      	mov	r0, r4
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800a72a:	703b      	strb	r3, [r7, #0]
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800a72c:	70bc      	strb	r4, [r7, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800a72e:	70fd      	strb	r5, [r7, #3]
        EXIT_ON_ERR( ret, st25r3911SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800a730:	f7f6 f8d0 	bl	80008d4 <st25r3911SetBitrate>
 800a734:	2800      	cmp	r0, #0
 800a736:	d1da      	bne.n	800a6ee <rfalSetMode+0x66>
}
 800a738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a73c:	f7ff b808 	b.w	8009750 <rfalSetBitRate.part.0>
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800a740:	2104      	movs	r1, #4
 800a742:	2002      	movs	r0, #2
 800a744:	f7f6 faf4 	bl	8000d30 <st25r3911ClrRegisterBits>
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443a);
 800a748:	2108      	movs	r1, #8
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_topaz );
 800a74a:	2003      	movs	r0, #3
 800a74c:	f7f6 faac 	bl	8000ca8 <st25r3911WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800a750:	f240 1001 	movw	r0, #257	; 0x101
 800a754:	f7f9 fce2 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800a758:	f44f 7081 	mov.w	r0, #258	; 0x102
 800a75c:	f7f9 fcde 	bl	800411c <rfalSetAnalogConfig>
            break;
 800a760:	e7dc      	b.n	800a71c <rfalSetMode+0x94>
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800a762:	2104      	movs	r1, #4
 800a764:	2002      	movs	r0, #2
 800a766:	f7f6 fae3 	bl	8000d30 <st25r3911ClrRegisterBits>
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_topaz );
 800a76a:	2120      	movs	r1, #32
 800a76c:	e7ed      	b.n	800a74a <rfalSetMode+0xc2>
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800a76e:	2104      	movs	r1, #4
 800a770:	2002      	movs	r0, #2
 800a772:	f7f6 fadd 	bl	8000d30 <st25r3911ClrRegisterBits>
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800a776:	2110      	movs	r1, #16
 800a778:	2003      	movs	r0, #3
 800a77a:	f7f6 fa95 	bl	8000ca8 <st25r3911WriteRegister>
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800a77e:	2200      	movs	r2, #0
 800a780:	21fc      	movs	r1, #252	; 0xfc
 800a782:	2006      	movs	r0, #6
 800a784:	f7f6 fb58 	bl	8000e38 <st25r3911ChangeRegisterBits>
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800a788:	2200      	movs	r2, #0
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800a78a:	21f8      	movs	r1, #248	; 0xf8
 800a78c:	2007      	movs	r0, #7
 800a78e:	f7f6 fb53 	bl	8000e38 <st25r3911ChangeRegisterBits>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800a792:	f240 2001 	movw	r0, #513	; 0x201
 800a796:	f7f9 fcc1 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800a79a:	f240 2002 	movw	r0, #514	; 0x202
 800a79e:	f7f9 fcbd 	bl	800411c <rfalSetAnalogConfig>
            break;
 800a7a2:	e7bb      	b.n	800a71c <rfalSetMode+0x94>
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800a7a4:	2104      	movs	r1, #4
 800a7a6:	2002      	movs	r0, #2
 800a7a8:	f7f6 fac2 	bl	8000d30 <st25r3911ClrRegisterBits>
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800a7ac:	2110      	movs	r1, #16
 800a7ae:	2003      	movs	r0, #3
 800a7b0:	f7f6 fa7a 	bl	8000ca8 <st25r3911WriteRegister>
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	21fc      	movs	r1, #252	; 0xfc
 800a7b8:	2006      	movs	r0, #6
 800a7ba:	f7f6 fb3d 	bl	8000e38 <st25r3911ChangeRegisterBits>
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800a7be:	2228      	movs	r2, #40	; 0x28
 800a7c0:	e7e3      	b.n	800a78a <rfalSetMode+0x102>
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800a7c2:	2104      	movs	r1, #4
 800a7c4:	2002      	movs	r0, #2
 800a7c6:	f7f6 fab3 	bl	8000d30 <st25r3911ClrRegisterBits>
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800a7ca:	2110      	movs	r1, #16
 800a7cc:	2003      	movs	r0, #3
 800a7ce:	f7f6 fa6b 	bl	8000ca8 <st25r3911WriteRegister>
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	21fc      	movs	r1, #252	; 0xfc
 800a7d6:	2006      	movs	r0, #6
 800a7d8:	f7f6 fb2e 	bl	8000e38 <st25r3911ChangeRegisterBits>
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800a7dc:	2230      	movs	r2, #48	; 0x30
 800a7de:	e7d4      	b.n	800a78a <rfalSetMode+0x102>
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800a7e0:	2104      	movs	r1, #4
 800a7e2:	2002      	movs	r0, #2
 800a7e4:	f7f6 faa4 	bl	8000d30 <st25r3911ClrRegisterBits>
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_felica );
 800a7e8:	2118      	movs	r1, #24
 800a7ea:	2003      	movs	r0, #3
 800a7ec:	f7f6 fa5c 	bl	8000ca8 <st25r3911WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800a7f0:	f240 4001 	movw	r0, #1025	; 0x401
 800a7f4:	f7f9 fc92 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800a7f8:	f240 4002 	movw	r0, #1026	; 0x402
 800a7fc:	f7f9 fc8e 	bl	800411c <rfalSetAnalogConfig>
            break;
 800a800:	e78c      	b.n	800a71c <rfalSetMode+0x94>
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_nfc | ST25R3911_REG_MODE_nfc_ar) );
 800a802:	2101      	movs	r1, #1
 800a804:	2003      	movs	r0, #3
 800a806:	f7f6 fa4f 	bl	8000ca8 <st25r3911WriteRegister>
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 800a80a:	2160      	movs	r1, #96	; 0x60
 800a80c:	2040      	movs	r0, #64	; 0x40
 800a80e:	f7f6 f88f 	bl	8000930 <st25r3911StartGPTimer_8fcs>
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800a812:	2110      	movs	r1, #16
 800a814:	2009      	movs	r0, #9
 800a816:	f7f6 facd 	bl	8000db4 <st25r3911SetRegisterBits>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800a81a:	f640 0001 	movw	r0, #2049	; 0x801
 800a81e:	f7f9 fc7d 	bl	800411c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800a822:	f640 0002 	movw	r0, #2050	; 0x802
 800a826:	f7f9 fc79 	bl	800411c <rfalSetAnalogConfig>
            break;
 800a82a:	e777      	b.n	800a71c <rfalSetMode+0x94>
        return ERR_PARAM;
 800a82c:	2007      	movs	r0, #7
}
 800a82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch( mode )
 800a830:	200f      	movs	r0, #15
}
 800a832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a834:	20000cc8 	.word	0x20000cc8

0800a838 <rfalSetBitRate>:
{
 800a838:	b508      	push	{r3, lr}
    if( gRFAL.state == RFAL_STATE_IDLE )
 800a83a:	4b0d      	ldr	r3, [pc, #52]	; (800a870 <rfalSetBitRate+0x38>)
 800a83c:	781a      	ldrb	r2, [r3, #0]
 800a83e:	b1a2      	cbz	r2, 800a86a <rfalSetBitRate+0x32>
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800a840:	28ff      	cmp	r0, #255	; 0xff
 800a842:	bf08      	it	eq
 800a844:	7898      	ldrbeq	r0, [r3, #2]
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800a846:	785a      	ldrb	r2, [r3, #1]
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800a848:	7098      	strb	r0, [r3, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800a84a:	29ff      	cmp	r1, #255	; 0xff
 800a84c:	bf08      	it	eq
 800a84e:	78d9      	ldrbeq	r1, [r3, #3]
 800a850:	70d9      	strb	r1, [r3, #3]
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800a852:	1fd3      	subs	r3, r2, #7
 800a854:	2b01      	cmp	r3, #1
 800a856:	d803      	bhi.n	800a860 <rfalSetBitRate+0x28>
}
 800a858:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a85c:	f7fe bf78 	b.w	8009750 <rfalSetBitRate.part.0>
        EXIT_ON_ERR( ret, st25r3911SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800a860:	f7f6 f838 	bl	80008d4 <st25r3911SetBitrate>
 800a864:	2800      	cmp	r0, #0
 800a866:	d0f7      	beq.n	800a858 <rfalSetBitRate+0x20>
}
 800a868:	bd08      	pop	{r3, pc}
        return ERR_WRONG_STATE;
 800a86a:	2021      	movs	r0, #33	; 0x21
}
 800a86c:	bd08      	pop	{r3, pc}
 800a86e:	bf00      	nop
 800a870:	20000cc8 	.word	0x20000cc8

0800a874 <rfalGetBitRate>:
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 800a874:	4b07      	ldr	r3, [pc, #28]	; (800a894 <rfalGetBitRate+0x20>)
 800a876:	781a      	ldrb	r2, [r3, #0]
 800a878:	b14a      	cbz	r2, 800a88e <rfalGetBitRate+0x1a>
 800a87a:	785a      	ldrb	r2, [r3, #1]
 800a87c:	b13a      	cbz	r2, 800a88e <rfalGetBitRate+0x1a>
    if( txBR != NULL )
 800a87e:	b108      	cbz	r0, 800a884 <rfalGetBitRate+0x10>
        *txBR = gRFAL.txBR;
 800a880:	789a      	ldrb	r2, [r3, #2]
 800a882:	7002      	strb	r2, [r0, #0]
    if( rxBR != NULL )
 800a884:	b109      	cbz	r1, 800a88a <rfalGetBitRate+0x16>
        *rxBR = gRFAL.rxBR;
 800a886:	78db      	ldrb	r3, [r3, #3]
 800a888:	700b      	strb	r3, [r1, #0]
    return ERR_NONE;
 800a88a:	2000      	movs	r0, #0
 800a88c:	4770      	bx	lr
        return ERR_WRONG_STATE;
 800a88e:	2021      	movs	r0, #33	; 0x21
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	20000cc8 	.word	0x20000cc8

0800a898 <rfalSetErrorHandling>:
    gRFAL.conf.eHandling = eHandling;
 800a898:	4b01      	ldr	r3, [pc, #4]	; (800a8a0 <rfalSetErrorHandling+0x8>)
 800a89a:	71d8      	strb	r0, [r3, #7]
}
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	20000cc8 	.word	0x20000cc8

0800a8a4 <rfalSetFDTPoll>:
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3911_GPT_MAX_1FC );
 800a8a4:	4a03      	ldr	r2, [pc, #12]	; (800a8b4 <rfalSetFDTPoll+0x10>)
 800a8a6:	4b04      	ldr	r3, [pc, #16]	; (800a8b8 <rfalSetFDTPoll+0x14>)
 800a8a8:	4290      	cmp	r0, r2
 800a8aa:	bf28      	it	cs
 800a8ac:	4610      	movcs	r0, r2
 800a8ae:	6118      	str	r0, [r3, #16]
}
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	0007fff8 	.word	0x0007fff8
 800a8b8:	20000cc8 	.word	0x20000cc8

0800a8bc <rfalSetFDTListen>:
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3911_MRT_MAX_1FC);
 800a8bc:	4b03      	ldr	r3, [pc, #12]	; (800a8cc <rfalSetFDTListen+0x10>)
 800a8be:	f5b0 5f7f 	cmp.w	r0, #16320	; 0x3fc0
 800a8c2:	bf28      	it	cs
 800a8c4:	f44f 507f 	movcs.w	r0, #16320	; 0x3fc0
 800a8c8:	60d8      	str	r0, [r3, #12]
}
 800a8ca:	4770      	bx	lr
 800a8cc:	20000cc8 	.word	0x20000cc8

0800a8d0 <rfalSetGT>:
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3911_GT_MAX_1FC );
 800a8d0:	4a03      	ldr	r2, [pc, #12]	; (800a8e0 <rfalSetGT+0x10>)
 800a8d2:	4b04      	ldr	r3, [pc, #16]	; (800a8e4 <rfalSetGT+0x14>)
 800a8d4:	4290      	cmp	r0, r2
 800a8d6:	bf28      	it	cs
 800a8d8:	4610      	movcs	r0, r2
 800a8da:	6098      	str	r0, [r3, #8]
}
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	040a8bc0 	.word	0x040a8bc0
 800a8e4:	20000cc8 	.word	0x20000cc8

0800a8e8 <rfalFieldOnAndStartGT>:
    if( !st25r3911IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800a8e8:	2280      	movs	r2, #128	; 0x80
{
 800a8ea:	b538      	push	{r3, r4, r5, lr}
    if( !st25r3911IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	2002      	movs	r0, #2
 800a8f0:	f7f6 f836 	bl	8000960 <st25r3911CheckReg>
 800a8f4:	b1f8      	cbz	r0, 800a936 <rfalFieldOnAndStartGT+0x4e>
 800a8f6:	4c1c      	ldr	r4, [pc, #112]	; (800a968 <rfalFieldOnAndStartGT+0x80>)
 800a8f8:	7823      	ldrb	r3, [r4, #0]
 800a8fa:	b1e3      	cbz	r3, 800a936 <rfalFieldOnAndStartGT+0x4e>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800a8fc:	2002      	movs	r0, #2
 800a8fe:	f7f9 fc0d 	bl	800411c <rfalSetAnalogConfig>
    if( !st25r3911IsTxEnabled() || !gRFAL.field )
 800a902:	2208      	movs	r2, #8
 800a904:	4611      	mov	r1, r2
 800a906:	2002      	movs	r0, #2
 800a908:	f7f6 f82a 	bl	8000960 <st25r3911CheckReg>
 800a90c:	b108      	cbz	r0, 800a912 <rfalFieldOnAndStartGT+0x2a>
 800a90e:	7923      	ldrb	r3, [r4, #4]
 800a910:	b9a3      	cbnz	r3, 800a93c <rfalFieldOnAndStartGT+0x54>
        ret = st25r3911PerformCollisionAvoidance( ST25R3911_CMD_RESPONSE_RF_COLLISION_0, ST25R3911_THRESHOLD_DO_NOT_SET, ST25R3911_THRESHOLD_DO_NOT_SET, 0 );
 800a912:	22ff      	movs	r2, #255	; 0xff
 800a914:	4611      	mov	r1, r2
 800a916:	2300      	movs	r3, #0
 800a918:	20ca      	movs	r0, #202	; 0xca
 800a91a:	f7f6 f885 	bl	8000a28 <st25r3911PerformCollisionAvoidance>
        gRFAL.field = st25r3911IsTxEnabled();
 800a91e:	2208      	movs	r2, #8
        ret = st25r3911PerformCollisionAvoidance( ST25R3911_CMD_RESPONSE_RF_COLLISION_0, ST25R3911_THRESHOLD_DO_NOT_SET, ST25R3911_THRESHOLD_DO_NOT_SET, 0 );
 800a920:	4605      	mov	r5, r0
        gRFAL.field = st25r3911IsTxEnabled();
 800a922:	4611      	mov	r1, r2
 800a924:	2002      	movs	r0, #2
 800a926:	f7f6 f81b 	bl	8000960 <st25r3911CheckReg>
 800a92a:	7120      	strb	r0, [r4, #4]
        if(gRFAL.field)
 800a92c:	b9c8      	cbnz	r0, 800a962 <rfalFieldOnAndStartGT+0x7a>
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800a92e:	68a0      	ldr	r0, [r4, #8]
 800a930:	b940      	cbnz	r0, 800a944 <rfalFieldOnAndStartGT+0x5c>
}
 800a932:	4628      	mov	r0, r5
 800a934:	bd38      	pop	{r3, r4, r5, pc}
        return ERR_WRONG_STATE;
 800a936:	2521      	movs	r5, #33	; 0x21
}
 800a938:	4628      	mov	r0, r5
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800a93c:	68a0      	ldr	r0, [r4, #8]
    ret = ERR_NONE;
 800a93e:	2500      	movs	r5, #0
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800a940:	2800      	cmp	r0, #0
 800a942:	d0f6      	beq.n	800a932 <rfalFieldOnAndStartGT+0x4a>
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3911_GT_MIN_1FC) ) );
 800a944:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800a948:	4290      	cmp	r0, r2
 800a94a:	4b08      	ldr	r3, [pc, #32]	; (800a96c <rfalFieldOnAndStartGT+0x84>)
 800a94c:	bf38      	it	cc
 800a94e:	4610      	movcc	r0, r2
 800a950:	fba3 3000 	umull	r3, r0, r3, r0
 800a954:	f3c0 300f 	ubfx	r0, r0, #12, #16
 800a958:	f7f6 fda6 	bl	80014a8 <timerCalculateTimer>
 800a95c:	6420      	str	r0, [r4, #64]	; 0x40
}
 800a95e:	4628      	mov	r0, r5
 800a960:	bd38      	pop	{r3, r4, r5, pc}
            st25r3911TxRxOn(); /* Enable Tx and Rx (Tx is already On) */
 800a962:	f7f5 fe1f 	bl	80005a4 <st25r3911TxRxOn>
 800a966:	e7e2      	b.n	800a92e <rfalFieldOnAndStartGT+0x46>
 800a968:	20000cc8 	.word	0x20000cc8
 800a96c:	4d542005 	.word	0x4d542005

0800a970 <rfalFieldOff>:
{
 800a970:	b510      	push	{r4, lr}
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 800a972:	4c0c      	ldr	r4, [pc, #48]	; (800a9a4 <rfalFieldOff+0x34>)
 800a974:	7d23      	ldrb	r3, [r4, #20]
 800a976:	b93b      	cbnz	r3, 800a988 <rfalFieldOff+0x18>
    st25r3911TxRxOff();
 800a978:	f7f5 fe18 	bl	80005ac <st25r3911TxRxOff>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 800a97c:	2003      	movs	r0, #3
 800a97e:	f7f9 fbcd 	bl	800411c <rfalSetAnalogConfig>
    gRFAL.field = false;
 800a982:	2000      	movs	r0, #0
 800a984:	7120      	strb	r0, [r4, #4]
}
 800a986:	bd10      	pop	{r4, pc}
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 800a988:	21e0      	movs	r1, #224	; 0xe0
 800a98a:	2005      	movs	r0, #5
 800a98c:	f7f6 f9d0 	bl	8000d30 <st25r3911ClrRegisterBits>
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800a990:	2110      	movs	r1, #16
 800a992:	200b      	movs	r0, #11
 800a994:	f7f6 fa0e 	bl	8000db4 <st25r3911SetRegisterBits>
    if( gRFAL.callbacks.postTxRx != NULL )
 800a998:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d0ec      	beq.n	800a978 <rfalFieldOff+0x8>
        gRFAL.callbacks.postTxRx();
 800a99e:	4798      	blx	r3
 800a9a0:	e7ea      	b.n	800a978 <rfalFieldOff+0x8>
 800a9a2:	bf00      	nop
 800a9a4:	20000cc8 	.word	0x20000cc8

0800a9a8 <rfalStartTransceive>:
    if( ctx == NULL )
 800a9a8:	b1c0      	cbz	r0, 800a9dc <rfalStartTransceive+0x34>
{
 800a9aa:	b538      	push	{r3, r4, r5, lr}
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800a9ac:	4d0c      	ldr	r5, [pc, #48]	; (800a9e0 <rfalStartTransceive+0x38>)
 800a9ae:	782b      	ldrb	r3, [r5, #0]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d911      	bls.n	800a9d8 <rfalStartTransceive+0x30>
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800a9b4:	2208      	movs	r2, #8
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	2002      	movs	r0, #2
 800a9bc:	f7f5 ffd0 	bl	8000960 <st25r3911CheckReg>
 800a9c0:	b928      	cbnz	r0, 800a9ce <rfalStartTransceive+0x26>
 800a9c2:	786b      	ldrb	r3, [r5, #1]
 800a9c4:	3b0a      	subs	r3, #10
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d901      	bls.n	800a9ce <rfalStartTransceive+0x26>
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	b923      	cbnz	r3, 800a9d8 <rfalStartTransceive+0x30>
 800a9ce:	4620      	mov	r0, r4
}
 800a9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9d4:	f7fe bfca 	b.w	800996c <rfalStartTransceive.part.0>
    return ERR_WRONG_STATE;
 800a9d8:	2021      	movs	r0, #33	; 0x21
}
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
        return ERR_PARAM;
 800a9dc:	2007      	movs	r0, #7
}
 800a9de:	4770      	bx	lr
 800a9e0:	20000cc8 	.word	0x20000cc8

0800a9e4 <rfalTransceiveBlockingTx>:
{
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	b088      	sub	sp, #32
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800a9e8:	00c9      	lsls	r1, r1, #3
{
 800a9ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800a9ec:	9405      	str	r4, [sp, #20]
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800a9ee:	4c31      	ldr	r4, [pc, #196]	; (800aab4 <rfalTransceiveBlockingTx+0xd0>)
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800a9f0:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a9f4:	00db      	lsls	r3, r3, #3
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800a9f6:	7821      	ldrb	r1, [r4, #0]
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800a9f8:	9203      	str	r2, [sp, #12]
 800a9fa:	f8ad 3010 	strh.w	r3, [sp, #16]
{
 800a9fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800aa02:	2901      	cmp	r1, #1
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800aa04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa08:	9001      	str	r0, [sp, #4]
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800aa0a:	d939      	bls.n	800aa80 <rfalTransceiveBlockingTx+0x9c>
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800aa0c:	2208      	movs	r2, #8
 800aa0e:	4611      	mov	r1, r2
 800aa10:	2002      	movs	r0, #2
 800aa12:	f7f5 ffa5 	bl	8000960 <st25r3911CheckReg>
 800aa16:	b928      	cbnz	r0, 800aa24 <rfalTransceiveBlockingTx+0x40>
 800aa18:	7863      	ldrb	r3, [r4, #1]
 800aa1a:	3b0a      	subs	r3, #10
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d901      	bls.n	800aa24 <rfalTransceiveBlockingTx+0x40>
 800aa20:	9b01      	ldr	r3, [sp, #4]
 800aa22:	bb6b      	cbnz	r3, 800aa80 <rfalTransceiveBlockingTx+0x9c>
 800aa24:	a801      	add	r0, sp, #4
 800aa26:	f7fe ffa1 	bl	800996c <rfalStartTransceive.part.0>
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	b998      	cbnz	r0, 800aa56 <rfalTransceiveBlockingTx+0x72>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800aa2e:	2602      	movs	r6, #2
    switch( gRFAL.state )
 800aa30:	7823      	ldrb	r3, [r4, #0]
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d019      	beq.n	800aa6a <rfalTransceiveBlockingTx+0x86>
 800aa36:	2b05      	cmp	r3, #5
 800aa38:	d110      	bne.n	800aa5c <rfalTransceiveBlockingTx+0x78>
    switch( gRFAL.wum.state )
 800aa3a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d91f      	bls.n	800aa84 <rfalTransceiveBlockingTx+0xa0>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800aa44:	7d23      	ldrb	r3, [r4, #20]
 800aa46:	b163      	cbz	r3, 800aa62 <rfalTransceiveBlockingTx+0x7e>
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800aa48:	f1a3 020b 	sub.w	r2, r3, #11
 800aa4c:	2a45      	cmp	r2, #69	; 0x45
 800aa4e:	d9ef      	bls.n	800aa30 <rfalTransceiveBlockingTx+0x4c>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800aa50:	2b50      	cmp	r3, #80	; 0x50
 800aa52:	bf98      	it	ls
 800aa54:	2502      	movls	r5, #2
}
 800aa56:	4628      	mov	r0, r5
 800aa58:	b008      	add	sp, #32
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800aa5c:	7d23      	ldrb	r3, [r4, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1f2      	bne.n	800aa48 <rfalTransceiveBlockingTx+0x64>
 800aa62:	8ae5      	ldrh	r5, [r4, #22]
}
 800aa64:	4628      	mov	r0, r5
 800aa66:	b008      	add	sp, #32
 800aa68:	bd70      	pop	{r4, r5, r6, pc}
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800aa6a:	7d23      	ldrb	r3, [r4, #20]
        if( rfalIsTransceiveInTx() )
 800aa6c:	f1a3 020b 	sub.w	r2, r3, #11
 800aa70:	2a45      	cmp	r2, #69	; 0x45
 800aa72:	d91b      	bls.n	800aaac <rfalTransceiveBlockingTx+0xc8>
        if( rfalIsTransceiveInRx() )
 800aa74:	2b50      	cmp	r3, #80	; 0x50
 800aa76:	d9e6      	bls.n	800aa46 <rfalTransceiveBlockingTx+0x62>
            rfalTransceiveRx();
 800aa78:	f7ff fa3c 	bl	8009ef4 <rfalTransceiveRx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800aa7c:	7d23      	ldrb	r3, [r4, #20]
 800aa7e:	e7e2      	b.n	800aa46 <rfalTransceiveBlockingTx+0x62>
    return ERR_WRONG_STATE;
 800aa80:	2521      	movs	r5, #33	; 0x21
 800aa82:	e7e8      	b.n	800aa56 <rfalTransceiveBlockingTx+0x72>
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800aa84:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800aa88:	f7f6 fc72 	bl	8001370 <st25r3911GetInterrupt>
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d0d9      	beq.n	800aa44 <rfalTransceiveBlockingTx+0x60>
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800aa90:	0343      	lsls	r3, r0, #13
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800aa92:	bf48      	it	mi
 800aa94:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800aa98:	0381      	lsls	r1, r0, #14
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800aa9a:	bf48      	it	mi
 800aa9c:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800aaa0:	03c2      	lsls	r2, r0, #15
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800aaa2:	7d23      	ldrb	r3, [r4, #20]
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800aaa4:	bf48      	it	mi
 800aaa6:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
 800aaaa:	e7cc      	b.n	800aa46 <rfalTransceiveBlockingTx+0x62>
            rfalTransceiveTx();
 800aaac:	f7ff f80a 	bl	8009ac4 <rfalTransceiveTx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800aab0:	7d23      	ldrb	r3, [r4, #20]
 800aab2:	e7c8      	b.n	800aa46 <rfalTransceiveBlockingTx+0x62>
 800aab4:	20000cc8 	.word	0x20000cc8

0800aab8 <rfalTransceiveBlockingRx>:
{
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4c1d      	ldr	r4, [pc, #116]	; (800ab30 <rfalTransceiveBlockingRx+0x78>)
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800aabc:	2502      	movs	r5, #2
    switch( gRFAL.state )
 800aabe:	7823      	ldrb	r3, [r4, #0]
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d011      	beq.n	800aae8 <rfalTransceiveBlockingRx+0x30>
 800aac4:	2b05      	cmp	r3, #5
 800aac6:	d10a      	bne.n	800aade <rfalTransceiveBlockingRx+0x26>
    switch( gRFAL.wum.state )
 800aac8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800aacc:	3b01      	subs	r3, #1
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d915      	bls.n	800aafe <rfalTransceiveBlockingRx+0x46>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800aad2:	7d23      	ldrb	r3, [r4, #20]
 800aad4:	b133      	cbz	r3, 800aae4 <rfalTransceiveBlockingRx+0x2c>
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 800aad6:	2b50      	cmp	r3, #80	; 0x50
 800aad8:	d8f1      	bhi.n	800aabe <rfalTransceiveBlockingRx+0x6>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800aada:	2002      	movs	r0, #2
}
 800aadc:	bd38      	pop	{r3, r4, r5, pc}
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800aade:	7d23      	ldrb	r3, [r4, #20]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1f8      	bne.n	800aad6 <rfalTransceiveBlockingRx+0x1e>
 800aae4:	8ae0      	ldrh	r0, [r4, #22]
}
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800aae8:	7d23      	ldrb	r3, [r4, #20]
        if( rfalIsTransceiveInTx() )
 800aaea:	f1a3 020b 	sub.w	r2, r3, #11
 800aaee:	2a45      	cmp	r2, #69	; 0x45
 800aaf0:	d91b      	bls.n	800ab2a <rfalTransceiveBlockingRx+0x72>
        if( rfalIsTransceiveInRx() )
 800aaf2:	2b50      	cmp	r3, #80	; 0x50
 800aaf4:	d816      	bhi.n	800ab24 <rfalTransceiveBlockingRx+0x6c>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1ef      	bne.n	800aada <rfalTransceiveBlockingRx+0x22>
 800aafa:	8ae0      	ldrh	r0, [r4, #22]
    return ret;
 800aafc:	e7f3      	b.n	800aae6 <rfalTransceiveBlockingRx+0x2e>
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800aafe:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800ab02:	f7f6 fc35 	bl	8001370 <st25r3911GetInterrupt>
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d0e3      	beq.n	800aad2 <rfalTransceiveBlockingRx+0x1a>
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800ab0a:	0341      	lsls	r1, r0, #13
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800ab0c:	bf48      	it	mi
 800ab0e:	f884 5054 	strbmi.w	r5, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800ab12:	0382      	lsls	r2, r0, #14
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800ab14:	bf48      	it	mi
 800ab16:	f884 5054 	strbmi.w	r5, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800ab1a:	03c3      	lsls	r3, r0, #15
 800ab1c:	d5d9      	bpl.n	800aad2 <rfalTransceiveBlockingRx+0x1a>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800ab1e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 800ab22:	e7d6      	b.n	800aad2 <rfalTransceiveBlockingRx+0x1a>
            rfalTransceiveRx();
 800ab24:	f7ff f9e6 	bl	8009ef4 <rfalTransceiveRx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800ab28:	e7d3      	b.n	800aad2 <rfalTransceiveBlockingRx+0x1a>
            rfalTransceiveTx();
 800ab2a:	f7fe ffcb 	bl	8009ac4 <rfalTransceiveTx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800ab2e:	e7d0      	b.n	800aad2 <rfalTransceiveBlockingRx+0x1a>
 800ab30:	20000cc8 	.word	0x20000cc8

0800ab34 <rfalTransceiveBlockingTxRx>:
{
 800ab34:	b570      	push	{r4, r5, r6, lr}
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800ab36:	4c53      	ldr	r4, [pc, #332]	; (800ac84 <rfalTransceiveBlockingTxRx+0x150>)
{
 800ab38:	b088      	sub	sp, #32
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	9203      	str	r2, [sp, #12]
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800ab3e:	7822      	ldrb	r2, [r4, #0]
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800ab40:	f8ad 3010 	strh.w	r3, [sp, #16]
{
 800ab44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800ab48:	9306      	str	r3, [sp, #24]
 800ab4a:	00c9      	lsls	r1, r1, #3
{
 800ab4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800ab4e:	9001      	str	r0, [sp, #4]
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800ab50:	2a01      	cmp	r2, #1
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800ab52:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ab56:	9505      	str	r5, [sp, #20]
 800ab58:	9307      	str	r3, [sp, #28]
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800ab5a:	d95f      	bls.n	800ac1c <rfalTransceiveBlockingTxRx+0xe8>
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800ab5c:	2208      	movs	r2, #8
 800ab5e:	4611      	mov	r1, r2
 800ab60:	2002      	movs	r0, #2
 800ab62:	f7f5 fefd 	bl	8000960 <st25r3911CheckReg>
 800ab66:	b930      	cbnz	r0, 800ab76 <rfalTransceiveBlockingTxRx+0x42>
 800ab68:	7863      	ldrb	r3, [r4, #1]
 800ab6a:	3b0a      	subs	r3, #10
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d902      	bls.n	800ab76 <rfalTransceiveBlockingTxRx+0x42>
 800ab70:	9b01      	ldr	r3, [sp, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d152      	bne.n	800ac1c <rfalTransceiveBlockingTxRx+0xe8>
 800ab76:	a801      	add	r0, sp, #4
 800ab78:	f7fe fef8 	bl	800996c <rfalStartTransceive.part.0>
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800ab7c:	b998      	cbnz	r0, 800aba6 <rfalTransceiveBlockingTxRx+0x72>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800ab7e:	2602      	movs	r6, #2
    switch( gRFAL.state )
 800ab80:	7823      	ldrb	r3, [r4, #0]
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d03f      	beq.n	800ac06 <rfalTransceiveBlockingTxRx+0xd2>
 800ab86:	2b05      	cmp	r3, #5
 800ab88:	d10f      	bne.n	800abaa <rfalTransceiveBlockingTxRx+0x76>
    switch( gRFAL.wum.state )
 800ab8a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d95f      	bls.n	800ac54 <rfalTransceiveBlockingTxRx+0x120>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800ab94:	7d23      	ldrb	r3, [r4, #20]
 800ab96:	b15b      	cbz	r3, 800abb0 <rfalTransceiveBlockingTxRx+0x7c>
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800ab98:	f1a3 020b 	sub.w	r2, r3, #11
 800ab9c:	2a45      	cmp	r2, #69	; 0x45
 800ab9e:	d9ef      	bls.n	800ab80 <rfalTransceiveBlockingTxRx+0x4c>
    if( rfalIsTransceiveInRx() )
 800aba0:	2b50      	cmp	r3, #80	; 0x50
 800aba2:	d808      	bhi.n	800abb6 <rfalTransceiveBlockingTxRx+0x82>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800aba4:	2002      	movs	r0, #2
}
 800aba6:	b008      	add	sp, #32
 800aba8:	bd70      	pop	{r4, r5, r6, pc}
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800abaa:	7d23      	ldrb	r3, [r4, #20]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1f3      	bne.n	800ab98 <rfalTransceiveBlockingTxRx+0x64>
 800abb0:	8ae0      	ldrh	r0, [r4, #22]
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d1f7      	bne.n	800aba6 <rfalTransceiveBlockingTxRx+0x72>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800abb6:	2602      	movs	r6, #2
    switch( gRFAL.state )
 800abb8:	7823      	ldrb	r3, [r4, #0]
 800abba:	2b03      	cmp	r3, #3
 800abbc:	d018      	beq.n	800abf0 <rfalTransceiveBlockingTxRx+0xbc>
 800abbe:	2b05      	cmp	r3, #5
 800abc0:	d111      	bne.n	800abe6 <rfalTransceiveBlockingTxRx+0xb2>
    switch( gRFAL.wum.state )
 800abc2:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800abc6:	3b01      	subs	r3, #1
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d92a      	bls.n	800ac22 <rfalTransceiveBlockingTxRx+0xee>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800abcc:	7d23      	ldrb	r3, [r4, #20]
 800abce:	b16b      	cbz	r3, 800abec <rfalTransceiveBlockingTxRx+0xb8>
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 800abd0:	2b50      	cmp	r3, #80	; 0x50
 800abd2:	d8f1      	bhi.n	800abb8 <rfalTransceiveBlockingTxRx+0x84>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800abd4:	2002      	movs	r0, #2
    if( actLen != NULL )
 800abd6:	2d00      	cmp	r5, #0
 800abd8:	d0e5      	beq.n	800aba6 <rfalTransceiveBlockingTxRx+0x72>
        *actLen =  rfalConvBitsToBytes(*actLen);
 800abda:	882b      	ldrh	r3, [r5, #0]
 800abdc:	3307      	adds	r3, #7
 800abde:	08db      	lsrs	r3, r3, #3
 800abe0:	802b      	strh	r3, [r5, #0]
}
 800abe2:	b008      	add	sp, #32
 800abe4:	bd70      	pop	{r4, r5, r6, pc}
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800abe6:	7d23      	ldrb	r3, [r4, #20]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1f1      	bne.n	800abd0 <rfalTransceiveBlockingTxRx+0x9c>
 800abec:	8ae0      	ldrh	r0, [r4, #22]
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800abee:	e7f2      	b.n	800abd6 <rfalTransceiveBlockingTxRx+0xa2>
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800abf0:	7d23      	ldrb	r3, [r4, #20]
        if( rfalIsTransceiveInTx() )
 800abf2:	f1a3 020b 	sub.w	r2, r3, #11
 800abf6:	2a45      	cmp	r2, #69	; 0x45
 800abf8:	d929      	bls.n	800ac4e <rfalTransceiveBlockingTxRx+0x11a>
        if( rfalIsTransceiveInRx() )
 800abfa:	2b50      	cmp	r3, #80	; 0x50
 800abfc:	d824      	bhi.n	800ac48 <rfalTransceiveBlockingTxRx+0x114>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1e8      	bne.n	800abd4 <rfalTransceiveBlockingTxRx+0xa0>
 800ac02:	8ae0      	ldrh	r0, [r4, #22]
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800ac04:	e7e7      	b.n	800abd6 <rfalTransceiveBlockingTxRx+0xa2>
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800ac06:	7d23      	ldrb	r3, [r4, #20]
        if( rfalIsTransceiveInTx() )
 800ac08:	f1a3 020b 	sub.w	r2, r3, #11
 800ac0c:	2a45      	cmp	r2, #69	; 0x45
 800ac0e:	d935      	bls.n	800ac7c <rfalTransceiveBlockingTxRx+0x148>
        if( rfalIsTransceiveInRx() )
 800ac10:	2b50      	cmp	r3, #80	; 0x50
 800ac12:	d9c0      	bls.n	800ab96 <rfalTransceiveBlockingTxRx+0x62>
            rfalTransceiveRx();
 800ac14:	f7ff f96e 	bl	8009ef4 <rfalTransceiveRx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800ac18:	7d23      	ldrb	r3, [r4, #20]
 800ac1a:	e7bc      	b.n	800ab96 <rfalTransceiveBlockingTxRx+0x62>
    return ERR_WRONG_STATE;
 800ac1c:	2021      	movs	r0, #33	; 0x21
}
 800ac1e:	b008      	add	sp, #32
 800ac20:	bd70      	pop	{r4, r5, r6, pc}
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800ac22:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800ac26:	f7f6 fba3 	bl	8001370 <st25r3911GetInterrupt>
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d0ce      	beq.n	800abcc <rfalTransceiveBlockingTxRx+0x98>
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800ac2e:	0341      	lsls	r1, r0, #13
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800ac30:	bf48      	it	mi
 800ac32:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800ac36:	0382      	lsls	r2, r0, #14
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800ac38:	bf48      	it	mi
 800ac3a:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800ac3e:	03c3      	lsls	r3, r0, #15
 800ac40:	d5c4      	bpl.n	800abcc <rfalTransceiveBlockingTxRx+0x98>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800ac42:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
 800ac46:	e7c1      	b.n	800abcc <rfalTransceiveBlockingTxRx+0x98>
            rfalTransceiveRx();
 800ac48:	f7ff f954 	bl	8009ef4 <rfalTransceiveRx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800ac4c:	e7be      	b.n	800abcc <rfalTransceiveBlockingTxRx+0x98>
            rfalTransceiveTx();
 800ac4e:	f7fe ff39 	bl	8009ac4 <rfalTransceiveTx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800ac52:	e7bb      	b.n	800abcc <rfalTransceiveBlockingTxRx+0x98>
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800ac54:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800ac58:	f7f6 fb8a 	bl	8001370 <st25r3911GetInterrupt>
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d099      	beq.n	800ab94 <rfalTransceiveBlockingTxRx+0x60>
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800ac60:	0342      	lsls	r2, r0, #13
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800ac62:	bf48      	it	mi
 800ac64:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800ac68:	0383      	lsls	r3, r0, #14
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800ac6a:	bf48      	it	mi
 800ac6c:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800ac70:	03c0      	lsls	r0, r0, #15
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800ac72:	7d23      	ldrb	r3, [r4, #20]
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800ac74:	bf48      	it	mi
 800ac76:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
 800ac7a:	e78c      	b.n	800ab96 <rfalTransceiveBlockingTxRx+0x62>
            rfalTransceiveTx();
 800ac7c:	f7fe ff22 	bl	8009ac4 <rfalTransceiveTx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800ac80:	7d23      	ldrb	r3, [r4, #20]
 800ac82:	e788      	b.n	800ab96 <rfalTransceiveBlockingTxRx+0x62>
 800ac84:	20000cc8 	.word	0x20000cc8

0800ac88 <rfalGetTransceiveStatus>:
 800ac88:	4b03      	ldr	r3, [pc, #12]	; (800ac98 <rfalGetTransceiveStatus+0x10>)
 800ac8a:	7d1a      	ldrb	r2, [r3, #20]
 800ac8c:	b90a      	cbnz	r2, 800ac92 <rfalGetTransceiveStatus+0xa>
 800ac8e:	8ad8      	ldrh	r0, [r3, #22]
 800ac90:	4770      	bx	lr
 800ac92:	2002      	movs	r0, #2
}
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	20000cc8 	.word	0x20000cc8

0800ac9c <rfalWorker>:
{
 800ac9c:	b510      	push	{r4, lr}
    switch( gRFAL.state )
 800ac9e:	4c18      	ldr	r4, [pc, #96]	; (800ad00 <rfalWorker+0x64>)
 800aca0:	7823      	ldrb	r3, [r4, #0]
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d007      	beq.n	800acb6 <rfalWorker+0x1a>
 800aca6:	2b05      	cmp	r3, #5
 800aca8:	d104      	bne.n	800acb4 <rfalWorker+0x18>
    switch( gRFAL.wum.state )
 800acaa:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800acae:	3b01      	subs	r3, #1
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d90b      	bls.n	800accc <rfalWorker+0x30>
}
 800acb4:	bd10      	pop	{r4, pc}
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800acb6:	7d23      	ldrb	r3, [r4, #20]
        if( rfalIsTransceiveInTx() )
 800acb8:	f1a3 020b 	sub.w	r2, r3, #11
 800acbc:	2a45      	cmp	r2, #69	; 0x45
 800acbe:	d91b      	bls.n	800acf8 <rfalWorker+0x5c>
        if( rfalIsTransceiveInRx() )
 800acc0:	2b50      	cmp	r3, #80	; 0x50
 800acc2:	d9f7      	bls.n	800acb4 <rfalWorker+0x18>
}
 800acc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            rfalTransceiveRx();
 800acc8:	f7ff b914 	b.w	8009ef4 <rfalTransceiveRx>
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800accc:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800acd0:	f7f6 fb4e 	bl	8001370 <st25r3911GetInterrupt>
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d0ed      	beq.n	800acb4 <rfalWorker+0x18>
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800acd8:	0341      	lsls	r1, r0, #13
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800acda:	bf44      	itt	mi
 800acdc:	2302      	movmi	r3, #2
 800acde:	f884 3054 	strbmi.w	r3, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800ace2:	0382      	lsls	r2, r0, #14
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800ace4:	bf44      	itt	mi
 800ace6:	2302      	movmi	r3, #2
 800ace8:	f884 3054 	strbmi.w	r3, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800acec:	03c3      	lsls	r3, r0, #15
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800acee:	bf44      	itt	mi
 800acf0:	2302      	movmi	r3, #2
 800acf2:	f884 3054 	strbmi.w	r3, [r4, #84]	; 0x54
}
 800acf6:	bd10      	pop	{r4, pc}
 800acf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            rfalTransceiveTx();
 800acfc:	f7fe bee2 	b.w	8009ac4 <rfalTransceiveTx>
 800ad00:	20000cc8 	.word	0x20000cc8

0800ad04 <rfalISO14443ATransceiveShortFrame>:
{
 800ad04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad08:	4690      	mov	r8, r2
    if( !st25r3911IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 800ad0a:	2208      	movs	r2, #8
{
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	460d      	mov	r5, r1
    if( !st25r3911IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 800ad10:	2002      	movs	r0, #2
 800ad12:	4611      	mov	r1, r2
{
 800ad14:	461f      	mov	r7, r3
    if( !st25r3911IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 800ad16:	f7f5 fe23 	bl	8000960 <st25r3911CheckReg>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	f000 8093 	beq.w	800ae46 <rfalISO14443ATransceiveShortFrame+0x142>
 800ad20:	4c59      	ldr	r4, [pc, #356]	; (800ae88 <rfalISO14443ATransceiveShortFrame+0x184>)
 800ad22:	7823      	ldrb	r3, [r4, #0]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	f240 808e 	bls.w	800ae46 <rfalISO14443ATransceiveShortFrame+0x142>
 800ad2a:	7863      	ldrb	r3, [r4, #1]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	f200 8089 	bhi.w	800ae46 <rfalISO14443ATransceiveShortFrame+0x142>
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 800ad34:	2d00      	cmp	r5, #0
 800ad36:	f000 808a 	beq.w	800ae4e <rfalISO14443ATransceiveShortFrame+0x14a>
 800ad3a:	2f00      	cmp	r7, #0
 800ad3c:	f000 8087 	beq.w	800ae4e <rfalISO14443ATransceiveShortFrame+0x14a>
 800ad40:	9b06      	ldr	r3, [sp, #24]
 800ad42:	3301      	adds	r3, #1
 800ad44:	f000 8083 	beq.w	800ae4e <rfalISO14443ATransceiveShortFrame+0x14a>
    switch (txCmd)
 800ad48:	2e26      	cmp	r6, #38	; 0x26
 800ad4a:	f000 808c 	beq.w	800ae66 <rfalISO14443ATransceiveShortFrame+0x162>
 800ad4e:	2e52      	cmp	r6, #82	; 0x52
 800ad50:	d17d      	bne.n	800ae4e <rfalISO14443ATransceiveShortFrame+0x14a>
            directCmd = ST25R3911_CMD_TRANSMIT_WUPA;
 800ad52:	26c7      	movs	r6, #199	; 0xc7
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl);
 800ad54:	2101      	movs	r1, #1
 800ad56:	2005      	movs	r0, #5
 800ad58:	f7f6 f82c 	bl	8000db4 <st25r3911SetRegisterBits>
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800ad5c:	2180      	movs	r1, #128	; 0x80
 800ad5e:	2009      	movs	r0, #9
 800ad60:	f7f6 f828 	bl	8000db4 <st25r3911SetRegisterBits>
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 800ad64:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800ad66:	2800      	cmp	r0, #0
 800ad68:	d17f      	bne.n	800ae6a <rfalISO14443ATransceiveShortFrame+0x166>
    while( st25r3911IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 800ad6a:	2204      	movs	r2, #4
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	202b      	movs	r0, #43	; 0x2b
 800ad70:	f7f5 fdf6 	bl	8000960 <st25r3911CheckReg>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d1f8      	bne.n	800ad6a <rfalISO14443ATransceiveShortFrame+0x66>
    st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3911_NRT_MAX_1FC ) ) );
 800ad78:	9a06      	ldr	r2, [sp, #24]
 800ad7a:	4b44      	ldr	r3, [pc, #272]	; (800ae8c <rfalISO14443ATransceiveShortFrame+0x188>)
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800ad7c:	6420      	str	r0, [r4, #64]	; 0x40
    st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3911_NRT_MAX_1FC ) ) );
 800ad7e:	f502 7010 	add.w	r0, r2, #576	; 0x240
 800ad82:	4298      	cmp	r0, r3
 800ad84:	bf28      	it	cs
 800ad86:	4618      	movcs	r0, r3
 800ad88:	0980      	lsrs	r0, r0, #6
    gRFAL.TxRx.ctx.flags     = ((uint32_t) RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	6323      	str	r3, [r4, #48]	; 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 800ad8e:	6265      	str	r5, [r4, #36]	; 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 800ad90:	f8a4 8028 	strh.w	r8, [r4, #40]	; 0x28
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 800ad94:	62e7      	str	r7, [r4, #44]	; 0x2c
    st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3911_NRT_MAX_1FC ) ) );
 800ad96:	f7f5 fe15 	bl	80009c4 <st25r3911SetNoResponseTime_64fcs>
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800ad9a:	68e3      	ldr	r3, [r4, #12]
 800ad9c:	b153      	cbz	r3, 800adb4 <rfalISO14443ATransceiveShortFrame+0xb0>
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 800ad9e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800ada2:	bf26      	itte	cs
 800ada4:	f5a3 73aa 	subcs.w	r3, r3, #340	; 0x154
 800ada8:	f3c3 1187 	ubfxcs	r1, r3, #6, #8
 800adac:	2104      	movcc	r1, #4
 800adae:	200e      	movs	r0, #14
 800adb0:	f7f5 ff7a 	bl	8000ca8 <st25r3911WriteRegister>
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800adb4:	6920      	ldr	r0, [r4, #16]
 800adb6:	b150      	cbz	r0, 800adce <rfalISO14443ATransceiveShortFrame+0xca>
        st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 800adb8:	f240 433b 	movw	r3, #1083	; 0x43b
 800adbc:	4298      	cmp	r0, r3
 800adbe:	bf88      	it	hi
 800adc0:	f2a0 403c 	subwhi	r0, r0, #1084	; 0x43c
 800adc4:	f3c0 00cf 	ubfx	r0, r0, #3, #16
 800adc8:	2120      	movs	r1, #32
 800adca:	f7f5 fdb1 	bl	8000930 <st25r3911StartGPTimer_8fcs>
    rfalPrepareTransceive();
 800adce:	f7fe fc4d 	bl	800966c <rfalPrepareTransceive>
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 800add2:	2004      	movs	r0, #4
 800add4:	f7f6 facc 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 800add8:	2004      	movs	r0, #4
 800adda:	f7f6 faef 	bl	80013bc <st25r3911EnableInterrupts>
    rfalCheckEnableObsModeTx();
 800adde:	7961      	ldrb	r1, [r4, #5]
 800ade0:	2900      	cmp	r1, #0
 800ade2:	d148      	bne.n	800ae76 <rfalISO14443ATransceiveShortFrame+0x172>
    st25r3911WriteRegister( ST25R3911_REG_NUM_TX_BYTES2, 0);
 800ade4:	2100      	movs	r1, #0
 800ade6:	201e      	movs	r0, #30
 800ade8:	f7f5 ff5e 	bl	8000ca8 <st25r3911WriteRegister>
    st25r3911ExecuteCommand( directCmd );
 800adec:	4630      	mov	r0, r6
 800adee:	f7f6 f9a3 	bl	8001138 <st25r3911ExecuteCommand>
    if( st25r3911WaitForInterruptsTimed( ST25R3911_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3911_SW_TMR_MIN_1MS ) ) == 0U)
 800adf2:	9a06      	ldr	r2, [sp, #24]
 800adf4:	f646 13ef 	movw	r3, #27119	; 0x69ef
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d932      	bls.n	800ae62 <rfalISO14443ATransceiveShortFrame+0x15e>
 800adfc:	4924      	ldr	r1, [pc, #144]	; (800ae90 <rfalISO14443ATransceiveShortFrame+0x18c>)
 800adfe:	4613      	mov	r3, r2
 800ae00:	fba1 3103 	umull	r3, r1, r1, r3
 800ae04:	f3c1 310f 	ubfx	r1, r1, #12, #16
 800ae08:	2008      	movs	r0, #8
 800ae0a:	f7f6 fa75 	bl	80012f8 <st25r3911WaitForInterruptsTimed>
 800ae0e:	b330      	cbz	r0, 800ae5e <rfalISO14443ATransceiveShortFrame+0x15a>
        rfalCheckEnableObsModeRx();
 800ae10:	79a1      	ldrb	r1, [r4, #6]
 800ae12:	bba1      	cbnz	r1, 800ae7e <rfalISO14443ATransceiveShortFrame+0x17a>
        gRFAL.state       = RFAL_STATE_TXRX;
 800ae14:	2103      	movs	r1, #3
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800ae16:	2251      	movs	r2, #81	; 0x51
        gRFAL.TxRx.status = ERR_BUSY;
 800ae18:	2302      	movs	r3, #2
        gRFAL.state       = RFAL_STATE_TXRX;
 800ae1a:	7021      	strb	r1, [r4, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800ae1c:	7522      	strb	r2, [r4, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800ae1e:	82e3      	strh	r3, [r4, #22]
        rfalWorker();
 800ae20:	f7ff ff3c 	bl	800ac9c <rfalWorker>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800ae24:	7d23      	ldrb	r3, [r4, #20]
 800ae26:	b9b3      	cbnz	r3, 800ae56 <rfalISO14443ATransceiveShortFrame+0x152>
 800ae28:	8ae4      	ldrh	r4, [r4, #22]
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 800ae2a:	2004      	movs	r0, #4
 800ae2c:	f7f6 faee 	bl	800140c <st25r3911DisableInterrupts>
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 800ae30:	2101      	movs	r1, #1
 800ae32:	2005      	movs	r0, #5
 800ae34:	f7f5 ff7c 	bl	8000d30 <st25r3911ClrRegisterBits>
    st25r3911ClrRegisterBits(ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800ae38:	2180      	movs	r1, #128	; 0x80
 800ae3a:	2009      	movs	r0, #9
 800ae3c:	f7f5 ff78 	bl	8000d30 <st25r3911ClrRegisterBits>
}
 800ae40:	4620      	mov	r0, r4
 800ae42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return ERR_WRONG_STATE;
 800ae46:	2421      	movs	r4, #33	; 0x21
}
 800ae48:	4620      	mov	r0, r4
 800ae4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (txCmd)
 800ae4e:	2407      	movs	r4, #7
}
 800ae50:	4620      	mov	r0, r4
 800ae52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 800ae56:	2b50      	cmp	r3, #80	; 0x50
 800ae58:	d8e2      	bhi.n	800ae20 <rfalISO14443ATransceiveShortFrame+0x11c>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800ae5a:	2402      	movs	r4, #2
 800ae5c:	e7e5      	b.n	800ae2a <rfalISO14443ATransceiveShortFrame+0x126>
        ret = ERR_IO;
 800ae5e:	2403      	movs	r4, #3
 800ae60:	e7e3      	b.n	800ae2a <rfalISO14443ATransceiveShortFrame+0x126>
    if( st25r3911WaitForInterruptsTimed( ST25R3911_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3911_SW_TMR_MIN_1MS ) ) == 0U)
 800ae62:	2101      	movs	r1, #1
 800ae64:	e7d0      	b.n	800ae08 <rfalISO14443ATransceiveShortFrame+0x104>
    switch (txCmd)
 800ae66:	26c6      	movs	r6, #198	; 0xc6
 800ae68:	e774      	b.n	800ad54 <rfalISO14443ATransceiveShortFrame+0x50>
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 800ae6a:	f7f6 fb23 	bl	80014b4 <timerIsExpired>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f47f af7b 	bne.w	800ad6a <rfalISO14443ATransceiveShortFrame+0x66>
 800ae74:	e776      	b.n	800ad64 <rfalISO14443ATransceiveShortFrame+0x60>
    rfalCheckEnableObsModeTx();
 800ae76:	2001      	movs	r0, #1
 800ae78:	f7f5 fedc 	bl	8000c34 <st25r3911WriteTestRegister>
 800ae7c:	e7b2      	b.n	800ade4 <rfalISO14443ATransceiveShortFrame+0xe0>
        rfalCheckEnableObsModeRx();
 800ae7e:	2001      	movs	r0, #1
 800ae80:	f7f5 fed8 	bl	8000c34 <st25r3911WriteTestRegister>
 800ae84:	e7c6      	b.n	800ae14 <rfalISO14443ATransceiveShortFrame+0x110>
 800ae86:	bf00      	nop
 800ae88:	20000cc8 	.word	0x20000cc8
 800ae8c:	0ffff000 	.word	0x0ffff000
 800ae90:	4d542005 	.word	0x4d542005

0800ae94 <rfalISO14443ATransceiveAnticollisionFrame>:
{
 800ae94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 800ae98:	4c7b      	ldr	r4, [pc, #492]	; (800b088 <rfalISO14443ATransceiveAnticollisionFrame+0x1f4>)
{
 800ae9a:	461e      	mov	r6, r3
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 800ae9c:	7823      	ldrb	r3, [r4, #0]
 800ae9e:	2b01      	cmp	r3, #1
{
 800aea0:	b089      	sub	sp, #36	; 0x24
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 800aea2:	f240 80c0 	bls.w	800b026 <rfalISO14443ATransceiveAnticollisionFrame+0x192>
 800aea6:	f894 9001 	ldrb.w	r9, [r4, #1]
 800aeaa:	f1b9 0f01 	cmp.w	r9, #1
 800aeae:	f040 80ba 	bne.w	800b026 <rfalISO14443ATransceiveAnticollisionFrame+0x192>
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	f000 8085 	beq.w	800afc4 <rfalISO14443ATransceiveAnticollisionFrame+0x130>
 800aeba:	460f      	mov	r7, r1
 800aebc:	2900      	cmp	r1, #0
 800aebe:	f000 8081 	beq.w	800afc4 <rfalISO14443ATransceiveAnticollisionFrame+0x130>
 800aec2:	4690      	mov	r8, r2
 800aec4:	2a00      	cmp	r2, #0
 800aec6:	d07d      	beq.n	800afc4 <rfalISO14443ATransceiveAnticollisionFrame+0x130>
 800aec8:	2e00      	cmp	r6, #0
 800aeca:	d07b      	beq.n	800afc4 <rfalISO14443ATransceiveAnticollisionFrame+0x130>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800aecc:	f240 1003 	movw	r0, #259	; 0x103
 800aed0:	f7f9 f924 	bl	800411c <rfalSetAnalogConfig>
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 800aed4:	4649      	mov	r1, r9
 800aed6:	2005      	movs	r0, #5
 800aed8:	f7f5 ff6c 	bl	8000db4 <st25r3911SetRegisterBits>
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800aedc:	2180      	movs	r1, #128	; 0x80
 800aede:	2009      	movs	r0, #9
 800aee0:	f7f5 ff68 	bl	8000db4 <st25r3911SetRegisterBits>
    ctx.fwt       = fwt;
 800aee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 800aee6:	f898 2000 	ldrb.w	r2, [r8]
    ctx.fwt       = fwt;
 800aeea:	9307      	str	r3, [sp, #28]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 800aeec:	783b      	ldrb	r3, [r7, #0]
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800aeee:	7821      	ldrb	r1, [r4, #0]
    ctx.rxRcvdLen = rxLength;
 800aef0:	9605      	str	r6, [sp, #20]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 800aef2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    ctx.rxBuf     = &buf[*bytesToSend];
 800aef6:	442b      	add	r3, r5
 800aef8:	9303      	str	r3, [sp, #12]
    ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF );  /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800aefa:	230b      	movs	r3, #11
 800aefc:	9306      	str	r3, [sp, #24]
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800aefe:	2901      	cmp	r1, #1
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 800af00:	f04f 0328 	mov.w	r3, #40	; 0x28
    ctx.txBuf     = buf;
 800af04:	9501      	str	r5, [sp, #4]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 800af06:	f8ad 2008 	strh.w	r2, [sp, #8]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 800af0a:	f8ad 3010 	strh.w	r3, [sp, #16]
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800af0e:	d90e      	bls.n	800af2e <rfalISO14443ATransceiveAnticollisionFrame+0x9a>
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800af10:	2208      	movs	r2, #8
 800af12:	4611      	mov	r1, r2
 800af14:	2002      	movs	r0, #2
 800af16:	f7f5 fd23 	bl	8000960 <st25r3911CheckReg>
 800af1a:	b928      	cbnz	r0, 800af28 <rfalISO14443ATransceiveAnticollisionFrame+0x94>
 800af1c:	7863      	ldrb	r3, [r4, #1]
 800af1e:	3b0a      	subs	r3, #10
 800af20:	2b02      	cmp	r3, #2
 800af22:	d901      	bls.n	800af28 <rfalISO14443ATransceiveAnticollisionFrame+0x94>
 800af24:	9b01      	ldr	r3, [sp, #4]
 800af26:	b913      	cbnz	r3, 800af2e <rfalISO14443ATransceiveAnticollisionFrame+0x9a>
 800af28:	a801      	add	r0, sp, #4
 800af2a:	f7fe fd1f 	bl	800996c <rfalStartTransceive.part.0>
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 800af2e:	2004      	movs	r0, #4
 800af30:	f7f6 fa1e 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 800af34:	2004      	movs	r0, #4
 800af36:	f7f6 fa41 	bl	80013bc <st25r3911EnableInterrupts>
    if ((*bitsToSend) > 0U)
 800af3a:	f898 9000 	ldrb.w	r9, [r8]
 800af3e:	f1b9 0f00 	cmp.w	r9, #0
 800af42:	d175      	bne.n	800b030 <rfalISO14443ATransceiveAnticollisionFrame+0x19c>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800af44:	2602      	movs	r6, #2
    switch( gRFAL.state )
 800af46:	7823      	ldrb	r3, [r4, #0]
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d061      	beq.n	800b010 <rfalISO14443ATransceiveAnticollisionFrame+0x17c>
 800af4c:	2b05      	cmp	r3, #5
 800af4e:	d13e      	bne.n	800afce <rfalISO14443ATransceiveAnticollisionFrame+0x13a>
    switch( gRFAL.wum.state )
 800af50:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800af54:	3b01      	subs	r3, #1
 800af56:	2b01      	cmp	r3, #1
 800af58:	d97e      	bls.n	800b058 <rfalISO14443ATransceiveAnticollisionFrame+0x1c4>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800af5a:	7d23      	ldrb	r3, [r4, #20]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d039      	beq.n	800afd4 <rfalISO14443ATransceiveAnticollisionFrame+0x140>
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800af60:	f1a3 020b 	sub.w	r2, r3, #11
 800af64:	2a45      	cmp	r2, #69	; 0x45
 800af66:	d9ee      	bls.n	800af46 <rfalISO14443ATransceiveAnticollisionFrame+0xb2>
    if( rfalIsTransceiveInRx() )
 800af68:	2b50      	cmp	r3, #80	; 0x50
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800af6a:	bf98      	it	ls
 800af6c:	2602      	movls	r6, #2
    if( rfalIsTransceiveInRx() )
 800af6e:	d934      	bls.n	800afda <rfalISO14443ATransceiveAnticollisionFrame+0x146>
        rfalWorker();
 800af70:	f7ff fe94 	bl	800ac9c <rfalWorker>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800af74:	7d23      	ldrb	r3, [r4, #20]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d146      	bne.n	800b008 <rfalISO14443ATransceiveAnticollisionFrame+0x174>
 800af7a:	8ae6      	ldrh	r6, [r4, #22]
       if ((*bitsToSend) > 0U)
 800af7c:	f898 3000 	ldrb.w	r3, [r8]
 800af80:	b183      	cbz	r3, 800afa4 <rfalISO14443ATransceiveAnticollisionFrame+0x110>
           buf[(*bytesToSend)] >>= (*bitsToSend);
 800af82:	7839      	ldrb	r1, [r7, #0]
 800af84:	5c6a      	ldrb	r2, [r5, r1]
 800af86:	fa42 f303 	asr.w	r3, r2, r3
 800af8a:	546b      	strb	r3, [r5, r1]
           buf[(*bytesToSend)] <<= (*bitsToSend);
 800af8c:	783a      	ldrb	r2, [r7, #0]
 800af8e:	f898 1000 	ldrb.w	r1, [r8]
 800af92:	5cab      	ldrb	r3, [r5, r2]
 800af94:	408b      	lsls	r3, r1
 800af96:	54ab      	strb	r3, [r5, r2]
           buf[(*bytesToSend)] |= collByte;
 800af98:	783a      	ldrb	r2, [r7, #0]
 800af9a:	5cab      	ldrb	r3, [r5, r2]
 800af9c:	ea49 0903 	orr.w	r9, r9, r3
 800afa0:	f805 9002 	strb.w	r9, [r5, r2]
       if( (ERR_RF_COLLISION == ret) )
 800afa4:	2e1d      	cmp	r6, #29
 800afa6:	d118      	bne.n	800afda <rfalISO14443ATransceiveAnticollisionFrame+0x146>
           st25r3911ReadRegister( ST25R3911_REG_COLLISION_STATUS, &collData);
 800afa8:	f10d 0103 	add.w	r1, sp, #3
 800afac:	201c      	movs	r0, #28
 800afae:	f7f5 fdc3 	bl	8000b38 <st25r3911ReadRegister>
           (*bytesToSend) = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_byte) & 0x0FU); // 4-bits Byte information
 800afb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800afb6:	091a      	lsrs	r2, r3, #4
           (*bitsToSend)  = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_bit)  & 0x07U); // 3-bits bit information
 800afb8:	f3c3 0342 	ubfx	r3, r3, #1, #3
           (*bytesToSend) = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_byte) & 0x0FU); // 4-bits Byte information
 800afbc:	703a      	strb	r2, [r7, #0]
           (*bitsToSend)  = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_bit)  & 0x07U); // 3-bits bit information
 800afbe:	f888 3000 	strb.w	r3, [r8]
 800afc2:	e00a      	b.n	800afda <rfalISO14443ATransceiveAnticollisionFrame+0x146>
        return ERR_PARAM;
 800afc4:	2607      	movs	r6, #7
}
 800afc6:	4630      	mov	r0, r6
 800afc8:	b009      	add	sp, #36	; 0x24
 800afca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800afce:	7d23      	ldrb	r3, [r4, #20]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1c5      	bne.n	800af60 <rfalISO14443ATransceiveAnticollisionFrame+0xcc>
 800afd4:	8ae6      	ldrh	r6, [r4, #22]
    if( ret == ERR_NONE)
 800afd6:	2e00      	cmp	r6, #0
 800afd8:	d0ca      	beq.n	800af70 <rfalISO14443ATransceiveAnticollisionFrame+0xdc>
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 800afda:	2004      	movs	r0, #4
 800afdc:	f7f6 fa16 	bl	800140c <st25r3911DisableInterrupts>
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 800afe0:	2101      	movs	r1, #1
 800afe2:	2005      	movs	r0, #5
 800afe4:	f7f5 fea4 	bl	8000d30 <st25r3911ClrRegisterBits>
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800afe8:	2180      	movs	r1, #128	; 0x80
 800afea:	2009      	movs	r0, #9
 800afec:	f7f5 fea0 	bl	8000d30 <st25r3911ClrRegisterBits>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800aff0:	f240 1001 	movw	r0, #257	; 0x101
 800aff4:	f7f9 f892 	bl	800411c <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800aff8:	f44f 7081 	mov.w	r0, #258	; 0x102
 800affc:	f7f9 f88e 	bl	800411c <rfalSetAnalogConfig>
}
 800b000:	4630      	mov	r0, r6
 800b002:	b009      	add	sp, #36	; 0x24
 800b004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 800b008:	2b50      	cmp	r3, #80	; 0x50
 800b00a:	d8b1      	bhi.n	800af70 <rfalISO14443ATransceiveAnticollisionFrame+0xdc>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b00c:	2602      	movs	r6, #2
 800b00e:	e7b5      	b.n	800af7c <rfalISO14443ATransceiveAnticollisionFrame+0xe8>
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800b010:	7d23      	ldrb	r3, [r4, #20]
        if( rfalIsTransceiveInTx() )
 800b012:	f1a3 020b 	sub.w	r2, r3, #11
 800b016:	2a45      	cmp	r2, #69	; 0x45
 800b018:	d932      	bls.n	800b080 <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>
        if( rfalIsTransceiveInRx() )
 800b01a:	2b50      	cmp	r3, #80	; 0x50
 800b01c:	d99e      	bls.n	800af5c <rfalISO14443ATransceiveAnticollisionFrame+0xc8>
            rfalTransceiveRx();
 800b01e:	f7fe ff69 	bl	8009ef4 <rfalTransceiveRx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b022:	7d23      	ldrb	r3, [r4, #20]
 800b024:	e79a      	b.n	800af5c <rfalISO14443ATransceiveAnticollisionFrame+0xc8>
        return ERR_WRONG_STATE;
 800b026:	2621      	movs	r6, #33	; 0x21
}
 800b028:	4630      	mov	r0, r6
 800b02a:	b009      	add	sp, #36	; 0x24
 800b02c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 800b030:	783a      	ldrb	r2, [r7, #0]
 800b032:	5cab      	ldrb	r3, [r5, r2]
 800b034:	f1c9 0908 	rsb	r9, r9, #8
 800b038:	fa03 f909 	lsl.w	r9, r3, r9
 800b03c:	f805 9002 	strb.w	r9, [r5, r2]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 800b040:	f898 3000 	ldrb.w	r3, [r8]
 800b044:	7839      	ldrb	r1, [r7, #0]
 800b046:	f1c3 0208 	rsb	r2, r3, #8
 800b04a:	5c6b      	ldrb	r3, [r5, r1]
 800b04c:	4113      	asrs	r3, r2
 800b04e:	546b      	strb	r3, [r5, r1]
        collByte = buf[(*bytesToSend)];
 800b050:	783b      	ldrb	r3, [r7, #0]
 800b052:	f815 9003 	ldrb.w	r9, [r5, r3]
 800b056:	e775      	b.n	800af44 <rfalISO14443ATransceiveAnticollisionFrame+0xb0>
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800b058:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800b05c:	f7f6 f988 	bl	8001370 <st25r3911GetInterrupt>
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800b060:	2800      	cmp	r0, #0
 800b062:	f43f af7a 	beq.w	800af5a <rfalISO14443ATransceiveAnticollisionFrame+0xc6>
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800b066:	0341      	lsls	r1, r0, #13
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800b068:	bf48      	it	mi
 800b06a:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800b06e:	0382      	lsls	r2, r0, #14
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800b070:	bf48      	it	mi
 800b072:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800b076:	03c3      	lsls	r3, r0, #15
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800b078:	bf48      	it	mi
 800b07a:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
 800b07e:	e76c      	b.n	800af5a <rfalISO14443ATransceiveAnticollisionFrame+0xc6>
            rfalTransceiveTx();
 800b080:	f7fe fd20 	bl	8009ac4 <rfalTransceiveTx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b084:	7d23      	ldrb	r3, [r4, #20]
 800b086:	e769      	b.n	800af5c <rfalISO14443ATransceiveAnticollisionFrame+0xc8>
 800b088:	20000cc8 	.word	0x20000cc8

0800b08c <rfalISO15693TransceiveAnticollisionFrame>:
{
 800b08c:	b430      	push	{r4, r5}
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800b08e:	4c07      	ldr	r4, [pc, #28]	; (800b0ac <rfalISO15693TransceiveAnticollisionFrame+0x20>)
 800b090:	f894 c000 	ldrb.w	ip, [r4]
 800b094:	f1bc 0f01 	cmp.w	ip, #1
 800b098:	d902      	bls.n	800b0a0 <rfalISO15693TransceiveAnticollisionFrame+0x14>
 800b09a:	7864      	ldrb	r4, [r4, #1]
 800b09c:	2c07      	cmp	r4, #7
 800b09e:	d002      	beq.n	800b0a6 <rfalISO15693TransceiveAnticollisionFrame+0x1a>
}
 800b0a0:	2021      	movs	r0, #33	; 0x21
 800b0a2:	bc30      	pop	{r4, r5}
 800b0a4:	4770      	bx	lr
 800b0a6:	bc30      	pop	{r4, r5}
 800b0a8:	f7ff b9c6 	b.w	800a438 <rfalISO15693TransceiveAnticollisionFrame.part.0>
 800b0ac:	20000cc8 	.word	0x20000cc8

0800b0b0 <rfalISO15693TransceiveEOFAnticollision>:
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800b0b0:	4b0b      	ldr	r3, [pc, #44]	; (800b0e0 <rfalISO15693TransceiveEOFAnticollision+0x30>)
 800b0b2:	f893 c000 	ldrb.w	ip, [r3]
 800b0b6:	f1bc 0f01 	cmp.w	ip, #1
 800b0ba:	d902      	bls.n	800b0c2 <rfalISO15693TransceiveEOFAnticollision+0x12>
 800b0bc:	785b      	ldrb	r3, [r3, #1]
 800b0be:	2b07      	cmp	r3, #7
 800b0c0:	d001      	beq.n	800b0c6 <rfalISO15693TransceiveEOFAnticollision+0x16>
        return ERR_WRONG_STATE;
 800b0c2:	2021      	movs	r0, #33	; 0x21
}
 800b0c4:	4770      	bx	lr
{
 800b0c6:	b500      	push	{lr}
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	9200      	str	r2, [sp, #0]
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	f10d 000f 	add.w	r0, sp, #15
 800b0d6:	f7ff f9af 	bl	800a438 <rfalISO15693TransceiveAnticollisionFrame.part.0>
}
 800b0da:	b005      	add	sp, #20
 800b0dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0e0:	20000cc8 	.word	0x20000cc8

0800b0e4 <rfalFeliCaPoll>:
{
 800b0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 800b0e8:	4c95      	ldr	r4, [pc, #596]	; (800b340 <rfalFeliCaPoll+0x25c>)
{
 800b0ea:	b08d      	sub	sp, #52	; 0x34
 800b0ec:	9300      	str	r3, [sp, #0]
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 800b0ee:	7823      	ldrb	r3, [r4, #0]
{
 800b0f0:	f89d a058 	ldrb.w	sl, [sp, #88]	; 0x58
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d902      	bls.n	800b0fe <rfalFeliCaPoll+0x1a>
 800b0f8:	7863      	ldrb	r3, [r4, #1]
 800b0fa:	2b06      	cmp	r3, #6
 800b0fc:	d005      	beq.n	800b10a <rfalFeliCaPoll+0x26>
        return ERR_WRONG_STATE;
 800b0fe:	f04f 0821 	mov.w	r8, #33	; 0x21
}
 800b102:	4640      	mov	r0, r8
 800b104:	b00d      	add	sp, #52	; 0x34
 800b106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curHandling = gRFAL.conf.eHandling;
 800b10a:	79e3      	ldrb	r3, [r4, #7]
 800b10c:	9301      	str	r3, [sp, #4]
 800b10e:	4605      	mov	r5, r0
                                    rfalConv64fcTo1fc( RFAL_FELICA_POLL_DELAY_TIME + (RFAL_FELICA_POLL_SLOT_TIME * ((uint32_t)nbSlots + 1U)) ) );
 800b110:	1ceb      	adds	r3, r5, #3
    ret = rfalTransceiveBlockingTx( frame, 
 800b112:	039b      	lsls	r3, r3, #14
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800b114:	930b      	str	r3, [sp, #44]	; 0x2c
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */
 800b116:	2300      	movs	r3, #0
 800b118:	f88d 300c 	strb.w	r3, [sp, #12]
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800b11c:	930a      	str	r3, [sp, #40]	; 0x28
 800b11e:	ab03      	add	r3, sp, #12
 800b120:	9305      	str	r3, [sp, #20]
 800b122:	2328      	movs	r3, #40	; 0x28
 800b124:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b128:	f104 036a 	add.w	r3, r4, #106	; 0x6a
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 800b12c:	f88d 200f 	strb.w	r2, [sp, #15]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 800b130:	f88d 100e 	strb.w	r1, [sp, #14]
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800b134:	2208      	movs	r2, #8
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 800b136:	0a09      	lsrs	r1, r1, #8
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800b138:	9307      	str	r3, [sp, #28]
 800b13a:	23a0      	movs	r3, #160	; 0xa0
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 800b13c:	f88d 100d 	strb.w	r1, [sp, #13]
    frame[frameIdx++] = nbSlots;                     /* TimeSlot (TSN)                      */
 800b140:	f88d 0010 	strb.w	r0, [sp, #16]
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800b144:	f8ad 3020 	strh.w	r3, [sp, #32]
    gRFAL.conf.eHandling = eHandling;
 800b148:	2002      	movs	r0, #2
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800b14a:	f10d 030a 	add.w	r3, sp, #10
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800b14e:	4611      	mov	r1, r2
    gRFAL.conf.eHandling = eHandling;
 800b150:	71e0      	strb	r0, [r4, #7]
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800b152:	9309      	str	r3, [sp, #36]	; 0x24
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800b154:	f7f5 fc04 	bl	8000960 <st25r3911CheckReg>
 800b158:	b938      	cbnz	r0, 800b16a <rfalFeliCaPoll+0x86>
 800b15a:	7863      	ldrb	r3, [r4, #1]
 800b15c:	3b0a      	subs	r3, #10
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d903      	bls.n	800b16a <rfalFeliCaPoll+0x86>
 800b162:	9b05      	ldr	r3, [sp, #20]
 800b164:	2b00      	cmp	r3, #0
 800b166:	f040 80e8 	bne.w	800b33a <rfalFeliCaPoll+0x256>
 800b16a:	a805      	add	r0, sp, #20
 800b16c:	f7fe fbfe 	bl	800996c <rfalStartTransceive.part.0>
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800b170:	4680      	mov	r8, r0
 800b172:	b9b0      	cbnz	r0, 800b1a2 <rfalFeliCaPoll+0xbe>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800b174:	2602      	movs	r6, #2
    switch( gRFAL.state )
 800b176:	7823      	ldrb	r3, [r4, #0]
 800b178:	2b03      	cmp	r3, #3
 800b17a:	f000 80b8 	beq.w	800b2ee <rfalFeliCaPoll+0x20a>
 800b17e:	2b05      	cmp	r3, #5
 800b180:	d122      	bne.n	800b1c8 <rfalFeliCaPoll+0xe4>
    switch( gRFAL.wum.state )
 800b182:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800b186:	3b01      	subs	r3, #1
 800b188:	2b01      	cmp	r3, #1
 800b18a:	f240 80bc 	bls.w	800b306 <rfalFeliCaPoll+0x222>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b18e:	7d23      	ldrb	r3, [r4, #20]
 800b190:	b1eb      	cbz	r3, 800b1ce <rfalFeliCaPoll+0xea>
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800b192:	f1a3 020b 	sub.w	r2, r3, #11
 800b196:	2a45      	cmp	r2, #69	; 0x45
 800b198:	d9ed      	bls.n	800b176 <rfalFeliCaPoll+0x92>
    if( rfalIsTransceiveInRx() )
 800b19a:	2b50      	cmp	r3, #80	; 0x50
 800b19c:	d81c      	bhi.n	800b1d8 <rfalFeliCaPoll+0xf4>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b19e:	f04f 0802 	mov.w	r8, #2
    gRFAL.conf.eHandling = eHandling;
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	9b01      	ldr	r3, [sp, #4]
 800b1a6:	71e3      	strb	r3, [r4, #7]
    colDetected = 0;
 800b1a8:	4617      	mov	r7, r2
    devDetected = 0;
 800b1aa:	4616      	mov	r6, r2
    if( devicesDetected != NULL )
 800b1ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1ae:	b103      	cbz	r3, 800b1b2 <rfalFeliCaPoll+0xce>
        *devicesDetected = devDetected;
 800b1b0:	701e      	strb	r6, [r3, #0]
    if( collisionsDetected != NULL )
 800b1b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b1b4:	b103      	cbz	r3, 800b1b8 <rfalFeliCaPoll+0xd4>
        *collisionsDetected = colDetected;
 800b1b6:	701f      	strb	r7, [r3, #0]
    return (( (colDetected != 0U) || (devDetected != 0U)) ? ERR_NONE : ret);
 800b1b8:	2a00      	cmp	r2, #0
 800b1ba:	bf18      	it	ne
 800b1bc:	f04f 0800 	movne.w	r8, #0
}
 800b1c0:	4640      	mov	r0, r8
 800b1c2:	b00d      	add	sp, #52	; 0x34
 800b1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b1c8:	7d23      	ldrb	r3, [r4, #20]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1e1      	bne.n	800b192 <rfalFeliCaPoll+0xae>
 800b1ce:	f8b4 8016 	ldrh.w	r8, [r4, #22]
    if( ret == ERR_NONE )
 800b1d2:	f1b8 0f00 	cmp.w	r8, #0
 800b1d6:	d1e4      	bne.n	800b1a2 <rfalFeliCaPoll+0xbe>
    switch( gRFAL.state )
 800b1d8:	7823      	ldrb	r3, [r4, #0]
 800b1da:	f04f 0900 	mov.w	r9, #0
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	464f      	mov	r7, r9
 800b1e2:	464e      	mov	r6, r9
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800b1e4:	f04f 0b02 	mov.w	fp, #2
    switch( gRFAL.state )
 800b1e8:	d00d      	beq.n	800b206 <rfalFeliCaPoll+0x122>
 800b1ea:	2b05      	cmp	r3, #5
 800b1ec:	d11e      	bne.n	800b22c <rfalFeliCaPoll+0x148>
    switch( gRFAL.wum.state )
 800b1ee:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d94e      	bls.n	800b296 <rfalFeliCaPoll+0x1b2>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b1f8:	7d23      	ldrb	r3, [r4, #20]
 800b1fa:	b1d3      	cbz	r3, 800b232 <rfalFeliCaPoll+0x14e>
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 800b1fc:	2b50      	cmp	r3, #80	; 0x50
 800b1fe:	d90a      	bls.n	800b216 <rfalFeliCaPoll+0x132>
    switch( gRFAL.state )
 800b200:	7823      	ldrb	r3, [r4, #0]
 800b202:	2b03      	cmp	r3, #3
 800b204:	d1f1      	bne.n	800b1ea <rfalFeliCaPoll+0x106>
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800b206:	7d23      	ldrb	r3, [r4, #20]
        if( rfalIsTransceiveInTx() )
 800b208:	f1a3 020b 	sub.w	r2, r3, #11
 800b20c:	2a45      	cmp	r2, #69	; 0x45
 800b20e:	d96a      	bls.n	800b2e6 <rfalFeliCaPoll+0x202>
        if( rfalIsTransceiveInRx() )
 800b210:	2b50      	cmp	r3, #80	; 0x50
 800b212:	d853      	bhi.n	800b2bc <rfalFeliCaPoll+0x1d8>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b214:	b16b      	cbz	r3, 800b232 <rfalFeliCaPoll+0x14e>
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 800b216:	20d1      	movs	r0, #209	; 0xd1
 800b218:	f7f5 ff8e 	bl	8001138 <st25r3911ExecuteCommand>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 800b21c:	20d5      	movs	r0, #213	; 0xd5
 800b21e:	f7f5 ff8b 	bl	8001138 <st25r3911ExecuteCommand>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b222:	f04f 0802 	mov.w	r8, #2
                    colDetected++;
 800b226:	3701      	adds	r7, #1
 800b228:	b2ff      	uxtb	r7, r7
 800b22a:	e017      	b.n	800b25c <rfalFeliCaPoll+0x178>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b22c:	7d23      	ldrb	r3, [r4, #20]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e4      	bne.n	800b1fc <rfalFeliCaPoll+0x118>
 800b232:	f8b4 8016 	ldrh.w	r8, [r4, #22]
            if( ret == ERR_TIMEOUT )
 800b236:	f1b8 0f04 	cmp.w	r8, #4
 800b23a:	d015      	beq.n	800b268 <rfalFeliCaPoll+0x184>
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 800b23c:	20d1      	movs	r0, #209	; 0xd1
 800b23e:	f7f5 ff7b 	bl	8001138 <st25r3911ExecuteCommand>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 800b242:	20d5      	movs	r0, #213	; 0xd5
 800b244:	f7f5 ff78 	bl	8001138 <st25r3911ExecuteCommand>
                if( ret == ERR_NONE )
 800b248:	f1b8 0f00 	cmp.w	r8, #0
 800b24c:	d1eb      	bne.n	800b226 <rfalFeliCaPoll+0x142>
                   devDetected++;
 800b24e:	3601      	adds	r6, #1
 800b250:	b2f6      	uxtb	r6, r6
                   gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[devDetected];
 800b252:	2314      	movs	r3, #20
 800b254:	fb03 4306 	mla	r3, r3, r6, r4
 800b258:	336a      	adds	r3, #106	; 0x6a
 800b25a:	6263      	str	r3, [r4, #36]	; 0x24
                timeout = st25r3911CheckReg( ST25R3911_REG_REGULATOR_RESULT, ST25R3911_REG_REGULATOR_RESULT_nrt_on, 0x00 );
 800b25c:	2200      	movs	r2, #0
 800b25e:	2102      	movs	r1, #2
 800b260:	202b      	movs	r0, #43	; 0x2b
 800b262:	f7f5 fb7d 	bl	8000960 <st25r3911CheckReg>
                if( !timeout )
 800b266:	b368      	cbz	r0, 800b2c4 <rfalFeliCaPoll+0x1e0>
    gRFAL.conf.eHandling = eHandling;
 800b268:	9b01      	ldr	r3, [sp, #4]
 800b26a:	71e3      	strb	r3, [r4, #7]
    if( (pollResList != NULL) && (pollResListSize > 0U) && (devDetected > 0U) )
 800b26c:	9b00      	ldr	r3, [sp, #0]
 800b26e:	b17b      	cbz	r3, 800b290 <rfalFeliCaPoll+0x1ac>
 800b270:	f1ba 0f00 	cmp.w	sl, #0
 800b274:	d00c      	beq.n	800b290 <rfalFeliCaPoll+0x1ac>
 800b276:	2e00      	cmp	r6, #0
 800b278:	d05d      	beq.n	800b336 <rfalFeliCaPoll+0x252>
        ST_MEMCPY( pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)MIN(pollResListSize, devDetected) ) );
 800b27a:	45b2      	cmp	sl, r6
 800b27c:	bf28      	it	cs
 800b27e:	46b2      	movcs	sl, r6
 800b280:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 800b284:	492f      	ldr	r1, [pc, #188]	; (800b344 <rfalFeliCaPoll+0x260>)
 800b286:	4618      	mov	r0, r3
 800b288:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800b28c:	f000 fba8 	bl	800b9e0 <memcpy>
 800b290:	ea46 0207 	orr.w	r2, r6, r7
 800b294:	e78a      	b.n	800b1ac <rfalFeliCaPoll+0xc8>
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800b296:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800b29a:	f7f6 f869 	bl	8001370 <st25r3911GetInterrupt>
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d0aa      	beq.n	800b1f8 <rfalFeliCaPoll+0x114>
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800b2a2:	0341      	lsls	r1, r0, #13
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800b2a4:	bf48      	it	mi
 800b2a6:	f884 b054 	strbmi.w	fp, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800b2aa:	0382      	lsls	r2, r0, #14
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800b2ac:	bf48      	it	mi
 800b2ae:	f884 b054 	strbmi.w	fp, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800b2b2:	03c3      	lsls	r3, r0, #15
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800b2b4:	bf48      	it	mi
 800b2b6:	f884 b054 	strbmi.w	fp, [r4, #84]	; 0x54
 800b2ba:	e79d      	b.n	800b1f8 <rfalFeliCaPoll+0x114>
            rfalTransceiveRx();
 800b2bc:	f7fe fe1a 	bl	8009ef4 <rfalTransceiveRx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b2c0:	7d23      	ldrb	r3, [r4, #20]
 800b2c2:	e79a      	b.n	800b1fa <rfalFeliCaPoll+0x116>
                    gRFAL.state       = RFAL_STATE_TXRX;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	7023      	strb	r3, [r4, #0]
        }while( ((nbSlots--) != 0U) && !timeout );
 800b2c8:	454d      	cmp	r5, r9
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800b2ca:	f04f 0351 	mov.w	r3, #81	; 0x51
 800b2ce:	7523      	strb	r3, [r4, #20]
                    gRFAL.TxRx.status = ERR_BUSY;
 800b2d0:	f8a4 b016 	strh.w	fp, [r4, #22]
        }while( ((nbSlots--) != 0U) && !timeout );
 800b2d4:	f109 0301 	add.w	r3, r9, #1
 800b2d8:	d0c6      	beq.n	800b268 <rfalFeliCaPoll+0x184>
 800b2da:	4699      	mov	r9, r3
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800b2dc:	7d23      	ldrb	r3, [r4, #20]
        if( rfalIsTransceiveInTx() )
 800b2de:	f1a3 020b 	sub.w	r2, r3, #11
 800b2e2:	2a45      	cmp	r2, #69	; 0x45
 800b2e4:	d894      	bhi.n	800b210 <rfalFeliCaPoll+0x12c>
            rfalTransceiveTx();
 800b2e6:	f7fe fbed 	bl	8009ac4 <rfalTransceiveTx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b2ea:	7d23      	ldrb	r3, [r4, #20]
 800b2ec:	e785      	b.n	800b1fa <rfalFeliCaPoll+0x116>
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800b2ee:	7d23      	ldrb	r3, [r4, #20]
        if( rfalIsTransceiveInTx() )
 800b2f0:	f1a3 020b 	sub.w	r2, r3, #11
 800b2f4:	2a45      	cmp	r2, #69	; 0x45
 800b2f6:	d91a      	bls.n	800b32e <rfalFeliCaPoll+0x24a>
        if( rfalIsTransceiveInRx() )
 800b2f8:	2b50      	cmp	r3, #80	; 0x50
 800b2fa:	f67f af49 	bls.w	800b190 <rfalFeliCaPoll+0xac>
            rfalTransceiveRx();
 800b2fe:	f7fe fdf9 	bl	8009ef4 <rfalTransceiveRx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b302:	7d23      	ldrb	r3, [r4, #20]
 800b304:	e744      	b.n	800b190 <rfalFeliCaPoll+0xac>
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800b306:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800b30a:	f7f6 f831 	bl	8001370 <st25r3911GetInterrupt>
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800b30e:	2800      	cmp	r0, #0
 800b310:	f43f af3d 	beq.w	800b18e <rfalFeliCaPoll+0xaa>
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800b314:	0343      	lsls	r3, r0, #13
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800b316:	bf48      	it	mi
 800b318:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800b31c:	0387      	lsls	r7, r0, #14
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800b31e:	bf48      	it	mi
 800b320:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800b324:	03c0      	lsls	r0, r0, #15
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800b326:	bf48      	it	mi
 800b328:	f884 6054 	strbmi.w	r6, [r4, #84]	; 0x54
 800b32c:	e72f      	b.n	800b18e <rfalFeliCaPoll+0xaa>
            rfalTransceiveTx();
 800b32e:	f7fe fbc9 	bl	8009ac4 <rfalTransceiveTx>
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b332:	7d23      	ldrb	r3, [r4, #20]
 800b334:	e72c      	b.n	800b190 <rfalFeliCaPoll+0xac>
 800b336:	463a      	mov	r2, r7
 800b338:	e738      	b.n	800b1ac <rfalFeliCaPoll+0xc8>
            return ERR_WRONG_STATE;
 800b33a:	f04f 0821 	mov.w	r8, #33	; 0x21
    if( ret == ERR_NONE )
 800b33e:	e730      	b.n	800b1a2 <rfalFeliCaPoll+0xbe>
 800b340:	20000cc8 	.word	0x20000cc8
 800b344:	20000d32 	.word	0x20000d32

0800b348 <rfalWakeUpModeStart>:
{
 800b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        gRFAL.wum.cfg.cap.enabled      = false;
 800b34a:	4c94      	ldr	r4, [pc, #592]	; (800b59c <rfalWakeUpModeStart+0x254>)
    if( config == NULL )
 800b34c:	2800      	cmp	r0, #0
 800b34e:	f000 80be 	beq.w	800b4ce <rfalWakeUpModeStart+0x186>
        gRFAL.wum.cfg = *config;
 800b352:	6803      	ldr	r3, [r0, #0]
 800b354:	6882      	ldr	r2, [r0, #8]
 800b356:	6841      	ldr	r1, [r0, #4]
 800b358:	68c5      	ldr	r5, [r0, #12]
 800b35a:	f8c4 5061 	str.w	r5, [r4, #97]	; 0x61
 800b35e:	f8c4 3055 	str.w	r3, [r4, #85]	; 0x55
 800b362:	f8c4 1059 	str.w	r1, [r4, #89]	; 0x59
 800b366:	f8c4 205d 	str.w	r2, [r4, #93]	; 0x5d
 800b36a:	6903      	ldr	r3, [r0, #16]
 800b36c:	f8c4 3065 	str.w	r3, [r4, #101]	; 0x65
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 800b370:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        gRFAL.wum.cfg = *config;
 800b374:	7d02      	ldrb	r2, [r0, #20]
 800b376:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 809b 	beq.w	800b4b6 <rfalWakeUpModeStart+0x16e>
 800b380:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800b384:	2b00      	cmp	r3, #0
 800b386:	f040 80a0 	bne.w	800b4ca <rfalWakeUpModeStart+0x182>
 800b38a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f040 809b 	bne.w	800b4ca <rfalWakeUpModeStart+0x182>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800b394:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f040 8096 	bne.w	800b4ca <rfalWakeUpModeStart+0x182>
    st25r3911TxRxOff();
 800b39e:	f7f5 f905 	bl	80005ac <st25r3911TxRxOff>
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800b3a2:	2110      	movs	r1, #16
 800b3a4:	2009      	movs	r0, #9
 800b3a6:	f7f5 fcc3 	bl	8000d30 <st25r3911ClrRegisterBits>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ | ST25R3911_REG_MODE_mask_om), (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_iso14443a) );
 800b3aa:	2208      	movs	r2, #8
 800b3ac:	21f8      	movs	r1, #248	; 0xf8
 800b3ae:	2003      	movs	r0, #3
 800b3b0:	f7f5 fd42 	bl	8000e38 <st25r3911ChangeRegisterBits>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 800b3b4:	2004      	movs	r0, #4
 800b3b6:	f7f8 feb1 	bl	800411c <rfalSetAnalogConfig>
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3911_REG_WUP_TIMER_CONTROL_shift_wut);
 800b3ba:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    if(gRFAL.wum.cfg.irqTout)
 800b3be:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3911_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 800b3c2:	2b10      	cmp	r3, #16
 800b3c4:	bf34      	ite	cc
 800b3c6:	f06f 057f 	mvncc.w	r5, #127	; 0x7f
 800b3ca:	2500      	movcs	r5, #0
 800b3cc:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
 800b3d0:	b2ed      	uxtb	r5, r5
    if(gRFAL.wum.cfg.irqTout)
 800b3d2:	2e00      	cmp	r6, #0
 800b3d4:	f000 808c 	beq.w	800b4f0 <rfalWakeUpModeStart+0x1a8>
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wto;
 800b3d8:	f045 0508 	orr.w	r5, r5, #8
 800b3dc:	f44f 2740 	mov.w	r7, #786432	; 0xc0000
        irqs |= ST25R3911_IRQ_MASK_WT;
 800b3e0:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    if( gRFAL.wum.cfg.indAmp.enabled )
 800b3e4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800b3e8:	b30b      	cbz	r3, 800b42e <rfalWakeUpModeStart+0xe6>
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 800b3ea:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_d);
 800b3ee:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 800b3f2:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 800b3f6:	2b00      	cmp	r3, #0
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_aew) & ST25R3911_REG_AMPLITUDE_MEASURE_CONF_mask_am_aew);
 800b3f8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_d);
 800b3fc:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800b400:	b2d2      	uxtb	r2, r2
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_aew) & ST25R3911_REG_AMPLITUDE_MEASURE_CONF_mask_am_aew);
 800b402:	ea4f 0343 	mov.w	r3, r3, lsl #1
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 800b406:	ea42 0200 	orr.w	r2, r2, r0
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_aew) & ST25R3911_REG_AMPLITUDE_MEASURE_CONF_mask_am_aew);
 800b40a:	f003 0306 	and.w	r3, r3, #6
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 800b40e:	ea43 0302 	orr.w	r3, r3, r2
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 800b412:	bf14      	ite	ne
 800b414:	2108      	movne	r1, #8
 800b416:	2100      	moveq	r1, #0
        st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_CONF, aux );
 800b418:	4319      	orrs	r1, r3
 800b41a:	2032      	movs	r0, #50	; 0x32
 800b41c:	f7f5 fc44 	bl	8000ca8 <st25r3911WriteRegister>
        if( !gRFAL.wum.cfg.indAmp.autoAvg )
 800b420:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
 800b424:	2b00      	cmp	r3, #0
 800b426:	d06e      	beq.n	800b506 <rfalWakeUpModeStart+0x1be>
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wam;
 800b428:	f045 0504 	orr.w	r5, r5, #4
        irqs |= ST25R3911_IRQ_MASK_WAM;
 800b42c:	463e      	mov	r6, r7
    if( gRFAL.wum.cfg.indPha.enabled )
 800b42e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800b432:	b313      	cbz	r3, 800b47a <rfalWakeUpModeStart+0x132>
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 800b434:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_d);
 800b438:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 800b43c:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 800b440:	2b00      	cmp	r3, #0
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_aew) & ST25R3911_REG_PHASE_MEASURE_CONF_mask_pm_aew);
 800b442:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_d);
 800b446:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800b44a:	b2d2      	uxtb	r2, r2
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_aew) & ST25R3911_REG_PHASE_MEASURE_CONF_mask_pm_aew);
 800b44c:	ea4f 0343 	mov.w	r3, r3, lsl #1
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 800b450:	ea42 0200 	orr.w	r2, r2, r0
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_aew) & ST25R3911_REG_PHASE_MEASURE_CONF_mask_pm_aew);
 800b454:	f003 0306 	and.w	r3, r3, #6
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 800b458:	ea43 0302 	orr.w	r3, r3, r2
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 800b45c:	bf14      	ite	ne
 800b45e:	2108      	movne	r1, #8
 800b460:	2100      	moveq	r1, #0
        st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_CONF, aux );
 800b462:	4319      	orrs	r1, r3
 800b464:	2036      	movs	r0, #54	; 0x36
 800b466:	f7f5 fc1f 	bl	8000ca8 <st25r3911WriteRegister>
        if( !gRFAL.wum.cfg.indPha.autoAvg )
 800b46a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d041      	beq.n	800b4f6 <rfalWakeUpModeStart+0x1ae>
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wph;
 800b472:	f045 0502 	orr.w	r5, r5, #2
        irqs |= ST25R3911_IRQ_MASK_WPH;
 800b476:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
    if( gRFAL.wum.cfg.cap.enabled )
 800b47a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d149      	bne.n	800b516 <rfalWakeUpModeStart+0x1ce>
    st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 800b482:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800b486:	f7f5 ffc1 	bl	800140c <st25r3911DisableInterrupts>
    st25r3911GetInterrupt( irqs );
 800b48a:	4630      	mov	r0, r6
 800b48c:	f7f5 ff70 	bl	8001370 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( irqs );
 800b490:	4630      	mov	r0, r6
 800b492:	f7f5 ff93 	bl	80013bc <st25r3911EnableInterrupts>
    st25r3911WriteRegister( ST25R3911_REG_WUP_TIMER_CONTROL, reg );
 800b496:	4629      	mov	r1, r5
 800b498:	2031      	movs	r0, #49	; 0x31
 800b49a:	f7f5 fc05 	bl	8000ca8 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_wu), ST25R3911_REG_OP_CONTROL_wu );
 800b49e:	2204      	movs	r2, #4
 800b4a0:	2184      	movs	r1, #132	; 0x84
 800b4a2:	2002      	movs	r0, #2
 800b4a4:	f7f5 fcc8 	bl	8000e38 <st25r3911ChangeRegisterBits>
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 800b4a8:	2201      	movs	r2, #1
    gRFAL.state     = RFAL_STATE_WUM;  
 800b4aa:	2305      	movs	r3, #5
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 800b4ac:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    gRFAL.state     = RFAL_STATE_WUM;  
 800b4b0:	7023      	strb	r3, [r4, #0]
    return ERR_NONE;
 800b4b2:	2000      	movs	r0, #0
}
 800b4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800b4b6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f47f af6a 	bne.w	800b394 <rfalWakeUpModeStart+0x4c>
 800b4c0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f47f af65 	bne.w	800b394 <rfalWakeUpModeStart+0x4c>
        return ERR_PARAM;
 800b4ca:	2007      	movs	r0, #7
}
 800b4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 800b4ce:	2314      	movs	r3, #20
        gRFAL.wum.cfg.indAmp.enabled   = true;
 800b4d0:	4933      	ldr	r1, [pc, #204]	; (800b5a0 <rfalWakeUpModeStart+0x258>)
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 800b4d2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
        gRFAL.wum.cfg.indPha.enabled   = true;
 800b4d6:	f240 2201 	movw	r2, #513	; 0x201
        gRFAL.wum.cfg.indPha.delta     = 2U;
 800b4da:	23ff      	movs	r3, #255	; 0xff
        gRFAL.wum.cfg.cap.enabled      = false;
 800b4dc:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
        gRFAL.wum.cfg.irqTout     = false;
 800b4e0:	f8a4 0056 	strh.w	r0, [r4, #86]	; 0x56
        gRFAL.wum.cfg.indAmp.enabled   = true;
 800b4e4:	65a1      	str	r1, [r4, #88]	; 0x58
        gRFAL.wum.cfg.indPha.enabled   = true;
 800b4e6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        gRFAL.wum.cfg.indPha.delta     = 2U;
 800b4ea:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 800b4ee:	e751      	b.n	800b394 <rfalWakeUpModeStart+0x4c>
 800b4f0:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800b4f4:	e776      	b.n	800b3e4 <rfalWakeUpModeStart+0x9c>
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 800b4f6:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 800b4fa:	29ff      	cmp	r1, #255	; 0xff
 800b4fc:	d03e      	beq.n	800b57c <rfalWakeUpModeStart+0x234>
            st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 800b4fe:	2037      	movs	r0, #55	; 0x37
 800b500:	f7f5 fbd2 	bl	8000ca8 <st25r3911WriteRegister>
 800b504:	e7b5      	b.n	800b472 <rfalWakeUpModeStart+0x12a>
            if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 800b506:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
 800b50a:	29ff      	cmp	r1, #255	; 0xff
 800b50c:	d03c      	beq.n	800b588 <rfalWakeUpModeStart+0x240>
            st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 800b50e:	2033      	movs	r0, #51	; 0x33
 800b510:	f7f5 fbca 	bl	8000ca8 <st25r3911WriteRegister>
 800b514:	e788      	b.n	800b428 <rfalWakeUpModeStart+0xe0>
        st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 800b516:	2188      	movs	r1, #136	; 0x88
 800b518:	2002      	movs	r0, #2
 800b51a:	f7f5 fc09 	bl	8000d30 <st25r3911ClrRegisterBits>
        st25r3911CalibrateCapacitiveSensor( NULL );
 800b51e:	2000      	movs	r0, #0
 800b520:	f7f5 f9a6 	bl	8000870 <st25r3911CalibrateCapacitiveSensor>
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 800b524:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_d);
 800b528:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 800b52c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 800b530:	2b00      	cmp	r3, #0
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_aew) & ST25R3911_REG_CAPACITANCE_MEASURE_CONF_mask_cm_aew);
 800b532:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_d);
 800b536:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800b53a:	b2d2      	uxtb	r2, r2
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_aew) & ST25R3911_REG_CAPACITANCE_MEASURE_CONF_mask_cm_aew);
 800b53c:	ea4f 0343 	mov.w	r3, r3, lsl #1
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 800b540:	ea42 0200 	orr.w	r2, r2, r0
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_aew) & ST25R3911_REG_CAPACITANCE_MEASURE_CONF_mask_cm_aew);
 800b544:	f003 0306 	and.w	r3, r3, #6
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 800b548:	ea43 0302 	orr.w	r3, r3, r2
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 800b54c:	bf14      	ite	ne
 800b54e:	2108      	movne	r1, #8
 800b550:	2100      	moveq	r1, #0
        st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_CONF, aux );
 800b552:	4319      	orrs	r1, r3
 800b554:	203a      	movs	r0, #58	; 0x3a
 800b556:	f7f5 fba7 	bl	8000ca8 <st25r3911WriteRegister>
        if( !gRFAL.wum.cfg.cap.autoAvg )
 800b55a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800b55e:	b943      	cbnz	r3, 800b572 <rfalWakeUpModeStart+0x22a>
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 800b560:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b564:	2bff      	cmp	r3, #255	; 0xff
 800b566:	d015      	beq.n	800b594 <rfalWakeUpModeStart+0x24c>
            st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_REF, gRFAL.wum.cfg.cap.reference );
 800b568:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
 800b56c:	203b      	movs	r0, #59	; 0x3b
 800b56e:	f7f5 fb9b 	bl	8000ca8 <st25r3911WriteRegister>
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wcap;
 800b572:	f045 0501 	orr.w	r5, r5, #1
        irqs |= ST25R3911_IRQ_MASK_WCAP;
 800b576:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 800b57a:	e782      	b.n	800b482 <rfalWakeUpModeStart+0x13a>
                st25r3911MeasurePhase( &gRFAL.wum.cfg.indPha.reference );
 800b57c:	4809      	ldr	r0, [pc, #36]	; (800b5a4 <rfalWakeUpModeStart+0x25c>)
 800b57e:	f7f5 f91d 	bl	80007bc <st25r3911MeasurePhase>
            st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 800b582:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 800b586:	e7ba      	b.n	800b4fe <rfalWakeUpModeStart+0x1b6>
                st25r3911MeasureAmplitude( &gRFAL.wum.cfg.indAmp.reference );
 800b588:	4807      	ldr	r0, [pc, #28]	; (800b5a8 <rfalWakeUpModeStart+0x260>)
 800b58a:	f7f5 f8f9 	bl	8000780 <st25r3911MeasureAmplitude>
            st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 800b58e:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
 800b592:	e7bc      	b.n	800b50e <rfalWakeUpModeStart+0x1c6>
                st25r3911MeasureCapacitance( &gRFAL.wum.cfg.cap.reference );
 800b594:	4805      	ldr	r0, [pc, #20]	; (800b5ac <rfalWakeUpModeStart+0x264>)
 800b596:	f7f5 f92f 	bl	80007f8 <st25r3911MeasureCapacitance>
 800b59a:	e7e5      	b.n	800b568 <rfalWakeUpModeStart+0x220>
 800b59c:	20000cc8 	.word	0x20000cc8
 800b5a0:	00ff0201 	.word	0x00ff0201
 800b5a4:	20000d28 	.word	0x20000d28
 800b5a8:	20000d22 	.word	0x20000d22
 800b5ac:	20000d2e 	.word	0x20000d2e

0800b5b0 <rfalWakeUpModeHasWoke>:
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 800b5b0:	4b03      	ldr	r3, [pc, #12]	; (800b5c0 <rfalWakeUpModeHasWoke+0x10>)
 800b5b2:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
}
 800b5b6:	2801      	cmp	r0, #1
 800b5b8:	bf94      	ite	ls
 800b5ba:	2000      	movls	r0, #0
 800b5bc:	2001      	movhi	r0, #1
 800b5be:	4770      	bx	lr
 800b5c0:	20000cc8 	.word	0x20000cc8

0800b5c4 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 800b5c4:	4b0e      	ldr	r3, [pc, #56]	; (800b600 <rfalWakeUpModeStop+0x3c>)
 800b5c6:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800b5ca:	b1b2      	cbz	r2, 800b5fa <rfalWakeUpModeStop+0x36>
{
 800b5cc:	b510      	push	{r4, lr}
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
    
    /* Re-Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800b5ce:	2110      	movs	r1, #16
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800b5d0:	2400      	movs	r4, #0
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800b5d2:	2009      	movs	r0, #9
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800b5d4:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800b5d8:	f7f5 fbec 	bl	8000db4 <st25r3911SetRegisterBits>
    
    /* Disable Wake-Up Mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800b5dc:	2104      	movs	r1, #4
 800b5de:	2002      	movs	r0, #2
 800b5e0:	f7f5 fba6 	bl	8000d30 <st25r3911ClrRegisterBits>
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP) );
 800b5e4:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800b5e8:	f7f5 ff10 	bl	800140c <st25r3911DisableInterrupts>
    
    /* Re-Enable the Oscillator */
    st25r3911OscOn();
 800b5ec:	f7f4 ffe2 	bl	80005b4 <st25r3911OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 800b5f0:	2005      	movs	r0, #5
 800b5f2:	f7f8 fd93 	bl	800411c <rfalSetAnalogConfig>
      
    return ERR_NONE;
 800b5f6:	4620      	mov	r0, r4
}
 800b5f8:	bd10      	pop	{r4, pc}
        return ERR_WRONG_STATE;
 800b5fa:	2021      	movs	r0, #33	; 0x21
}
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	20000cc8 	.word	0x20000cc8

0800b604 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800b604:	b508      	push	{r3, lr}
    st25r3911ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 800b606:	b2c0      	uxtb	r0, r0
 800b608:	f7f5 fc16 	bl	8000e38 <st25r3911ChangeRegisterBits>
    return ERR_NONE;
}
 800b60c:	2000      	movs	r0, #0
 800b60e:	bd08      	pop	{r3, pc}

0800b610 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800b610:	b508      	push	{r3, lr}
    st25r3911ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 800b612:	b2c0      	uxtb	r0, r0
 800b614:	f7f5 fc9a 	bl	8000f4c <st25r3911ChangeTestRegisterBits>
    return ERR_NONE;
}
 800b618:	2000      	movs	r0, #0
 800b61a:	bd08      	pop	{r3, pc}

0800b61c <rfalSt25tbPollerInitialize>:
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
    return rfalNfcbPollerInitialize();
 800b61c:	f7fd b8d6 	b.w	80087cc <rfalNfcbPollerInitialize>

0800b620 <rfalSt25tbPollerCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCheckPresence( uint8_t *chipId )
{
 800b620:	b530      	push	{r4, r5, lr}
 800b622:	b087      	sub	sp, #28
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b624:	f241 026d 	movw	r2, #4205	; 0x106d
 800b628:	f10d 0312 	add.w	r3, sp, #18
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 800b62c:	2106      	movs	r1, #6
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b62e:	2500      	movs	r5, #0
 800b630:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800b634:	9300      	str	r3, [sp, #0]
{
 800b636:	4604      	mov	r4, r0
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 800b638:	f8ad 1010 	strh.w	r1, [sp, #16]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b63c:	2303      	movs	r3, #3
 800b63e:	aa05      	add	r2, sp, #20
 800b640:	2102      	movs	r1, #2
 800b642:	a804      	add	r0, sp, #16
 800b644:	f7ff fa76 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800b648:	b948      	cbnz	r0, 800b65e <rfalSt25tbPollerCheckPresence+0x3e>
 800b64a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d10e      	bne.n	800b670 <rfalSt25tbPollerCheckPresence+0x50>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
    {
        *chipId = *rxBuf;
 800b652:	f89d 3014 	ldrb.w	r3, [sp, #20]
    if( chipId != NULL )
 800b656:	b104      	cbz	r4, 800b65a <rfalSt25tbPollerCheckPresence+0x3a>
        *chipId = chipIdRes;
 800b658:	7023      	strb	r3, [r4, #0]
}
 800b65a:	b007      	add	sp, #28
 800b65c:	bd30      	pop	{r4, r5, pc}
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800b65e:	2815      	cmp	r0, #21
        *chipId = *rxBuf;
 800b660:	f89d 3014 	ldrb.w	r3, [sp, #20]
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800b664:	d001      	beq.n	800b66a <rfalSt25tbPollerCheckPresence+0x4a>
 800b666:	2809      	cmp	r0, #9
 800b668:	d1f5      	bne.n	800b656 <rfalSt25tbPollerCheckPresence+0x36>
        return ERR_NONE;
 800b66a:	4628      	mov	r0, r5
}
 800b66c:	b007      	add	sp, #28
 800b66e:	bd30      	pop	{r4, r5, pc}
        return ERR_PROTO;
 800b670:	200b      	movs	r0, #11
    chipIdRes = 0x00;
 800b672:	462b      	mov	r3, r5
 800b674:	e7ef      	b.n	800b656 <rfalSt25tbPollerCheckPresence+0x36>
 800b676:	bf00      	nop

0800b678 <rfalSt25tbPollerCollisionResolution>:
}


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 800b678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67c:	b08b      	sub	sp, #44	; 0x2c
 800b67e:	9004      	str	r0, [sp, #16]
    
    uint8_t    chipId;
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 800b680:	2900      	cmp	r1, #0
 800b682:	f000 812d 	beq.w	800b8e0 <rfalSt25tbPollerCollisionResolution+0x268>
 800b686:	4616      	mov	r6, r2
 800b688:	2a00      	cmp	r2, #0
 800b68a:	f000 8129 	beq.w	800b8e0 <rfalSt25tbPollerCollisionResolution+0x268>
 800b68e:	2800      	cmp	r0, #0
 800b690:	f000 8126 	beq.w	800b8e0 <rfalSt25tbPollerCollisionResolution+0x268>
    {
        return ERR_PARAM;
    }
    
    *devCnt = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	7013      	strb	r3, [r2, #0]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b698:	af08      	add	r7, sp, #32
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 800b69a:	2206      	movs	r2, #6
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b69c:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 800b6a0:	f241 046d 	movw	r4, #4205	; 0x106d
 800b6a4:	468a      	mov	sl, r1
 800b6a6:	9301      	str	r3, [sp, #4]
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 800b6a8:	f8ad 201c 	strh.w	r2, [sp, #28]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b6ac:	9700      	str	r7, [sp, #0]
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	9402      	str	r4, [sp, #8]
 800b6b2:	4642      	mov	r2, r8
 800b6b4:	2102      	movs	r1, #2
 800b6b6:	a807      	add	r0, sp, #28
 800b6b8:	f7ff fa3c 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	f000 809b 	beq.w	800b7f8 <rfalSt25tbPollerCollisionResolution+0x180>
        {
            (*devCnt)++;
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 800b6c2:	7833      	ldrb	r3, [r6, #0]
 800b6c4:	9a04      	ldr	r2, [sp, #16]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	f240 8092 	bls.w	800b7f0 <rfalSt25tbPollerCollisionResolution+0x178>
            st25tbDevList[*devCnt].isDeselected = false;
 800b6cc:	f04f 0b00 	mov.w	fp, #0
{
 800b6d0:	2500      	movs	r5, #0
 800b6d2:	2401      	movs	r4, #1
    col = false;
 800b6d4:	9505      	str	r5, [sp, #20]
 800b6d6:	e06b      	b.n	800b7b0 <rfalSt25tbPollerCollisionResolution+0x138>
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 800b6d8:	011b      	lsls	r3, r3, #4
 800b6da:	f043 0306 	orr.w	r3, r3, #6
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b6de:	f241 026d 	movw	r2, #4205	; 0x106d
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 800b6e2:	f88d 3020 	strb.w	r3, [sp, #32]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	9202      	str	r2, [sp, #8]
 800b6ea:	e9cd 8b00 	strd	r8, fp, [sp]
 800b6ee:	f10d 021b 	add.w	r2, sp, #27
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	f7ff fa1d 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	f040 80c7 	bne.w	800b88e <rfalSt25tbPollerCollisionResolution+0x216>
 800b700:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b704:	2b01      	cmp	r3, #1
 800b706:	f040 80d2 	bne.w	800b8ae <rfalSt25tbPollerCollisionResolution+0x236>
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b70a:	e9cd 8b00 	strd	r8, fp, [sp]
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 800b70e:	f04f 030e 	mov.w	r3, #14
 800b712:	f88d 3020 	strb.w	r3, [sp, #32]
            st25tbDevList[*devCnt].chipID       = chipId;
 800b716:	7833      	ldrb	r3, [r6, #0]
 800b718:	f89d 901b 	ldrb.w	r9, [sp, #27]
    selectReq.chipId = chipId;
 800b71c:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
            st25tbDevList[*devCnt].chipID       = chipId;
 800b720:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b724:	aa07      	add	r2, sp, #28
            st25tbDevList[*devCnt].chipID       = chipId;
 800b726:	f80a 9013 	strb.w	r9, [sl, r3, lsl #1]
            st25tbDevList[*devCnt].isDeselected = false;
 800b72a:	7833      	ldrb	r3, [r6, #0]
 800b72c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b730:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b734:	2102      	movs	r1, #2
            st25tbDevList[*devCnt].isDeselected = false;
 800b736:	f883 b009 	strb.w	fp, [r3, #9]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b73a:	f241 036d 	movw	r3, #4205	; 0x106d
 800b73e:	9302      	str	r3, [sp, #8]
 800b740:	4638      	mov	r0, r7
 800b742:	2301      	movs	r3, #1
 800b744:	f7ff f9f6 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 800b748:	2800      	cmp	r0, #0
 800b74a:	f040 80a6 	bne.w	800b89a <rfalSt25tbPollerCollisionResolution+0x222>
 800b74e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800b752:	2901      	cmp	r1, #1
 800b754:	f040 80a1 	bne.w	800b89a <rfalSt25tbPollerCollisionResolution+0x222>
 800b758:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b75c:	454b      	cmp	r3, r9
 800b75e:	f040 80b4 	bne.w	800b8ca <rfalSt25tbPollerCollisionResolution+0x252>
            if( (*devCnt) > 0U )
 800b762:	7832      	ldrb	r2, [r6, #0]
 800b764:	b12a      	cbz	r2, 800b772 <rfalSt25tbPollerCollisionResolution+0xfa>
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 800b766:	230a      	movs	r3, #10
 800b768:	fb03 a202 	mla	r2, r3, r2, sl
 800b76c:	f802 1c01 	strb.w	r1, [r2, #-1]
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 800b770:	7832      	ldrb	r2, [r6, #0]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b772:	f241 036d 	movw	r3, #4205	; 0x106d
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 800b776:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b77a:	9302      	str	r3, [sp, #8]
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 800b77c:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 800b780:	230b      	movs	r3, #11
 800b782:	f88d 3020 	strb.w	r3, [sp, #32]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b786:	e9cd 8b00 	strd	r8, fp, [sp]
 800b78a:	2308      	movs	r3, #8
 800b78c:	3201      	adds	r2, #1
 800b78e:	2101      	movs	r1, #1
 800b790:	4638      	mov	r0, r7
 800b792:	f7ff f9cf 	bl	800ab34 <rfalTransceiveBlockingTxRx>
                (*devCnt)++;
 800b796:	7833      	ldrb	r3, [r6, #0]
 800b798:	3301      	adds	r3, #1
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	7033      	strb	r3, [r6, #0]
        if( *devCnt >= devLimit )
 800b79e:	9a04      	ldr	r2, [sp, #16]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d925      	bls.n	800b7f0 <rfalSt25tbPollerCollisionResolution+0x178>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 800b7a4:	2c10      	cmp	r4, #16
 800b7a6:	f000 8088 	beq.w	800b8ba <rfalSt25tbPollerCollisionResolution+0x242>
 800b7aa:	3401      	adds	r4, #1
 800b7ac:	3501      	adds	r5, #1
 800b7ae:	b2e4      	uxtb	r4, r4
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	f7f5 fef5 	bl	80015a0 <HAL_Delay>
        if( i==0U )
 800b7b6:	b2eb      	uxtb	r3, r5
 800b7b8:	2d00      	cmp	r5, #0
 800b7ba:	d18d      	bne.n	800b6d8 <rfalSt25tbPollerCollisionResolution+0x60>
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b7bc:	f241 036d 	movw	r3, #4205	; 0x106d
 800b7c0:	9302      	str	r3, [sp, #8]
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 800b7c2:	f240 4306 	movw	r3, #1030	; 0x406
 800b7c6:	f8ad 3020 	strh.w	r3, [sp, #32]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b7ca:	e9cd 8500 	strd	r8, r5, [sp]
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	f10d 021b 	add.w	r2, sp, #27
 800b7d4:	2102      	movs	r1, #2
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	f7ff f9ac 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d156      	bne.n	800b88e <rfalSt25tbPollerCollisionResolution+0x216>
 800b7e0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d090      	beq.n	800b70a <rfalSt25tbPollerCollisionResolution+0x92>
        if( *devCnt >= devLimit )
 800b7e8:	7833      	ldrb	r3, [r6, #0]
 800b7ea:	9a04      	ldr	r2, [sp, #16]
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d3dc      	bcc.n	800b7aa <rfalSt25tbPollerCollisionResolution+0x132>
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
        }
        while( (detected == true) && (*devCnt < devLimit) );
    }

    return ERR_NONE;
 800b7f0:	2000      	movs	r0, #0
}
 800b7f2:	b00b      	add	sp, #44	; 0x2c
 800b7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800b7f8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	f47f af60 	bne.w	800b6c2 <rfalSt25tbPollerCollisionResolution+0x4a>
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b802:	e9cd 0401 	strd	r0, r4, [sp, #4]
 800b806:	f8cd 8000 	str.w	r8, [sp]
        st25tbDevList[*devCnt].chipID       = chipId;
 800b80a:	7832      	ldrb	r2, [r6, #0]
        *chipId = *rxBuf;
 800b80c:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
    selectReq.chipId = chipId;
 800b810:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
        st25tbDevList[*devCnt].chipID       = chipId;
 800b814:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b818:	2102      	movs	r1, #2
        st25tbDevList[*devCnt].chipID       = chipId;
 800b81a:	f80a 5012 	strb.w	r5, [sl, r2, lsl #1]
        st25tbDevList[*devCnt].isDeselected = false;
 800b81e:	7832      	ldrb	r2, [r6, #0]
 800b820:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b824:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 800b828:	7250      	strb	r0, [r2, #9]
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 800b82a:	220e      	movs	r2, #14
 800b82c:	f88d 2020 	strb.w	r2, [sp, #32]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b830:	4638      	mov	r0, r7
 800b832:	aa07      	add	r2, sp, #28
 800b834:	f7ff f97e 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 800b838:	2800      	cmp	r0, #0
 800b83a:	f47f af42 	bne.w	800b6c2 <rfalSt25tbPollerCollisionResolution+0x4a>
 800b83e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800b842:	2901      	cmp	r1, #1
 800b844:	f47f af3d 	bne.w	800b6c2 <rfalSt25tbPollerCollisionResolution+0x4a>
 800b848:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b84c:	42ab      	cmp	r3, r5
 800b84e:	f47f af38 	bne.w	800b6c2 <rfalSt25tbPollerCollisionResolution+0x4a>
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b852:	e9cd 0401 	strd	r0, r4, [sp, #4]
 800b856:	f8cd 8000 	str.w	r8, [sp]
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 800b85a:	7833      	ldrb	r3, [r6, #0]
 800b85c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b860:	eb0a 0243 	add.w	r2, sl, r3, lsl #1
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 800b864:	230b      	movs	r3, #11
 800b866:	f88d 3020 	strb.w	r3, [sp, #32]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800b86a:	3201      	adds	r2, #1
 800b86c:	2308      	movs	r3, #8
 800b86e:	4638      	mov	r0, r7
 800b870:	f7ff f960 	bl	800ab34 <rfalTransceiveBlockingTxRx>
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 800b874:	2800      	cmp	r0, #0
 800b876:	f47f af24 	bne.w	800b6c2 <rfalSt25tbPollerCollisionResolution+0x4a>
 800b87a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b87e:	2b08      	cmp	r3, #8
 800b880:	f47f af1f 	bne.w	800b6c2 <rfalSt25tbPollerCollisionResolution+0x4a>
            (*devCnt)++;
 800b884:	7833      	ldrb	r3, [r6, #0]
 800b886:	3301      	adds	r3, #1
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	7033      	strb	r3, [r6, #0]
 800b88c:	e71a      	b.n	800b6c4 <rfalSt25tbPollerCollisionResolution+0x4c>
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800b88e:	2815      	cmp	r0, #21
 800b890:	d10f      	bne.n	800b8b2 <rfalSt25tbPollerCollisionResolution+0x23a>
            col = true;
 800b892:	2201      	movs	r2, #1
        if( *devCnt >= devLimit )
 800b894:	7833      	ldrb	r3, [r6, #0]
            col = true;
 800b896:	9205      	str	r2, [sp, #20]
 800b898:	e781      	b.n	800b79e <rfalSt25tbPollerCollisionResolution+0x126>
            if( (*devCnt) > 0U )
 800b89a:	7833      	ldrb	r3, [r6, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d081      	beq.n	800b7a4 <rfalSt25tbPollerCollisionResolution+0x12c>
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 800b8a0:	220a      	movs	r2, #10
 800b8a2:	fb02 a303 	mla	r3, r2, r3, sl
 800b8a6:	f04f 0201 	mov.w	r2, #1
 800b8aa:	f803 2c01 	strb.w	r2, [r3, #-1]
        if( *devCnt >= devLimit )
 800b8ae:	7833      	ldrb	r3, [r6, #0]
 800b8b0:	e775      	b.n	800b79e <rfalSt25tbPollerCollisionResolution+0x126>
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800b8b2:	2809      	cmp	r0, #9
 800b8b4:	d0ed      	beq.n	800b892 <rfalSt25tbPollerCollisionResolution+0x21a>
        if( *devCnt >= devLimit )
 800b8b6:	7833      	ldrb	r3, [r6, #0]
 800b8b8:	e771      	b.n	800b79e <rfalSt25tbPollerCollisionResolution+0x126>
        while( (detected == true) && (*devCnt < devLimit) );
 800b8ba:	9a05      	ldr	r2, [sp, #20]
 800b8bc:	2a00      	cmp	r2, #0
 800b8be:	d097      	beq.n	800b7f0 <rfalSt25tbPollerCollisionResolution+0x178>
 800b8c0:	9a04      	ldr	r2, [sp, #16]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	f63f af04 	bhi.w	800b6d0 <rfalSt25tbPollerCollisionResolution+0x58>
 800b8c8:	e792      	b.n	800b7f0 <rfalSt25tbPollerCollisionResolution+0x178>
            if( (*devCnt) > 0U )
 800b8ca:	7833      	ldrb	r3, [r6, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f43f af69 	beq.w	800b7a4 <rfalSt25tbPollerCollisionResolution+0x12c>
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 800b8d2:	220a      	movs	r2, #10
 800b8d4:	fb02 a303 	mla	r3, r2, r3, sl
 800b8d8:	f803 1c01 	strb.w	r1, [r3, #-1]
        if( *devCnt >= devLimit )
 800b8dc:	7833      	ldrb	r3, [r6, #0]
 800b8de:	e75e      	b.n	800b79e <rfalSt25tbPollerCollisionResolution+0x126>
        return ERR_PARAM;
 800b8e0:	2007      	movs	r0, #7
}
 800b8e2:	b00b      	add	sp, #44	; 0x2c
 800b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8e8 <rfalT1TPollerInitialize>:

ReturnCode rfalT1TPollerInitialize( void )
{
    ReturnCode ret;
    
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 800b8e8:	2200      	movs	r2, #0
{
 800b8ea:	b510      	push	{r4, lr}
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	2002      	movs	r0, #2
 800b8f0:	f7fe feca 	bl	800a688 <rfalSetMode>
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	b968      	cbnz	r0, 800b914 <rfalT1TPollerInitialize+0x2c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	f7fe ffcd 	bl	800a898 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 800b8fe:	4620      	mov	r0, r4
 800b900:	f7fe ffe6 	bl	800a8d0 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 800b904:	f240 4094 	movw	r0, #1172	; 0x494
 800b908:	f7fe ffd8 	bl	800a8bc <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 800b90c:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800b910:	f7fe ffc8 	bl	800a8a4 <rfalSetFDTPoll>
    
    return ERR_NONE;
}
 800b914:	4620      	mov	r0, r4
 800b916:	bd10      	pop	{r4, pc}

0800b918 <rfalT1TPollerRid>:
{
    ReturnCode     ret;
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
 800b918:	b330      	cbz	r0, 800b968 <rfalT1TPollerRid+0x50>
{
 800b91a:	b510      	push	{r4, lr}
 800b91c:	b088      	sub	sp, #32
    {
        return ERR_PARAM;
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 800b91e:	2100      	movs	r1, #0
 800b920:	4604      	mov	r4, r0
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 800b922:	f640 12a8 	movw	r2, #2472	; 0x9a8
 800b926:	f10d 0316 	add.w	r3, sp, #22
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 800b92a:	2078      	movs	r0, #120	; 0x78
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 800b92c:	9106      	str	r1, [sp, #24]
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 800b92e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800b932:	9300      	str	r3, [sp, #0]
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 800b934:	f8cd 101b 	str.w	r1, [sp, #27]
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 800b938:	f88d 0018 	strb.w	r0, [sp, #24]
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 800b93c:	2306      	movs	r3, #6
 800b93e:	4622      	mov	r2, r4
 800b940:	2107      	movs	r1, #7
 800b942:	a806      	add	r0, sp, #24
 800b944:	f7ff f8f6 	bl	800ab34 <rfalTransceiveBlockingTxRx>
 800b948:	b948      	cbnz	r0, 800b95e <rfalT1TPollerRid+0x46>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 800b94a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800b94e:	2b06      	cmp	r3, #6
 800b950:	d107      	bne.n	800b962 <rfalT1TPollerRid+0x4a>
 800b952:	7823      	ldrb	r3, [r4, #0]
 800b954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    {
        return ERR_PROTO;
 800b958:	2b10      	cmp	r3, #16
 800b95a:	bf18      	it	ne
 800b95c:	200b      	movne	r0, #11
    }
    
    return ERR_NONE;
}
 800b95e:	b008      	add	sp, #32
 800b960:	bd10      	pop	{r4, pc}
        return ERR_PROTO;
 800b962:	200b      	movs	r0, #11
}
 800b964:	b008      	add	sp, #32
 800b966:	bd10      	pop	{r4, pc}
        return ERR_PARAM;
 800b968:	2007      	movs	r0, #7
}
 800b96a:	4770      	bx	lr

0800b96c <__errno>:
 800b96c:	4b01      	ldr	r3, [pc, #4]	; (800b974 <__errno+0x8>)
 800b96e:	6818      	ldr	r0, [r3, #0]
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	20000070 	.word	0x20000070

0800b978 <__libc_init_array>:
 800b978:	b570      	push	{r4, r5, r6, lr}
 800b97a:	4d0d      	ldr	r5, [pc, #52]	; (800b9b0 <__libc_init_array+0x38>)
 800b97c:	4c0d      	ldr	r4, [pc, #52]	; (800b9b4 <__libc_init_array+0x3c>)
 800b97e:	1b64      	subs	r4, r4, r5
 800b980:	10a4      	asrs	r4, r4, #2
 800b982:	2600      	movs	r6, #0
 800b984:	42a6      	cmp	r6, r4
 800b986:	d109      	bne.n	800b99c <__libc_init_array+0x24>
 800b988:	4d0b      	ldr	r5, [pc, #44]	; (800b9b8 <__libc_init_array+0x40>)
 800b98a:	4c0c      	ldr	r4, [pc, #48]	; (800b9bc <__libc_init_array+0x44>)
 800b98c:	f000 fcb8 	bl	800c300 <_init>
 800b990:	1b64      	subs	r4, r4, r5
 800b992:	10a4      	asrs	r4, r4, #2
 800b994:	2600      	movs	r6, #0
 800b996:	42a6      	cmp	r6, r4
 800b998:	d105      	bne.n	800b9a6 <__libc_init_array+0x2e>
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a0:	4798      	blx	r3
 800b9a2:	3601      	adds	r6, #1
 800b9a4:	e7ee      	b.n	800b984 <__libc_init_array+0xc>
 800b9a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9aa:	4798      	blx	r3
 800b9ac:	3601      	adds	r6, #1
 800b9ae:	e7f2      	b.n	800b996 <__libc_init_array+0x1e>
 800b9b0:	0800ca50 	.word	0x0800ca50
 800b9b4:	0800ca50 	.word	0x0800ca50
 800b9b8:	0800ca50 	.word	0x0800ca50
 800b9bc:	0800ca54 	.word	0x0800ca54

0800b9c0 <memcmp>:
 800b9c0:	b510      	push	{r4, lr}
 800b9c2:	3901      	subs	r1, #1
 800b9c4:	4402      	add	r2, r0
 800b9c6:	4290      	cmp	r0, r2
 800b9c8:	d101      	bne.n	800b9ce <memcmp+0xe>
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	e005      	b.n	800b9da <memcmp+0x1a>
 800b9ce:	7803      	ldrb	r3, [r0, #0]
 800b9d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b9d4:	42a3      	cmp	r3, r4
 800b9d6:	d001      	beq.n	800b9dc <memcmp+0x1c>
 800b9d8:	1b18      	subs	r0, r3, r4
 800b9da:	bd10      	pop	{r4, pc}
 800b9dc:	3001      	adds	r0, #1
 800b9de:	e7f2      	b.n	800b9c6 <memcmp+0x6>

0800b9e0 <memcpy>:
 800b9e0:	440a      	add	r2, r1
 800b9e2:	4291      	cmp	r1, r2
 800b9e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9e8:	d100      	bne.n	800b9ec <memcpy+0xc>
 800b9ea:	4770      	bx	lr
 800b9ec:	b510      	push	{r4, lr}
 800b9ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9f6:	4291      	cmp	r1, r2
 800b9f8:	d1f9      	bne.n	800b9ee <memcpy+0xe>
 800b9fa:	bd10      	pop	{r4, pc}

0800b9fc <memmove>:
 800b9fc:	4288      	cmp	r0, r1
 800b9fe:	b510      	push	{r4, lr}
 800ba00:	eb01 0402 	add.w	r4, r1, r2
 800ba04:	d902      	bls.n	800ba0c <memmove+0x10>
 800ba06:	4284      	cmp	r4, r0
 800ba08:	4623      	mov	r3, r4
 800ba0a:	d807      	bhi.n	800ba1c <memmove+0x20>
 800ba0c:	1e43      	subs	r3, r0, #1
 800ba0e:	42a1      	cmp	r1, r4
 800ba10:	d008      	beq.n	800ba24 <memmove+0x28>
 800ba12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba1a:	e7f8      	b.n	800ba0e <memmove+0x12>
 800ba1c:	4402      	add	r2, r0
 800ba1e:	4601      	mov	r1, r0
 800ba20:	428a      	cmp	r2, r1
 800ba22:	d100      	bne.n	800ba26 <memmove+0x2a>
 800ba24:	bd10      	pop	{r4, pc}
 800ba26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba2e:	e7f7      	b.n	800ba20 <memmove+0x24>

0800ba30 <memset>:
 800ba30:	4402      	add	r2, r0
 800ba32:	4603      	mov	r3, r0
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d100      	bne.n	800ba3a <memset+0xa>
 800ba38:	4770      	bx	lr
 800ba3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba3e:	e7f9      	b.n	800ba34 <memset+0x4>

0800ba40 <_vsniprintf_r>:
 800ba40:	b530      	push	{r4, r5, lr}
 800ba42:	4614      	mov	r4, r2
 800ba44:	2c00      	cmp	r4, #0
 800ba46:	b09b      	sub	sp, #108	; 0x6c
 800ba48:	4605      	mov	r5, r0
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	da05      	bge.n	800ba5a <_vsniprintf_r+0x1a>
 800ba4e:	238b      	movs	r3, #139	; 0x8b
 800ba50:	6003      	str	r3, [r0, #0]
 800ba52:	f04f 30ff 	mov.w	r0, #4294967295
 800ba56:	b01b      	add	sp, #108	; 0x6c
 800ba58:	bd30      	pop	{r4, r5, pc}
 800ba5a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ba5e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ba62:	bf14      	ite	ne
 800ba64:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ba68:	4623      	moveq	r3, r4
 800ba6a:	9302      	str	r3, [sp, #8]
 800ba6c:	9305      	str	r3, [sp, #20]
 800ba6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba72:	9100      	str	r1, [sp, #0]
 800ba74:	9104      	str	r1, [sp, #16]
 800ba76:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ba7a:	4669      	mov	r1, sp
 800ba7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ba7e:	f000 f875 	bl	800bb6c <_svfiprintf_r>
 800ba82:	1c43      	adds	r3, r0, #1
 800ba84:	bfbc      	itt	lt
 800ba86:	238b      	movlt	r3, #139	; 0x8b
 800ba88:	602b      	strlt	r3, [r5, #0]
 800ba8a:	2c00      	cmp	r4, #0
 800ba8c:	d0e3      	beq.n	800ba56 <_vsniprintf_r+0x16>
 800ba8e:	9b00      	ldr	r3, [sp, #0]
 800ba90:	2200      	movs	r2, #0
 800ba92:	701a      	strb	r2, [r3, #0]
 800ba94:	e7df      	b.n	800ba56 <_vsniprintf_r+0x16>
	...

0800ba98 <vsniprintf>:
 800ba98:	b507      	push	{r0, r1, r2, lr}
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	460a      	mov	r2, r1
 800baa0:	4601      	mov	r1, r0
 800baa2:	4803      	ldr	r0, [pc, #12]	; (800bab0 <vsniprintf+0x18>)
 800baa4:	6800      	ldr	r0, [r0, #0]
 800baa6:	f7ff ffcb 	bl	800ba40 <_vsniprintf_r>
 800baaa:	b003      	add	sp, #12
 800baac:	f85d fb04 	ldr.w	pc, [sp], #4
 800bab0:	20000070 	.word	0x20000070

0800bab4 <__ssputs_r>:
 800bab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab8:	688e      	ldr	r6, [r1, #8]
 800baba:	429e      	cmp	r6, r3
 800babc:	4682      	mov	sl, r0
 800babe:	460c      	mov	r4, r1
 800bac0:	4690      	mov	r8, r2
 800bac2:	461f      	mov	r7, r3
 800bac4:	d838      	bhi.n	800bb38 <__ssputs_r+0x84>
 800bac6:	898a      	ldrh	r2, [r1, #12]
 800bac8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bacc:	d032      	beq.n	800bb34 <__ssputs_r+0x80>
 800bace:	6825      	ldr	r5, [r4, #0]
 800bad0:	6909      	ldr	r1, [r1, #16]
 800bad2:	eba5 0901 	sub.w	r9, r5, r1
 800bad6:	6965      	ldr	r5, [r4, #20]
 800bad8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800badc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bae0:	3301      	adds	r3, #1
 800bae2:	444b      	add	r3, r9
 800bae4:	106d      	asrs	r5, r5, #1
 800bae6:	429d      	cmp	r5, r3
 800bae8:	bf38      	it	cc
 800baea:	461d      	movcc	r5, r3
 800baec:	0553      	lsls	r3, r2, #21
 800baee:	d531      	bpl.n	800bb54 <__ssputs_r+0xa0>
 800baf0:	4629      	mov	r1, r5
 800baf2:	f000 fb3b 	bl	800c16c <_malloc_r>
 800baf6:	4606      	mov	r6, r0
 800baf8:	b950      	cbnz	r0, 800bb10 <__ssputs_r+0x5c>
 800bafa:	230c      	movs	r3, #12
 800bafc:	f8ca 3000 	str.w	r3, [sl]
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb06:	81a3      	strh	r3, [r4, #12]
 800bb08:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb10:	6921      	ldr	r1, [r4, #16]
 800bb12:	464a      	mov	r2, r9
 800bb14:	f7ff ff64 	bl	800b9e0 <memcpy>
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb22:	81a3      	strh	r3, [r4, #12]
 800bb24:	6126      	str	r6, [r4, #16]
 800bb26:	6165      	str	r5, [r4, #20]
 800bb28:	444e      	add	r6, r9
 800bb2a:	eba5 0509 	sub.w	r5, r5, r9
 800bb2e:	6026      	str	r6, [r4, #0]
 800bb30:	60a5      	str	r5, [r4, #8]
 800bb32:	463e      	mov	r6, r7
 800bb34:	42be      	cmp	r6, r7
 800bb36:	d900      	bls.n	800bb3a <__ssputs_r+0x86>
 800bb38:	463e      	mov	r6, r7
 800bb3a:	6820      	ldr	r0, [r4, #0]
 800bb3c:	4632      	mov	r2, r6
 800bb3e:	4641      	mov	r1, r8
 800bb40:	f7ff ff5c 	bl	800b9fc <memmove>
 800bb44:	68a3      	ldr	r3, [r4, #8]
 800bb46:	1b9b      	subs	r3, r3, r6
 800bb48:	60a3      	str	r3, [r4, #8]
 800bb4a:	6823      	ldr	r3, [r4, #0]
 800bb4c:	4433      	add	r3, r6
 800bb4e:	6023      	str	r3, [r4, #0]
 800bb50:	2000      	movs	r0, #0
 800bb52:	e7db      	b.n	800bb0c <__ssputs_r+0x58>
 800bb54:	462a      	mov	r2, r5
 800bb56:	f000 fb7d 	bl	800c254 <_realloc_r>
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d1e1      	bne.n	800bb24 <__ssputs_r+0x70>
 800bb60:	6921      	ldr	r1, [r4, #16]
 800bb62:	4650      	mov	r0, sl
 800bb64:	f000 fa96 	bl	800c094 <_free_r>
 800bb68:	e7c7      	b.n	800bafa <__ssputs_r+0x46>
	...

0800bb6c <_svfiprintf_r>:
 800bb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb70:	4698      	mov	r8, r3
 800bb72:	898b      	ldrh	r3, [r1, #12]
 800bb74:	061b      	lsls	r3, r3, #24
 800bb76:	b09d      	sub	sp, #116	; 0x74
 800bb78:	4607      	mov	r7, r0
 800bb7a:	460d      	mov	r5, r1
 800bb7c:	4614      	mov	r4, r2
 800bb7e:	d50e      	bpl.n	800bb9e <_svfiprintf_r+0x32>
 800bb80:	690b      	ldr	r3, [r1, #16]
 800bb82:	b963      	cbnz	r3, 800bb9e <_svfiprintf_r+0x32>
 800bb84:	2140      	movs	r1, #64	; 0x40
 800bb86:	f000 faf1 	bl	800c16c <_malloc_r>
 800bb8a:	6028      	str	r0, [r5, #0]
 800bb8c:	6128      	str	r0, [r5, #16]
 800bb8e:	b920      	cbnz	r0, 800bb9a <_svfiprintf_r+0x2e>
 800bb90:	230c      	movs	r3, #12
 800bb92:	603b      	str	r3, [r7, #0]
 800bb94:	f04f 30ff 	mov.w	r0, #4294967295
 800bb98:	e0d1      	b.n	800bd3e <_svfiprintf_r+0x1d2>
 800bb9a:	2340      	movs	r3, #64	; 0x40
 800bb9c:	616b      	str	r3, [r5, #20]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	9309      	str	r3, [sp, #36]	; 0x24
 800bba2:	2320      	movs	r3, #32
 800bba4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bba8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbac:	2330      	movs	r3, #48	; 0x30
 800bbae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd58 <_svfiprintf_r+0x1ec>
 800bbb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbb6:	f04f 0901 	mov.w	r9, #1
 800bbba:	4623      	mov	r3, r4
 800bbbc:	469a      	mov	sl, r3
 800bbbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbc2:	b10a      	cbz	r2, 800bbc8 <_svfiprintf_r+0x5c>
 800bbc4:	2a25      	cmp	r2, #37	; 0x25
 800bbc6:	d1f9      	bne.n	800bbbc <_svfiprintf_r+0x50>
 800bbc8:	ebba 0b04 	subs.w	fp, sl, r4
 800bbcc:	d00b      	beq.n	800bbe6 <_svfiprintf_r+0x7a>
 800bbce:	465b      	mov	r3, fp
 800bbd0:	4622      	mov	r2, r4
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f7ff ff6d 	bl	800bab4 <__ssputs_r>
 800bbda:	3001      	adds	r0, #1
 800bbdc:	f000 80aa 	beq.w	800bd34 <_svfiprintf_r+0x1c8>
 800bbe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbe2:	445a      	add	r2, fp
 800bbe4:	9209      	str	r2, [sp, #36]	; 0x24
 800bbe6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 80a2 	beq.w	800bd34 <_svfiprintf_r+0x1c8>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbfa:	f10a 0a01 	add.w	sl, sl, #1
 800bbfe:	9304      	str	r3, [sp, #16]
 800bc00:	9307      	str	r3, [sp, #28]
 800bc02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc06:	931a      	str	r3, [sp, #104]	; 0x68
 800bc08:	4654      	mov	r4, sl
 800bc0a:	2205      	movs	r2, #5
 800bc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc10:	4851      	ldr	r0, [pc, #324]	; (800bd58 <_svfiprintf_r+0x1ec>)
 800bc12:	f7f4 faf5 	bl	8000200 <memchr>
 800bc16:	9a04      	ldr	r2, [sp, #16]
 800bc18:	b9d8      	cbnz	r0, 800bc52 <_svfiprintf_r+0xe6>
 800bc1a:	06d0      	lsls	r0, r2, #27
 800bc1c:	bf44      	itt	mi
 800bc1e:	2320      	movmi	r3, #32
 800bc20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc24:	0711      	lsls	r1, r2, #28
 800bc26:	bf44      	itt	mi
 800bc28:	232b      	movmi	r3, #43	; 0x2b
 800bc2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc2e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc32:	2b2a      	cmp	r3, #42	; 0x2a
 800bc34:	d015      	beq.n	800bc62 <_svfiprintf_r+0xf6>
 800bc36:	9a07      	ldr	r2, [sp, #28]
 800bc38:	4654      	mov	r4, sl
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	f04f 0c0a 	mov.w	ip, #10
 800bc40:	4621      	mov	r1, r4
 800bc42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc46:	3b30      	subs	r3, #48	; 0x30
 800bc48:	2b09      	cmp	r3, #9
 800bc4a:	d94e      	bls.n	800bcea <_svfiprintf_r+0x17e>
 800bc4c:	b1b0      	cbz	r0, 800bc7c <_svfiprintf_r+0x110>
 800bc4e:	9207      	str	r2, [sp, #28]
 800bc50:	e014      	b.n	800bc7c <_svfiprintf_r+0x110>
 800bc52:	eba0 0308 	sub.w	r3, r0, r8
 800bc56:	fa09 f303 	lsl.w	r3, r9, r3
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	9304      	str	r3, [sp, #16]
 800bc5e:	46a2      	mov	sl, r4
 800bc60:	e7d2      	b.n	800bc08 <_svfiprintf_r+0x9c>
 800bc62:	9b03      	ldr	r3, [sp, #12]
 800bc64:	1d19      	adds	r1, r3, #4
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	9103      	str	r1, [sp, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	bfbb      	ittet	lt
 800bc6e:	425b      	neglt	r3, r3
 800bc70:	f042 0202 	orrlt.w	r2, r2, #2
 800bc74:	9307      	strge	r3, [sp, #28]
 800bc76:	9307      	strlt	r3, [sp, #28]
 800bc78:	bfb8      	it	lt
 800bc7a:	9204      	strlt	r2, [sp, #16]
 800bc7c:	7823      	ldrb	r3, [r4, #0]
 800bc7e:	2b2e      	cmp	r3, #46	; 0x2e
 800bc80:	d10c      	bne.n	800bc9c <_svfiprintf_r+0x130>
 800bc82:	7863      	ldrb	r3, [r4, #1]
 800bc84:	2b2a      	cmp	r3, #42	; 0x2a
 800bc86:	d135      	bne.n	800bcf4 <_svfiprintf_r+0x188>
 800bc88:	9b03      	ldr	r3, [sp, #12]
 800bc8a:	1d1a      	adds	r2, r3, #4
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	9203      	str	r2, [sp, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	bfb8      	it	lt
 800bc94:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc98:	3402      	adds	r4, #2
 800bc9a:	9305      	str	r3, [sp, #20]
 800bc9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd68 <_svfiprintf_r+0x1fc>
 800bca0:	7821      	ldrb	r1, [r4, #0]
 800bca2:	2203      	movs	r2, #3
 800bca4:	4650      	mov	r0, sl
 800bca6:	f7f4 faab 	bl	8000200 <memchr>
 800bcaa:	b140      	cbz	r0, 800bcbe <_svfiprintf_r+0x152>
 800bcac:	2340      	movs	r3, #64	; 0x40
 800bcae:	eba0 000a 	sub.w	r0, r0, sl
 800bcb2:	fa03 f000 	lsl.w	r0, r3, r0
 800bcb6:	9b04      	ldr	r3, [sp, #16]
 800bcb8:	4303      	orrs	r3, r0
 800bcba:	3401      	adds	r4, #1
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc2:	4826      	ldr	r0, [pc, #152]	; (800bd5c <_svfiprintf_r+0x1f0>)
 800bcc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcc8:	2206      	movs	r2, #6
 800bcca:	f7f4 fa99 	bl	8000200 <memchr>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d038      	beq.n	800bd44 <_svfiprintf_r+0x1d8>
 800bcd2:	4b23      	ldr	r3, [pc, #140]	; (800bd60 <_svfiprintf_r+0x1f4>)
 800bcd4:	bb1b      	cbnz	r3, 800bd1e <_svfiprintf_r+0x1b2>
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	3307      	adds	r3, #7
 800bcda:	f023 0307 	bic.w	r3, r3, #7
 800bcde:	3308      	adds	r3, #8
 800bce0:	9303      	str	r3, [sp, #12]
 800bce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bce4:	4433      	add	r3, r6
 800bce6:	9309      	str	r3, [sp, #36]	; 0x24
 800bce8:	e767      	b.n	800bbba <_svfiprintf_r+0x4e>
 800bcea:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcee:	460c      	mov	r4, r1
 800bcf0:	2001      	movs	r0, #1
 800bcf2:	e7a5      	b.n	800bc40 <_svfiprintf_r+0xd4>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	3401      	adds	r4, #1
 800bcf8:	9305      	str	r3, [sp, #20]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	f04f 0c0a 	mov.w	ip, #10
 800bd00:	4620      	mov	r0, r4
 800bd02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd06:	3a30      	subs	r2, #48	; 0x30
 800bd08:	2a09      	cmp	r2, #9
 800bd0a:	d903      	bls.n	800bd14 <_svfiprintf_r+0x1a8>
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0c5      	beq.n	800bc9c <_svfiprintf_r+0x130>
 800bd10:	9105      	str	r1, [sp, #20]
 800bd12:	e7c3      	b.n	800bc9c <_svfiprintf_r+0x130>
 800bd14:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd18:	4604      	mov	r4, r0
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e7f0      	b.n	800bd00 <_svfiprintf_r+0x194>
 800bd1e:	ab03      	add	r3, sp, #12
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	462a      	mov	r2, r5
 800bd24:	4b0f      	ldr	r3, [pc, #60]	; (800bd64 <_svfiprintf_r+0x1f8>)
 800bd26:	a904      	add	r1, sp, #16
 800bd28:	4638      	mov	r0, r7
 800bd2a:	f3af 8000 	nop.w
 800bd2e:	1c42      	adds	r2, r0, #1
 800bd30:	4606      	mov	r6, r0
 800bd32:	d1d6      	bne.n	800bce2 <_svfiprintf_r+0x176>
 800bd34:	89ab      	ldrh	r3, [r5, #12]
 800bd36:	065b      	lsls	r3, r3, #25
 800bd38:	f53f af2c 	bmi.w	800bb94 <_svfiprintf_r+0x28>
 800bd3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd3e:	b01d      	add	sp, #116	; 0x74
 800bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd44:	ab03      	add	r3, sp, #12
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	462a      	mov	r2, r5
 800bd4a:	4b06      	ldr	r3, [pc, #24]	; (800bd64 <_svfiprintf_r+0x1f8>)
 800bd4c:	a904      	add	r1, sp, #16
 800bd4e:	4638      	mov	r0, r7
 800bd50:	f000 f87a 	bl	800be48 <_printf_i>
 800bd54:	e7eb      	b.n	800bd2e <_svfiprintf_r+0x1c2>
 800bd56:	bf00      	nop
 800bd58:	0800ca11 	.word	0x0800ca11
 800bd5c:	0800ca1b 	.word	0x0800ca1b
 800bd60:	00000000 	.word	0x00000000
 800bd64:	0800bab5 	.word	0x0800bab5
 800bd68:	0800ca17 	.word	0x0800ca17

0800bd6c <_printf_common>:
 800bd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd70:	4616      	mov	r6, r2
 800bd72:	4699      	mov	r9, r3
 800bd74:	688a      	ldr	r2, [r1, #8]
 800bd76:	690b      	ldr	r3, [r1, #16]
 800bd78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	bfb8      	it	lt
 800bd80:	4613      	movlt	r3, r2
 800bd82:	6033      	str	r3, [r6, #0]
 800bd84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd88:	4607      	mov	r7, r0
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	b10a      	cbz	r2, 800bd92 <_printf_common+0x26>
 800bd8e:	3301      	adds	r3, #1
 800bd90:	6033      	str	r3, [r6, #0]
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	0699      	lsls	r1, r3, #26
 800bd96:	bf42      	ittt	mi
 800bd98:	6833      	ldrmi	r3, [r6, #0]
 800bd9a:	3302      	addmi	r3, #2
 800bd9c:	6033      	strmi	r3, [r6, #0]
 800bd9e:	6825      	ldr	r5, [r4, #0]
 800bda0:	f015 0506 	ands.w	r5, r5, #6
 800bda4:	d106      	bne.n	800bdb4 <_printf_common+0x48>
 800bda6:	f104 0a19 	add.w	sl, r4, #25
 800bdaa:	68e3      	ldr	r3, [r4, #12]
 800bdac:	6832      	ldr	r2, [r6, #0]
 800bdae:	1a9b      	subs	r3, r3, r2
 800bdb0:	42ab      	cmp	r3, r5
 800bdb2:	dc26      	bgt.n	800be02 <_printf_common+0x96>
 800bdb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bdb8:	1e13      	subs	r3, r2, #0
 800bdba:	6822      	ldr	r2, [r4, #0]
 800bdbc:	bf18      	it	ne
 800bdbe:	2301      	movne	r3, #1
 800bdc0:	0692      	lsls	r2, r2, #26
 800bdc2:	d42b      	bmi.n	800be1c <_printf_common+0xb0>
 800bdc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdc8:	4649      	mov	r1, r9
 800bdca:	4638      	mov	r0, r7
 800bdcc:	47c0      	blx	r8
 800bdce:	3001      	adds	r0, #1
 800bdd0:	d01e      	beq.n	800be10 <_printf_common+0xa4>
 800bdd2:	6823      	ldr	r3, [r4, #0]
 800bdd4:	68e5      	ldr	r5, [r4, #12]
 800bdd6:	6832      	ldr	r2, [r6, #0]
 800bdd8:	f003 0306 	and.w	r3, r3, #6
 800bddc:	2b04      	cmp	r3, #4
 800bdde:	bf08      	it	eq
 800bde0:	1aad      	subeq	r5, r5, r2
 800bde2:	68a3      	ldr	r3, [r4, #8]
 800bde4:	6922      	ldr	r2, [r4, #16]
 800bde6:	bf0c      	ite	eq
 800bde8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdec:	2500      	movne	r5, #0
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	bfc4      	itt	gt
 800bdf2:	1a9b      	subgt	r3, r3, r2
 800bdf4:	18ed      	addgt	r5, r5, r3
 800bdf6:	2600      	movs	r6, #0
 800bdf8:	341a      	adds	r4, #26
 800bdfa:	42b5      	cmp	r5, r6
 800bdfc:	d11a      	bne.n	800be34 <_printf_common+0xc8>
 800bdfe:	2000      	movs	r0, #0
 800be00:	e008      	b.n	800be14 <_printf_common+0xa8>
 800be02:	2301      	movs	r3, #1
 800be04:	4652      	mov	r2, sl
 800be06:	4649      	mov	r1, r9
 800be08:	4638      	mov	r0, r7
 800be0a:	47c0      	blx	r8
 800be0c:	3001      	adds	r0, #1
 800be0e:	d103      	bne.n	800be18 <_printf_common+0xac>
 800be10:	f04f 30ff 	mov.w	r0, #4294967295
 800be14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be18:	3501      	adds	r5, #1
 800be1a:	e7c6      	b.n	800bdaa <_printf_common+0x3e>
 800be1c:	18e1      	adds	r1, r4, r3
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	2030      	movs	r0, #48	; 0x30
 800be22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be26:	4422      	add	r2, r4
 800be28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be30:	3302      	adds	r3, #2
 800be32:	e7c7      	b.n	800bdc4 <_printf_common+0x58>
 800be34:	2301      	movs	r3, #1
 800be36:	4622      	mov	r2, r4
 800be38:	4649      	mov	r1, r9
 800be3a:	4638      	mov	r0, r7
 800be3c:	47c0      	blx	r8
 800be3e:	3001      	adds	r0, #1
 800be40:	d0e6      	beq.n	800be10 <_printf_common+0xa4>
 800be42:	3601      	adds	r6, #1
 800be44:	e7d9      	b.n	800bdfa <_printf_common+0x8e>
	...

0800be48 <_printf_i>:
 800be48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be4c:	7e0f      	ldrb	r7, [r1, #24]
 800be4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be50:	2f78      	cmp	r7, #120	; 0x78
 800be52:	4691      	mov	r9, r2
 800be54:	4680      	mov	r8, r0
 800be56:	460c      	mov	r4, r1
 800be58:	469a      	mov	sl, r3
 800be5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be5e:	d807      	bhi.n	800be70 <_printf_i+0x28>
 800be60:	2f62      	cmp	r7, #98	; 0x62
 800be62:	d80a      	bhi.n	800be7a <_printf_i+0x32>
 800be64:	2f00      	cmp	r7, #0
 800be66:	f000 80d8 	beq.w	800c01a <_printf_i+0x1d2>
 800be6a:	2f58      	cmp	r7, #88	; 0x58
 800be6c:	f000 80a3 	beq.w	800bfb6 <_printf_i+0x16e>
 800be70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be78:	e03a      	b.n	800bef0 <_printf_i+0xa8>
 800be7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be7e:	2b15      	cmp	r3, #21
 800be80:	d8f6      	bhi.n	800be70 <_printf_i+0x28>
 800be82:	a101      	add	r1, pc, #4	; (adr r1, 800be88 <_printf_i+0x40>)
 800be84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be88:	0800bee1 	.word	0x0800bee1
 800be8c:	0800bef5 	.word	0x0800bef5
 800be90:	0800be71 	.word	0x0800be71
 800be94:	0800be71 	.word	0x0800be71
 800be98:	0800be71 	.word	0x0800be71
 800be9c:	0800be71 	.word	0x0800be71
 800bea0:	0800bef5 	.word	0x0800bef5
 800bea4:	0800be71 	.word	0x0800be71
 800bea8:	0800be71 	.word	0x0800be71
 800beac:	0800be71 	.word	0x0800be71
 800beb0:	0800be71 	.word	0x0800be71
 800beb4:	0800c001 	.word	0x0800c001
 800beb8:	0800bf25 	.word	0x0800bf25
 800bebc:	0800bfe3 	.word	0x0800bfe3
 800bec0:	0800be71 	.word	0x0800be71
 800bec4:	0800be71 	.word	0x0800be71
 800bec8:	0800c023 	.word	0x0800c023
 800becc:	0800be71 	.word	0x0800be71
 800bed0:	0800bf25 	.word	0x0800bf25
 800bed4:	0800be71 	.word	0x0800be71
 800bed8:	0800be71 	.word	0x0800be71
 800bedc:	0800bfeb 	.word	0x0800bfeb
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	1d1a      	adds	r2, r3, #4
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	602a      	str	r2, [r5, #0]
 800bee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800beec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bef0:	2301      	movs	r3, #1
 800bef2:	e0a3      	b.n	800c03c <_printf_i+0x1f4>
 800bef4:	6820      	ldr	r0, [r4, #0]
 800bef6:	6829      	ldr	r1, [r5, #0]
 800bef8:	0606      	lsls	r6, r0, #24
 800befa:	f101 0304 	add.w	r3, r1, #4
 800befe:	d50a      	bpl.n	800bf16 <_printf_i+0xce>
 800bf00:	680e      	ldr	r6, [r1, #0]
 800bf02:	602b      	str	r3, [r5, #0]
 800bf04:	2e00      	cmp	r6, #0
 800bf06:	da03      	bge.n	800bf10 <_printf_i+0xc8>
 800bf08:	232d      	movs	r3, #45	; 0x2d
 800bf0a:	4276      	negs	r6, r6
 800bf0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf10:	485e      	ldr	r0, [pc, #376]	; (800c08c <_printf_i+0x244>)
 800bf12:	230a      	movs	r3, #10
 800bf14:	e019      	b.n	800bf4a <_printf_i+0x102>
 800bf16:	680e      	ldr	r6, [r1, #0]
 800bf18:	602b      	str	r3, [r5, #0]
 800bf1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf1e:	bf18      	it	ne
 800bf20:	b236      	sxthne	r6, r6
 800bf22:	e7ef      	b.n	800bf04 <_printf_i+0xbc>
 800bf24:	682b      	ldr	r3, [r5, #0]
 800bf26:	6820      	ldr	r0, [r4, #0]
 800bf28:	1d19      	adds	r1, r3, #4
 800bf2a:	6029      	str	r1, [r5, #0]
 800bf2c:	0601      	lsls	r1, r0, #24
 800bf2e:	d501      	bpl.n	800bf34 <_printf_i+0xec>
 800bf30:	681e      	ldr	r6, [r3, #0]
 800bf32:	e002      	b.n	800bf3a <_printf_i+0xf2>
 800bf34:	0646      	lsls	r6, r0, #25
 800bf36:	d5fb      	bpl.n	800bf30 <_printf_i+0xe8>
 800bf38:	881e      	ldrh	r6, [r3, #0]
 800bf3a:	4854      	ldr	r0, [pc, #336]	; (800c08c <_printf_i+0x244>)
 800bf3c:	2f6f      	cmp	r7, #111	; 0x6f
 800bf3e:	bf0c      	ite	eq
 800bf40:	2308      	moveq	r3, #8
 800bf42:	230a      	movne	r3, #10
 800bf44:	2100      	movs	r1, #0
 800bf46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf4a:	6865      	ldr	r5, [r4, #4]
 800bf4c:	60a5      	str	r5, [r4, #8]
 800bf4e:	2d00      	cmp	r5, #0
 800bf50:	bfa2      	ittt	ge
 800bf52:	6821      	ldrge	r1, [r4, #0]
 800bf54:	f021 0104 	bicge.w	r1, r1, #4
 800bf58:	6021      	strge	r1, [r4, #0]
 800bf5a:	b90e      	cbnz	r6, 800bf60 <_printf_i+0x118>
 800bf5c:	2d00      	cmp	r5, #0
 800bf5e:	d04d      	beq.n	800bffc <_printf_i+0x1b4>
 800bf60:	4615      	mov	r5, r2
 800bf62:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf66:	fb03 6711 	mls	r7, r3, r1, r6
 800bf6a:	5dc7      	ldrb	r7, [r0, r7]
 800bf6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf70:	4637      	mov	r7, r6
 800bf72:	42bb      	cmp	r3, r7
 800bf74:	460e      	mov	r6, r1
 800bf76:	d9f4      	bls.n	800bf62 <_printf_i+0x11a>
 800bf78:	2b08      	cmp	r3, #8
 800bf7a:	d10b      	bne.n	800bf94 <_printf_i+0x14c>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	07de      	lsls	r6, r3, #31
 800bf80:	d508      	bpl.n	800bf94 <_printf_i+0x14c>
 800bf82:	6923      	ldr	r3, [r4, #16]
 800bf84:	6861      	ldr	r1, [r4, #4]
 800bf86:	4299      	cmp	r1, r3
 800bf88:	bfde      	ittt	le
 800bf8a:	2330      	movle	r3, #48	; 0x30
 800bf8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf94:	1b52      	subs	r2, r2, r5
 800bf96:	6122      	str	r2, [r4, #16]
 800bf98:	f8cd a000 	str.w	sl, [sp]
 800bf9c:	464b      	mov	r3, r9
 800bf9e:	aa03      	add	r2, sp, #12
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	4640      	mov	r0, r8
 800bfa4:	f7ff fee2 	bl	800bd6c <_printf_common>
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	d14c      	bne.n	800c046 <_printf_i+0x1fe>
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	b004      	add	sp, #16
 800bfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb6:	4835      	ldr	r0, [pc, #212]	; (800c08c <_printf_i+0x244>)
 800bfb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bfbc:	6829      	ldr	r1, [r5, #0]
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfc4:	6029      	str	r1, [r5, #0]
 800bfc6:	061d      	lsls	r5, r3, #24
 800bfc8:	d514      	bpl.n	800bff4 <_printf_i+0x1ac>
 800bfca:	07df      	lsls	r7, r3, #31
 800bfcc:	bf44      	itt	mi
 800bfce:	f043 0320 	orrmi.w	r3, r3, #32
 800bfd2:	6023      	strmi	r3, [r4, #0]
 800bfd4:	b91e      	cbnz	r6, 800bfde <_printf_i+0x196>
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	f023 0320 	bic.w	r3, r3, #32
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	2310      	movs	r3, #16
 800bfe0:	e7b0      	b.n	800bf44 <_printf_i+0xfc>
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	f043 0320 	orr.w	r3, r3, #32
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	2378      	movs	r3, #120	; 0x78
 800bfec:	4828      	ldr	r0, [pc, #160]	; (800c090 <_printf_i+0x248>)
 800bfee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bff2:	e7e3      	b.n	800bfbc <_printf_i+0x174>
 800bff4:	0659      	lsls	r1, r3, #25
 800bff6:	bf48      	it	mi
 800bff8:	b2b6      	uxthmi	r6, r6
 800bffa:	e7e6      	b.n	800bfca <_printf_i+0x182>
 800bffc:	4615      	mov	r5, r2
 800bffe:	e7bb      	b.n	800bf78 <_printf_i+0x130>
 800c000:	682b      	ldr	r3, [r5, #0]
 800c002:	6826      	ldr	r6, [r4, #0]
 800c004:	6961      	ldr	r1, [r4, #20]
 800c006:	1d18      	adds	r0, r3, #4
 800c008:	6028      	str	r0, [r5, #0]
 800c00a:	0635      	lsls	r5, r6, #24
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	d501      	bpl.n	800c014 <_printf_i+0x1cc>
 800c010:	6019      	str	r1, [r3, #0]
 800c012:	e002      	b.n	800c01a <_printf_i+0x1d2>
 800c014:	0670      	lsls	r0, r6, #25
 800c016:	d5fb      	bpl.n	800c010 <_printf_i+0x1c8>
 800c018:	8019      	strh	r1, [r3, #0]
 800c01a:	2300      	movs	r3, #0
 800c01c:	6123      	str	r3, [r4, #16]
 800c01e:	4615      	mov	r5, r2
 800c020:	e7ba      	b.n	800bf98 <_printf_i+0x150>
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	1d1a      	adds	r2, r3, #4
 800c026:	602a      	str	r2, [r5, #0]
 800c028:	681d      	ldr	r5, [r3, #0]
 800c02a:	6862      	ldr	r2, [r4, #4]
 800c02c:	2100      	movs	r1, #0
 800c02e:	4628      	mov	r0, r5
 800c030:	f7f4 f8e6 	bl	8000200 <memchr>
 800c034:	b108      	cbz	r0, 800c03a <_printf_i+0x1f2>
 800c036:	1b40      	subs	r0, r0, r5
 800c038:	6060      	str	r0, [r4, #4]
 800c03a:	6863      	ldr	r3, [r4, #4]
 800c03c:	6123      	str	r3, [r4, #16]
 800c03e:	2300      	movs	r3, #0
 800c040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c044:	e7a8      	b.n	800bf98 <_printf_i+0x150>
 800c046:	6923      	ldr	r3, [r4, #16]
 800c048:	462a      	mov	r2, r5
 800c04a:	4649      	mov	r1, r9
 800c04c:	4640      	mov	r0, r8
 800c04e:	47d0      	blx	sl
 800c050:	3001      	adds	r0, #1
 800c052:	d0ab      	beq.n	800bfac <_printf_i+0x164>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	079b      	lsls	r3, r3, #30
 800c058:	d413      	bmi.n	800c082 <_printf_i+0x23a>
 800c05a:	68e0      	ldr	r0, [r4, #12]
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	4298      	cmp	r0, r3
 800c060:	bfb8      	it	lt
 800c062:	4618      	movlt	r0, r3
 800c064:	e7a4      	b.n	800bfb0 <_printf_i+0x168>
 800c066:	2301      	movs	r3, #1
 800c068:	4632      	mov	r2, r6
 800c06a:	4649      	mov	r1, r9
 800c06c:	4640      	mov	r0, r8
 800c06e:	47d0      	blx	sl
 800c070:	3001      	adds	r0, #1
 800c072:	d09b      	beq.n	800bfac <_printf_i+0x164>
 800c074:	3501      	adds	r5, #1
 800c076:	68e3      	ldr	r3, [r4, #12]
 800c078:	9903      	ldr	r1, [sp, #12]
 800c07a:	1a5b      	subs	r3, r3, r1
 800c07c:	42ab      	cmp	r3, r5
 800c07e:	dcf2      	bgt.n	800c066 <_printf_i+0x21e>
 800c080:	e7eb      	b.n	800c05a <_printf_i+0x212>
 800c082:	2500      	movs	r5, #0
 800c084:	f104 0619 	add.w	r6, r4, #25
 800c088:	e7f5      	b.n	800c076 <_printf_i+0x22e>
 800c08a:	bf00      	nop
 800c08c:	0800ca22 	.word	0x0800ca22
 800c090:	0800ca33 	.word	0x0800ca33

0800c094 <_free_r>:
 800c094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c096:	2900      	cmp	r1, #0
 800c098:	d044      	beq.n	800c124 <_free_r+0x90>
 800c09a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c09e:	9001      	str	r0, [sp, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f1a1 0404 	sub.w	r4, r1, #4
 800c0a6:	bfb8      	it	lt
 800c0a8:	18e4      	addlt	r4, r4, r3
 800c0aa:	f000 f913 	bl	800c2d4 <__malloc_lock>
 800c0ae:	4a1e      	ldr	r2, [pc, #120]	; (800c128 <_free_r+0x94>)
 800c0b0:	9801      	ldr	r0, [sp, #4]
 800c0b2:	6813      	ldr	r3, [r2, #0]
 800c0b4:	b933      	cbnz	r3, 800c0c4 <_free_r+0x30>
 800c0b6:	6063      	str	r3, [r4, #4]
 800c0b8:	6014      	str	r4, [r2, #0]
 800c0ba:	b003      	add	sp, #12
 800c0bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0c0:	f000 b90e 	b.w	800c2e0 <__malloc_unlock>
 800c0c4:	42a3      	cmp	r3, r4
 800c0c6:	d908      	bls.n	800c0da <_free_r+0x46>
 800c0c8:	6825      	ldr	r5, [r4, #0]
 800c0ca:	1961      	adds	r1, r4, r5
 800c0cc:	428b      	cmp	r3, r1
 800c0ce:	bf01      	itttt	eq
 800c0d0:	6819      	ldreq	r1, [r3, #0]
 800c0d2:	685b      	ldreq	r3, [r3, #4]
 800c0d4:	1949      	addeq	r1, r1, r5
 800c0d6:	6021      	streq	r1, [r4, #0]
 800c0d8:	e7ed      	b.n	800c0b6 <_free_r+0x22>
 800c0da:	461a      	mov	r2, r3
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	b10b      	cbz	r3, 800c0e4 <_free_r+0x50>
 800c0e0:	42a3      	cmp	r3, r4
 800c0e2:	d9fa      	bls.n	800c0da <_free_r+0x46>
 800c0e4:	6811      	ldr	r1, [r2, #0]
 800c0e6:	1855      	adds	r5, r2, r1
 800c0e8:	42a5      	cmp	r5, r4
 800c0ea:	d10b      	bne.n	800c104 <_free_r+0x70>
 800c0ec:	6824      	ldr	r4, [r4, #0]
 800c0ee:	4421      	add	r1, r4
 800c0f0:	1854      	adds	r4, r2, r1
 800c0f2:	42a3      	cmp	r3, r4
 800c0f4:	6011      	str	r1, [r2, #0]
 800c0f6:	d1e0      	bne.n	800c0ba <_free_r+0x26>
 800c0f8:	681c      	ldr	r4, [r3, #0]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	6053      	str	r3, [r2, #4]
 800c0fe:	4421      	add	r1, r4
 800c100:	6011      	str	r1, [r2, #0]
 800c102:	e7da      	b.n	800c0ba <_free_r+0x26>
 800c104:	d902      	bls.n	800c10c <_free_r+0x78>
 800c106:	230c      	movs	r3, #12
 800c108:	6003      	str	r3, [r0, #0]
 800c10a:	e7d6      	b.n	800c0ba <_free_r+0x26>
 800c10c:	6825      	ldr	r5, [r4, #0]
 800c10e:	1961      	adds	r1, r4, r5
 800c110:	428b      	cmp	r3, r1
 800c112:	bf04      	itt	eq
 800c114:	6819      	ldreq	r1, [r3, #0]
 800c116:	685b      	ldreq	r3, [r3, #4]
 800c118:	6063      	str	r3, [r4, #4]
 800c11a:	bf04      	itt	eq
 800c11c:	1949      	addeq	r1, r1, r5
 800c11e:	6021      	streq	r1, [r4, #0]
 800c120:	6054      	str	r4, [r2, #4]
 800c122:	e7ca      	b.n	800c0ba <_free_r+0x26>
 800c124:	b003      	add	sp, #12
 800c126:	bd30      	pop	{r4, r5, pc}
 800c128:	200010a0 	.word	0x200010a0

0800c12c <sbrk_aligned>:
 800c12c:	b570      	push	{r4, r5, r6, lr}
 800c12e:	4e0e      	ldr	r6, [pc, #56]	; (800c168 <sbrk_aligned+0x3c>)
 800c130:	460c      	mov	r4, r1
 800c132:	6831      	ldr	r1, [r6, #0]
 800c134:	4605      	mov	r5, r0
 800c136:	b911      	cbnz	r1, 800c13e <sbrk_aligned+0x12>
 800c138:	f000 f8bc 	bl	800c2b4 <_sbrk_r>
 800c13c:	6030      	str	r0, [r6, #0]
 800c13e:	4621      	mov	r1, r4
 800c140:	4628      	mov	r0, r5
 800c142:	f000 f8b7 	bl	800c2b4 <_sbrk_r>
 800c146:	1c43      	adds	r3, r0, #1
 800c148:	d00a      	beq.n	800c160 <sbrk_aligned+0x34>
 800c14a:	1cc4      	adds	r4, r0, #3
 800c14c:	f024 0403 	bic.w	r4, r4, #3
 800c150:	42a0      	cmp	r0, r4
 800c152:	d007      	beq.n	800c164 <sbrk_aligned+0x38>
 800c154:	1a21      	subs	r1, r4, r0
 800c156:	4628      	mov	r0, r5
 800c158:	f000 f8ac 	bl	800c2b4 <_sbrk_r>
 800c15c:	3001      	adds	r0, #1
 800c15e:	d101      	bne.n	800c164 <sbrk_aligned+0x38>
 800c160:	f04f 34ff 	mov.w	r4, #4294967295
 800c164:	4620      	mov	r0, r4
 800c166:	bd70      	pop	{r4, r5, r6, pc}
 800c168:	200010a4 	.word	0x200010a4

0800c16c <_malloc_r>:
 800c16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c170:	1ccd      	adds	r5, r1, #3
 800c172:	f025 0503 	bic.w	r5, r5, #3
 800c176:	3508      	adds	r5, #8
 800c178:	2d0c      	cmp	r5, #12
 800c17a:	bf38      	it	cc
 800c17c:	250c      	movcc	r5, #12
 800c17e:	2d00      	cmp	r5, #0
 800c180:	4607      	mov	r7, r0
 800c182:	db01      	blt.n	800c188 <_malloc_r+0x1c>
 800c184:	42a9      	cmp	r1, r5
 800c186:	d905      	bls.n	800c194 <_malloc_r+0x28>
 800c188:	230c      	movs	r3, #12
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	2600      	movs	r6, #0
 800c18e:	4630      	mov	r0, r6
 800c190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c194:	4e2e      	ldr	r6, [pc, #184]	; (800c250 <_malloc_r+0xe4>)
 800c196:	f000 f89d 	bl	800c2d4 <__malloc_lock>
 800c19a:	6833      	ldr	r3, [r6, #0]
 800c19c:	461c      	mov	r4, r3
 800c19e:	bb34      	cbnz	r4, 800c1ee <_malloc_r+0x82>
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	4638      	mov	r0, r7
 800c1a4:	f7ff ffc2 	bl	800c12c <sbrk_aligned>
 800c1a8:	1c43      	adds	r3, r0, #1
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	d14d      	bne.n	800c24a <_malloc_r+0xde>
 800c1ae:	6834      	ldr	r4, [r6, #0]
 800c1b0:	4626      	mov	r6, r4
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d140      	bne.n	800c238 <_malloc_r+0xcc>
 800c1b6:	6823      	ldr	r3, [r4, #0]
 800c1b8:	4631      	mov	r1, r6
 800c1ba:	4638      	mov	r0, r7
 800c1bc:	eb04 0803 	add.w	r8, r4, r3
 800c1c0:	f000 f878 	bl	800c2b4 <_sbrk_r>
 800c1c4:	4580      	cmp	r8, r0
 800c1c6:	d13a      	bne.n	800c23e <_malloc_r+0xd2>
 800c1c8:	6821      	ldr	r1, [r4, #0]
 800c1ca:	3503      	adds	r5, #3
 800c1cc:	1a6d      	subs	r5, r5, r1
 800c1ce:	f025 0503 	bic.w	r5, r5, #3
 800c1d2:	3508      	adds	r5, #8
 800c1d4:	2d0c      	cmp	r5, #12
 800c1d6:	bf38      	it	cc
 800c1d8:	250c      	movcc	r5, #12
 800c1da:	4629      	mov	r1, r5
 800c1dc:	4638      	mov	r0, r7
 800c1de:	f7ff ffa5 	bl	800c12c <sbrk_aligned>
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	d02b      	beq.n	800c23e <_malloc_r+0xd2>
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	442b      	add	r3, r5
 800c1ea:	6023      	str	r3, [r4, #0]
 800c1ec:	e00e      	b.n	800c20c <_malloc_r+0xa0>
 800c1ee:	6822      	ldr	r2, [r4, #0]
 800c1f0:	1b52      	subs	r2, r2, r5
 800c1f2:	d41e      	bmi.n	800c232 <_malloc_r+0xc6>
 800c1f4:	2a0b      	cmp	r2, #11
 800c1f6:	d916      	bls.n	800c226 <_malloc_r+0xba>
 800c1f8:	1961      	adds	r1, r4, r5
 800c1fa:	42a3      	cmp	r3, r4
 800c1fc:	6025      	str	r5, [r4, #0]
 800c1fe:	bf18      	it	ne
 800c200:	6059      	strne	r1, [r3, #4]
 800c202:	6863      	ldr	r3, [r4, #4]
 800c204:	bf08      	it	eq
 800c206:	6031      	streq	r1, [r6, #0]
 800c208:	5162      	str	r2, [r4, r5]
 800c20a:	604b      	str	r3, [r1, #4]
 800c20c:	4638      	mov	r0, r7
 800c20e:	f104 060b 	add.w	r6, r4, #11
 800c212:	f000 f865 	bl	800c2e0 <__malloc_unlock>
 800c216:	f026 0607 	bic.w	r6, r6, #7
 800c21a:	1d23      	adds	r3, r4, #4
 800c21c:	1af2      	subs	r2, r6, r3
 800c21e:	d0b6      	beq.n	800c18e <_malloc_r+0x22>
 800c220:	1b9b      	subs	r3, r3, r6
 800c222:	50a3      	str	r3, [r4, r2]
 800c224:	e7b3      	b.n	800c18e <_malloc_r+0x22>
 800c226:	6862      	ldr	r2, [r4, #4]
 800c228:	42a3      	cmp	r3, r4
 800c22a:	bf0c      	ite	eq
 800c22c:	6032      	streq	r2, [r6, #0]
 800c22e:	605a      	strne	r2, [r3, #4]
 800c230:	e7ec      	b.n	800c20c <_malloc_r+0xa0>
 800c232:	4623      	mov	r3, r4
 800c234:	6864      	ldr	r4, [r4, #4]
 800c236:	e7b2      	b.n	800c19e <_malloc_r+0x32>
 800c238:	4634      	mov	r4, r6
 800c23a:	6876      	ldr	r6, [r6, #4]
 800c23c:	e7b9      	b.n	800c1b2 <_malloc_r+0x46>
 800c23e:	230c      	movs	r3, #12
 800c240:	603b      	str	r3, [r7, #0]
 800c242:	4638      	mov	r0, r7
 800c244:	f000 f84c 	bl	800c2e0 <__malloc_unlock>
 800c248:	e7a1      	b.n	800c18e <_malloc_r+0x22>
 800c24a:	6025      	str	r5, [r4, #0]
 800c24c:	e7de      	b.n	800c20c <_malloc_r+0xa0>
 800c24e:	bf00      	nop
 800c250:	200010a0 	.word	0x200010a0

0800c254 <_realloc_r>:
 800c254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c258:	4680      	mov	r8, r0
 800c25a:	4614      	mov	r4, r2
 800c25c:	460e      	mov	r6, r1
 800c25e:	b921      	cbnz	r1, 800c26a <_realloc_r+0x16>
 800c260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c264:	4611      	mov	r1, r2
 800c266:	f7ff bf81 	b.w	800c16c <_malloc_r>
 800c26a:	b92a      	cbnz	r2, 800c278 <_realloc_r+0x24>
 800c26c:	f7ff ff12 	bl	800c094 <_free_r>
 800c270:	4625      	mov	r5, r4
 800c272:	4628      	mov	r0, r5
 800c274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c278:	f000 f838 	bl	800c2ec <_malloc_usable_size_r>
 800c27c:	4284      	cmp	r4, r0
 800c27e:	4607      	mov	r7, r0
 800c280:	d802      	bhi.n	800c288 <_realloc_r+0x34>
 800c282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c286:	d812      	bhi.n	800c2ae <_realloc_r+0x5a>
 800c288:	4621      	mov	r1, r4
 800c28a:	4640      	mov	r0, r8
 800c28c:	f7ff ff6e 	bl	800c16c <_malloc_r>
 800c290:	4605      	mov	r5, r0
 800c292:	2800      	cmp	r0, #0
 800c294:	d0ed      	beq.n	800c272 <_realloc_r+0x1e>
 800c296:	42bc      	cmp	r4, r7
 800c298:	4622      	mov	r2, r4
 800c29a:	4631      	mov	r1, r6
 800c29c:	bf28      	it	cs
 800c29e:	463a      	movcs	r2, r7
 800c2a0:	f7ff fb9e 	bl	800b9e0 <memcpy>
 800c2a4:	4631      	mov	r1, r6
 800c2a6:	4640      	mov	r0, r8
 800c2a8:	f7ff fef4 	bl	800c094 <_free_r>
 800c2ac:	e7e1      	b.n	800c272 <_realloc_r+0x1e>
 800c2ae:	4635      	mov	r5, r6
 800c2b0:	e7df      	b.n	800c272 <_realloc_r+0x1e>
	...

0800c2b4 <_sbrk_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4d06      	ldr	r5, [pc, #24]	; (800c2d0 <_sbrk_r+0x1c>)
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	4608      	mov	r0, r1
 800c2be:	602b      	str	r3, [r5, #0]
 800c2c0:	f7f7 f88c 	bl	80033dc <_sbrk>
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	d102      	bne.n	800c2ce <_sbrk_r+0x1a>
 800c2c8:	682b      	ldr	r3, [r5, #0]
 800c2ca:	b103      	cbz	r3, 800c2ce <_sbrk_r+0x1a>
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}
 800c2d0:	200010a8 	.word	0x200010a8

0800c2d4 <__malloc_lock>:
 800c2d4:	4801      	ldr	r0, [pc, #4]	; (800c2dc <__malloc_lock+0x8>)
 800c2d6:	f000 b811 	b.w	800c2fc <__retarget_lock_acquire_recursive>
 800c2da:	bf00      	nop
 800c2dc:	200010ac 	.word	0x200010ac

0800c2e0 <__malloc_unlock>:
 800c2e0:	4801      	ldr	r0, [pc, #4]	; (800c2e8 <__malloc_unlock+0x8>)
 800c2e2:	f000 b80c 	b.w	800c2fe <__retarget_lock_release_recursive>
 800c2e6:	bf00      	nop
 800c2e8:	200010ac 	.word	0x200010ac

0800c2ec <_malloc_usable_size_r>:
 800c2ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2f0:	1f18      	subs	r0, r3, #4
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	bfbc      	itt	lt
 800c2f6:	580b      	ldrlt	r3, [r1, r0]
 800c2f8:	18c0      	addlt	r0, r0, r3
 800c2fa:	4770      	bx	lr

0800c2fc <__retarget_lock_acquire_recursive>:
 800c2fc:	4770      	bx	lr

0800c2fe <__retarget_lock_release_recursive>:
 800c2fe:	4770      	bx	lr

0800c300 <_init>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	bf00      	nop
 800c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c306:	bc08      	pop	{r3}
 800c308:	469e      	mov	lr, r3
 800c30a:	4770      	bx	lr

0800c30c <_fini>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	bf00      	nop
 800c310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c312:	bc08      	pop	{r3}
 800c314:	469e      	mov	lr, r3
 800c316:	4770      	bx	lr
